
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efa  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac8  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fc  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000565  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000298  00000000  00000000  00002b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c1       	rjmp	.+668    	; 0x2e6 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 32       	cpi	r26, 0x29	; 41
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	f9 d0       	rcall	.+498    	; 0x29c <main>
  aa:	3a c1       	rjmp	.+628    	; 0x320 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USARTWriteChar>:

void USARTWriteChar(char c)
{
	

	while(!(UCSR0A & (1<<UDRE)))
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USARTWriteChar>
	{
		
	}

	PORTC^=0xFF;
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	90 95       	com	r25
  b6:	95 bb       	out	0x15, r25	; 21
	UDR0=c;
  b8:	8c b9       	out	0x0c, r24	; 12
  ba:	08 95       	ret

000000bc <Sched>:
{
	//Call Sched
	Sched();
}
 void Sched()
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
	 int iIndex;

	 //Select task with high priority

	 iHighPriorityTask = 10;
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <iHighPriorityTask+0x1>
  c8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <iHighPriorityTask>

	 for (iIndex = 0; iIndex < iTaskcount ; iIndex++)
  cc:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <iTaskcount>
  d0:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <iTaskcount+0x1>
  d4:	14 16       	cp	r1, r20
  d6:	15 06       	cpc	r1, r21
  d8:	1c f5       	brge	.+70     	; 0x120 <Sched+0x64>
  da:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <iIndexPriority>
  de:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <iIndexPriority+0x1>
  e2:	e7 e0       	ldi	r30, 0x07	; 7
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	6a e0       	ldi	r22, 0x0A	; 10
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 if ((arrTaskTable[iIndex].Priority <= iHighPriorityTask) &&
  ee:	22 81       	ldd	r18, Z+2	; 0x02
  f0:	33 81       	ldd	r19, Z+3	; 0x03
  f2:	62 17       	cp	r22, r18
  f4:	73 07       	cpc	r23, r19
  f6:	3c f0       	brlt	.+14     	; 0x106 <Sched+0x4a>
  f8:	a4 81       	ldd	r26, Z+4	; 0x04
  fa:	b5 81       	ldd	r27, Z+5	; 0x05
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	19 f4       	brne	.+6      	; 0x106 <Sched+0x4a>
				 (arrTaskTable[iIndex].Ready ==1 ))
		 {
			 iHighPriorityTask = arrTaskTable[iIndex].Priority;
			 iIndexPriority = iIndex;
 100:	d8 2f       	mov	r29, r24
 102:	c9 2f       	mov	r28, r25
	 for (iIndex = 0; iIndex < iTaskcount ; iIndex++)
	 {
		 if ((arrTaskTable[iIndex].Priority <= iHighPriorityTask) &&
				 (arrTaskTable[iIndex].Ready ==1 ))
		 {
			 iHighPriorityTask = arrTaskTable[iIndex].Priority;
 104:	b9 01       	movw	r22, r18

	 //Select task with high priority

	 iHighPriorityTask = 10;

	 for (iIndex = 0; iIndex < iTaskcount ; iIndex++)
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	38 96       	adiw	r30, 0x08	; 8
 10a:	84 17       	cp	r24, r20
 10c:	95 07       	cpc	r25, r21
 10e:	7c f3       	brlt	.-34     	; 0xee <Sched+0x32>
 110:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <iHighPriorityTask+0x1>
 114:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <iHighPriorityTask>
 118:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <iIndexPriority>
 11c:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <iIndexPriority+0x1>
			 iIndexPriority = iIndex;
		 }
	 }

	 //call task with high priority
	 (*arrTaskTable[iIndexPriority].ptrTask)();
 120:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <iIndexPriority>
 124:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <iIndexPriority+0x1>
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e9 5f       	subi	r30, 0xF9	; 249
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	01 90       	ld	r0, Z+
 13a:	f0 81       	ld	r31, Z
 13c:	e0 2d       	mov	r30, r0
 13e:	09 95       	icall

 }
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <startOS>:


void startOS()
{
	//Call Sched
	Sched();
 146:	ba cf       	rjmp	.-140    	; 0xbc <Sched>
 148:	08 95       	ret

0000014a <createTask>:
 }

 void createTask(void (*ptrTask)(void), int iPriority, int iTaskId )
 {
	 //Save priotiy
	 arrTaskTable[iTaskcount].Priority = iPriority;
 14a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <iTaskcount>
 14e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <iTaskcount+0x1>
 152:	f9 01       	movw	r30, r18
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e9 5f       	subi	r30, 0xF9	; 249
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	73 83       	std	Z+3, r23	; 0x03
 166:	62 83       	std	Z+2, r22	; 0x02

	 //Save task address
	 arrTaskTable[iTaskcount].ptrTask = ptrTask;
 168:	91 83       	std	Z+1, r25	; 0x01
 16a:	80 83       	st	Z, r24

	 //Save task ID
	 arrTaskTable[iTaskcount].TaskId = iTaskId;
 16c:	57 83       	std	Z+7, r21	; 0x07
 16e:	46 83       	std	Z+6, r20	; 0x06

	 //Make the task ready
	 arrTaskTable[iTaskcount].Ready = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	95 83       	std	Z+5, r25	; 0x05
 176:	84 83       	std	Z+4, r24	; 0x04

	 //Increment iTaskcount
	 iTaskcount ++;
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <iTaskcount+0x1>
 180:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <iTaskcount>
 184:	08 95       	ret

00000186 <waitTask>:
 }


 void waitTask()
 {
	 arrTaskTable[iIndexPriority].Ready = 0;
 186:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <iIndexPriority>
 18a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <iIndexPriority+0x1>
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e9 5f       	subi	r30, 0xF9	; 249
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	15 82       	std	Z+5, r1	; 0x05
 1a0:	14 82       	std	Z+4, r1	; 0x04

	 //Call Sched
	 Sched();
 1a2:	8c cf       	rjmp	.-232    	; 0xbc <Sched>
 1a4:	08 95       	ret

000001a6 <startTask>:

 void startTask(int TaskId)
 {
	int iIndex;

	for (iIndex = 0; iIndex <iTaskcount; iIndex ++ )
 1a6:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <iTaskcount>
 1aa:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <iTaskcount+0x1>
 1ae:	16 16       	cp	r1, r22
 1b0:	17 06       	cpc	r1, r23
 1b2:	9c f4       	brge	.+38     	; 0x1da <startTask+0x34>
 1b4:	e7 e0       	ldi	r30, 0x07	; 7
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (TaskId == arrTaskTable[iIndex].TaskId)
		{
			arrTaskTable[iIndex].Ready = 1;
 1bc:	a1 e0       	ldi	r26, 0x01	; 1
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 {
	int iIndex;

	for (iIndex = 0; iIndex <iTaskcount; iIndex ++ )
	{
		if (TaskId == arrTaskTable[iIndex].TaskId)
 1c0:	46 81       	ldd	r20, Z+6	; 0x06
 1c2:	57 81       	ldd	r21, Z+7	; 0x07
 1c4:	48 17       	cp	r20, r24
 1c6:	59 07       	cpc	r21, r25
 1c8:	11 f4       	brne	.+4      	; 0x1ce <startTask+0x28>
		{
			arrTaskTable[iIndex].Ready = 1;
 1ca:	b5 83       	std	Z+5, r27	; 0x05
 1cc:	a4 83       	std	Z+4, r26	; 0x04

 void startTask(int TaskId)
 {
	int iIndex;

	for (iIndex = 0; iIndex <iTaskcount; iIndex ++ )
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	38 96       	adiw	r30, 0x08	; 8
 1d4:	26 17       	cp	r18, r22
 1d6:	37 07       	cpc	r19, r23
 1d8:	9c f3       	brlt	.-26     	; 0x1c0 <startTask+0x1a>
			arrTaskTable[iIndex].Ready = 1;
		}
	}

	 //Call Sched
	 Sched();
 1da:	70 cf       	rjmp	.-288    	; 0xbc <Sched>
 1dc:	08 95       	ret

000001de <Task1>:
void Task1()
{

	while(1)
	{
		for (int i=0; i<t;i++)
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
		{
		PORTA = 0xFF; //Turns ON All LEDs
 1e2:	cf ef       	ldi	r28, 0xFF	; 255
void Task1()
{

	while(1)
	{
		for (int i=0; i<t;i++)
 1e4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <t>
 1e8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <t+0x1>
 1ec:	18 16       	cp	r1, r24
 1ee:	19 06       	cpc	r1, r25
 1f0:	f4 f4       	brge	.+60     	; 0x22e <Task1+0x50>
 1f2:	81 2f       	mov	r24, r17
 1f4:	9d 2f       	mov	r25, r29
		{
		PORTA = 0xFF; //Turns ON All LEDs
 1f6:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	39 e6       	ldi	r19, 0x69	; 105
 1fc:	48 e1       	ldi	r20, 0x18	; 24
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	30 40       	sbci	r19, 0x00	; 0
 202:	40 40       	sbci	r20, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <Task1+0x20>
 206:	00 c0       	rjmp	.+0      	; 0x208 <Task1+0x2a>
 208:	00 00       	nop
		_delay_ms(500); //1 second delay
		PORTA= 0x00; //Turns OFF All LEDs
 20a:	1b ba       	out	0x1b, r1	; 27
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	39 e6       	ldi	r19, 0x69	; 105
 210:	48 e1       	ldi	r20, 0x18	; 24
 212:	21 50       	subi	r18, 0x01	; 1
 214:	30 40       	sbci	r19, 0x00	; 0
 216:	40 40       	sbci	r20, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <Task1+0x34>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <Task1+0x3e>
 21c:	00 00       	nop
void Task1()
{

	while(1)
	{
		for (int i=0; i<t;i++)
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <t>
 224:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <t+0x1>
 228:	82 17       	cp	r24, r18
 22a:	93 07       	cpc	r25, r19
 22c:	24 f3       	brlt	.-56     	; 0x1f6 <Task1+0x18>
		_delay_ms(500); //1 second delay
		PORTA= 0x00; //Turns OFF All LEDs
		_delay_ms(500); //1 second delay
		//Stop the task
		}
		waitTask();
 22e:	ab df       	rcall	.-170    	; 0x186 <waitTask>

	}
 230:	d9 cf       	rjmp	.-78     	; 0x1e4 <Task1+0x6>

00000232 <Task2>:
}

void Task2()
{
	while(1)
	{	for (int i=0;i<t;i++)
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PORTB = 0xFF; //Turns ON All LEDs
 236:	cf ef       	ldi	r28, 0xFF	; 255
}

void Task2()
{
	while(1)
	{	for (int i=0;i<t;i++)
 238:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <t>
 23c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <t+0x1>
 240:	18 16       	cp	r1, r24
 242:	19 06       	cpc	r1, r25
 244:	f4 f4       	brge	.+60     	; 0x282 <Task2+0x50>
 246:	81 2f       	mov	r24, r17
 248:	9d 2f       	mov	r25, r29
	{
		PORTB = 0xFF; //Turns ON All LEDs
 24a:	c8 bb       	out	0x18, r28	; 24
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	39 e6       	ldi	r19, 0x69	; 105
 250:	48 e1       	ldi	r20, 0x18	; 24
 252:	21 50       	subi	r18, 0x01	; 1
 254:	30 40       	sbci	r19, 0x00	; 0
 256:	40 40       	sbci	r20, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <Task2+0x20>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <Task2+0x2a>
 25c:	00 00       	nop
		_delay_ms(500); //1 second delay
		PORTB= 0x00; //Turns OFF All LEDs
 25e:	18 ba       	out	0x18, r1	; 24
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	39 e6       	ldi	r19, 0x69	; 105
 264:	48 e1       	ldi	r20, 0x18	; 24
 266:	21 50       	subi	r18, 0x01	; 1
 268:	30 40       	sbci	r19, 0x00	; 0
 26a:	40 40       	sbci	r20, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <Task2+0x34>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Task2+0x3e>
 270:	00 00       	nop
}

void Task2()
{
	while(1)
	{	for (int i=0;i<t;i++)
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <t>
 278:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <t+0x1>
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	24 f3       	brlt	.-56     	; 0x24a <Task2+0x18>
		_delay_ms(500); //1 second delay
		PORTB= 0x00; //Turns OFF All LEDs
		_delay_ms(500); //1 second delay
	}
		//start the task
		startTask(TaskId_1);
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	8f df       	rcall	.-226    	; 0x1a6 <startTask>
	}
 288:	d7 cf       	rjmp	.-82     	; 0x238 <Task2+0x6>

0000028a <USART_Init>:
int t;
char d;
void USART_Init(unsigned int ubrr)
{
	
	UBRR0H = (unsigned char)(ubrr>>8);
 28a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 28e:	89 b9       	out	0x09, r24	; 9
	//UCSRB = (1<<RXEN)|(1<<TXEN);
	//UCSRB |= (1 << RXCIE);
	UCSR0B = (1<<RXEN)|(1<<TXEN);
 290:	88 e1       	ldi	r24, 0x18	; 24
 292:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1<<USBS) | (1<<UCSZ1)|(1<<UCSZ0); // 1 stop bit,
 294:	8e e0       	ldi	r24, 0x0E	; 14
 296:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 29a:	08 95       	ret

0000029c <main>:
}
int main(void)
{
	t=1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <t+0x1>
 2a4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <t>
	USART_Init(103); // as F_OSC = 16MHz
 2a8:	87 e6       	ldi	r24, 0x67	; 103
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ee df       	rcall	.-36     	; 0x28a <USART_Init>
	sei();
 2ae:	78 94       	sei
	UCSR0B |= (1 << RXCIE);
 2b0:	57 9a       	sbi	0x0a, 7	; 10
	USARTWriteChar('e');
 2b2:	85 e6       	ldi	r24, 0x65	; 101
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fb de       	rcall	.-522    	; 0xae <USARTWriteChar>
	DDRC = 0xFF; //Makes PORTC as Output
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
 2bc:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 2be:	87 bb       	out	0x17, r24	; 23
	PORTC = 0xFF; 
 2c0:	85 bb       	out	0x15, r24	; 21
	createTask(Task1, 1, TaskId_1);
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	8f ee       	ldi	r24, 0xEF	; 239
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	3d df       	rcall	.-390    	; 0x14a <createTask>
	createTask(Task2, 2, TaskId_2);
 2d0:	44 e1       	ldi	r20, 0x14	; 20
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	89 e1       	ldi	r24, 0x19	; 25
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	36 df       	rcall	.-404    	; 0x14a <createTask>
	startOS();
 2de:	33 df       	rcall	.-410    	; 0x146 <startOS>
		_delay_ms(1000); //1 second delay
		PORTC= 0x00; //Turns OFF All LEDs
		_delay_ms(1000); //1 second delay
	}
*/	
}
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	08 95       	ret

000002e6 <__vector_18>:
		//start the task
		startTask(TaskId_1);
	}
}

ISR(USART0_RX_vect){
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
	//USARTWriteChar('y');
	d=UDR0;
 2f4:	8c b1       	in	r24, 0x0c	; 12
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	UDR0=d;
 2fa:	8c b9       	out	0x0c, r24	; 12
	t = d - '0';
 2fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	c0 97       	sbiw	r24, 0x30	; 48
 304:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <t+0x1>
 308:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <t>
	PORTC^=0xFF;
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	80 95       	com	r24
 310:	85 bb       	out	0x15, r24	; 21
	if(d=='a'){
		//PORTC = 0xFF; //Turns ON All LEDs
		//_delay_ms(1000); //1 second delay
		//PORTC= 0x00; //Turns OFF All LEDs
		//_delay_ms(1000); //1 second delay
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
