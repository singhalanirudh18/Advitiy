
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800100  00800100  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d52  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  0000110e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c1  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 32       	cpi	r26, 0x26	; 38
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	c3 d0       	rcall	.+390    	; 0x230 <main>
  aa:	d9 c0       	rjmp	.+434    	; 0x25e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Sched>:
{
	//Call Sched
	Sched();
}
 void Sched()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	 int iIndex;

	 //Select task with high priority

	 iHighPriorityTask = 10;
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <iHighPriorityTask+0x1>
  ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <iHighPriorityTask>

	 for (iIndex = 0; iIndex < iTaskcount ; iIndex++)
  be:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
  c2:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
  c6:	14 16       	cp	r1, r20
  c8:	15 06       	cpc	r1, r21
  ca:	1c f5       	brge	.+70     	; 0x112 <Sched+0x64>
  cc:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <iIndexPriority>
  d0:	c0 91 05 01 	lds	r28, 0x0105	; 0x800105 <iIndexPriority+0x1>
  d4:	e6 e0       	ldi	r30, 0x06	; 6
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	6a e0       	ldi	r22, 0x0A	; 10
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 if ((arrTaskTable[iIndex].Priority <= iHighPriorityTask) &&
  e0:	22 81       	ldd	r18, Z+2	; 0x02
  e2:	33 81       	ldd	r19, Z+3	; 0x03
  e4:	62 17       	cp	r22, r18
  e6:	73 07       	cpc	r23, r19
  e8:	3c f0       	brlt	.+14     	; 0xf8 <Sched+0x4a>
  ea:	a4 81       	ldd	r26, Z+4	; 0x04
  ec:	b5 81       	ldd	r27, Z+5	; 0x05
  ee:	11 97       	sbiw	r26, 0x01	; 1
  f0:	19 f4       	brne	.+6      	; 0xf8 <Sched+0x4a>
				 (arrTaskTable[iIndex].Ready ==1 ))
		 {
			 iHighPriorityTask = arrTaskTable[iIndex].Priority;
			 iIndexPriority = iIndex;
  f2:	d8 2f       	mov	r29, r24
  f4:	c9 2f       	mov	r28, r25
	 for (iIndex = 0; iIndex < iTaskcount ; iIndex++)
	 {
		 if ((arrTaskTable[iIndex].Priority <= iHighPriorityTask) &&
				 (arrTaskTable[iIndex].Ready ==1 ))
		 {
			 iHighPriorityTask = arrTaskTable[iIndex].Priority;
  f6:	b9 01       	movw	r22, r18

	 //Select task with high priority

	 iHighPriorityTask = 10;

	 for (iIndex = 0; iIndex < iTaskcount ; iIndex++)
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	38 96       	adiw	r30, 0x08	; 8
  fc:	84 17       	cp	r24, r20
  fe:	95 07       	cpc	r25, r21
 100:	7c f3       	brlt	.-34     	; 0xe0 <Sched+0x32>
 102:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <iHighPriorityTask+0x1>
 106:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <iHighPriorityTask>
 10a:	d0 93 04 01 	sts	0x0104, r29	; 0x800104 <iIndexPriority>
 10e:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <iIndexPriority+0x1>
			 iIndexPriority = iIndex;
		 }
	 }

	 //call task with high priority
	 (*arrTaskTable[iIndexPriority].ptrTask)();
 112:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <iIndexPriority>
 116:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <iIndexPriority+0x1>
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ea 5f       	subi	r30, 0xFA	; 250
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	01 90       	ld	r0, Z+
 12c:	f0 81       	ld	r31, Z
 12e:	e0 2d       	mov	r30, r0
 130:	09 95       	icall

 }
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <startOS>:


void startOS()
{
	//Call Sched
	Sched();
 138:	ba cf       	rjmp	.-140    	; 0xae <Sched>
 13a:	08 95       	ret

0000013c <createTask>:
 }

 void createTask(void (*ptrTask)(void), int iPriority, int iTaskId )
 {
	 //Save priotiy
	 arrTaskTable[iTaskcount].Priority = iPriority;
 13c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 140:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 144:	f9 01       	movw	r30, r18
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ea 5f       	subi	r30, 0xFA	; 250
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	73 83       	std	Z+3, r23	; 0x03
 158:	62 83       	std	Z+2, r22	; 0x02

	 //Save task address
	 arrTaskTable[iTaskcount].ptrTask = ptrTask;
 15a:	91 83       	std	Z+1, r25	; 0x01
 15c:	80 83       	st	Z, r24

	 //Save task ID
	 arrTaskTable[iTaskcount].TaskId = iTaskId;
 15e:	57 83       	std	Z+7, r21	; 0x07
 160:	46 83       	std	Z+6, r20	; 0x06

	 //Make the task ready
	 arrTaskTable[iTaskcount].Ready = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	95 83       	std	Z+5, r25	; 0x05
 168:	84 83       	std	Z+4, r24	; 0x04

	 //Increment iTaskcount
	 iTaskcount ++;
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 172:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 176:	08 95       	ret

00000178 <waitTask>:
 }


 void waitTask()
 {
	 arrTaskTable[iIndexPriority].Ready = 0;
 178:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <iIndexPriority>
 17c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <iIndexPriority+0x1>
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ea 5f       	subi	r30, 0xFA	; 250
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	15 82       	std	Z+5, r1	; 0x05
 192:	14 82       	std	Z+4, r1	; 0x04

	 //Call Sched
	 Sched();
 194:	8c cf       	rjmp	.-232    	; 0xae <Sched>
 196:	08 95       	ret

00000198 <startTask>:

 void startTask(int TaskId)
 {
	int iIndex;

	for (iIndex = 0; iIndex <iTaskcount; iIndex ++ )
 198:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 19c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 1a0:	16 16       	cp	r1, r22
 1a2:	17 06       	cpc	r1, r23
 1a4:	9c f4       	brge	.+38     	; 0x1cc <startTask+0x34>
 1a6:	e6 e0       	ldi	r30, 0x06	; 6
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (TaskId == arrTaskTable[iIndex].TaskId)
		{
			arrTaskTable[iIndex].Ready = 1;
 1ae:	a1 e0       	ldi	r26, 0x01	; 1
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 {
	int iIndex;

	for (iIndex = 0; iIndex <iTaskcount; iIndex ++ )
	{
		if (TaskId == arrTaskTable[iIndex].TaskId)
 1b2:	46 81       	ldd	r20, Z+6	; 0x06
 1b4:	57 81       	ldd	r21, Z+7	; 0x07
 1b6:	48 17       	cp	r20, r24
 1b8:	59 07       	cpc	r21, r25
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <startTask+0x28>
		{
			arrTaskTable[iIndex].Ready = 1;
 1bc:	b5 83       	std	Z+5, r27	; 0x05
 1be:	a4 83       	std	Z+4, r26	; 0x04

 void startTask(int TaskId)
 {
	int iIndex;

	for (iIndex = 0; iIndex <iTaskcount; iIndex ++ )
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	38 96       	adiw	r30, 0x08	; 8
 1c6:	26 17       	cp	r18, r22
 1c8:	37 07       	cpc	r19, r23
 1ca:	9c f3       	brlt	.-26     	; 0x1b2 <startTask+0x1a>
			arrTaskTable[iIndex].Ready = 1;
		}
	}

	 //Call Sched
	 Sched();
 1cc:	70 cf       	rjmp	.-288    	; 0xae <Sched>
 1ce:	08 95       	ret

000001d0 <Task1>:
void Task1()
{

	while(1)
	{
		PORTA = 0xFF; //Turns ON All LEDs
 1d0:	cf ef       	ldi	r28, 0xFF	; 255
 1d2:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	83 ed       	ldi	r24, 0xD3	; 211
 1d8:	90 e3       	ldi	r25, 0x30	; 48
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <Task1+0xa>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <Task1+0x14>
 1e4:	00 00       	nop
		_delay_ms(1000); //1 second delay
		PORTA= 0x00; //Turns OFF All LEDs
 1e6:	1b ba       	out	0x1b, r1	; 27
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	83 ed       	ldi	r24, 0xD3	; 211
 1ec:	90 e3       	ldi	r25, 0x30	; 48
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <Task1+0x1e>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Task1+0x28>
 1f8:	00 00       	nop
		_delay_ms(1000); //1 second delay
		//Stop the task
	
		waitTask();
 1fa:	be df       	rcall	.-132    	; 0x178 <waitTask>

	}
 1fc:	ea cf       	rjmp	.-44     	; 0x1d2 <Task1+0x2>

000001fe <Task2>:

void Task2()
{
	while(1)
	{
		PORTB = 0xFF; //Turns ON All LEDs
 1fe:	cf ef       	ldi	r28, 0xFF	; 255
 200:	c8 bb       	out	0x18, r28	; 24
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	90 e3       	ldi	r25, 0x30	; 48
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <Task2+0xa>
 210:	00 c0       	rjmp	.+0      	; 0x212 <Task2+0x14>
 212:	00 00       	nop
		_delay_ms(1000); //1 second delay
		PORTB= 0x00; //Turns OFF All LEDs
 214:	18 ba       	out	0x18, r1	; 24
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	83 ed       	ldi	r24, 0xD3	; 211
 21a:	90 e3       	ldi	r25, 0x30	; 48
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Task2+0x1e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Task2+0x28>
 226:	00 00       	nop
		_delay_ms(1000); //1 second delay
		//start the task
		startTask(TaskId_1);
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	b5 df       	rcall	.-150    	; 0x198 <startTask>
	}
 22e:	e8 cf       	rjmp	.-48     	; 0x200 <Task2+0x2>

00000230 <main>:
//#include <windows.h>
#include "osHeader.h"

int main(void)
{
	DDRC = 0xFF; //Makes PORTC as Output
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
 234:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 236:	87 bb       	out	0x17, r24	; 23
	PORTC = 0xFF; 
 238:	85 bb       	out	0x15, r24	; 21
	createTask(Task1, 1, TaskId_1);
 23a:	4a e0       	ldi	r20, 0x0A	; 10
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	88 ee       	ldi	r24, 0xE8	; 232
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	7a df       	rcall	.-268    	; 0x13c <createTask>
	createTask(Task2, 2, TaskId_2);
 248:	44 e1       	ldi	r20, 0x14	; 20
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	73 df       	rcall	.-282    	; 0x13c <createTask>
	startOS();
 256:	70 df       	rcall	.-288    	; 0x138 <startOS>
		_delay_ms(1000); //1 second delay
		PORTC= 0x00; //Turns OFF All LEDs
		_delay_ms(1000); //1 second delay
	}
*/	
}
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
