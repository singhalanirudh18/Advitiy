
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000758  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000664  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000331  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034b  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <USART_Init>:
		
	}


	return UDR;
}
  7c:	90 bd       	out	0x20, r25	; 32
  7e:	89 b9       	out	0x09, r24	; 9
  80:	88 e1       	ldi	r24, 0x18	; 24
  82:	8a b9       	out	0x0a, r24	; 10
  84:	8e e8       	ldi	r24, 0x8E	; 142
  86:	80 bd       	out	0x20, r24	; 32
  88:	08 95       	ret

0000008a <USARTWriteChar>:

void USARTWriteChar(char c)
{
	

	while(!(UCSRA & (1<<UDRE)))
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <USARTWriteChar>
	{
		
	}

	PORTC^=0xFF;
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	90 95       	com	r25
  92:	95 bb       	out	0x15, r25	; 21
	UDR=c;
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <main>:
} 


int main(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x6>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0x8>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	USART_Init(103); // as F_OSC = 16MHz
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_Init>
	sei();
  ac:	78 94       	sei
	UCSRB |= (1 << RXCIE);
  ae:	57 9a       	sbi	0x0a, 7	; 10
	USARTWriteChar('e');
  b0:	85 e6       	ldi	r24, 0x65	; 101
  b2:	0e 94 45 00 	call	0x8a	; 0x8a <USARTWriteChar>
	DDRC = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 bb       	out	0x14, r24	; 20
	PORTC= 0x00;
  ba:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	33 e2       	ldi	r19, 0x23	; 35
  c0:	84 ef       	ldi	r24, 0xF4	; 244
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2a>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x34>
  cc:	00 00       	nop
    /* Replace with your application code */
	_delay_ms(5000);
	
   char xyz[] = {'2','3','4','5'};
  ce:	82 e3       	ldi	r24, 0x32	; 50
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	84 e3       	ldi	r24, 0x34	; 52
  d8:	8b 83       	std	Y+3, r24	; 0x03
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	8c 83       	std	Y+4, r24	; 0x04
   int i =0;
    while (1) 
    { 
		USARTWriteChar(xyz[i]);
  de:	82 e3       	ldi	r24, 0x32	; 50
  e0:	0e 94 45 00 	call	0x8a	; 0x8a <USARTWriteChar>
		PORTC^=0xFF;
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	80 95       	com	r24
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	27 e4       	ldi	r18, 0x47	; 71
  ee:	38 ee       	ldi	r19, 0xE8	; 232
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	20 40       	sbci	r18, 0x00	; 0
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x5a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x66>
  fe:	00 00       	nop
		int k = xyz[i] - '0';
		_delay_ms(12000);
		i++;
 100:	01 e0       	ldi	r16, 0x01	; 1
 102:	10 e0       	ldi	r17, 0x00	; 0
		if (i==4) i=0;
 104:	e1 2c       	mov	r14, r1
 106:	f1 2c       	mov	r15, r1
	
   char xyz[] = {'2','3','4','5'};
   int i =0;
    while (1) 
    { 
		USARTWriteChar(xyz[i]);
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e0 0f       	add	r30, r16
 112:	f1 1f       	adc	r31, r17
 114:	80 81       	ld	r24, Z
 116:	0e 94 45 00 	call	0x8a	; 0x8a <USARTWriteChar>
		PORTC^=0xFF;
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	80 95       	com	r24
 11e:	85 bb       	out	0x15, r24	; 21
 120:	9f ef       	ldi	r25, 0xFF	; 255
 122:	27 e4       	ldi	r18, 0x47	; 71
 124:	38 ee       	ldi	r19, 0xE8	; 232
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	91 50       	subi	r25, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x90>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x9c>
 134:	00 00       	nop
		int k = xyz[i] - '0';
		_delay_ms(12000);
		i++;
 136:	0f 5f       	subi	r16, 0xFF	; 255
 138:	1f 4f       	sbci	r17, 0xFF	; 255
		if (i==4) i=0;
 13a:	04 30       	cpi	r16, 0x04	; 4
 13c:	11 05       	cpc	r17, r1
 13e:	21 f7       	brne	.-56     	; 0x108 <main+0x70>
 140:	0e 2d       	mov	r16, r14
 142:	1f 2d       	mov	r17, r15
 144:	e1 cf       	rjmp	.-62     	; 0x108 <main+0x70>

00000146 <__vector_13>:
		USARTWriteChar(d);
		*/
    }
}

ISR(USART_RXC_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	//USARTWriteChar('y');
	d=UDR;
 152:	8c b1       	in	r24, 0x0c	; 12
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	UDR=d;
 158:	8c b9       	out	0x0c, r24	; 12
	PORTC^=0xFF;
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	80 95       	com	r24
 15e:	85 bb       	out	0x15, r24	; 21
	if(d=='a'){
	//PORTC = 0xFF; //Turns ON All LEDs
    //_delay_ms(1000); //1 second delay
    //PORTC= 0x00; //Turns OFF All LEDs
    //_delay_ms(1000); //1 second delay
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
