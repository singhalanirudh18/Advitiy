
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090c  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083a  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000062  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	12 d0       	rcall	.+36     	; 0xce <main>
  aa:	2f c0       	rjmp	.+94     	; 0x10a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART_Init>:
		
	}


	return UDR0;
}
  ae:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  b2:	89 b9       	out	0x09, r24	; 9
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  be:	08 95       	ret

000000c0 <USARTWriteChar>:

void USARTWriteChar(char c)
{
	

	while(!(UCSR0A & (1<<UDRE)))
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <USARTWriteChar>
	{
		
	}

	PORTC^=0xFF;
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	90 95       	com	r25
  c8:	95 bb       	out	0x15, r25	; 21
	UDR0=c;
  ca:	8c b9       	out	0x0c, r24	; 12
  cc:	08 95       	ret

000000ce <main>:
} 


int main(void)
{
	USART_Init(103); // as F_OSC = 16MHz
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	ed df       	rcall	.-38     	; 0xae <USART_Init>
	sei();
  d4:	78 94       	sei
	UCSR0B |= (1 << RXCIE);
  d6:	57 9a       	sbi	0x0a, 7	; 10
	USARTWriteChar('e');
  d8:	85 e6       	ldi	r24, 0x65	; 101
  da:	f2 df       	rcall	.-28     	; 0xc0 <USARTWriteChar>
	DDRC = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 bb       	out	0x14, r24	; 20
	PORTC= 0x00;
  e0:	15 ba       	out	0x15, r1	; 21
		USARTWriteChar(d);
		*/
		
		//USARTWriteChar('a');
		//_delay_ms(1000);
    }
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x14>

000000e4 <__vector_18>:
}

ISR(USART0_RX_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
	//USARTWriteChar('y');
	d=UDR0;
  f0:	8c b1       	in	r24, 0x0c	; 12
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	UDR0=d;
  f6:	8c b9       	out	0x0c, r24	; 12
	PORTC^=0xFF;
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	80 95       	com	r24
  fc:	85 bb       	out	0x15, r24	; 21
	if(d=='a'){
	//PORTC = 0xFF; //Turns ON All LEDs
    //_delay_ms(1000); //1 second delay
    //PORTC= 0x00; //Turns OFF All LEDs
    //_delay_ms(1000); //1 second delay
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
