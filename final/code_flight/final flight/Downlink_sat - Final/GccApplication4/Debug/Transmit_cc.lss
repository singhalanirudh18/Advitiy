
Transmit_cc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  008000b4  008000b4  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001390  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a0  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fa  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c4  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002d82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	53 c1       	rjmp	.+678    	; 0x2be <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e9       	ldi	r30, 0x94	; 148
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 3b       	cpi	r26, 0xB4	; 180
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a4 eb       	ldi	r26, 0xB4	; 180
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 32       	cpi	r26, 0x2D	; 45
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6f d1       	rcall	.+734    	; 0x338 <main>
  5a:	9a c1       	rjmp	.+820    	; 0x390 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ATMEGA_Init>:
	{
		char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
		if(transmit_enable==1)
		{
			transmit_string_UART0("transmitting\r\n");
			CC_Transmit(pkt_length);	
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	84 bb       	out	0x14, r24	; 20
			transmit_check=1;
  62:	85 bb       	out	0x15, r24	; 21
  64:	7f d1       	rcall	.+766    	; 0x364 <init_UART0>
			//Receive Enable
			ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
  66:	bc 98       	cbi	0x17, 4	; 23
  68:	bd 9a       	sbi	0x17, 5	; 23
			ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
  6a:	bb 9a       	sbi	0x17, 3	; 23
  6c:	ba 9a       	sbi	0x17, 2	; 23
  6e:	b8 98       	cbi	0x17, 0	; 23
  70:	83 e5       	ldi	r24, 0x53	; 83
  72:	8d b9       	out	0x0d, r24	; 13
  74:	1e b8       	out	0x0e, r1	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	c2 9a       	sbi	0x18, 2	; 24
  78:	c3 98       	cbi	0x18, 3	; 24
  7a:	c5 9a       	sbi	0x18, 5	; 24
  7c:	08 95       	ret

0000007e <ccxxx0_Read>:
  7e:	c2 98       	cbi	0x18, 2	; 24
  80:	b4 99       	sbic	0x16, 4	; 22
			_delay_ms(1);
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
  82:	fe cf       	rjmp	.-4      	; 0x80 <ccxxx0_Read+0x2>
  84:	80 68       	ori	r24, 0x80	; 128
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
  86:	8f b9       	out	0x0f, r24	; 15
  88:	77 9b       	sbis	0x0e, 7	; 14
			transmit_string_UART0("transmitted\r\n");
  8a:	fe cf       	rjmp	.-4      	; 0x88 <ccxxx0_Read+0xa>
  8c:	8f b1       	in	r24, 0x0f	; 15
  8e:	1f b8       	out	0x0f, r1	; 15
  90:	77 9b       	sbis	0x0e, 7	; 14
		}
			
		
		// If you have a package for us
		
		else if( PINB&(1 << CC_GDO0) )
  92:	fe cf       	rjmp	.-4      	; 0x90 <ccxxx0_Read+0x12>
  94:	8f b1       	in	r24, 0x0f	; 15
		{
			transmit_string_UART0("package available \n");
  96:	c2 9a       	sbi	0x18, 2	; 24
  98:	08 95       	ret

0000009a <ccxxx0_Write>:
  9a:	c2 98       	cbi	0x18, 2	; 24
			while(PINB&(1 << CC_GDO0));
  9c:	b4 99       	sbic	0x16, 4	; 22
  9e:	fe cf       	rjmp	.-4      	; 0x9c <ccxxx0_Write+0x2>
			
			ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp, 8);
  a0:	8f b9       	out	0x0f, r24	; 15
  a2:	77 9b       	sbis	0x0e, 7	; 14
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ccxxx0_Write+0x8>
  a6:	8f b1       	in	r24, 0x0f	; 15
  a8:	6f b9       	out	0x0f, r22	; 15
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ccxxx0_Write+0x10>
			transmit_string_UART0("RXed data: ");
  ae:	8f b1       	in	r24, 0x0f	; 15
  b0:	c2 9a       	sbi	0x18, 2	; 24
  b2:	08 95       	ret

000000b4 <ccxxx0_Strobe>:
			transmit_string_UART0((char *)temp);
  b4:	c2 98       	cbi	0x18, 2	; 24
  b6:	b4 99       	sbic	0x16, 4	; 22
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <ccxxx0_Strobe+0x2>
			transmit_string_UART0("\r\n");
  ba:	8f b9       	out	0x0f, r24	; 15
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <ccxxx0_Strobe+0x8>
  c0:	8f b1       	in	r24, 0x0f	; 15
  c2:	c2 9a       	sbi	0x18, 2	; 24
  c4:	08 95       	ret

000000c6 <ccxxx0_WriteBurst>:
  c6:	c2 98       	cbi	0x18, 2	; 24
  c8:	b4 99       	sbic	0x16, 4	; 22
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <ccxxx0_WriteBurst+0x2>
			_delay_ms(1);
			if (strncmp ((const char *)temp,(const char *)address,6) == 0)
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <ccxxx0_WriteBurst+0xa>
  d4:	8f b1       	in	r24, 0x0f	; 15
  d6:	41 15       	cp	r20, r1
  d8:	51 05       	cpc	r21, r1
  da:	51 f0       	breq	.+20     	; 0xf0 <ccxxx0_WriteBurst+0x2a>
  dc:	fb 01       	movw	r30, r22
			{
				transmit_string_UART0("address matched...\n");
  de:	46 0f       	add	r20, r22
  e0:	57 1f       	adc	r21, r23
  e2:	81 91       	ld	r24, Z+
				if(temp[7]==',')
  e4:	8f b9       	out	0x0f, r24	; 15
  e6:	77 9b       	sbis	0x0e, 7	; 14
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <ccxxx0_WriteBurst+0x20>
				{
					transmit_string_UART0((char *)address);
  ea:	e4 17       	cp	r30, r20
  ec:	f5 07       	cpc	r31, r21
  ee:	c9 f7       	brne	.-14     	; 0xe2 <ccxxx0_WriteBurst+0x1c>
					transmit_UART0(temp[6]);
  f0:	c2 9a       	sbi	0x18, 2	; 24
  f2:	08 95       	ret

000000f4 <ccxxx0_PowerOnReset>:
					transmit_UART0(temp[7]);
  f4:	c2 9a       	sbi	0x18, 2	; 24
  f6:	82 e0       	ldi	r24, 0x02	; 2
					ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp,4);
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <ccxxx0_PowerOnReset+0x4>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <ccxxx0_PowerOnReset+0xa>
  fe:	c2 98       	cbi	0x18, 2	; 24
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <ccxxx0_PowerOnReset+0xe>
					transmit_string_UART0((char *)temp);
 106:	00 c0       	rjmp	.+0      	; 0x108 <ccxxx0_PowerOnReset+0x14>
 108:	c2 9a       	sbi	0x18, 2	; 24
 10a:	8d e6       	ldi	r24, 0x6D	; 109
 10c:	8a 95       	dec	r24
				}	
				
				else
				{
					transmit_string_UART0((char *)address);
 10e:	f1 f7       	brne	.-4      	; 0x10c <ccxxx0_PowerOnReset+0x18>
 110:	00 00       	nop
 112:	c2 98       	cbi	0x18, 2	; 24
					transmit_UART0(temp[6]);
 114:	b4 99       	sbic	0x16, 4	; 22
 116:	fe cf       	rjmp	.-4      	; 0x114 <ccxxx0_PowerOnReset+0x20>
					transmit_UART0(temp[7]);
 118:	85 e8       	ldi	r24, 0x85	; 133
 11a:	8a 95       	dec	r24
					ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp, pkt_length-8);
 11c:	f1 f7       	brne	.-4      	; 0x11a <ccxxx0_PowerOnReset+0x26>
 11e:	00 00       	nop
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	8f b9       	out	0x0f, r24	; 15
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <ccxxx0_PowerOnReset+0x30>
 128:	8f b1       	in	r24, 0x0f	; 15
 12a:	b4 99       	sbic	0x16, 4	; 22
 12c:	fe cf       	rjmp	.-4      	; 0x12a <ccxxx0_PowerOnReset+0x36>
 12e:	85 e8       	ldi	r24, 0x85	; 133
 130:	8a 95       	dec	r24
					transmit_string_UART0((char *)temp);
 132:	f1 f7       	brne	.-4      	; 0x130 <ccxxx0_PowerOnReset+0x3c>
 134:	00 00       	nop
 136:	c2 9a       	sbi	0x18, 2	; 24
				}
			}	
			ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 138:	08 95       	ret

0000013a <ccxxx0_Setup>:
 13a:	cf 93       	push	r28
			ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 13c:	df 93       	push	r29
 13e:	ec 01       	movw	r28, r24
 140:	68 81       	ld	r22, Y
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	aa df       	rcall	.-172    	; 0x9a <ccxxx0_Write>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	9a df       	rcall	.-204    	; 0x7e <ccxxx0_Read>
 14a:	1a d1       	rcall	.+564    	; 0x380 <transmit_UART0>
 14c:	69 81       	ldd	r22, Y+1	; 0x01
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	a4 df       	rcall	.-184    	; 0x9a <ccxxx0_Write>
 152:	83 e0       	ldi	r24, 0x03	; 3
			_delay_ms(1);
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
 154:	94 df       	rcall	.-216    	; 0x7e <ccxxx0_Read>
 156:	14 d1       	rcall	.+552    	; 0x380 <transmit_UART0>
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
 158:	6a 81       	ldd	r22, Y+2	; 0x02
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	9e df       	rcall	.-196    	; 0x9a <ccxxx0_Write>
	transmit_UART0(read);    
    ccxxx0_Write(CCxxx0_FIFOTHR,  settings->FIFOTHR);
	read = ccxxx0_Read(CCxxx0_FIFOTHR);
	transmit_UART0(read);
    ccxxx0_Write(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
	read = ccxxx0_Read(CCxxx0_PKTCTRL0);
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	8e df       	rcall	.-228    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 162:	0e d1       	rcall	.+540    	; 0x380 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCTRL1,  settings->FSCTRL1);
 164:	6b 81       	ldd	r22, Y+3	; 0x03
 166:	8b e0       	ldi	r24, 0x0B	; 11
 168:	98 df       	rcall	.-208    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCTRL1);
 16a:	8b e0       	ldi	r24, 0x0B	; 11
 16c:	88 df       	rcall	.-240    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 16e:	08 d1       	rcall	.+528    	; 0x380 <transmit_UART0>
    //ccxxx0_Write(CCxxx0_FSCTRL0,  settings->FSCTRL0);
    ccxxx0_Write(CCxxx0_FREQ2,    settings->FREQ2);
 170:	6c 81       	ldd	r22, Y+4	; 0x04
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	92 df       	rcall	.-220    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ2);
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	82 df       	rcall	.-252    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 17a:	02 d1       	rcall	.+516    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FREQ1,    settings->FREQ1);
 17c:	6d 81       	ldd	r22, Y+5	; 0x05
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	8c df       	rcall	.-232    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ1);
 182:	8e e0       	ldi	r24, 0x0E	; 14
 184:	7c df       	rcall	.-264    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 186:	fc d0       	rcall	.+504    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FREQ0,    settings->FREQ0);
 188:	6e 81       	ldd	r22, Y+6	; 0x06
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	86 df       	rcall	.-244    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ0);
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	76 df       	rcall	.-276    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 192:	f6 d0       	rcall	.+492    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MDMCFG4,  settings->MDMCFG4);
 194:	6f 81       	ldd	r22, Y+7	; 0x07
 196:	80 e1       	ldi	r24, 0x10	; 16
 198:	80 df       	rcall	.-256    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG4);
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	70 df       	rcall	.-288    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 19e:	f0 d0       	rcall	.+480    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MDMCFG3,  settings->MDMCFG3);
 1a0:	68 85       	ldd	r22, Y+8	; 0x08
 1a2:	81 e1       	ldi	r24, 0x11	; 17
 1a4:	7a df       	rcall	.-268    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG3);
 1a6:	81 e1       	ldi	r24, 0x11	; 17
 1a8:	6a df       	rcall	.-300    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1aa:	ea d0       	rcall	.+468    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MDMCFG2,  settings->MDMCFG2);
 1ac:	69 85       	ldd	r22, Y+9	; 0x09
 1ae:	82 e1       	ldi	r24, 0x12	; 18
 1b0:	74 df       	rcall	.-280    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG2);
 1b2:	82 e1       	ldi	r24, 0x12	; 18
 1b4:	64 df       	rcall	.-312    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1b6:	e4 d0       	rcall	.+456    	; 0x380 <transmit_UART0>
    //ccxxx0_Write(CCxxx0_MDMCFG1,  settings->MDMCFG1);
    //ccxxx0_Write(CCxxx0_MDMCFG0,  settings->MDMCFG0);
    ccxxx0_Write(CCxxx0_DEVIATN,  settings->DEVIATN);
 1b8:	6a 85       	ldd	r22, Y+10	; 0x0a
 1ba:	85 e1       	ldi	r24, 0x15	; 21
 1bc:	6e df       	rcall	.-292    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_DEVIATN);
 1be:	85 e1       	ldi	r24, 0x15	; 21
 1c0:	5e df       	rcall	.-324    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1c2:	de d0       	rcall	.+444    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_MCSM0 ,   settings->MCSM0 );
 1c4:	6b 85       	ldd	r22, Y+11	; 0x0b
 1c6:	88 e1       	ldi	r24, 0x18	; 24
 1c8:	68 df       	rcall	.-304    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MCSM0);
 1ca:	88 e1       	ldi	r24, 0x18	; 24
 1cc:	58 df       	rcall	.-336    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1ce:	d8 d0       	rcall	.+432    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FOCCFG,   settings->FOCCFG);
 1d0:	6c 85       	ldd	r22, Y+12	; 0x0c
 1d2:	89 e1       	ldi	r24, 0x19	; 25
 1d4:	62 df       	rcall	.-316    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FOCCFG);
 1d6:	89 e1       	ldi	r24, 0x19	; 25
 1d8:	52 df       	rcall	.-348    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1da:	d2 d0       	rcall	.+420    	; 0x380 <transmit_UART0>
    //ccxxx0_Write(CCxxx0_BSCFG,    settings->BSCFG);
    ccxxx0_Write(CCxxx0_WORCTRL,  settings->WORCTRL);
 1dc:	6d 85       	ldd	r22, Y+13	; 0x0d
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	5c df       	rcall	.-328    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_WORCTRL);
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	4c df       	rcall	.-360    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1e6:	cc d0       	rcall	.+408    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FSCAL3,   settings->FSCAL3);
 1e8:	6e 85       	ldd	r22, Y+14	; 0x0e
 1ea:	83 e2       	ldi	r24, 0x23	; 35
 1ec:	56 df       	rcall	.-340    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL3);
 1ee:	83 e2       	ldi	r24, 0x23	; 35
 1f0:	46 df       	rcall	.-372    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1f2:	c6 d0       	rcall	.+396    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FSCAL2,   settings->FSCAL2);
 1f4:	6f 85       	ldd	r22, Y+15	; 0x0f
 1f6:	84 e2       	ldi	r24, 0x24	; 36
 1f8:	50 df       	rcall	.-352    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL2);
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	40 df       	rcall	.-384    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 1fe:	c0 d0       	rcall	.+384    	; 0x380 <transmit_UART0>
	ccxxx0_Write(CCxxx0_FSCAL1,   settings->FSCAL1);
 200:	68 89       	ldd	r22, Y+16	; 0x10
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	4a df       	rcall	.-364    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL1);
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	3a df       	rcall	.-396    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 20a:	ba d0       	rcall	.+372    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_FSCAL0,   settings->FSCAL0);
 20c:	69 89       	ldd	r22, Y+17	; 0x11
 20e:	86 e2       	ldi	r24, 0x26	; 38
 210:	44 df       	rcall	.-376    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL0);
 212:	86 e2       	ldi	r24, 0x26	; 38
 214:	34 df       	rcall	.-408    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 216:	b4 d0       	rcall	.+360    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_TEST2,    settings->TEST2);
 218:	6a 89       	ldd	r22, Y+18	; 0x12
 21a:	8c e2       	ldi	r24, 0x2C	; 44
 21c:	3e df       	rcall	.-388    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST2);
 21e:	8c e2       	ldi	r24, 0x2C	; 44
 220:	2e df       	rcall	.-420    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 222:	ae d0       	rcall	.+348    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_TEST1,    settings->TEST1);
 224:	6b 89       	ldd	r22, Y+19	; 0x13
 226:	8d e2       	ldi	r24, 0x2D	; 45
 228:	38 df       	rcall	.-400    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST1);
 22a:	8d e2       	ldi	r24, 0x2D	; 45
 22c:	28 df       	rcall	.-432    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);
 22e:	a8 d0       	rcall	.+336    	; 0x380 <transmit_UART0>
    ccxxx0_Write(CCxxx0_TEST0,    settings->TEST0);
 230:	6c 89       	ldd	r22, Y+20	; 0x14
 232:	8e e2       	ldi	r24, 0x2E	; 46
 234:	32 df       	rcall	.-412    	; 0x9a <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST0);
 236:	8e e2       	ldi	r24, 0x2E	; 46
 238:	22 df       	rcall	.-444    	; 0x7e <ccxxx0_Read>
	transmit_UART0(read);	
 23a:	a2 d0       	rcall	.+324    	; 0x380 <transmit_UART0>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <CC_Transmit>:

void CC_Transmit(unsigned int pkt_length)
{
	PORTC = 0xff;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	85 bb       	out	0x15, r24	; 21
 246:	e6 e7       	ldi	r30, 0x76	; 118
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	a0 ef       	ldi	r26, 0xF0	; 240
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	23 eb       	ldi	r18, 0xB3	; 179
 250:	30 e0       	ldi	r19, 0x00	; 0
	char temp[61];
	
	//strcpy((char*)data_transmit, (const char*)address);
	for (int i = 0; i<61; i++)
	{
		data_transmit[i] =  address[i];
 252:	81 91       	ld	r24, Z+
 254:	8d 93       	st	X+, r24
{
	PORTC = 0xff;
	char temp[61];
	
	//strcpy((char*)data_transmit, (const char*)address);
	for (int i = 0; i<61; i++)
 256:	e2 17       	cp	r30, r18
 258:	f3 07       	cpc	r31, r19
 25a:	d9 f7       	brne	.-10     	; 0x252 <CC_Transmit+0x10>
		data_transmit[i] =  0xAA;
	}*/
	
	
	//if(data_transmit[34]==0x7E){PORTC = 0xAA;};
	ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 25c:	86 e3       	ldi	r24, 0x36	; 54
 25e:	2a df       	rcall	.-428    	; 0xb4 <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	60 e6       	ldi	r22, 0x60	; 96
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	8e e3       	ldi	r24, 0x3E	; 62
 26a:	2d df       	rcall	.-422    	; 0xc6 <ccxxx0_WriteBurst>
	ccxxx0_Strobe(CCxxx0_SFTX); // flush tx buff
 26c:	8b e3       	ldi	r24, 0x3B	; 59
 26e:	22 df       	rcall	.-444    	; 0xb4 <ccxxx0_Strobe>
	
	ccxxx0_Strobe(CCxxx0_STX); // goto tx mode
 270:	85 e3       	ldi	r24, 0x35	; 53
 272:	20 df       	rcall	.-448    	; 0xb4 <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CCxxx0_TXFIFO, (unsigned char*)data_transmit,61); // addr=M, payload=4 bytes, Total PKTLEN=5//see cc1101 datasheet pg no.-40
 274:	4d e3       	ldi	r20, 0x3D	; 61
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	60 ef       	ldi	r22, 0xF0	; 240
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	8f e3       	ldi	r24, 0x3F	; 63
 27e:	23 df       	rcall	.-442    	; 0xc6 <ccxxx0_WriteBurst>
	//ccxxx0_ReadBurst(CCxxx0_TXFIFO, (unsigned char*)data_transmit,35);
	if(data_transmit[60]==0x7E){PORTC = 0xAA;};
 280:	80 91 2c 01 	lds	r24, 0x012C
 284:	8e 37       	cpi	r24, 0x7E	; 126
 286:	11 f4       	brne	.+4      	; 0x28c <CC_Transmit+0x4a>
 288:	8a ea       	ldi	r24, 0xAA	; 170
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	97 e2       	ldi	r25, 0x27	; 39
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <CC_Transmit+0x4e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <CC_Transmit+0x54>
 296:	00 00       	nop
 298:	9f eb       	ldi	r25, 0xBF	; 191
 29a:	24 ed       	ldi	r18, 0xD4	; 212
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <CC_Transmit+0x5c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <CC_Transmit+0x66>
 2a8:	00 00       	nop
	_delay_ms(5);
	//ccxxx0_Strobe(CCxxx0_STX); // goto tx mode
	_delay_ms(75);// initially 120ms
	
	ccxxx0_Strobe(CCxxx0_SIDLE);
 2aa:	86 e3       	ldi	r24, 0x36	; 54
 2ac:	03 df       	rcall	.-506    	; 0xb4 <ccxxx0_Strobe>
 2ae:	8f e1       	ldi	r24, 0x1F	; 31
 2b0:	9e e4       	ldi	r25, 0x4E	; 78
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <CC_Transmit+0x70>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <CC_Transmit+0x76>
 2b8:	00 00       	nop
	_delay_ms(10);
	PORTC = 0x00;
 2ba:	15 ba       	out	0x15, r1	; 21
 2bc:	08 95       	ret

000002be <__vector_11>:
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
		}
	}		
}
ISR(USART_RXC_vect){
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	cli();
 2e8:	f8 94       	cli
	//transmitFlag = 0;
	int i = 0;
	address[i] = UDR;
 2ea:	8c b1       	in	r24, 0x0c	; 12
 2ec:	80 93 76 00 	sts	0x0076, r24
 2f0:	c7 e7       	ldi	r28, 0x77	; 119
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	03 eb       	ldi	r16, 0xB3	; 179
 2f6:	10 e0       	ldi	r17, 0x00	; 0
	//if(address[i]==0x7E){PORTC = 0xCC;}
		
		for(i = 1;i<61; i++){
			char temp = receive_UART0();
 2f8:	47 d0       	rcall	.+142    	; 0x388 <receive_UART0>
			address[i] = temp;}
 2fa:	89 93       	st	Y+, r24
	//transmitFlag = 0;
	int i = 0;
	address[i] = UDR;
	//if(address[i]==0x7E){PORTC = 0xCC;}
		
		for(i = 1;i<61; i++){
 2fc:	c0 17       	cp	r28, r16
 2fe:	d1 07       	cpc	r29, r17
 300:	d9 f7       	brne	.-10     	; 0x2f8 <__vector_11+0x3a>
			char temp = receive_UART0();
			address[i] = temp;}
			//transmit_UART0(temp);}
			//if(address[60]==0x7E){PORTC = 0xEE;}
		address[i] = '\0';
 302:	10 92 b3 00 	sts	0x00B3, r1
		CC_Transmit(61);
 306:	8d e3       	ldi	r24, 0x3D	; 61
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	9b df       	rcall	.-202    	; 0x242 <CC_Transmit>
		//transmitFlag = 1;
		sei();
 30c:	78 94       	sei
	//transmit_string_UART0("In ISR");
	
	//transmit_string_UART0("Out of ISR");
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <main>:
/*****
	MAIN program
*****/
int main(void)
{	
	cli(); 							//Clears the global interrupts			
 338:	f8 94       	cli
	ATMEGA_Init();
 33a:	91 de       	rcall	.-734    	; 0x5e <ATMEGA_Init>
	sei(); 
 33c:	78 94       	sei

	DDRC = 0b00001111;
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	85 bb       	out	0x15, r24	; 21
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	89 e6       	ldi	r24, 0x69	; 105
 34a:	98 e1       	ldi	r25, 0x18	; 24
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x14>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x1e>
 356:	00 00       	nop
	//transmit_string_UART0("cc1101_PowerOnReset\r\n");
	_delay_ms(1000);
	PORTC = 0x00;
 358:	15 ba       	out	0x15, r1	; 21
	ccxxx0_PowerOnReset();
 35a:	cc de       	rcall	.-616    	; 0xf4 <ccxxx0_PowerOnReset>
	//transmit_string_UART0("cc1101_Setup\r\n");
	ccxxx0_Setup(&rfSettings);
 35c:	81 e6       	ldi	r24, 0x61	; 97
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	ec de       	rcall	.-552    	; 0x13a <ccxxx0_Setup>
			}
			else {
				transmit_string_UART0("Did not go in ISR!");
			}
			*/
		}
 362:	ff cf       	rjmp	.-2      	; 0x362 <main+0x2a>

00000364 <init_UART0>:
	
}
*/
void init_UART0(void)
{
  UCSRA = 0;
 364:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 366:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 368:	10 bc       	out	0x20, r1	; 32
    
  ///Double Baud Rate
  UCSRA |= (1<<U2X);
 36a:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |=(1<<RXEN)|(1<<TXEN)| (1<<RXCIE);
 36c:	8a b1       	in	r24, 0x0a	; 10
 36e:	88 69       	ori	r24, 0x98	; 152
 370:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 372:	80 b5       	in	r24, 0x20	; 32
 374:	86 68       	ori	r24, 0x86	; 134
 376:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
 378:	87 e6       	ldi	r24, 0x67	; 103
 37a:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 37c:	10 bc       	out	0x20, r1	; 32
 37e:	08 95       	ret

00000380 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
 380:	5d 9b       	sbis	0x0b, 5	; 11
 382:	fe cf       	rjmp	.-4      	; 0x380 <transmit_UART0>
  //* Start transmission
  UDR = data;
 384:	8c b9       	out	0x0c, r24	; 12
 386:	08 95       	ret

00000388 <receive_UART0>:
}

uint8_t receive_UART0(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSRA & _BV(RXC)));
 388:	5f 9b       	sbis	0x0b, 7	; 11
 38a:	fe cf       	rjmp	.-4      	; 0x388 <receive_UART0>
  return UDR;
 38c:	8c b1       	in	r24, 0x0c	; 12
}
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
