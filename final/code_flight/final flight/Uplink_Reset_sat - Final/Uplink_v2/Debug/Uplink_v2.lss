
Uplink_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008b  00800076  00800076  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014f3  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000464  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057a  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049f  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be0  00000000  00000000  00002b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e7       	ldi	r30, 0x78	; 120
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 30       	cpi	r26, 0x01	; 1
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	fa d1       	rcall	.+1012   	; 0x44e <main>
  5a:	0c c2       	rjmp	.+1048   	; 0x474 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_UART0>:
	
}
*/
void init_UART0(void)
{
  UCSRA = 0;
  5e:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
  60:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
  62:	10 bc       	out	0x20, r1	; 32
    
  ///Double Baud Rate
  UCSRA |= (1<<U2X);
  64:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |=(1<<RXEN)|(1<<TXEN);
  66:	8a b1       	in	r24, 0x0a	; 10
  68:	88 61       	ori	r24, 0x18	; 24
  6a:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  6c:	80 b5       	in	r24, 0x20	; 32
  6e:	86 68       	ori	r24, 0x86	; 134
  70:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
  72:	87 e6       	ldi	r24, 0x67	; 103
  74:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
  76:	10 bc       	out	0x20, r1	; 32
  78:	08 95       	ret

0000007a <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <transmit_UART0>
  //* Start transmission
  UDR = data;
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <crc16>:
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] ;
  82:	7f ef       	ldi	r23, 0xFF	; 255
  84:	76 0f       	add	r23, r22
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
  86:	66 23       	and	r22, r22
  88:	19 f1       	breq	.+70     	; 0xd0 <crc16+0x4e>
  8a:	e8 2f       	mov	r30, r24
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  8c:	f9 2f       	mov	r31, r25
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	9f ef       	ldi	r25, 0xFF	; 255
  92:	21 91       	ld	r18, Z+
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  94:	29 27       	eor	r18, r25
  96:	32 2f       	mov	r19, r18
  98:	32 95       	swap	r19
  9a:	3f 70       	andi	r19, 0x0F	; 15
  9c:	23 27       	eor	r18, r19
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	98 2f       	mov	r25, r24
  a2:	88 27       	eor	r24, r24
  a4:	82 27       	eor	r24, r18
  a6:	93 27       	eor	r25, r19
  a8:	a9 01       	movw	r20, r18
  aa:	54 2f       	mov	r21, r20
  ac:	44 27       	eor	r20, r20
  ae:	52 95       	swap	r21
  b0:	50 7f       	andi	r21, 0xF0	; 240
  b2:	84 27       	eor	r24, r20
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] ;
  b4:	95 27       	eor	r25, r21
  b6:	22 0f       	add	r18, r18
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
  b8:	33 1f       	adc	r19, r19
  ba:	22 95       	swap	r18
  bc:	32 95       	swap	r19
    frame[i + size] = buf[i] ;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100001;
  be:	30 7f       	andi	r19, 0xF0	; 240
  c0:	32 27       	eor	r19, r18
  c2:	20 7f       	andi	r18, 0xF0	; 240
  
  frame[size++] = AX_CONTROL;
  c4:	32 27       	eor	r19, r18
  c6:	82 27       	eor	r24, r18
  frame[size++] = AX_PID;
  c8:	93 27       	eor	r25, r19
  ca:	71 50       	subi	r23, 0x01	; 1
  
  memcpy(buf, data, 8);
  cc:	10 f7       	brcc	.-60     	; 0x92 <crc16+0x10>
  ce:	08 95       	ret
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	08 95       	ret

000000d6 <ATMEGA_Init>:
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	84 bb       	out	0x14, r24	; 20
  da:	85 bb       	out	0x15, r24	; 21
  dc:	8f 9a       	sbi	0x11, 7	; 17
  de:	97 9a       	sbi	0x12, 7	; 18
  e0:	be df       	rcall	.-132    	; 0x5e <init_UART0>
  e2:	bc 98       	cbi	0x17, 4	; 23
  e4:	bd 9a       	sbi	0x17, 5	; 23
  e6:	bb 9a       	sbi	0x17, 3	; 23
  for(i = 0; i < 8; i++)
  frame[i + size] = buf[i] ;
  e8:	ba 9a       	sbi	0x17, 2	; 23
  ea:	b8 98       	cbi	0x17, 0	; 23
  
  frame[size++] = AX_CONTROL;
  frame[size++] = AX_PID;
  
  memcpy(buf, data, 8);
  for(i = 0; i < 8; i++)
  ec:	83 e5       	ldi	r24, 0x53	; 83
  ee:	8d b9       	out	0x0d, r24	; 13
  f0:	1e b8       	out	0x0e, r1	; 14
  frame[i + size] = buf[i] ;
  size += 8;

  //tp = "VU2DMQ";
  crc = crc16(frame+1,31);
  f2:	c2 9a       	sbi	0x18, 2	; 24
  f4:	c3 98       	cbi	0x18, 3	; 24
  
  memcpy(buf, &crc, 2);
  f6:	c5 9a       	sbi	0x18, 5	; 24
  f8:	08 95       	ret

000000fa <ccxxx0_Read>:
  for(i = 0; i < 2; i++)
  frame[i + size] = buf[i] ;
  fa:	c2 98       	cbi	0x18, 2	; 24
  fc:	b4 99       	sbic	0x16, 4	; 22
  fe:	fe cf       	rjmp	.-4      	; 0xfc <ccxxx0_Read+0x2>
 100:	80 68       	ori	r24, 0x80	; 128
 102:	8f b9       	out	0x0f, r24	; 15
 104:	77 9b       	sbis	0x0e, 7	; 14
 106:	fe cf       	rjmp	.-4      	; 0x104 <ccxxx0_Read+0xa>
  size += 2;
  
  frame[size++] = AX_FLAG;
 108:	8f b1       	in	r24, 0x0f	; 15
 10a:	1f b8       	out	0x0f, r1	; 15
 10c:	77 9b       	sbis	0x0e, 7	; 14
  
}
 10e:	fe cf       	rjmp	.-4      	; 0x10c <ccxxx0_Read+0x12>
 110:	8f b1       	in	r24, 0x0f	; 15
 112:	c2 9a       	sbi	0x18, 2	; 24
 114:	08 95       	ret

00000116 <ccxxx0_Write>:
 116:	c2 98       	cbi	0x18, 2	; 24
 118:	b4 99       	sbic	0x16, 4	; 22
 11a:	fe cf       	rjmp	.-4      	; 0x118 <ccxxx0_Write+0x2>
 11c:	8f b9       	out	0x0f, r24	; 15
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <ccxxx0_Write+0x8>
 122:	8f b1       	in	r24, 0x0f	; 15
 124:	6f b9       	out	0x0f, r22	; 15
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <ccxxx0_Write+0x10>
 12a:	8f b1       	in	r24, 0x0f	; 15
	
	SPDR = dat;
	while(!(SPSR & (1<<SPIF)));
	x = SPDR; // get data from SPDR

	PORTB |= (1 << CC_CSN);
 12c:	c2 9a       	sbi	0x18, 2	; 24

	return x;
}
 12e:	08 95       	ret

00000130 <ccxxx0_Strobe>:

unsigned char ccxxx0_Strobe(unsigned char addr)
{
	unsigned char x;
	PORTB &= ~(1 << CC_CSN);
 130:	c2 98       	cbi	0x18, 2	; 24

	while(PINB & (1 << CC_SO));
 132:	b4 99       	sbic	0x16, 4	; 22
 134:	fe cf       	rjmp	.-4      	; 0x132 <ccxxx0_Strobe+0x2>

	SPDR = addr;
 136:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 138:	77 9b       	sbis	0x0e, 7	; 14
 13a:	fe cf       	rjmp	.-4      	; 0x138 <ccxxx0_Strobe+0x8>
	x = SPDR; // flush SPDR
 13c:	8f b1       	in	r24, 0x0f	; 15

	PORTB |= (1 << CC_CSN);
 13e:	c2 9a       	sbi	0x18, 2	; 24

	return x;
}
 140:	08 95       	ret

00000142 <ccxxx0_ReadBurst>:

void ccxxx0_ReadBurst(unsigned char addr, unsigned char* dataPtr, unsigned int dataCount)
{
	unsigned char x;

	PORTB &= ~(1 << CC_CSN);
 142:	c2 98       	cbi	0x18, 2	; 24

	while(PINB & (1 << CC_SO));
 144:	b4 99       	sbic	0x16, 4	; 22
 146:	fe cf       	rjmp	.-4      	; 0x144 <ccxxx0_ReadBurst+0x2>

	SPDR = (addr | 0xc0);
 148:	80 6c       	ori	r24, 0xC0	; 192
 14a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 14c:	77 9b       	sbis	0x0e, 7	; 14
 14e:	fe cf       	rjmp	.-4      	; 0x14c <ccxxx0_ReadBurst+0xa>
	x = SPDR;// flush SPDR
 150:	8f b1       	in	r24, 0x0f	; 15

	while(dataCount) {
 152:	41 15       	cp	r20, r1
 154:	51 05       	cpc	r21, r1
 156:	59 f0       	breq	.+22     	; 0x16e <ccxxx0_ReadBurst+0x2c>
 158:	fb 01       	movw	r30, r22
 15a:	46 0f       	add	r20, r22
 15c:	57 1f       	adc	r21, r23
		SPDR = 0;
 15e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));
 160:	77 9b       	sbis	0x0e, 7	; 14
 162:	fe cf       	rjmp	.-4      	; 0x160 <ccxxx0_ReadBurst+0x1e>

		*dataPtr++ = SPDR; // get data from SPDR
 164:	8f b1       	in	r24, 0x0f	; 15
 166:	81 93       	st	Z+, r24

	SPDR = (addr | 0xc0);
	while(!(SPSR & (1<<SPIF)));
	x = SPDR;// flush SPDR

	while(dataCount) {
 168:	e4 17       	cp	r30, r20
 16a:	f5 07       	cpc	r31, r21
 16c:	c1 f7       	brne	.-16     	; 0x15e <ccxxx0_ReadBurst+0x1c>

		*dataPtr++ = SPDR; // get data from SPDR
		dataCount--;
	}

	PORTB |= (1 << CC_CSN);
 16e:	c2 9a       	sbi	0x18, 2	; 24
 170:	08 95       	ret

00000172 <ccxxx0_WriteBurst>:

void ccxxx0_WriteBurst(unsigned char addr, unsigned char* dataPtr, unsigned int dataCount)
{
	unsigned char x;

	PORTB &= ~(1 << CC_CSN);
 172:	c2 98       	cbi	0x18, 2	; 24

	while(PINB & (1 << CC_SO));
 174:	b4 99       	sbic	0x16, 4	; 22
 176:	fe cf       	rjmp	.-4      	; 0x174 <ccxxx0_WriteBurst+0x2>

	SPDR = addr | 0x40;
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 17c:	77 9b       	sbis	0x0e, 7	; 14
 17e:	fe cf       	rjmp	.-4      	; 0x17c <ccxxx0_WriteBurst+0xa>
	x = SPDR; // flush SPDR
 180:	8f b1       	in	r24, 0x0f	; 15

	while(dataCount) {
 182:	41 15       	cp	r20, r1
 184:	51 05       	cpc	r21, r1
 186:	51 f0       	breq	.+20     	; 0x19c <ccxxx0_WriteBurst+0x2a>
 188:	fb 01       	movw	r30, r22
 18a:	46 0f       	add	r20, r22
 18c:	57 1f       	adc	r21, r23
		SPDR = *dataPtr++;
 18e:	81 91       	ld	r24, Z+
 190:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 192:	77 9b       	sbis	0x0e, 7	; 14
 194:	fe cf       	rjmp	.-4      	; 0x192 <ccxxx0_WriteBurst+0x20>

	SPDR = addr | 0x40;
	while(!(SPSR & (1<<SPIF)));
	x = SPDR; // flush SPDR

	while(dataCount) {
 196:	e4 17       	cp	r30, r20
 198:	f5 07       	cpc	r31, r21
 19a:	c9 f7       	brne	.-14     	; 0x18e <ccxxx0_WriteBurst+0x1c>
		while(!(SPSR & (1<<SPIF)));

		dataCount--;
	}

	PORTB |= (1 << CC_CSN);
 19c:	c2 9a       	sbi	0x18, 2	; 24
 19e:	08 95       	ret

000001a0 <ccxxx0_PowerOnReset>:

void ccxxx0_PowerOnReset()
{
	unsigned char x;
	//datasheet cc1101 pg on.51
	PORTB |= (1 << CC_CSN);
 1a0:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <ccxxx0_PowerOnReset+0x4>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <ccxxx0_PowerOnReset+0xa>
	_delay_us(1);
	PORTB &= ~(1 << CC_CSN);
 1aa:	c2 98       	cbi	0x18, 2	; 24
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <ccxxx0_PowerOnReset+0xe>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <ccxxx0_PowerOnReset+0x14>
	_delay_us(1);
	PORTB |= (1 << CC_CSN);
 1b4:	c2 9a       	sbi	0x18, 2	; 24
 1b6:	8d e6       	ldi	r24, 0x6D	; 109
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <ccxxx0_PowerOnReset+0x18>
 1bc:	00 00       	nop
	_delay_us(41);
	
	PORTB &= ~(1 << CC_CSN);
 1be:	c2 98       	cbi	0x18, 2	; 24
	
	while(PINB & (1 << CC_SO));
 1c0:	b4 99       	sbic	0x16, 4	; 22
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <ccxxx0_PowerOnReset+0x20>
 1c4:	85 e8       	ldi	r24, 0x85	; 133
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <ccxxx0_PowerOnReset+0x26>
 1ca:	00 00       	nop
	
	_delay_us(50);

	SPDR = CCxxx0_SRES;
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 1d0:	77 9b       	sbis	0x0e, 7	; 14
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <ccxxx0_PowerOnReset+0x30>
	x = SPDR; // flush SPDR
 1d4:	8f b1       	in	r24, 0x0f	; 15
	
	while(PINB & (1 << CC_SO));
 1d6:	b4 99       	sbic	0x16, 4	; 22
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <ccxxx0_PowerOnReset+0x36>
 1da:	85 e8       	ldi	r24, 0x85	; 133
 1dc:	8a 95       	dec	r24
 1de:	f1 f7       	brne	.-4      	; 0x1dc <ccxxx0_PowerOnReset+0x3c>
 1e0:	00 00       	nop

	_delay_us(50);
	
	PORTB |= (1 << CC_CSN);
 1e2:	c2 9a       	sbi	0x18, 2	; 24
 1e4:	08 95       	ret

000001e6 <ccxxx0_Setup>:
}
void ccxxx0_Setup(const RF_SETTINGS* settings)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
	unsigned char read;
	// Write register settings
	ccxxx0_Write(CCxxx0_IOCFG0,   settings->IOCFG0);
 1ec:	68 81       	ld	r22, Y
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	92 df       	rcall	.-220    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_IOCFG0);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	82 df       	rcall	.-252    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FIFOTHR,  settings->FIFOTHR);
 1f6:	69 81       	ldd	r22, Y+1	; 0x01
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	8d df       	rcall	.-230    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FIFOTHR);
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	7d df       	rcall	.-262    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
 200:	6a 81       	ldd	r22, Y+2	; 0x02
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	88 df       	rcall	.-240    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_PKTCTRL0);
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	78 df       	rcall	.-272    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FSCTRL1,  settings->FSCTRL1);
 20a:	6b 81       	ldd	r22, Y+3	; 0x03
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	83 df       	rcall	.-250    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCTRL1);
 210:	8b e0       	ldi	r24, 0x0B	; 11
 212:	73 df       	rcall	.-282    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	//ccxxx0_Write(CCxxx0_FSCTRL0,  settings->FSCTRL0);
	ccxxx0_Write(CCxxx0_FREQ2,    settings->FREQ2);
 214:	6c 81       	ldd	r22, Y+4	; 0x04
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	7e df       	rcall	.-260    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ2);
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	6e df       	rcall	.-292    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FREQ1,    settings->FREQ1);
 21e:	6d 81       	ldd	r22, Y+5	; 0x05
 220:	8e e0       	ldi	r24, 0x0E	; 14
 222:	79 df       	rcall	.-270    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ1);
 224:	8e e0       	ldi	r24, 0x0E	; 14
 226:	69 df       	rcall	.-302    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FREQ0,    settings->FREQ0);
 228:	6e 81       	ldd	r22, Y+6	; 0x06
 22a:	8f e0       	ldi	r24, 0x0F	; 15
 22c:	74 df       	rcall	.-280    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FREQ0);
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	64 df       	rcall	.-312    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_MDMCFG4,  settings->MDMCFG4);
 232:	6f 81       	ldd	r22, Y+7	; 0x07
 234:	80 e1       	ldi	r24, 0x10	; 16
 236:	6f df       	rcall	.-290    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG4);
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	5f df       	rcall	.-322    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_MDMCFG3,  settings->MDMCFG3);
 23c:	68 85       	ldd	r22, Y+8	; 0x08
 23e:	81 e1       	ldi	r24, 0x11	; 17
 240:	6a df       	rcall	.-300    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG3);
 242:	81 e1       	ldi	r24, 0x11	; 17
 244:	5a df       	rcall	.-332    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_MDMCFG2,  settings->MDMCFG2);
 246:	69 85       	ldd	r22, Y+9	; 0x09
 248:	82 e1       	ldi	r24, 0x12	; 18
 24a:	65 df       	rcall	.-310    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MDMCFG2);
 24c:	82 e1       	ldi	r24, 0x12	; 18
 24e:	55 df       	rcall	.-342    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	//ccxxx0_Write(CCxxx0_MDMCFG1,  settings->MDMCFG1);
	//ccxxx0_Write(CCxxx0_MDMCFG0,  settings->MDMCFG0);
	ccxxx0_Write(CCxxx0_DEVIATN,  settings->DEVIATN);
 250:	6a 85       	ldd	r22, Y+10	; 0x0a
 252:	85 e1       	ldi	r24, 0x15	; 21
 254:	60 df       	rcall	.-320    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_DEVIATN);
 256:	85 e1       	ldi	r24, 0x15	; 21
 258:	50 df       	rcall	.-352    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_MCSM0 ,   settings->MCSM0 );
 25a:	6b 85       	ldd	r22, Y+11	; 0x0b
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	5b df       	rcall	.-330    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_MCSM0);
 260:	88 e1       	ldi	r24, 0x18	; 24
 262:	4b df       	rcall	.-362    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FOCCFG,   settings->FOCCFG);
 264:	6c 85       	ldd	r22, Y+12	; 0x0c
 266:	89 e1       	ldi	r24, 0x19	; 25
 268:	56 df       	rcall	.-340    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FOCCFG);
 26a:	89 e1       	ldi	r24, 0x19	; 25
 26c:	46 df       	rcall	.-372    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	//ccxxx0_Write(CCxxx0_BSCFG,    settings->BSCFG);
	ccxxx0_Write(CCxxx0_WORCTRL,  settings->WORCTRL);
 26e:	6d 85       	ldd	r22, Y+13	; 0x0d
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	51 df       	rcall	.-350    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_WORCTRL);
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	41 df       	rcall	.-382    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FSCAL3,   settings->FSCAL3);
 278:	6e 85       	ldd	r22, Y+14	; 0x0e
 27a:	83 e2       	ldi	r24, 0x23	; 35
 27c:	4c df       	rcall	.-360    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL3);
 27e:	83 e2       	ldi	r24, 0x23	; 35
 280:	3c df       	rcall	.-392    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FSCAL2,   settings->FSCAL2);
 282:	6f 85       	ldd	r22, Y+15	; 0x0f
 284:	84 e2       	ldi	r24, 0x24	; 36
 286:	47 df       	rcall	.-370    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL2);
 288:	84 e2       	ldi	r24, 0x24	; 36
 28a:	37 df       	rcall	.-402    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FSCAL1,   settings->FSCAL1);
 28c:	68 89       	ldd	r22, Y+16	; 0x10
 28e:	85 e2       	ldi	r24, 0x25	; 37
 290:	42 df       	rcall	.-380    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL1);
 292:	85 e2       	ldi	r24, 0x25	; 37
 294:	32 df       	rcall	.-412    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_FSCAL0,   settings->FSCAL0);
 296:	69 89       	ldd	r22, Y+17	; 0x11
 298:	86 e2       	ldi	r24, 0x26	; 38
 29a:	3d df       	rcall	.-390    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_FSCAL0);
 29c:	86 e2       	ldi	r24, 0x26	; 38
 29e:	2d df       	rcall	.-422    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_TEST2,    settings->TEST2);
 2a0:	6a 89       	ldd	r22, Y+18	; 0x12
 2a2:	8c e2       	ldi	r24, 0x2C	; 44
 2a4:	38 df       	rcall	.-400    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST2);
 2a6:	8c e2       	ldi	r24, 0x2C	; 44
 2a8:	28 df       	rcall	.-432    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_TEST1,    settings->TEST1);
 2aa:	6b 89       	ldd	r22, Y+19	; 0x13
 2ac:	8d e2       	ldi	r24, 0x2D	; 45
 2ae:	33 df       	rcall	.-410    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST1);
 2b0:	8d e2       	ldi	r24, 0x2D	; 45
 2b2:	23 df       	rcall	.-442    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
	ccxxx0_Write(CCxxx0_TEST0,    settings->TEST0);
 2b4:	6c 89       	ldd	r22, Y+20	; 0x14
 2b6:	8e e2       	ldi	r24, 0x2E	; 46
 2b8:	2e df       	rcall	.-420    	; 0x116 <ccxxx0_Write>
	read = ccxxx0_Read(CCxxx0_TEST0);
 2ba:	8e e2       	ldi	r24, 0x2E	; 46
 2bc:	1e df       	rcall	.-452    	; 0xfa <ccxxx0_Read>
	//transmit_UART0(read);
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <CC_Receive>:
	transmit_string_UART0((unsigned char *)data_transmit);
	transmit_string_UART0("\r\n");
}

void CC_Receive()
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	a8 97       	sbiw	r28, 0x28	; 40
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
	transmit_enable = 0;
 2d8:	10 92 76 00 	sts	0x0076, r1
	unsigned char temp[40];
	ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 2dc:	86 e3       	ldi	r24, 0x36	; 54
 2de:	28 df       	rcall	.-432    	; 0x130 <ccxxx0_Strobe>
	ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	60 e6       	ldi	r22, 0x60	; 96
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	8e e3       	ldi	r24, 0x3E	; 62
 2ea:	43 df       	rcall	.-378    	; 0x172 <ccxxx0_WriteBurst>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	8f ec       	ldi	r24, 0xCF	; 207
 2ee:	97 e0       	ldi	r25, 0x07	; 7
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <CC_Receive+0x2c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <CC_Receive+0x32>
 2f6:	00 00       	nop
	_delay_ms(1);
	ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buff
 2f8:	8a e3       	ldi	r24, 0x3A	; 58
 2fa:	1a df       	rcall	.-460    	; 0x130 <ccxxx0_Strobe>
	ccxxx0_Strobe(CCxxx0_SRX);// goto rx mode
 2fc:	84 e3       	ldi	r24, 0x34	; 52
 2fe:	18 df       	rcall	.-464    	; 0x130 <ccxxx0_Strobe>
 300:	8e 01       	movw	r16, r28
 302:	0b 5d       	subi	r16, 0xDB	; 219
 304:	1f 4f       	sbci	r17, 0xFF	; 255
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
			/*for(int i = 0; i< 39; i++){
				transmit_UART0(temp[i]);
			}
			*/
			if ((temp[1] == 'A')&&(temp[2] == 'A')){
 306:	0f 2e       	mov	r0, r31
 308:	f6 eb       	ldi	r31, 0xB6	; 182
 30a:	cf 2e       	mov	r12, r31
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	df 2e       	mov	r13, r31
 310:	f0 2d       	mov	r31, r0
			for(int i=0;i<12;i++) {
				data[i] = temp[24+i];
			}
			data[13]='\0';
 312:	0f 2e       	mov	r0, r31
 314:	f3 ec       	ldi	r31, 0xC3	; 195
 316:	ef 2e       	mov	r14, r31
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ff 2e       	mov	r15, r31
 31c:	f0 2d       	mov	r31, r0
			//	transmit_string_UART0("Frame Received with no errors\r\n");
				_delay_ms(5);
				//transmit_string_UART0("Data = ");
				_delay_ms(5);
				//transmit_string_UART0(data);
				data[12] = 'm';
 31e:	0f 2e       	mov	r0, r31
 320:	f2 ec       	ldi	r31, 0xC2	; 194
 322:	6f 2e       	mov	r6, r31
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	7f 2e       	mov	r7, r31
 328:	f0 2d       	mov	r31, r0
 32a:	0f 2e       	mov	r0, r31
 32c:	fd e6       	ldi	r31, 0x6D	; 109
 32e:	9f 2e       	mov	r9, r31
 330:	f0 2d       	mov	r31, r0
	ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buff
	ccxxx0_Strobe(CCxxx0_SRX);// goto rx mode
	//transmit_string_UART0("Started\r\n");
	while(1)
	{
		char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
 332:	8b ef       	ldi	r24, 0xFB	; 251
 334:	e2 de       	rcall	.-572    	; 0xfa <ccxxx0_Read>
		}*/
			
		// If you have a package for us
		//transmit_string_UART0((unsigned char *)"Checking \n");
		
		if( PINB&(1 << CC_GDO0) )
 336:	b0 9b       	sbis	0x16, 0	; 22
 338:	fc cf       	rjmp	.-8      	; 0x332 <CC_Receive+0x6e>
		{
			//transmit_string_UART0("package available \n");
			while(PINB&(1 << CC_GDO0)){
 33a:	b0 99       	sbic	0x16, 0	; 22
 33c:	fe cf       	rjmp	.-4      	; 0x33a <CC_Receive+0x76>
				//transmit_string_UART0("in");	
			}
			//char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
			
			char bytes_RXFIFO = ccxxx0_Read(CCxxx0_RXBYTES);
 33e:	8b ef       	ldi	r24, 0xFB	; 251
 340:	dc de       	rcall	.-584    	; 0xfa <ccxxx0_Read>
			}*/
			
			
			//for(int i =0; i<35; i++){
			//temp[i] = ccxxx0_Read(CCxxx0_RXFIFO);}
			ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp,39);
 342:	47 e2       	ldi	r20, 0x27	; 39
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	f9 de       	rcall	.-526    	; 0x142 <ccxxx0_ReadBurst>
			//transmit_string_UART0("RXed data: ");
			
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
 350:	8a e3       	ldi	r24, 0x3A	; 58
 352:	ee de       	rcall	.-548    	; 0x130 <ccxxx0_Strobe>
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
 354:	84 e3       	ldi	r24, 0x34	; 52
 356:	ec de       	rcall	.-552    	; 0x130 <ccxxx0_Strobe>
			/*for(int i = 0; i< 39; i++){
				transmit_UART0(temp[i]);
			}
			*/
			if ((temp[1] == 'A')&&(temp[2] == 'A')){
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	81 34       	cpi	r24, 0x41	; 65
 35c:	09 f0       	breq	.+2      	; 0x360 <CC_Receive+0x9c>
 35e:	64 c0       	rjmp	.+200    	; 0x428 <CC_Receive+0x164>
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	81 34       	cpi	r24, 0x41	; 65
 364:	09 f0       	breq	.+2      	; 0x368 <CC_Receive+0xa4>
 366:	60 c0       	rjmp	.+192    	; 0x428 <CC_Receive+0x164>
 368:	fe 01       	movw	r30, r28
 36a:	79 96       	adiw	r30, 0x19	; 25
 36c:	d6 01       	movw	r26, r12
			for(int i=0;i<12;i++) {
				data[i] = temp[24+i];
 36e:	81 91       	ld	r24, Z+
 370:	8d 93       	st	X+, r24
			/*for(int i = 0; i< 39; i++){
				transmit_UART0(temp[i]);
			}
			*/
			if ((temp[1] == 'A')&&(temp[2] == 'A')){
			for(int i=0;i<12;i++) {
 372:	e0 17       	cp	r30, r16
 374:	f1 07       	cpc	r31, r17
 376:	d9 f7       	brne	.-10     	; 0x36e <CC_Receive+0xaa>
				data[i] = temp[24+i];
			}
			data[13]='\0';
 378:	f7 01       	movw	r30, r14
 37a:	10 82       	st	Z, r1
			
			uint8_t *framePtr;
			framePtr = temp;
			crc = crc16(temp+1,35);
 37c:	63 e2       	ldi	r22, 0x23	; 35
 37e:	ce 01       	movw	r24, r28
 380:	02 96       	adiw	r24, 0x02	; 2
 382:	7f de       	rcall	.-770    	; 0x82 <crc16>
 384:	90 93 b5 00 	sts	0x00B5, r25
 388:	80 93 b4 00 	sts	0x00B4, r24
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	97 e2       	ldi	r25, 0x27	; 39
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <CC_Receive+0xcc>
 394:	00 c0       	rjmp	.+0      	; 0x396 <CC_Receive+0xd2>
 396:	00 00       	nop
			//transmit_string_UART0("CRC Computed=\r\n");
			_delay_ms(5);
			crc1 = crc;
 398:	80 91 b4 00 	lds	r24, 0x00B4
 39c:	90 91 b5 00 	lds	r25, 0x00B5
 3a0:	80 93 b3 00 	sts	0x00B3, r24
			crc2 = (crc>>8);
 3a4:	90 93 00 01 	sts	0x0100, r25
			transmit_UART0(crc1);
 3a8:	68 de       	rcall	.-816    	; 0x7a <transmit_UART0>
			transmit_UART0(crc2);
 3aa:	80 91 00 01 	lds	r24, 0x0100
 3ae:	65 de       	rcall	.-822    	; 0x7a <transmit_UART0>
 3b0:	ef e1       	ldi	r30, 0x1F	; 31
 3b2:	fe e4       	ldi	r31, 0x4E	; 78
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <CC_Receive+0xf0>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <CC_Receive+0xf6>
 3ba:	00 00       	nop
 3bc:	8f e0       	ldi	r24, 0x0F	; 15
 3be:	97 e2       	ldi	r25, 0x27	; 39
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <CC_Receive+0xfc>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <CC_Receive+0x102>
 3c6:	00 00       	nop
			_delay_ms(10);
			//transmit_string_UART0("      ");
			uint16_t crcFromMsg = ((uint16_t)temp[36] << 8) | temp[37];
			//transmit_string_UART0("CRC from Msg =");
			_delay_ms(5);
			transmit_UART0(temp[36]);
 3c8:	8d a1       	ldd	r24, Y+37	; 0x25
 3ca:	57 de       	rcall	.-850    	; 0x7a <transmit_UART0>
			transmit_UART0(temp[37]);
 3cc:	8e a1       	ldd	r24, Y+38	; 0x26
 3ce:	55 de       	rcall	.-854    	; 0x7a <transmit_UART0>
 3d0:	ef e1       	ldi	r30, 0x1F	; 31
 3d2:	fe e4       	ldi	r31, 0x4E	; 78
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <CC_Receive+0x110>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <CC_Receive+0x116>
 3da:	00 00       	nop
			_delay_ms(10);
			//transmit_string_UART("Now checking equality of the CRCs\r\n");
			//_delay_ms(5);
			//Check if CRCs match
			if((crc1==temp[36])&&(crc2==temp[37])){
 3dc:	9d a1       	ldd	r25, Y+37	; 0x25
 3de:	80 91 b3 00 	lds	r24, 0x00B3
 3e2:	98 13       	cpse	r25, r24
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <CC_Receive+0x164>
 3e6:	9e a1       	ldd	r25, Y+38	; 0x26
 3e8:	80 91 00 01 	lds	r24, 0x0100
 3ec:	98 13       	cpse	r25, r24
 3ee:	1c c0       	rjmp	.+56     	; 0x428 <CC_Receive+0x164>
 3f0:	8f e0       	ldi	r24, 0x0F	; 15
 3f2:	97 e2       	ldi	r25, 0x27	; 39
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <CC_Receive+0x130>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <CC_Receive+0x136>
 3fa:	00 00       	nop
 3fc:	ef e0       	ldi	r30, 0x0F	; 15
 3fe:	f7 e2       	ldi	r31, 0x27	; 39
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <CC_Receive+0x13c>
 404:	00 c0       	rjmp	.+0      	; 0x406 <CC_Receive+0x142>
 406:	00 00       	nop
			//	transmit_string_UART0("Frame Received with no errors\r\n");
				_delay_ms(5);
				//transmit_string_UART0("Data = ");
				_delay_ms(5);
				//transmit_string_UART0(data);
				data[12] = 'm';
 408:	f3 01       	movw	r30, r6
 40a:	90 82       	st	Z, r9
 40c:	56 01       	movw	r10, r12
				for(int i =0; i<13; i++){
					transmit_UART0(data[i]);
 40e:	f5 01       	movw	r30, r10
 410:	81 91       	ld	r24, Z+
 412:	5f 01       	movw	r10, r30
 414:	32 de       	rcall	.-924    	; 0x7a <transmit_UART0>
				_delay_ms(5);
				//transmit_string_UART0("Data = ");
				_delay_ms(5);
				//transmit_string_UART0(data);
				data[12] = 'm';
				for(int i =0; i<13; i++){
 416:	ae 14       	cp	r10, r14
 418:	bf 04       	cpc	r11, r15
 41a:	c9 f7       	brne	.-14     	; 0x40e <CC_Receive+0x14a>
 41c:	8f e0       	ldi	r24, 0x0F	; 15
 41e:	97 e2       	ldi	r25, 0x27	; 39
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <CC_Receive+0x15c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <CC_Receive+0x162>
 426:	00 00       	nop
					transmit_string_UART0("\r\n");
					//ccxxx0_ReadBurst(CCxxx0_RXFIFO, temp, pkt_length-8);
					//transmit_string_UART0((char *)temp);
				}
			}*/
			ccxxx0_Strobe(CCxxx0_SIDLE);//Exit RX / TX, turn off frequency synthesizer and exit Wake-On-Radio mode if applicable
 428:	86 e3       	ldi	r24, 0x36	; 54
 42a:	82 de       	rcall	.-764    	; 0x130 <ccxxx0_Strobe>
			ccxxx0_WriteBurst(CCxxx0_PATABLE, &paTable[0], 1); // max power
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	60 e6       	ldi	r22, 0x60	; 96
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	8e e3       	ldi	r24, 0x3E	; 62
 436:	9d de       	rcall	.-710    	; 0x172 <ccxxx0_WriteBurst>
 438:	ef ec       	ldi	r30, 0xCF	; 207
 43a:	f7 e0       	ldi	r31, 0x07	; 7
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <CC_Receive+0x178>
 440:	00 c0       	rjmp	.+0      	; 0x442 <CC_Receive+0x17e>
 442:	00 00       	nop
			_delay_ms(1);
			ccxxx0_Strobe(CCxxx0_SFRX); // flush rx buf
 444:	8a e3       	ldi	r24, 0x3A	; 58
 446:	74 de       	rcall	.-792    	; 0x130 <ccxxx0_Strobe>
			ccxxx0_Strobe(CCxxx0_SRX); // goto rx mode
 448:	84 e3       	ldi	r24, 0x34	; 52
 44a:	72 de       	rcall	.-796    	; 0x130 <ccxxx0_Strobe>
 44c:	72 cf       	rjmp	.-284    	; 0x332 <CC_Receive+0x6e>

0000044e <main>:

	/*uint8_t rssi_dec;
	int16_t rssi_dBm;
	uint8_t rssi_offset = 74; // CC1101 at 433 MHz*/
	
	cli(); 							//Clears the global interrupts			
 44e:	f8 94       	cli
	ATMEGA_Init();
 450:	42 de       	rcall	.-892    	; 0xd6 <ATMEGA_Init>
	sei(); 
 452:	78 94       	sei
 454:	2f ef       	ldi	r18, 0xFF	; 255
 456:	83 ed       	ldi	r24, 0xD3	; 211
 458:	90 e3       	ldi	r25, 0x30	; 48
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <main+0xc>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__stack+0x5>
 464:	00 00       	nop

	//transmit_string_UART0((unsigned char *)"cc1101_PowerOnReset\r\n");
	_delay_ms(2000);
	ccxxx0_PowerOnReset();
 466:	9c de       	rcall	.-712    	; 0x1a0 <ccxxx0_PowerOnReset>
	//PORTC=0x01;
//	_delay_ms(1000);
	//transmit_string_UART0((unsigned char *)"cc1101_Setup\r\n");
	ccxxx0_Setup(&rfSettings);
 468:	81 e6       	ldi	r24, 0x61	; 97
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	bc de       	rcall	.-648    	; 0x1e6 <ccxxx0_Setup>
	//transmit_string_UART0((unsigned char *)"Started\r\n");
	unsigned char part = 'b';
	part = ccxxx0_Read(CCxxx0_VERSION);
 46e:	81 ef       	ldi	r24, 0xF1	; 241
 470:	44 de       	rcall	.-888    	; 0xfa <ccxxx0_Read>
		//transmit_string_UART0(address);

		while(1)
		{
			//toggle_ind=PINC;
			CC_Receive();
 472:	28 df       	rcall	.-432    	; 0x2c4 <CC_Receive>

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
