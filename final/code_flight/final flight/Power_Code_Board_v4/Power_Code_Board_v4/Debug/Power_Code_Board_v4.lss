
Power_Code_Board_v4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000007fe  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800076  00800076  000008a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099b  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000345  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004df  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cf  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078e  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00002999  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_1>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  34:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_13>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_19>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  54:	09 02       	muls	r16, r25
  56:	44 02       	muls	r20, r20
  58:	44 02       	muls	r20, r20
  5a:	44 02       	muls	r20, r20
  5c:	44 02       	muls	r20, r20
  5e:	44 02       	muls	r20, r20
  60:	44 02       	muls	r20, r20
  62:	44 02       	muls	r20, r20
  64:	09 02       	muls	r16, r25
  66:	44 02       	muls	r20, r20
  68:	44 02       	muls	r20, r20
  6a:	44 02       	muls	r20, r20
  6c:	44 02       	muls	r20, r20
  6e:	44 02       	muls	r20, r20
  70:	44 02       	muls	r20, r20
  72:	44 02       	muls	r20, r20
  74:	09 02       	muls	r16, r25
  76:	44 02       	muls	r20, r20
  78:	44 02       	muls	r20, r20
  7a:	44 02       	muls	r20, r20
  7c:	44 02       	muls	r20, r20
  7e:	44 02       	muls	r20, r20
  80:	44 02       	muls	r20, r20
  82:	44 02       	muls	r20, r20
  84:	09 02       	muls	r16, r25
  86:	44 02       	muls	r20, r20
  88:	44 02       	muls	r20, r20
  8a:	44 02       	muls	r20, r20
  8c:	44 02       	muls	r20, r20
  8e:	44 02       	muls	r20, r20
  90:	44 02       	muls	r20, r20
  92:	44 02       	muls	r20, r20
  94:	33 02       	muls	r19, r19
  96:	44 02       	muls	r20, r20
  98:	44 02       	muls	r20, r20
  9a:	44 02       	muls	r20, r20
  9c:	44 02       	muls	r20, r20
  9e:	44 02       	muls	r20, r20
  a0:	44 02       	muls	r20, r20
  a2:	44 02       	muls	r20, r20
  a4:	44 02       	muls	r20, r20
  a6:	44 02       	muls	r20, r20
  a8:	44 02       	muls	r20, r20
  aa:	44 02       	muls	r20, r20
  ac:	44 02       	muls	r20, r20
  ae:	44 02       	muls	r20, r20
  b0:	44 02       	muls	r20, r20
  b2:	44 02       	muls	r20, r20
  b4:	33 02       	muls	r19, r19
  b6:	44 02       	muls	r20, r20
  b8:	44 02       	muls	r20, r20
  ba:	44 02       	muls	r20, r20
  bc:	44 02       	muls	r20, r20
  be:	44 02       	muls	r20, r20
  c0:	44 02       	muls	r20, r20
  c2:	44 02       	muls	r20, r20
  c4:	44 02       	muls	r20, r20
  c6:	44 02       	muls	r20, r20
  c8:	44 02       	muls	r20, r20
  ca:	44 02       	muls	r20, r20
  cc:	44 02       	muls	r20, r20
  ce:	44 02       	muls	r20, r20
  d0:	44 02       	muls	r20, r20
  d2:	44 02       	muls	r20, r20
  d4:	41 02       	muls	r20, r17
  d6:	44 02       	muls	r20, r20
  d8:	44 02       	muls	r20, r20
  da:	44 02       	muls	r20, r20
  dc:	44 02       	muls	r20, r20
  de:	44 02       	muls	r20, r20
  e0:	44 02       	muls	r20, r20
  e2:	44 02       	muls	r20, r20
  e4:	0d 02       	muls	r16, r29

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d8 e0       	ldi	r29, 0x08	; 8
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ee ef       	ldi	r30, 0xFE	; 254
  fa:	f7 e0       	ldi	r31, 0x07	; 7
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	a6 37       	cpi	r26, 0x76	; 118
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	a6 e7       	ldi	r26, 0x76	; 118
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	a3 39       	cpi	r26, 0x93	; 147
 114:	b2 07       	cpc	r27, r18
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	0e 94 a2 02 	call	0x544	; 0x544 <main>
 11c:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_exit>

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <init_UART>:


void init_UART(void )
{

  UCSRA = 0;
 124:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 126:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 128:	10 bc       	out	0x20, r1	; 32
  
  ///Double Baud Rate
  UCSRA |= _BV(U2X);
 12a:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |= _BV(RXEN); //| _BV(TXEN);
 12c:	54 9a       	sbi	0x0a, 4	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |= _BV(UCSZ1) | _BV(UCSZ0);
 12e:	80 b5       	in	r24, 0x20	; 32
 130:	86 60       	ori	r24, 0x06	; 6
 132:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  
  UBRRL = 103;
 134:	87 e6       	ldi	r24, 0x67	; 103
 136:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 138:	10 bc       	out	0x20, r1	; 32
 13a:	08 95       	ret

0000013c <receive_UART>:
}


uint8_t receive_UART(void)
{
  while ((UCSRA & (1 << RXC)) == 0);
 13c:	5f 9b       	sbis	0x0b, 7	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <receive_UART>
  return UDR;
 140:	8c b1       	in	r24, 0x0c	; 12
}
 142:	08 95       	ret

00000144 <isKillCodeRxd>:
* Kill Code to send: 'killpratham'
* Reset Code to send: 'resetpratham'
* To be used for Atmega 32
* Returns uint8_t value 1 if Kill Code Rxd else returns uint8_t value 0
*/
uint8_t isKillCodeRxd() {
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	64 97       	sbiw	r28, 0x14	; 20
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char mystring[20], x, i = 0;
	//Receive the First Character from UART.
	char startChar = UDR;
 15a:	8c b1       	in	r24, 0x0c	; 12
	
	//Only go ahead with the validation logic IF the first character is 'k'
	if (startChar == 'k') {
 15c:	8b 36       	cpi	r24, 0x6B	; 107
 15e:	09 f5       	brne	.+66     	; 0x1a2 <isKillCodeRxd+0x5e>
 160:	09 c0       	rjmp	.+18     	; 0x174 <isKillCodeRxd+0x30>
		//Keep Receiving till the character 'm' is encountered
		while (((x = receive_UART()) != 'm')) {
			mystring[i] = x;
 162:	e1 e0       	ldi	r30, 0x01	; 1
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ec 0f       	add	r30, r28
 168:	fd 1f       	adc	r31, r29
 16a:	e1 0f       	add	r30, r17
 16c:	f1 1d       	adc	r31, r1
 16e:	80 83       	st	Z, r24
			i++;
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	01 c0       	rjmp	.+2      	; 0x176 <isKillCodeRxd+0x32>
 174:	10 e0       	ldi	r17, 0x00	; 0
	char startChar = UDR;
	
	//Only go ahead with the validation logic IF the first character is 'k'
	if (startChar == 'k') {
		//Keep Receiving till the character 'm' is encountered
		while (((x = receive_UART()) != 'm')) {
 176:	0e 94 9e 00 	call	0x13c	; 0x13c <receive_UART>
 17a:	8d 36       	cpi	r24, 0x6D	; 109
 17c:	91 f7       	brne	.-28     	; 0x162 <isKillCodeRxd+0x1e>
			mystring[i] = x;
			i++;

		}
		//Add null character to terminate the string
		mystring[i] = '\0';
 17e:	e1 e0       	ldi	r30, 0x01	; 1
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	e1 0f       	add	r30, r17
 188:	f1 1d       	adc	r31, r1
 18a:	10 82       	st	Z, r1

		//Actual comparison Logic. First and last character already checked, hence only 'illpratha' is checked.
		//strstr checks whether |mystring| contains "illpratha", this is for the case when some previous command gets pre/suf-fixed with "killpratham".
		if (strstr(mystring, "lliuraptah") != NULL) {
 18c:	60 e6       	ldi	r22, 0x60	; 96
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <strstr>
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	89 2b       	or	r24, r25
 19c:	31 f5       	brne	.+76     	; 0x1ea <isKillCodeRxd+0xa6>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	24 c0       	rjmp	.+72     	; 0x1ea <isKillCodeRxd+0xa6>

		//Flush the |mystring| array to contain all '0's.
		for (int j = 0; j < 20; j++) {
			mystring[j] = '0';
		}
		} else if (startChar == 'r') {
 1a2:	82 37       	cpi	r24, 0x72	; 114
 1a4:	59 f0       	breq	.+22     	; 0x1bc <isKillCodeRxd+0x78>
		for (int j = 0; j < 20; j++) {
			mystring[j] = '0';
		}
	}
	
	return 0;
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	20 c0       	rjmp	.+64     	; 0x1ea <isKillCodeRxd+0xa6>
			mystring[j] = '0';
		}
		} else if (startChar == 'r') {
		//Keep Receiving till the character 'm' is encountered
		while (((x = receive_UART()) != 'm')) {
			mystring[i] = x;
 1aa:	e1 e0       	ldi	r30, 0x01	; 1
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ec 0f       	add	r30, r28
 1b0:	fd 1f       	adc	r31, r29
 1b2:	e1 0f       	add	r30, r17
 1b4:	f1 1d       	adc	r31, r1
 1b6:	80 83       	st	Z, r24
			i++;
 1b8:	1f 5f       	subi	r17, 0xFF	; 255
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <isKillCodeRxd+0x7a>
 1bc:	10 e0       	ldi	r17, 0x00	; 0
		for (int j = 0; j < 20; j++) {
			mystring[j] = '0';
		}
		} else if (startChar == 'r') {
		//Keep Receiving till the character 'm' is encountered
		while (((x = receive_UART()) != 'm')) {
 1be:	0e 94 9e 00 	call	0x13c	; 0x13c <receive_UART>
 1c2:	8d 36       	cpi	r24, 0x6D	; 109
 1c4:	91 f7       	brne	.-28     	; 0x1aa <isKillCodeRxd+0x66>
			mystring[i] = x;
			i++;

		}
		//Add null character to terminate the string
		mystring[i] = '\0';
 1c6:	e1 e0       	ldi	r30, 0x01	; 1
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ec 0f       	add	r30, r28
 1cc:	fd 1f       	adc	r31, r29
 1ce:	e1 0f       	add	r30, r17
 1d0:	f1 1d       	adc	r31, r1
 1d2:	10 82       	st	Z, r1

		//Actual comparison Logic. First and last character already checked, hence only 'illpratha' is checked.
		//strstr checks whether |mystring| contains "illpratha", this is for the case when some previous command gets pre/suf-fixed with "killpratham".
		if (strstr(mystring, "esetpratha") != NULL) {
 1d4:	6b e6       	ldi	r22, 0x6B	; 107
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <strstr>
 1e0:	89 2b       	or	r24, r25
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <isKillCodeRxd+0xa4>
			return 2;
		}
		else {
			return 0;
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <isKillCodeRxd+0xa6>
		mystring[i] = '\0';

		//Actual comparison Logic. First and last character already checked, hence only 'illpratha' is checked.
		//strstr checks whether |mystring| contains "illpratha", this is for the case when some previous command gets pre/suf-fixed with "killpratham".
		if (strstr(mystring, "esetpratha") != NULL) {
			return 2;
 1e8:	22 e0       	ldi	r18, 0x02	; 2
		}
	}
	
	return 0;

}
 1ea:	82 2f       	mov	r24, r18
 1ec:	64 96       	adiw	r28, 0x14	; 20
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	08 95       	ret

00000200 <Shutdown>:
	HM_Data[0] = 0xC8;
}

void Shutdown() // Turn off all loads
{
	PORTA = 0xC0;
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x00;
 204:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
 206:	15 ba       	out	0x15, r1	; 21
	PORTD = 0xC0;
 208:	82 bb       	out	0x12, r24	; 18
	HM_Data[0] = 0x00;
 20a:	10 92 8a 00 	sts	0x008A, r1
 20e:	08 95       	ret

00000210 <PowerSavingMode>:
}

void PowerSavingMode(void) //Keep only Beacon On. To be entered when Vbat<6.6V 
{
	if(beacon == 1)
 210:	80 91 79 00 	lds	r24, 0x0079
 214:	90 91 7a 00 	lds	r25, 0x007A
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	51 f4       	brne	.+20     	; 0x230 <PowerSavingMode+0x20>
	{
	PORTA = 0xC0;
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x01;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	88 bb       	out	0x18, r24	; 24
	PORTC = 0x00;
 224:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x80;
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	82 bb       	out	0x12, r24	; 18
	HM_Data[0] = 0x80;
 22a:	80 93 8a 00 	sts	0x008A, r24
 22e:	08 95       	ret
	}
	else{
		Shutdown();
 230:	0e 94 00 01 	call	0x200	; 0x200 <Shutdown>
	HM_Data[0] = 0x00;
 234:	10 92 8a 00 	sts	0x008A, r1
 238:	08 95       	ret

0000023a <OBCcommandResponse>:
	}
}

void OBCcommandResponse (void) // Switch loads on and off depending on Command of OBC
{
	if((CommandByte & 0x80) == 0x80) //Beacon
 23a:	80 91 91 00 	lds	r24, 0x0091
 23e:	90 91 92 00 	lds	r25, 0x0092
 242:	87 ff       	sbrs	r24, 7
 244:	09 c0       	rjmp	.+18     	; 0x258 <OBCcommandResponse+0x1e>
	{
		PORTB |= (1<<PB0);  // Enable TPS of Beacon
 246:	c0 9a       	sbi	0x18, 0	; 24
		PORTD &= ~(1<<PD6); // Disable Inhibit PTH of Beacon
 248:	96 98       	cbi	0x12, 6	; 18
		beacon = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 7a 00 	sts	0x007A, r25
 252:	80 93 79 00 	sts	0x0079, r24
 256:	06 c0       	rjmp	.+12     	; 0x264 <OBCcommandResponse+0x2a>
	}
	else
	{
		PORTB &= ~(1<<PB0);  // Disable TPS of Beacon
 258:	c0 98       	cbi	0x18, 0	; 24
		PORTD |= (1<<PD6);  // Inhibit PTH of Beacon
 25a:	96 9a       	sbi	0x12, 6	; 18
		beacon = 0;
 25c:	10 92 7a 00 	sts	0x007A, r1
 260:	10 92 79 00 	sts	0x0079, r1
	}
	
	if((CommandByte & 0x40) == 0x40) //Control
 264:	80 91 91 00 	lds	r24, 0x0091
 268:	90 91 92 00 	lds	r25, 0x0092
 26c:	86 ff       	sbrs	r24, 6
 26e:	03 c0       	rjmp	.+6      	; 0x276 <OBCcommandResponse+0x3c>
	{
		PORTD |= (1<<PD4);  //Enable TPS of Control
 270:	94 9a       	sbi	0x12, 4	; 18
		PORTD &= ~(1<<PD7); // Turn off Inhibit of PTH of Control
 272:	97 98       	cbi	0x12, 7	; 18
 274:	02 c0       	rjmp	.+4      	; 0x27a <OBCcommandResponse+0x40>
	}
	else
	{
		PORTD &= ~(1<<PD4); // Disable TPS of Control
 276:	94 98       	cbi	0x12, 4	; 18
		PORTD |= (1<<PD7);// Inhibit PTH of Control
 278:	97 9a       	sbi	0x12, 7	; 18
	}
	
	if((CommandByte & 0x20) == 0x20) //GPS
 27a:	80 91 91 00 	lds	r24, 0x0091
 27e:	90 91 92 00 	lds	r25, 0x0092
 282:	85 ff       	sbrs	r24, 5
 284:	03 c0       	rjmp	.+6      	; 0x28c <OBCcommandResponse+0x52>
	{
		PORTC |= (1<<PC7); //Enable TPS of GPS
 286:	af 9a       	sbi	0x15, 7	; 21
		PORTA &= ~(1<<PA6);// Turn off Inhibit of PTH of GPS
 288:	de 98       	cbi	0x1b, 6	; 27
 28a:	02 c0       	rjmp	.+4      	; 0x290 <OBCcommandResponse+0x56>
	}
	else
	{
		PORTC &= ~(1<<PC7);// Disable TPS of GPS
 28c:	af 98       	cbi	0x15, 7	; 21
		PORTA |= (1<<PA6);// Inhibit PTH of GPS
 28e:	de 9a       	sbi	0x1b, 6	; 27
	}
	
	
	if((CommandByte & 0x08) == 0x08) //OBC
 290:	80 91 91 00 	lds	r24, 0x0091
 294:	90 91 92 00 	lds	r25, 0x0092
 298:	83 ff       	sbrs	r24, 3
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <OBCcommandResponse+0x68>
	{
		PORTC |= (1<<PC2);// Enable TPS of OBC
 29c:	aa 9a       	sbi	0x15, 2	; 21
		PORTA &= ~(1<<PA7);// Turn off Inhibit of PTH of OBC
 29e:	df 98       	cbi	0x1b, 7	; 27
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <OBCcommandResponse+0x6c>
	}
	else
	{
		PORTC &= ~(1<<PC2);// Disable TPS of OBC
 2a2:	aa 98       	cbi	0x15, 2	; 21
		PORTA |= (1<<PA7);// Inhibit PTH of OBC
 2a4:	df 9a       	sbi	0x1b, 7	; 27
	}
	
	if((CommandByte & 0x04) == 0x04) //MAG
 2a6:	80 91 91 00 	lds	r24, 0x0091
 2aa:	90 91 92 00 	lds	r25, 0x0092
 2ae:	82 ff       	sbrs	r24, 2
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <OBCcommandResponse+0x7c>
	{
		PORTB |= (1<<PB3);// Enable switch of MAG
 2b2:	c3 9a       	sbi	0x18, 3	; 24
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <OBCcommandResponse+0x7e>
	}
	else
	{
		PORTB &= ~(1<<PB3);// Disable switch of MAG
 2b6:	c3 98       	cbi	0x18, 3	; 24
	}
	
	if((HM_Data[0] & 0x10) == 0x10)
 2b8:	80 91 8a 00 	lds	r24, 0x008A
 2bc:	84 ff       	sbrs	r24, 4
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <OBCcommandResponse+0xae>
	{
		if((CommandByte & 0x10) == 0x10) //Downlink
 2c0:	80 91 91 00 	lds	r24, 0x0091
 2c4:	90 91 92 00 	lds	r25, 0x0092
 2c8:	84 ff       	sbrs	r24, 4
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <OBCcommandResponse+0x98>
		{
			PORTB |= (1<<PB2);// Enable TPS of Downlink
 2cc:	c2 9a       	sbi	0x18, 2	; 24
			PORTD &= ~(1<<PD6);// Turn off Inhibit of PTH of Downlink
 2ce:	96 98       	cbi	0x12, 6	; 18
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <OBCcommandResponse+0x9a>
		}
		else
		{
			PORTB &= ~(1<<PB2);// Disable TPS of Downlink
 2d2:	c2 98       	cbi	0x18, 2	; 24
			//PORTD |= (1<<PD7);// Can't inhibit PTH as beacon connected to same PTH
		}
	
	
		if ((CommandByte & 0x02) == 0x02)
 2d4:	80 91 91 00 	lds	r24, 0x0091
 2d8:	90 91 92 00 	lds	r25, 0x0092
 2dc:	81 ff       	sbrs	r24, 1
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <OBCcommandResponse+0xaa>
		{
			PORTC |= (1<<PC6); //Enable Uplink
 2e0:	ae 9a       	sbi	0x15, 6	; 21
 2e2:	15 c0       	rjmp	.+42     	; 0x30e <OBCcommandResponse+0xd4>
		}
		else
		{
			PORTC &= ~(1<<PC6);//Disable Uplink
 2e4:	ae 98       	cbi	0x15, 6	; 21
 2e6:	13 c0       	rjmp	.+38     	; 0x30e <OBCcommandResponse+0xd4>
		}
	}
	else
	{
		if ((CommandByte & 0x02) == 0x02)
 2e8:	80 91 91 00 	lds	r24, 0x0091
 2ec:	90 91 92 00 	lds	r25, 0x0092
 2f0:	81 ff       	sbrs	r24, 1
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <OBCcommandResponse+0xbe>
		{
			PORTC |= (1<<PC6); //Enable Uplink
 2f4:	ae 9a       	sbi	0x15, 6	; 21
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <OBCcommandResponse+0xc0>
		}
		else
		{
			PORTC &= ~(1<<PC6);//Disable Uplink
 2f8:	ae 98       	cbi	0x15, 6	; 21
		}
		
		if((CommandByte & 0x10) == 0x10) //Downlink
 2fa:	80 91 91 00 	lds	r24, 0x0091
 2fe:	90 91 92 00 	lds	r25, 0x0092
 302:	84 ff       	sbrs	r24, 4
 304:	03 c0       	rjmp	.+6      	; 0x30c <OBCcommandResponse+0xd2>
		{
			PORTB |= (1<<PB2);// Enable TPS of Downlink
 306:	c2 9a       	sbi	0x18, 2	; 24
			PORTD &= ~(1<<PD6);// Turn off Inhibit of PTH of Downlink
 308:	96 98       	cbi	0x12, 6	; 18
 30a:	01 c0       	rjmp	.+2      	; 0x30e <OBCcommandResponse+0xd4>
		}
		else
		{
			PORTB &= ~(1<<PB2);// Disable TPS of Downlink
 30c:	c2 98       	cbi	0x18, 2	; 24
	
	
	
	
	
	HM_Data[0] = CommandByte; 
 30e:	80 91 91 00 	lds	r24, 0x0091
 312:	90 91 92 00 	lds	r25, 0x0092
 316:	80 93 8a 00 	sts	0x008A, r24
 31a:	08 95       	ret

0000031c <ADC_Convert>:
}

uint8_t ADC_Convert( int channel)// ADC Initialization and Conversion combined in one function. Channel in switch case corresponds to the HM_Data number. See the assigned numbers on top
{
	switch(channel)
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	91 05       	cpc	r25, r1
 320:	49 f1       	breq	.+82     	; 0x374 <ADC_Convert+0x58>
 322:	34 f4       	brge	.+12     	; 0x330 <ADC_Convert+0x14>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	91 05       	cpc	r25, r1
 328:	49 f0       	breq	.+18     	; 0x33c <ADC_Convert+0x20>
 32a:	02 97       	sbiw	r24, 0x02	; 2
 32c:	a9 f0       	breq	.+42     	; 0x358 <ADC_Convert+0x3c>
 32e:	4c c0       	rjmp	.+152    	; 0x3c8 <ADC_Convert+0xac>
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	91 05       	cpc	r25, r1
 334:	69 f1       	breq	.+90     	; 0x390 <ADC_Convert+0x74>
 336:	05 97       	sbiw	r24, 0x05	; 5
 338:	c9 f1       	breq	.+114    	; 0x3ac <ADC_Convert+0x90>
 33a:	46 c0       	rjmp	.+140    	; 0x3c8 <ADC_Convert+0xac>
	{
		case 1: ADMUX = 0x61; // v1- Battery Voltage by 3
 33c:	81 e6       	ldi	r24, 0x61	; 97
 33e:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
 340:	85 ec       	ldi	r24, 0xC5	; 197
 342:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	8f e1       	ldi	r24, 0x1F	; 31
 346:	9e e4       	ldi	r25, 0x4E	; 78
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <ADC_Convert+0x2c>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <ADC_Convert+0x32>
 34e:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
 350:	36 99       	sbic	0x06, 6	; 6
 352:	fe cf       	rjmp	.-4      	; 0x350 <ADC_Convert+0x34>
		return ADCH;
 354:	85 b1       	in	r24, 0x05	; 5
 356:	08 95       	ret
		break;
		
		case 2:	ADMUX = 0x63;//v3 - OBC Voltage by 2
 358:	83 e6       	ldi	r24, 0x63	; 99
 35a:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
 35c:	85 ec       	ldi	r24, 0xC5	; 197
 35e:	86 b9       	out	0x06, r24	; 6
 360:	8f e1       	ldi	r24, 0x1F	; 31
 362:	9e e4       	ldi	r25, 0x4E	; 78
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <ADC_Convert+0x48>
 368:	00 c0       	rjmp	.+0      	; 0x36a <ADC_Convert+0x4e>
 36a:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
 36c:	36 99       	sbic	0x06, 6	; 6
 36e:	fe cf       	rjmp	.-4      	; 0x36c <ADC_Convert+0x50>
		return ADCH;
 370:	85 b1       	in	r24, 0x05	; 5
 372:	08 95       	ret
		break;
		
		case 3: ADMUX = 0x64;//v2 - Downlink voltage by 2
 374:	84 e6       	ldi	r24, 0x64	; 100
 376:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
 378:	85 ec       	ldi	r24, 0xC5	; 197
 37a:	86 b9       	out	0x06, r24	; 6
 37c:	8f e1       	ldi	r24, 0x1F	; 31
 37e:	9e e4       	ldi	r25, 0x4E	; 78
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <ADC_Convert+0x64>
 384:	00 c0       	rjmp	.+0      	; 0x386 <ADC_Convert+0x6a>
 386:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
 388:	36 99       	sbic	0x06, 6	; 6
 38a:	fe cf       	rjmp	.-4      	; 0x388 <ADC_Convert+0x6c>
		return ADCH;
 38c:	85 b1       	in	r24, 0x05	; 5
 38e:	08 95       	ret
		break;
		
		case 4: ADMUX = 0x60;//i1 - Panel current
 390:	80 e6       	ldi	r24, 0x60	; 96
 392:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
 394:	85 ec       	ldi	r24, 0xC5	; 197
 396:	86 b9       	out	0x06, r24	; 6
 398:	8f e1       	ldi	r24, 0x1F	; 31
 39a:	9e e4       	ldi	r25, 0x4E	; 78
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <ADC_Convert+0x80>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <ADC_Convert+0x86>
 3a2:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
 3a4:	36 99       	sbic	0x06, 6	; 6
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <ADC_Convert+0x88>
		return ADCH;
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	08 95       	ret
		break;
		
		case 5: ADMUX = 0x62;//i2 - Consumption Current
 3ac:	82 e6       	ldi	r24, 0x62	; 98
 3ae:	87 b9       	out	0x07, r24	; 7
		ADCSRA = 0xC5;
 3b0:	85 ec       	ldi	r24, 0xC5	; 197
 3b2:	86 b9       	out	0x06, r24	; 6
 3b4:	8f e1       	ldi	r24, 0x1F	; 31
 3b6:	9e e4       	ldi	r25, 0x4E	; 78
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <ADC_Convert+0x9c>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <ADC_Convert+0xa2>
 3be:	00 00       	nop
		_delay_ms(10);
		while (ADCSRA & (1<<ADSC));
 3c0:	36 99       	sbic	0x06, 6	; 6
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <ADC_Convert+0xa4>
		return ADCH;
 3c4:	85 b1       	in	r24, 0x05	; 5
 3c6:	08 95       	ret
		break;
	}
}
 3c8:	08 95       	ret

000003ca <StartOBC>:
    }
}

void StartOBC()
{
	PORTC |= (1<<PC2);
 3ca:	aa 9a       	sbi	0x15, 2	; 21
	PORTA &= ~(1<<PA7);
 3cc:	df 98       	cbi	0x1b, 7	; 27
 3ce:	08 95       	ret

000003d0 <__vector_19>:
	PORTB |= (1<<PB2);// Enable TPS of Downlink
	PORTD &= ~(1<<PD6);// Turn off Inhibit of PTH of Downlink
}

ISR(TWI_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	//cli();
	//PORTB=0x0f;
	switch (TWSR & 0xF8)
 3f2:	81 b1       	in	r24, 0x01	; 1
 3f4:	e8 2f       	mov	r30, r24
 3f6:	e8 7f       	andi	r30, 0xF8	; 248
 3f8:	8e 2f       	mov	r24, r30
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	e0 56       	subi	r30, 0x60	; 96
 400:	f1 09       	sbc	r31, r1
 402:	e9 34       	cpi	r30, 0x49	; 73
 404:	f1 05       	cpc	r31, r1
 406:	08 f0       	brcs	.+2      	; 0x40a <__vector_19+0x3a>
 408:	3f c0       	rjmp	.+126    	; 0x488 <__vector_19+0xb8>
 40a:	e6 5d       	subi	r30, 0xD6	; 214
 40c:	ff 4f       	sbci	r31, 0xFF	; 255
 40e:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__tablejump2__>
		case TW_SR_GCALL_ACK:               // 0x70:     GCA+W has been received, ACK has been returned
		case TW_SR_ARB_LOST_GCALL_ACK:      // 0x78:     GCA+W has been received, ACK has been returned
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		// receive data byte and return ACK
		TWCR|=(1<<TWINT)|(1<<TWEA);//PORTB=0xf0;
 412:	86 b7       	in	r24, 0x36	; 54
 414:	80 6c       	ori	r24, 0xC0	; 192
 416:	86 bf       	out	0x36, r24	; 54
		//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
			break;
 418:	37 c0       	rjmp	.+110    	; 0x488 <__vector_19+0xb8>
		case TW_ST_SLA_ACK:
			                   TWDR= HM_Data[j];
 41a:	e0 91 76 00 	lds	r30, 0x0076
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	e6 57       	subi	r30, 0x76	; 118
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	80 81       	ld	r24, Z
 426:	83 b9       	out	0x03, r24	; 3
							   TWCR|= (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
 428:	86 b7       	in	r24, 0x36	; 54
 42a:	84 6c       	ori	r24, 0xC4	; 196
 42c:	86 bf       	out	0x36, r24	; 54
			                   j=j+1;          // Fill TWDR register whith the data to be sent
 42e:	80 91 76 00 	lds	r24, 0x0076
 432:	8f 5f       	subi	r24, 0xFF	; 255
 434:	80 93 76 00 	sts	0x0076, r24
			                   if(j==7){
 438:	80 91 76 00 	lds	r24, 0x0076
 43c:	87 30       	cpi	r24, 0x07	; 7
 43e:	21 f5       	brne	.+72     	; 0x488 <__vector_19+0xb8>
								   j=0;
 440:	10 92 76 00 	sts	0x0076, r1
								   if(i2c_after_reset>=1)
 444:	80 91 7f 00 	lds	r24, 0x007F
 448:	90 91 80 00 	lds	r25, 0x0080
 44c:	18 16       	cp	r1, r24
 44e:	19 06       	cpc	r1, r25
 450:	dc f4       	brge	.+54     	; 0x488 <__vector_19+0xb8>
								   {
									   i2c_after_reset = i2c_after_reset+1;		   }
 452:	80 91 7f 00 	lds	r24, 0x007F
 456:	90 91 80 00 	lds	r25, 0x0080
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 80 00 	sts	0x0080, r25
 460:	80 93 7f 00 	sts	0x007F, r24
 464:	11 c0       	rjmp	.+34     	; 0x488 <__vector_19+0xb8>
		case TW_ST_DATA_NACK:  
		break;
		case TW_SR_DATA_ACK:                // 0x80: data byte has been received, ACK has been returned
		case TW_SR_GCALL_DATA_ACK:          // 0x90: data byte has been received, ACK has been returned
		// get previously received data byte
		CommandByte=TWDR;
 466:	83 b1       	in	r24, 0x03	; 3
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 93 92 00 	sts	0x0092, r25
 46e:	80 93 91 00 	sts	0x0091, r24
		//write_data=~(recv_data);
		OBCcommandResponse();
 472:	0e 94 1d 01 	call	0x23a	; 0x23a <OBCcommandResponse>
		j = 0;
 476:	10 92 76 00 	sts	0x0076, r1
		TWCR|=(1<<TWINT)|(1<<TWEA);
 47a:	86 b7       	in	r24, 0x36	; 54
 47c:	80 6c       	ori	r24, 0xC0	; 192
 47e:	86 bf       	out	0x36, r24	; 54
		break;
 480:	03 c0       	rjmp	.+6      	; 0x488 <__vector_19+0xb8>
		case TW_SR_STOP:
        TWCR|= (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE);    //sei(); 
 482:	86 b7       	in	r24, 0x36	; 54
 484:	85 6c       	ori	r24, 0xC5	; 197
 486:	86 bf       	out	0x36, r24	; 54
		break;
			
	}
	TWCR|= (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 488:	86 b7       	in	r24, 0x36	; 54
 48a:	85 6c       	ori	r24, 0xC5	; 197
 48c:	86 bf       	out	0x36, r24	; 54
	//sei();
	//return 0;
} 
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__vector_1>:

ISR(INT0_vect)
{
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
	GICR&=~(1<<INT0);
 4c4:	8b b7       	in	r24, 0x3b	; 59
 4c6:	8f 7b       	andi	r24, 0xBF	; 191
 4c8:	8b bf       	out	0x3b, r24	; 59
 4ca:	88 eb       	ldi	r24, 0xB8	; 184
 4cc:	9b e0       	ldi	r25, 0x0B	; 11
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	39 e6       	ldi	r19, 0x69	; 105
 4d2:	48 e1       	ldi	r20, 0x18	; 24
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	30 40       	sbci	r19, 0x00	; 0
 4d8:	40 40       	sbci	r20, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__vector_1+0x24>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__vector_1+0x2e>
 4de:	00 00       	nop
 4e0:	01 97       	sbiw	r24, 0x01	; 1
	
	unsigned int count = 0;
	while(count!=3000)   //sleep for another 5min
 4e2:	a9 f7       	brne	.-22     	; 0x4ce <__vector_1+0x1e>
	{
		_delay_ms(1000);
		count = count+1;
	}
}
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_13>:

ISR(USART_RXC_vect) {
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	killFlag = isKillCodeRxd();
 51a:	0e 94 a2 00 	call	0x144	; 0x144 <isKillCodeRxd>
 51e:	80 93 81 00 	sts	0x0081, r24
	//PORTC &= ~(1<<PC2);
	//PORTA |= (1<<PA7);
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <main>:

void main(void)
{
	DDRA = 0xC0; // I have set the PF Check as Input. Verify!!
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<PB0)|(1<<PB2)|(1<<PB3); //Verify this way of assigning I/O to pins
 548:	87 b3       	in	r24, 0x17	; 23
 54a:	8d 60       	ori	r24, 0x0D	; 13
 54c:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1<<PC7)|(1<<PC2)|(1<<PC6);
 54e:	84 b3       	in	r24, 0x14	; 20
 550:	84 6c       	ori	r24, 0xC4	; 196
 552:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<PD7)|(1<<PD6)|(1<<PD4);
 554:	81 b3       	in	r24, 0x11	; 17
 556:	80 6d       	ori	r24, 0xD0	; 208
 558:	81 bb       	out	0x11, r24	; 17
	unsigned int ADC_Result;
	
	init_UART();
 55a:	0e 94 92 00 	call	0x124	; 0x124 <init_UART>
	UBRRL = 103;
 55e:	87 e6       	ldi	r24, 0x67	; 103
 560:	89 b9       	out	0x09, r24	; 9
	UCSRB |= _BV(RXCIE);
 562:	57 9a       	sbi	0x0a, 7	; 10
}

void TWI_init_slave(void) // Function to initilaize slave
{
//TWCR=0x01;
TWAR=0x20; // Fill slave address to TWAR
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	82 b9       	out	0x02, r24	; 2
	init_UART();
	UBRRL = 103;
	UCSRB |= _BV(RXCIE);
	
	TWI_init_slave(); // Function to initilaize slave
	TWCR|= (1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 568:	86 b7       	in	r24, 0x36	; 54
 56a:	85 6c       	ori	r24, 0xC5	; 197
 56c:	86 bf       	out	0x36, r24	; 54
	Shutdown();
 56e:	0e 94 00 01 	call	0x200	; 0x200 <Shutdown>
	GICR = (1<<INT0);
 572:	80 e4       	ldi	r24, 0x40	; 64
 574:	8b bf       	out	0x3b, r24	; 59
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 576:	85 b7       	in	r24, 0x35	; 53
 578:	8f 78       	andi	r24, 0x8F	; 143
 57a:	80 62       	ori	r24, 0x20	; 32
 57c:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0xA0;//Power down mode of sleep
 57e:	80 ea       	ldi	r24, 0xA0	; 160
 580:	85 bf       	out	0x35, r24	; 53
	
	sei();
 582:	78 94       	sei
	
	sleep_enable();
 584:	85 b7       	in	r24, 0x35	; 53
 586:	80 68       	ori	r24, 0x80	; 128
 588:	85 bf       	out	0x35, r24	; 53
	sleep_mode();
 58a:	85 b7       	in	r24, 0x35	; 53
 58c:	80 68       	ori	r24, 0x80	; 128
 58e:	85 bf       	out	0x35, r24	; 53
 590:	88 95       	sleep
 592:	85 b7       	in	r24, 0x35	; 53
 594:	8f 77       	andi	r24, 0x7F	; 127
 596:	85 bf       	out	0x35, r24	; 53
	sleep_disable();
 598:	85 b7       	in	r24, 0x35	; 53
 59a:	8f 77       	andi	r24, 0x7F	; 127
 59c:	85 bf       	out	0x35, r24	; 53
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	80 e7       	ldi	r24, 0x70	; 112
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x60>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x6a>
 5ae:	00 00       	nop
	
	_delay_ms(100);    //do not remove this delay. Atmega wakes up and keeps executing before going to interrupt for a finite amount of time.
	GICR&=~(1<<INT0);  //precaution so that another snap interrupt may not occur
 5b0:	8b b7       	in	r24, 0x3b	; 59
 5b2:	8f 7b       	andi	r24, 0xBF	; 191
 5b4:	8b bf       	out	0x3b, r24	; 59
	//Startup_all();
	StartOBC();
 5b6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <StartOBC>
 5ba:	2f ef       	ldi	r18, 0xFF	; 255
 5bc:	89 e6       	ldi	r24, 0x69	; 105
 5be:	98 e1       	ldi	r25, 0x18	; 24
 5c0:	21 50       	subi	r18, 0x01	; 1
 5c2:	80 40       	sbci	r24, 0x00	; 0
 5c4:	90 40       	sbci	r25, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <main+0x7c>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x86>
 5ca:	00 00       	nop
			while(1);}
			killFlag = 0;
			} else if (killFlag == 2) {//Reset Condition
				for(int i =0; i<6; i++)
				{
					HM_Data[i] = 0x00;
 5cc:	ca e8       	ldi	r28, 0x8A	; 138
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
				}
				i2c_after_reset = 1;
 5d0:	01 e0       	ldi	r16, 0x01	; 1
 5d2:	10 e0       	ldi	r17, 0x00	; 0
	StartOBC();
	//StartDown();
	_delay_ms(1000);
	while(1)
	{
		if (killFlag == 1) {//Kill Condition
 5d4:	80 91 81 00 	lds	r24, 0x0081
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	91 f4       	brne	.+36     	; 0x600 <main+0xbc>
			KillCounter = KillCounter+1;
 5dc:	80 91 77 00 	lds	r24, 0x0077
 5e0:	90 91 78 00 	lds	r25, 0x0078
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	90 93 78 00 	sts	0x0078, r25
 5ea:	80 93 77 00 	sts	0x0077, r24
			if(KillCounter == 3)
 5ee:	03 97       	sbiw	r24, 0x03	; 3
 5f0:	21 f4       	brne	.+8      	; 0x5fa <main+0xb6>
			{cli();
 5f2:	f8 94       	cli
			Shutdown();
 5f4:	0e 94 00 01 	call	0x200	; 0x200 <Shutdown>
			while(1);}
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <main+0xb4>
			killFlag = 0;
 5fa:	10 92 81 00 	sts	0x0081, r1
 5fe:	d3 c0       	rjmp	.+422    	; 0x7a6 <main+0x262>
			} else if (killFlag == 2) {//Reset Condition
 600:	80 91 81 00 	lds	r24, 0x0081
 604:	82 30       	cpi	r24, 0x02	; 2
 606:	09 f0       	breq	.+2      	; 0x60a <main+0xc6>
 608:	ce c0       	rjmp	.+412    	; 0x7a6 <main+0x262>
				for(int i =0; i<6; i++)
				{
					HM_Data[i] = 0x00;
 60a:	18 82       	st	Y, r1
 60c:	19 82       	std	Y+1, r1	; 0x01
 60e:	1a 82       	std	Y+2, r1	; 0x02
 610:	1b 82       	std	Y+3, r1	; 0x03
 612:	1c 82       	std	Y+4, r1	; 0x04
 614:	1d 82       	std	Y+5, r1	; 0x05
				}
				i2c_after_reset = 1;
 616:	10 93 80 00 	sts	0x0080, r17
 61a:	00 93 7f 00 	sts	0x007F, r16
				while(i2c_after_reset != 7);
 61e:	80 91 7f 00 	lds	r24, 0x007F
 622:	90 91 80 00 	lds	r25, 0x0080
 626:	07 97       	sbiw	r24, 0x07	; 7
 628:	d1 f7       	brne	.-12     	; 0x61e <main+0xda>
 62a:	2f ef       	ldi	r18, 0xFF	; 255
 62c:	89 e6       	ldi	r24, 0x69	; 105
 62e:	98 e1       	ldi	r25, 0x18	; 24
 630:	21 50       	subi	r18, 0x01	; 1
 632:	80 40       	sbci	r24, 0x00	; 0
 634:	90 40       	sbci	r25, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <main+0xec>
 638:	00 c0       	rjmp	.+0      	; 0x63a <main+0xf6>
 63a:	00 00       	nop
				_delay_ms(1000);
				cli();
 63c:	f8 94       	cli
			Shutdown();
 63e:	0e 94 00 01 	call	0x200	; 0x200 <Shutdown>
			i2c_after_reset = 0;
 642:	10 92 80 00 	sts	0x0080, r1
 646:	10 92 7f 00 	sts	0x007F, r1
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	81 e1       	ldi	r24, 0x11	; 17
 64e:	9a e7       	ldi	r25, 0x7A	; 122
 650:	21 50       	subi	r18, 0x01	; 1
 652:	80 40       	sbci	r24, 0x00	; 0
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <main+0x10c>
 658:	00 c0       	rjmp	.+0      	; 0x65a <main+0x116>
 65a:	00 00       	nop
			_delay_ms(5000);
			StartOBC();
 65c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <StartOBC>
 660:	2f ef       	ldi	r18, 0xFF	; 255
 662:	81 e1       	ldi	r24, 0x11	; 17
 664:	9a e7       	ldi	r25, 0x7A	; 122
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <main+0x122>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x12c>
 670:	00 00       	nop
			_delay_ms(5000);
			killFlag = 0;
 672:	10 92 81 00 	sts	0x0081, r1
			sei();
 676:	78 94       	sei
 678:	96 c0       	rjmp	.+300    	; 0x7a6 <main+0x262>

		}
		
	for(unsigned int i = 1; i<6;i=i+1)
		{
			ADC_Result = ADC_Convert(i);
 67a:	c7 01       	movw	r24, r14
 67c:	0e 94 8e 01 	call	0x31c	; 0x31c <ADC_Convert>
			HM_Data[i] = ADC_Result;//*3.3/256; Verify this
 680:	f7 01       	movw	r30, r14
 682:	e6 57       	subi	r30, 0x76	; 118
 684:	ff 4f       	sbci	r31, 0xFF	; 255
 686:	80 83       	st	Z, r24
			killFlag = 0;
			sei();

		}
		
	for(unsigned int i = 1; i<6;i=i+1)
 688:	2f ef       	ldi	r18, 0xFF	; 255
 68a:	e2 1a       	sub	r14, r18
 68c:	f2 0a       	sbc	r15, r18
 68e:	86 e0       	ldi	r24, 0x06	; 6
 690:	e8 16       	cp	r14, r24
 692:	f1 04       	cpc	r15, r1
 694:	91 f7       	brne	.-28     	; 0x67a <main+0x136>
			ADC_Result = ADC_Convert(i);
			HM_Data[i] = ADC_Result;//*3.3/256; Verify this
			//USARTWriteChar(HM_Data[i]);
		}
		
		OC5 = PIND&(1<<PD3); //OC of Downlink
 696:	20 b3       	in	r18, 0x10	; 16
 698:	28 70       	andi	r18, 0x08	; 8
 69a:	20 93 84 00 	sts	0x0084, r18
		OC4 = PINB&(1<<PB1);//OC of Beacon
 69e:	96 b3       	in	r25, 0x16	; 22
 6a0:	92 70       	andi	r25, 0x02	; 2
 6a2:	90 93 87 00 	sts	0x0087, r25
		OC6 = PIND&(1<<PD5);//OC of control/torque
 6a6:	40 b3       	in	r20, 0x10	; 16
 6a8:	40 72       	andi	r20, 0x20	; 32
 6aa:	40 93 82 00 	sts	0x0082, r20
		OC3 = PINC&(1<<PC3); //OC of OBC
 6ae:	83 b3       	in	r24, 0x13	; 19
 6b0:	88 70       	andi	r24, 0x08	; 8
 6b2:	80 93 89 00 	sts	0x0089, r24
		OC2 = PINC&(1<<PC4);//OC of GPS
 6b6:	33 b3       	in	r19, 0x13	; 19
 6b8:	30 71       	andi	r19, 0x10	; 16
 6ba:	30 93 88 00 	sts	0x0088, r19
		
		HM_Data[6] = (OC4<<6)|(OC6<<1)|(OC2<<1)|(OC5<<1)|OC3;
 6be:	92 95       	swap	r25
 6c0:	99 0f       	add	r25, r25
 6c2:	99 0f       	add	r25, r25
 6c4:	90 7c       	andi	r25, 0xC0	; 192
 6c6:	44 0f       	add	r20, r20
 6c8:	94 2b       	or	r25, r20
 6ca:	89 2b       	or	r24, r25
 6cc:	33 0f       	add	r19, r19
 6ce:	83 2b       	or	r24, r19
 6d0:	22 0f       	add	r18, r18
 6d2:	82 2b       	or	r24, r18
 6d4:	8e 83       	std	Y+6, r24	; 0x06
		
		if((HM_Data[6]&(0x08))==0)
 6d6:	8e 81       	ldd	r24, Y+6	; 0x06
 6d8:	83 fd       	sbrc	r24, 3
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <main+0x19e>
		{
			PORTC &= ~(1<<PC2);// Disable TPS of OBC
 6dc:	aa 98       	cbi	0x15, 2	; 21
			PORTA |= (1<<PA7);// Inhibit PTH of OBC
 6de:	df 9a       	sbi	0x1b, 7	; 27
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <main+0x1a2>
			
		}
		else
		{
			PORTC |= (1<<PC2);// Enable TPS of OBC
 6e2:	aa 9a       	sbi	0x15, 2	; 21
			PORTA &= ~(1<<PA7);// Turn off Inhibit of PTH of OBC
 6e4:	df 98       	cbi	0x1b, 7	; 27
*/


//*********************************Battery UnderVoltage Protection ***********************************************//
do{
	BatteryVoltage = ADC_Convert(1);
 6e6:	c8 01       	movw	r24, r16
 6e8:	0e 94 8e 01 	call	0x31c	; 0x31c <ADC_Convert>
 6ec:	80 93 85 00 	sts	0x0085, r24
	HM_Data[1] = BatteryVoltage;
 6f0:	89 83       	std	Y+1, r24	; 0x01
if((HM_Data[1] > 0xA2)&&(PowerSaving == 0)&&(Safe == 0)) ///>6.6V
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
{
	PowerSaving = 0;
	Safe = 0;
}

if((HM_Data[1] < 0xA2) && (HM_Data[1] > 0x93) && (PowerSaving == 0) && (Safe == 0))  //6 and 6.6V
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	82 3a       	cpi	r24, 0xA2	; 162
 6f8:	c8 f4       	brcc	.+50     	; 0x72c <main+0x1e8>
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	84 39       	cpi	r24, 0x94	; 148
 6fe:	b0 f0       	brcs	.+44     	; 0x72c <main+0x1e8>
 700:	80 91 7d 00 	lds	r24, 0x007D
 704:	90 91 7e 00 	lds	r25, 0x007E
 708:	89 2b       	or	r24, r25
 70a:	81 f4       	brne	.+32     	; 0x72c <main+0x1e8>
 70c:	80 91 7b 00 	lds	r24, 0x007B
 710:	90 91 7c 00 	lds	r25, 0x007C
 714:	89 2b       	or	r24, r25
 716:	51 f4       	brne	.+20     	; 0x72c <main+0x1e8>
{
PowerSaving = 1;
 718:	10 93 7e 00 	sts	0x007E, r17
 71c:	00 93 7d 00 	sts	0x007D, r16
Safe = 0;
 720:	10 92 7c 00 	sts	0x007C, r1
 724:	10 92 7b 00 	sts	0x007B, r1
PowerSavingMode();
 728:	0e 94 08 01 	call	0x210	; 0x210 <PowerSavingMode>
}

if(HM_Data[1] < 0x93) //6V
 72c:	99 81       	ldd	r25, Y+1	; 0x01
 72e:	93 39       	cpi	r25, 0x93	; 147
 730:	50 f4       	brcc	.+20     	; 0x746 <main+0x202>
{
	PowerSaving = 1;
 732:	10 93 7e 00 	sts	0x007E, r17
 736:	00 93 7d 00 	sts	0x007D, r16
	Safe = 1;
 73a:	10 93 7c 00 	sts	0x007C, r17
 73e:	00 93 7b 00 	sts	0x007B, r16



void SafeMode(void) //To be entered when Vbat<6V
{
	Shutdown();
 742:	0e 94 00 01 	call	0x200	; 0x200 <Shutdown>
	Safe = 1;
	SafeMode();
}


if(Safe == 1)
 746:	20 91 7b 00 	lds	r18, 0x007B
 74a:	30 91 7c 00 	lds	r19, 0x007C
 74e:	21 30       	cpi	r18, 0x01	; 1
 750:	31 05       	cpc	r19, r1
 752:	49 f4       	brne	.+18     	; 0x766 <main+0x222>
{
if(HM_Data[1] > 0xAC)//7V
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	8d 3a       	cpi	r24, 0xAD	; 173
 758:	40 f1       	brcs	.+80     	; 0x7aa <main+0x266>
{
Safe = 0;
 75a:	10 92 7c 00 	sts	0x007C, r1
 75e:	10 92 7b 00 	sts	0x007B, r1
PowerSavingMode();
 762:	0e 94 08 01 	call	0x210	; 0x210 <PowerSavingMode>
}
}

if(PowerSaving == 1)
 766:	20 91 7d 00 	lds	r18, 0x007D
 76a:	30 91 7e 00 	lds	r19, 0x007E
 76e:	21 30       	cpi	r18, 0x01	; 1
 770:	31 05       	cpc	r19, r1
 772:	89 f4       	brne	.+34     	; 0x796 <main+0x252>
{
	if(HM_Data[1] > 0xC6)//8v
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	87 3c       	cpi	r24, 0xC7	; 199
 778:	08 f4       	brcc	.+2      	; 0x77c <main+0x238>
 77a:	b5 cf       	rjmp	.-150    	; 0x6e6 <main+0x1a2>
	{
		PowerSaving = 0;
 77c:	10 92 7e 00 	sts	0x007E, r1
 780:	10 92 7d 00 	sts	0x007D, r1
		StartOBC();
 784:	0e 94 e5 01 	call	0x3ca	; 0x3ca <StartOBC>
	}
} }while((PowerSaving == 1)||(Safe == 1));
 788:	80 91 7d 00 	lds	r24, 0x007D
 78c:	90 91 7e 00 	lds	r25, 0x007E
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	09 f4       	brne	.+2      	; 0x796 <main+0x252>
 794:	a8 cf       	rjmp	.-176    	; 0x6e6 <main+0x1a2>
 796:	80 91 7b 00 	lds	r24, 0x007B
 79a:	90 91 7c 00 	lds	r25, 0x007C
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <main+0x260>
 7a2:	a1 cf       	rjmp	.-190    	; 0x6e6 <main+0x1a2>
 7a4:	17 cf       	rjmp	.-466    	; 0x5d4 <main+0x90>
	//PORTC &= ~(1<<PC2);
	//PORTA |= (1<<PA7);
}

void main(void)
{
 7a6:	78 01       	movw	r14, r16
 7a8:	68 cf       	rjmp	.-304    	; 0x67a <main+0x136>
Safe = 0;
PowerSavingMode();
}
}

if(PowerSaving == 1)
 7aa:	80 91 7d 00 	lds	r24, 0x007D
 7ae:	90 91 7e 00 	lds	r25, 0x007E
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <main+0x274>
 7b6:	97 cf       	rjmp	.-210    	; 0x6e6 <main+0x1a2>
 7b8:	dd cf       	rjmp	.-70     	; 0x774 <main+0x230>

000007ba <__tablejump2__>:
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	05 90       	lpm	r0, Z+
 7c0:	f4 91       	lpm	r31, Z
 7c2:	e0 2d       	mov	r30, r0
 7c4:	09 94       	ijmp

000007c6 <strstr>:
 7c6:	fb 01       	movw	r30, r22
 7c8:	51 91       	ld	r21, Z+
 7ca:	55 23       	and	r21, r21
 7cc:	a9 f0       	breq	.+42     	; 0x7f8 <strstr+0x32>
 7ce:	bf 01       	movw	r22, r30
 7d0:	dc 01       	movw	r26, r24
 7d2:	4d 91       	ld	r20, X+
 7d4:	45 17       	cp	r20, r21
 7d6:	41 11       	cpse	r20, r1
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <strstr+0xc>
 7da:	59 f4       	brne	.+22     	; 0x7f2 <strstr+0x2c>
 7dc:	cd 01       	movw	r24, r26
 7de:	01 90       	ld	r0, Z+
 7e0:	00 20       	and	r0, r0
 7e2:	49 f0       	breq	.+18     	; 0x7f6 <strstr+0x30>
 7e4:	4d 91       	ld	r20, X+
 7e6:	40 15       	cp	r20, r0
 7e8:	41 11       	cpse	r20, r1
 7ea:	c9 f3       	breq	.-14     	; 0x7de <strstr+0x18>
 7ec:	fb 01       	movw	r30, r22
 7ee:	41 11       	cpse	r20, r1
 7f0:	ef cf       	rjmp	.-34     	; 0x7d0 <strstr+0xa>
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	08 95       	ret

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
