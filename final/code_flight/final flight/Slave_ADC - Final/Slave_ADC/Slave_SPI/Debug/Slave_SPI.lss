
Slave_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  00800062  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000623  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000194  00000000  00000000  00000973  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001aa  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000275  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042a  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
   2:	39 c0       	rjmp	.+114    	; 0x76 <__bad_interrupt>
   4:	38 c0       	rjmp	.+112    	; 0x76 <__bad_interrupt>
   6:	37 c0       	rjmp	.+110    	; 0x76 <__bad_interrupt>
   8:	36 c0       	rjmp	.+108    	; 0x76 <__bad_interrupt>
   a:	35 c0       	rjmp	.+106    	; 0x76 <__bad_interrupt>
   c:	34 c0       	rjmp	.+104    	; 0x76 <__bad_interrupt>
   e:	33 c0       	rjmp	.+102    	; 0x76 <__bad_interrupt>
  10:	32 c0       	rjmp	.+100    	; 0x76 <__bad_interrupt>
  12:	31 c0       	rjmp	.+98     	; 0x76 <__bad_interrupt>
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_10>
  16:	2f c0       	rjmp	.+94     	; 0x76 <__bad_interrupt>
  18:	2e c0       	rjmp	.+92     	; 0x76 <__bad_interrupt>
  1a:	2d c0       	rjmp	.+90     	; 0x76 <__bad_interrupt>
  1c:	2c c0       	rjmp	.+88     	; 0x76 <__bad_interrupt>
  1e:	2b c0       	rjmp	.+86     	; 0x76 <__bad_interrupt>
  20:	2a c0       	rjmp	.+84     	; 0x76 <__bad_interrupt>
  22:	29 c0       	rjmp	.+82     	; 0x76 <__bad_interrupt>
  24:	28 c0       	rjmp	.+80     	; 0x76 <__bad_interrupt>
  26:	67 c0       	rjmp	.+206    	; 0xf6 <__vector_10+0x48>
  28:	6a c0       	rjmp	.+212    	; 0xfe <__vector_10+0x50>
  2a:	6d c0       	rjmp	.+218    	; 0x106 <__vector_10+0x58>
  2c:	70 c0       	rjmp	.+224    	; 0x10e <__vector_10+0x60>
  2e:	73 c0       	rjmp	.+230    	; 0x116 <__vector_10+0x68>
  30:	76 c0       	rjmp	.+236    	; 0x11e <__vector_10+0x70>
  32:	79 c0       	rjmp	.+242    	; 0x126 <__vector_10+0x78>
  34:	7c c0       	rjmp	.+248    	; 0x12e <__vector_10+0x80>
  36:	7f c0       	rjmp	.+254    	; 0x136 <__vector_10+0x88>
  38:	82 c0       	rjmp	.+260    	; 0x13e <__vector_10+0x90>
  3a:	85 c0       	rjmp	.+266    	; 0x146 <__vector_10+0x98>
  3c:	88 c0       	rjmp	.+272    	; 0x14e <__vector_10+0xa0>
  3e:	8b c0       	rjmp	.+278    	; 0x156 <__vector_10+0xa8>

00000040 <__ctors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf e5       	ldi	r28, 0x5F	; 95
  46:	d4 e0       	ldi	r29, 0x04	; 4
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_copy_data>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	ee ee       	ldi	r30, 0xEE	; 238
  54:	f1 e0       	ldi	r31, 0x01	; 1
  56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a2 36       	cpi	r26, 0x62	; 98
  5e:	b1 07       	cpc	r27, r17
  60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a2 e6       	ldi	r26, 0x62	; 98
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a2 37       	cpi	r26, 0x72	; 114
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>
  72:	84 d0       	rcall	.+264    	; 0x17c <main>
  74:	ba c0       	rjmp	.+372    	; 0x1ea <_exit>

00000076 <__bad_interrupt>:
  76:	c4 cf       	rjmp	.-120    	; 0x0 <__vectors>

00000078 <SPI_SlaveInit>:
uint8_t valh6;
uint8_t vall6;

void SPI_SlaveInit(void)
{
	DDRB=0x10;
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	87 bb       	out	0x17, r24	; 23
	//Set MISO output and all others input
	//EnableSPI, Master set clock rate fosc/128, enable interrupt, DORD zero hence msb transmitted first
	SPCR = 0x00;
  7c:	1d b8       	out	0x0d, r1	; 13
	SPCR|=(1<<SPE)|(1<<SPIE)|(1<<CPOL)|(1<<CPHA);
  7e:	8d b1       	in	r24, 0x0d	; 13
  80:	8c 6c       	ori	r24, 0xCC	; 204
  82:	8d b9       	out	0x0d, r24	; 13
  84:	08 95       	ret

00000086 <init_adc>:
}


void init_adc(void)
{
	DDRC=0x00; //ADC pins are inputs
  86:	14 ba       	out	0x14, r1	; 20
	ADCSRA=0x86; //0b10000110. Enable ADC. Value of prescaler is 64.
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	86 b9       	out	0x06, r24	; 6
	ACSR=0x80; //Disable analog comparator
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	88 b9       	out	0x08, r24	; 8
  90:	08 95       	ret

00000092 <adc>:
}
uint16_t adc(uint8_t mux_input)
{
	uint16_t output1;
	uint16_t output2;
	mux_input=mux_input & 0x07;                         //0b00000111;
  92:	87 70       	andi	r24, 0x07	; 7
	//ADMUX = 0x20| mux_input;             //left adjust result
	ADMUX = mux_input;                   //right adjust result
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);                                // start adc conversion
  96:	36 9a       	sbi	0x06, 6	; 6
	
	while(((ADCSRA & 0x10)==0));
  98:	34 9b       	sbis	0x06, 4	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <adc+0x6>
	output1=ADCL;
  9c:	24 b1       	in	r18, 0x04	; 4
	output2=ADCH;
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	90 e0       	ldi	r25, 0x00	; 0
	output2=(output2<<8)+output1;
  a2:	98 2f       	mov	r25, r24
  a4:	88 27       	eor	r24, r24
	ADCSRA = ADCSRA|0x10;  //clear ADCIF (ADC Interrupt Flag) by writing 1 to it
  a6:	34 9a       	sbi	0x06, 4	; 6
	
	return output2;
}
  a8:	82 0f       	add	r24, r18
  aa:	91 1d       	adc	r25, r1
  ac:	08 95       	ret

000000ae <__vector_10>:
uint8_t lvalue=output2;              
return lvalue;			    
}

ISR(SPI_STC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	data_r1 = SPDR;
  c0:	8f b1       	in	r24, 0x0f	; 15
  c2:	80 93 66 00 	sts	0x0066, r24
	counter = counter+1;
  c6:	80 91 62 00 	lds	r24, 0x0062
  ca:	90 91 63 00 	lds	r25, 0x0063
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 63 00 	sts	0x0063, r25
  d4:	80 93 62 00 	sts	0x0062, r24
	SetComplete = 0;
  d8:	10 92 61 00 	sts	0x0061, r1
  dc:	10 92 60 00 	sts	0x0060, r1
	switch(counter)
  e0:	e0 91 62 00 	lds	r30, 0x0062
  e4:	f0 91 63 00 	lds	r31, 0x0063
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	ed 30       	cpi	r30, 0x0D	; 13
  ec:	f1 05       	cpc	r31, r1
  ee:	e8 f5       	brcc	.+122    	; 0x16a <__vector_10+0xbc>
  f0:	ed 5e       	subi	r30, 0xED	; 237
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	09 94       	ijmp
	{
		case 1: SPDR = vall1;
  f6:	80 91 6e 00 	lds	r24, 0x006E
  fa:	8f b9       	out	0x0f, r24	; 15
		break;
  fc:	36 c0       	rjmp	.+108    	; 0x16a <__vector_10+0xbc>
		case 2: SPDR = valh1;
  fe:	80 91 6b 00 	lds	r24, 0x006B
 102:	8f b9       	out	0x0f, r24	; 15
		break;
 104:	32 c0       	rjmp	.+100    	; 0x16a <__vector_10+0xbc>
		case 3: SPDR = vall2;
 106:	80 91 6f 00 	lds	r24, 0x006F
 10a:	8f b9       	out	0x0f, r24	; 15
		break;
 10c:	2e c0       	rjmp	.+92     	; 0x16a <__vector_10+0xbc>
		case 4: SPDR = valh2;
 10e:	80 91 64 00 	lds	r24, 0x0064
 112:	8f b9       	out	0x0f, r24	; 15
		break;
 114:	2a c0       	rjmp	.+84     	; 0x16a <__vector_10+0xbc>
		case 5: SPDR = vall3;
 116:	80 91 70 00 	lds	r24, 0x0070
 11a:	8f b9       	out	0x0f, r24	; 15
		break;
 11c:	26 c0       	rjmp	.+76     	; 0x16a <__vector_10+0xbc>
		case 6: SPDR = valh3;
 11e:	80 91 67 00 	lds	r24, 0x0067
 122:	8f b9       	out	0x0f, r24	; 15
		break;
 124:	22 c0       	rjmp	.+68     	; 0x16a <__vector_10+0xbc>
		case 7: SPDR = vall4;
 126:	80 91 68 00 	lds	r24, 0x0068
 12a:	8f b9       	out	0x0f, r24	; 15
		break;
 12c:	1e c0       	rjmp	.+60     	; 0x16a <__vector_10+0xbc>
		case 8: SPDR = valh4;
 12e:	80 91 65 00 	lds	r24, 0x0065
 132:	8f b9       	out	0x0f, r24	; 15
		break;
 134:	1a c0       	rjmp	.+52     	; 0x16a <__vector_10+0xbc>
		case 9: SPDR = vall5;
 136:	80 91 6c 00 	lds	r24, 0x006C
 13a:	8f b9       	out	0x0f, r24	; 15
		break;
 13c:	16 c0       	rjmp	.+44     	; 0x16a <__vector_10+0xbc>
		case 10: SPDR = valh5;
 13e:	80 91 69 00 	lds	r24, 0x0069
 142:	8f b9       	out	0x0f, r24	; 15
		break;
 144:	12 c0       	rjmp	.+36     	; 0x16a <__vector_10+0xbc>
		case 11: SPDR = vall6;
 146:	80 91 6a 00 	lds	r24, 0x006A
 14a:	8f b9       	out	0x0f, r24	; 15
		break;
 14c:	0e c0       	rjmp	.+28     	; 0x16a <__vector_10+0xbc>
		case 12: SPDR = valh6;
 14e:	80 91 6d 00 	lds	r24, 0x006D
 152:	8f b9       	out	0x0f, r24	; 15
		//counter = 0;
		break;
 154:	0a c0       	rjmp	.+20     	; 0x16a <__vector_10+0xbc>
		case 13: counter = 0;
 156:	10 92 63 00 	sts	0x0063, r1
 15a:	10 92 62 00 	sts	0x0062, r1
		SetComplete = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 61 00 	sts	0x0061, r25
 166:	80 93 60 00 	sts	0x0060, r24
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:

int main(void)
{
	
	DDRD=0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	81 bb       	out	0x11, r24	; 17
	uint16_t output2;
	uint16_t output3;
	uint16_t output4;
	uint16_t output5;
	
	SPI_SlaveInit();
 180:	7b df       	rcall	.-266    	; 0x78 <SPI_SlaveInit>
	init_adc();
 182:	81 df       	rcall	.-254    	; 0x86 <init_adc>
	sei();
 184:	78 94       	sei
	while(1)
	{
	
	//for 10 bit conversion read ADCL first	
	
	if (SetComplete == 1)
 186:	80 91 60 00 	lds	r24, 0x0060
 18a:	90 91 61 00 	lds	r25, 0x0061
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	d1 f7       	brne	.-12     	; 0x186 <main+0xa>
	{
	output0=adc(0x00);	
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	7e df       	rcall	.-260    	; 0x92 <adc>
return hvalue;        
                
}
uint8_t adc_lvalue(uint16_t output2)
{
uint8_t lvalue=output2;              
 196:	80 93 6e 00 	sts	0x006E, r24
	return output2;
}

uint8_t adc_hvalue(uint16_t output2)
{
uint8_t hvalue=(output2>>8);	
 19a:	90 93 6b 00 	sts	0x006B, r25
	{
	output0=adc(0x00);	
	vall1=adc_lvalue(output0);
	valh1=adc_hvalue(output0);

	output1=adc(0x01);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	78 df       	rcall	.-272    	; 0x92 <adc>
return hvalue;        
                
}
uint8_t adc_lvalue(uint16_t output2)
{
uint8_t lvalue=output2;              
 1a2:	80 93 6f 00 	sts	0x006F, r24
	return output2;
}

uint8_t adc_hvalue(uint16_t output2)
{
uint8_t hvalue=(output2>>8);	
 1a6:	90 93 64 00 	sts	0x0064, r25

	output1=adc(0x01);
	vall2=adc_lvalue(output1);
	valh2=adc_hvalue(output1);
	
	output2=adc(0x02);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	72 df       	rcall	.-284    	; 0x92 <adc>
return hvalue;        
                
}
uint8_t adc_lvalue(uint16_t output2)
{
uint8_t lvalue=output2;              
 1ae:	80 93 70 00 	sts	0x0070, r24
	return output2;
}

uint8_t adc_hvalue(uint16_t output2)
{
uint8_t hvalue=(output2>>8);	
 1b2:	90 93 67 00 	sts	0x0067, r25
	
	output2=adc(0x02);
	vall3=adc_lvalue(output2);
	valh3=adc_hvalue(output2);
	
	output3=adc(0x03);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	6c df       	rcall	.-296    	; 0x92 <adc>
return hvalue;        
                
}
uint8_t adc_lvalue(uint16_t output2)
{
uint8_t lvalue=output2;              
 1ba:	80 93 68 00 	sts	0x0068, r24
	return output2;
}

uint8_t adc_hvalue(uint16_t output2)
{
uint8_t hvalue=(output2>>8);	
 1be:	90 93 65 00 	sts	0x0065, r25
	
	output3=adc(0x03);
	vall4=adc_lvalue(output3);
	valh4=adc_hvalue(output3);
	
	output4=adc(0x04);
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	66 df       	rcall	.-308    	; 0x92 <adc>
return hvalue;        
                
}
uint8_t adc_lvalue(uint16_t output2)
{
uint8_t lvalue=output2;              
 1c6:	80 93 6c 00 	sts	0x006C, r24
	return output2;
}

uint8_t adc_hvalue(uint16_t output2)
{
uint8_t hvalue=(output2>>8);	
 1ca:	90 93 69 00 	sts	0x0069, r25
	
	output4=adc(0x04);
	vall5=adc_lvalue(output4);
	valh5=adc_hvalue(output4);
	
	output5=adc(0x05);
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	60 df       	rcall	.-320    	; 0x92 <adc>
return hvalue;        
                
}
uint8_t adc_lvalue(uint16_t output2)
{
uint8_t lvalue=output2;              
 1d2:	80 93 6a 00 	sts	0x006A, r24
	vall5=adc_lvalue(output4);
	valh5=adc_hvalue(output4);
	
	output5=adc(0x05);
	vall6=adc_lvalue(output5);
	valh6=adc_hvalue(output5);		
 1d6:	90 93 6d 00 	sts	0x006D, r25
	PORTD=valh2;
 1da:	80 91 64 00 	lds	r24, 0x0064
 1de:	82 bb       	out	0x12, r24	; 18
	SetComplete = 0;
 1e0:	10 92 61 00 	sts	0x0061, r1
 1e4:	10 92 60 00 	sts	0x0060, r1
 1e8:	ce cf       	rjmp	.-100    	; 0x186 <main+0xa>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
