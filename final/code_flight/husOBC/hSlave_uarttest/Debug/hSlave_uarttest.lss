
hSlave_uarttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000815  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002a8  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002bf  00000000  00000000  00000e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000098  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000032a  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c8  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 36       	cpi	r26, 0x6E	; 110
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e6       	ldi	r26, 0x6E	; 110
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 36       	cpi	r26, 0x6E	; 110
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	c8 57       	subi	r28, 0x78	; 120
  d8:	d1 09       	sbc	r29, r1
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	PORTA = 0x0F;
	_delay_ms(1000);
	PORTA = 0x00;
	_delay_ms(1000);
	*/
	init_UART0();
  e4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_UART0>
	
	transmit_UART0('\r');
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('\r');
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('H');
  f4:	88 e4       	ldi	r24, 0x48	; 72
  f6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('e');
  fa:	85 e6       	ldi	r24, 0x65	; 101
  fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('l');
 100:	8c e6       	ldi	r24, 0x6C	; 108
 102:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('l');
 106:	8c e6       	ldi	r24, 0x6C	; 108
 108:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('o');
 10c:	8f e6       	ldi	r24, 0x6F	; 111
 10e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	e6 e4       	ldi	r30, 0x46	; 70
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	de 01       	movw	r26, r28
 11a:	11 96       	adiw	r26, 0x01	; 1
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	8a 95       	dec	r24
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x4e>
	transmit_string_UART0(array);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 fd 00 	call	0x1fa	; 0x1fa <transmit_string_UART0>
	
	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
 12c:	85 e2       	ldi	r24, 0x25	; 37
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	de 01       	movw	r26, r28
 134:	99 96       	adiw	r26, 0x29	; 41
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	8a 95       	dec	r24
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x68>
	sprintf(array2,"\rU r communicating through UART_");
 13e:	81 e2       	ldi	r24, 0x21	; 33
 140:	e5 e2       	ldi	r30, 0x25	; 37
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	de 01       	movw	r26, r28
 146:	af 5a       	subi	r26, 0xAF	; 175
 148:	bf 4f       	sbci	r27, 0xFF	; 255
 14a:	01 90       	ld	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	8a 95       	dec	r24
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x7c>
		
/************************************************************/

	while(1){
	PORTA = 0x0A;
 152:	0f 2e       	mov	r0, r31
 154:	fa e0       	ldi	r31, 0x0A	; 10
 156:	ff 2e       	mov	r15, r31
 158:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
 15a:	05 e0       	ldi	r16, 0x05	; 5
	sprintf(array2,"\rU r communicating through UART_");
		
/************************************************************/

	while(1){
	PORTA = 0x0A;
 15c:	fb ba       	out	0x1b, r15	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	84 e3       	ldi	r24, 0x34	; 52
 162:	9c e0       	ldi	r25, 0x0C	; 12
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x96>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xa0>
 16e:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 170:	0b bb       	out	0x1b, r16	; 27
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	84 e3       	ldi	r24, 0x34	; 52
 176:	9c e0       	ldi	r25, 0x0C	; 12
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xaa>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xb4>
 182:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 184:	8d e0       	ldi	r24, 0x0D	; 13
 186:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('\r');
 18a:	8d e0       	ldi	r24, 0x0D	; 13
 18c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('H');
 190:	88 e4       	ldi	r24, 0x48	; 72
 192:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0('i');
 196:	89 e6       	ldi	r24, 0x69	; 105
 198:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	
	transmit_string_UART0(array1);
 19c:	ce 01       	movw	r24, r28
 19e:	89 96       	adiw	r24, 0x29	; 41
 1a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <transmit_string_UART0>
	transmit_string_UART0(array2);
 1a4:	ce 01       	movw	r24, r28
 1a6:	8f 5a       	subi	r24, 0xAF	; 175
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <transmit_string_UART0>
	transmit_UART0('0');
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	temp = receive_UART0();
 1b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <receive_UART0>
 1b8:	18 2f       	mov	r17, r24
	transmit_UART0('\t');
 1ba:	89 e0       	ldi	r24, 0x09	; 9
 1bc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
	transmit_UART0(temp);
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmit_UART0>
 1c6:	ca cf       	rjmp	.-108    	; 0x15c <main+0x8e>

000001c8 <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 1c8:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 1ca:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 1cc:	e5 e9       	ldi	r30, 0x95	; 149
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 1d2:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	88 61       	ori	r24, 0x18	; 24
 1d8:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 1da:	80 81       	ld	r24, Z
 1dc:	8e 60       	ori	r24, 0x0E	; 14
 1de:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 1e0:	87 e6       	ldi	r24, 0x67	; 103
 1e2:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 1e4:	10 92 90 00 	sts	0x0090, r1
 1e8:	08 95       	ret

000001ea <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 1ee:	8c b9       	out	0x0c, r24	; 12
 1f0:	08 95       	ret

000001f2 <receive_UART0>:
}

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
 1f2:	5f 9b       	sbis	0x0b, 7	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <receive_UART0>
  return UDR0;
 1f6:	8c b1       	in	r24, 0x0c	; 12
}
 1f8:	08 95       	ret

000001fa <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 81       	ld	r18, Z
 1fe:	22 23       	and	r18, r18
 200:	39 f0       	breq	.+14     	; 0x210 <transmit_string_UART0+0x16>
 202:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 204:	5d 9b       	sbis	0x0b, 5	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 208:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 20a:	21 91       	ld	r18, Z+
 20c:	21 11       	cpse	r18, r1
 20e:	fa cf       	rjmp	.-12     	; 0x204 <transmit_string_UART0+0xa>
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
