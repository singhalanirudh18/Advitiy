
hSlave_eepromtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000ef8  00000f8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080017e  0080017e  0000100a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010fd  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004dc  00000000  00000000  0000221b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d2  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00002ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b52  00000000  00000000  00003316  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 37       	cpi	r26, 0x7E	; 126
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ae e7       	ldi	r26, 0x7E	; 126
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <main>
  c6:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ioinit>:
{

  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
#if defined(TWPS0)
  /* has prescaler (mega128 & newer) */
  TWSR = 0;
  ce:	10 92 71 00 	sts	0x0071, r1
#endif

#if F_CPU < 3600000UL
  TWBR = 10;			/* smallest TWBR value, see note [5] */
#else
  TWBR = (F_CPU / 100000UL - 16) / 2;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	80 93 70 00 	sts	0x0070, r24
  d8:	08 95       	ret

000000da <eeprom_read_bytes_part>:
  
  return eeprom_read_bytes_part(eeaddr, len, buf);
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  uint8_t sla, twcr, n = 0;
  int rv = 0;
  
  ///* Added code for handling the two halves of the EEPROM
  if(eeaddr >= HALF_ADDR)
  ee:	61 15       	cp	r22, r1
  f0:	71 05       	cpc	r23, r1
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	81 07       	cpc	r24, r17
  f6:	91 05       	cpc	r25, r1
  f8:	38 f0       	brcs	.+14     	; 0x108 <eeprom_read_bytes_part+0x2e>
  {
    eeaddr -= HALF_ADDR;
  fa:	01 97       	sbiw	r24, 0x01	; 1
    eeprom_addr |= 0x08;
  fc:	e0 91 00 01 	lds	r30, 0x0100
 100:	e8 60       	ori	r30, 0x08	; 8
 102:	e0 93 00 01 	sts	0x0100, r30
 106:	05 c0       	rjmp	.+10     	; 0x112 <eeprom_read_bytes_part+0x38>
  }
  else
  {
    eeprom_addr &= ~0x08;
 108:	e0 91 00 01 	lds	r30, 0x0100
 10c:	e7 7f       	andi	r30, 0xF7	; 247
 10e:	e0 93 00 01 	sts	0x0100, r30
  }
  
  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;
 112:	f0 90 00 01 	lds	r15, 0x0100

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 116:	b7 2e       	mov	r11, r23
 118:	0f 2e       	mov	r0, r31
 11a:	f8 ec       	ldi	r31, 0xC8	; 200
 11c:	cf 2e       	mov	r12, r31
 11e:	f0 2d       	mov	r31, r0
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 120:	e4 e7       	ldi	r30, 0x74	; 116
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	0f 2e       	mov	r0, r31
 126:	f4 ea       	ldi	r31, 0xA4	; 164
 128:	df 2e       	mov	r13, r31
 12a:	f0 2d       	mov	r31, r0
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
 12c:	a1 e7       	ldi	r26, 0x71	; 113
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 130:	0d 2d       	mov	r16, r13
      /* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 132:	c3 e7       	ldi	r28, 0x73	; 115
 134:	d0 e0       	ldi	r29, 0x00	; 0
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
 136:	1f 2d       	mov	r17, r15
 138:	11 60       	ori	r17, 0x01	; 1
 13a:	a1 2e       	mov	r10, r17
 13c:	03 c0       	rjmp	.+6      	; 0x144 <eeprom_read_bytes_part+0x6a>
 13e:	ca 94       	dec	r12
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
 restart:
  if (n++ >= MAX_ITER)
 140:	09 f4       	brne	.+2      	; 0x144 <eeprom_read_bytes_part+0x6a>
 142:	ba c0       	rjmp	.+372    	; 0x2b8 <eeprom_read_bytes_part+0x1de>
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 144:	0f 2e       	mov	r0, r31
 146:	f4 e8       	ldi	r31, 0x84	; 132
 148:	ef 2e       	mov	r14, r31
 14a:	f0 2d       	mov	r31, r0
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 14c:	00 83       	st	Z, r16
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 14e:	10 81       	ld	r17, Z
 150:	11 23       	and	r17, r17
 152:	ec f7       	brge	.-6      	; 0x14e <eeprom_read_bytes_part+0x74>
  switch ((twst = TW_STATUS))
 154:	1c 91       	ld	r17, X
 156:	18 7f       	andi	r17, 0xF8	; 248
 158:	10 93 90 01 	sts	0x0190, r17
 15c:	10 31       	cpi	r17, 0x10	; 16
 15e:	29 f0       	breq	.+10     	; 0x16a <eeprom_read_bytes_part+0x90>
 160:	18 33       	cpi	r17, 0x38	; 56
 162:	a1 f3       	breq	.-24     	; 0x14c <eeprom_read_bytes_part+0x72>
 164:	18 30       	cpi	r17, 0x08	; 8
 166:	09 f0       	breq	.+2      	; 0x16a <eeprom_read_bytes_part+0x90>
 168:	aa c0       	rjmp	.+340    	; 0x2be <eeprom_read_bytes_part+0x1e4>
      /* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 16a:	f8 82       	st	Y, r15
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 16c:	e0 82       	st	Z, r14
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 16e:	10 81       	ld	r17, Z
 170:	11 23       	and	r17, r17
 172:	ec f7       	brge	.-6      	; 0x16e <eeprom_read_bytes_part+0x94>
  switch ((twst = TW_STATUS))
 174:	1c 91       	ld	r17, X
 176:	18 7f       	andi	r17, 0xF8	; 248
 178:	10 93 90 01 	sts	0x0190, r17
 17c:	10 32       	cpi	r17, 0x20	; 32
 17e:	f9 f2       	breq	.-66     	; 0x13e <eeprom_read_bytes_part+0x64>
 180:	18 33       	cpi	r17, 0x38	; 56
 182:	21 f3       	breq	.-56     	; 0x14c <eeprom_read_bytes_part+0x72>
 184:	18 31       	cpi	r17, 0x18	; 24
 186:	09 f0       	breq	.+2      	; 0x18a <eeprom_read_bytes_part+0xb0>
 188:	7d c0       	rjmp	.+250    	; 0x284 <eeprom_read_bytes_part+0x1aa>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 18a:	b8 82       	st	Y, r11
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 18c:	e0 82       	st	Z, r14
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 18e:	10 81       	ld	r17, Z
 190:	11 23       	and	r17, r17
 192:	ec f7       	brge	.-6      	; 0x18e <eeprom_read_bytes_part+0xb4>
  switch ((twst = TW_STATUS))
 194:	1c 91       	ld	r17, X
 196:	18 7f       	andi	r17, 0xF8	; 248
 198:	10 93 90 01 	sts	0x0190, r17
 19c:	10 33       	cpi	r17, 0x30	; 48
 19e:	b1 f2       	breq	.-84     	; 0x14c <eeprom_read_bytes_part+0x72>
 1a0:	18 33       	cpi	r17, 0x38	; 56
 1a2:	a1 f2       	breq	.-88     	; 0x14c <eeprom_read_bytes_part+0x72>
 1a4:	18 32       	cpi	r17, 0x28	; 40
 1a6:	09 f0       	breq	.+2      	; 0x1aa <eeprom_read_bytes_part+0xd0>
 1a8:	70 c0       	rjmp	.+224    	; 0x28a <eeprom_read_bytes_part+0x1b0>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
 1aa:	68 83       	st	Y, r22
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 1ac:	e0 82       	st	Z, r14
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1ae:	10 81       	ld	r17, Z
 1b0:	11 23       	and	r17, r17
 1b2:	ec f7       	brge	.-6      	; 0x1ae <eeprom_read_bytes_part+0xd4>
  switch ((twst = TW_STATUS))
 1b4:	1c 91       	ld	r17, X
 1b6:	18 7f       	andi	r17, 0xF8	; 248
 1b8:	10 93 90 01 	sts	0x0190, r17
 1bc:	10 33       	cpi	r17, 0x30	; 48
 1be:	31 f0       	breq	.+12     	; 0x1cc <eeprom_read_bytes_part+0xf2>
 1c0:	18 33       	cpi	r17, 0x38	; 56
 1c2:	21 f2       	breq	.-120    	; 0x14c <eeprom_read_bytes_part+0x72>
 1c4:	18 32       	cpi	r17, 0x28	; 40
 1c6:	09 f0       	breq	.+2      	; 0x1ca <eeprom_read_bytes_part+0xf0>
 1c8:	63 c0       	rjmp	.+198    	; 0x290 <eeprom_read_bytes_part+0x1b6>
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <eeprom_read_bytes_part+0xf8>
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, twcr, n = 0;
  int rv = 0;
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	6d c0       	rjmp	.+218    	; 0x2ac <eeprom_read_bytes_part+0x1d2>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
 1d2:	d0 82       	st	Z, r13
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1d4:	10 81       	ld	r17, Z
 1d6:	11 23       	and	r17, r17
 1d8:	ec f7       	brge	.-6      	; 0x1d4 <eeprom_read_bytes_part+0xfa>
  switch ((twst = TW_STATUS))
 1da:	1c 91       	ld	r17, X
 1dc:	18 7f       	andi	r17, 0xF8	; 248
 1de:	10 93 90 01 	sts	0x0190, r17
 1e2:	10 31       	cpi	r17, 0x10	; 16
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <eeprom_read_bytes_part+0x118>
 1e6:	18 33       	cpi	r17, 0x38	; 56
 1e8:	09 f4       	brne	.+2      	; 0x1ec <eeprom_read_bytes_part+0x112>
 1ea:	b0 cf       	rjmp	.-160    	; 0x14c <eeprom_read_bytes_part+0x72>
 1ec:	18 30       	cpi	r17, 0x08	; 8
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <eeprom_read_bytes_part+0x118>
 1f0:	52 c0       	rjmp	.+164    	; 0x296 <eeprom_read_bytes_part+0x1bc>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
 1f2:	a8 82       	st	Y, r10
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 1f4:	e0 82       	st	Z, r14
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1f6:	10 81       	ld	r17, Z
 1f8:	11 23       	and	r17, r17
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <eeprom_read_bytes_part+0x11c>
  switch ((twst = TW_STATUS))
 1fc:	1c 91       	ld	r17, X
 1fe:	18 7f       	andi	r17, 0xF8	; 248
 200:	10 93 90 01 	sts	0x0190, r17
 204:	10 34       	cpi	r17, 0x40	; 64
 206:	49 f0       	breq	.+18     	; 0x21a <eeprom_read_bytes_part+0x140>
 208:	18 34       	cpi	r17, 0x48	; 72
 20a:	21 f0       	breq	.+8      	; 0x214 <eeprom_read_bytes_part+0x13a>
 20c:	18 33       	cpi	r17, 0x38	; 56
 20e:	09 f0       	breq	.+2      	; 0x212 <eeprom_read_bytes_part+0x138>
 210:	45 c0       	rjmp	.+138    	; 0x29c <eeprom_read_bytes_part+0x1c2>
 212:	9c cf       	rjmp	.-200    	; 0x14c <eeprom_read_bytes_part+0x72>
}

int eeprom_read_bytes_part(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, twcr, n = 0;
  int rv = 0;
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	49 c0       	rjmp	.+146    	; 0x2ac <eeprom_read_bytes_part+0x1d2>

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
 21a:	14 16       	cp	r1, r20
 21c:	15 06       	cpc	r1, r21
 21e:	0c f0       	brlt	.+2      	; 0x222 <eeprom_read_bytes_part+0x148>
 220:	40 c0       	rjmp	.+128    	; 0x2a2 <eeprom_read_bytes_part+0x1c8>
 222:	82 2f       	mov	r24, r18
 224:	93 2f       	mov	r25, r19
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	04 ec       	ldi	r16, 0xC4	; 196
    {
      if (len == 1)
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
 22c:	0f 2e       	mov	r0, r31
 22e:	f4 e8       	ldi	r31, 0x84	; 132
 230:	ff 2e       	mov	r15, r31
 232:	f0 2d       	mov	r31, r0
      TWCR = twcr;		/* clear int to start transmission */
 234:	a4 e7       	ldi	r26, 0x74	; 116
 236:	b0 e0       	ldi	r27, 0x00	; 0
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
      switch ((twst = TW_STATUS))
 238:	61 e7       	ldi	r22, 0x71	; 113
 23a:	70 e0       	ldi	r23, 0x00	; 0
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
 23c:	0f 2e       	mov	r0, r31
 23e:	f3 e7       	ldi	r31, 0x73	; 115
 240:	cf 2e       	mov	r12, r31
 242:	d1 2c       	mov	r13, r1
 244:	f0 2d       	mov	r31, r0
 246:	fc 01       	movw	r30, r24
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
    {
      if (len == 1)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	51 05       	cpc	r21, r1
 24c:	09 f4       	brne	.+2      	; 0x250 <eeprom_read_bytes_part+0x176>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
 24e:	0f 2d       	mov	r16, r15
      TWCR = twcr;		/* clear int to start transmission */
 250:	0c 93       	st	X, r16
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 252:	1c 91       	ld	r17, X
 254:	11 23       	and	r17, r17
 256:	ec f7       	brge	.-6      	; 0x252 <eeprom_read_bytes_part+0x178>
      switch ((twst = TW_STATUS))
 258:	eb 01       	movw	r28, r22
 25a:	18 81       	ld	r17, Y
 25c:	18 7f       	andi	r17, 0xF8	; 248
 25e:	10 93 90 01 	sts	0x0190, r17
 262:	10 35       	cpi	r17, 0x50	; 80
 264:	19 f0       	breq	.+6      	; 0x26c <eeprom_read_bytes_part+0x192>
 266:	18 35       	cpi	r17, 0x58	; 88
 268:	69 f1       	breq	.+90     	; 0x2c4 <eeprom_read_bytes_part+0x1ea>
 26a:	1e c0       	rjmp	.+60     	; 0x2a8 <eeprom_read_bytes_part+0x1ce>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
 26c:	e6 01       	movw	r28, r12
 26e:	18 81       	ld	r17, Y
 270:	10 83       	st	Z, r17
 272:	01 96       	adiw	r24, 0x01	; 1
	  rv++;
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	3f 4f       	sbci	r19, 0xFF	; 255

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
 278:	41 50       	subi	r20, 0x01	; 1
 27a:	51 09       	sbc	r21, r1
 27c:	41 15       	cp	r20, r1
 27e:	51 05       	cpc	r21, r1
 280:	11 f7       	brne	.-60     	; 0x246 <eeprom_read_bytes_part+0x16c>
 282:	14 c0       	rjmp	.+40     	; 0x2ac <eeprom_read_bytes_part+0x1d2>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	3f ef       	ldi	r19, 0xFF	; 255
 288:	11 c0       	rjmp	.+34     	; 0x2ac <eeprom_read_bytes_part+0x1d2>
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	3f ef       	ldi	r19, 0xFF	; 255
 28e:	0e c0       	rjmp	.+28     	; 0x2ac <eeprom_read_bytes_part+0x1d2>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	3f ef       	ldi	r19, 0xFF	; 255
 294:	0b c0       	rjmp	.+22     	; 0x2ac <eeprom_read_bytes_part+0x1d2>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	3f ef       	ldi	r19, 0xFF	; 255
 29a:	08 c0       	rjmp	.+16     	; 0x2ac <eeprom_read_bytes_part+0x1d2>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	3f ef       	ldi	r19, 0xFF	; 255
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <eeprom_read_bytes_part+0x1d2>

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);	len > 0;len--)
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <eeprom_read_bytes_part+0x1d2>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
 quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
 2ac:	84 e9       	ldi	r24, 0x94	; 148
 2ae:	80 93 74 00 	sts	0x0074, r24

  return rv;
 2b2:	82 2f       	mov	r24, r18
 2b4:	93 2f       	mov	r25, r19
 2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <eeprom_read_bytes_part+0x1f6>
   * Note [8]
   * First cycle: master transmitter mode
   */
 restart:
  if (n++ >= MAX_ITER)
    return -1;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <eeprom_read_bytes_part+0x1f6>

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <eeprom_read_bytes_part+0x1f6>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
				/* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
 2c4:	80 91 73 00 	lds	r24, 0x0073
 2c8:	80 83       	st	Z, r24
	  rv++;
 2ca:	2f 5f       	subi	r18, 0xFF	; 255
 2cc:	3f 4f       	sbci	r19, 0xFF	; 255
 2ce:	ee cf       	rjmp	.-36     	; 0x2ac <eeprom_read_bytes_part+0x1d2>
  return rv;

 error:
  rv = -1;
  goto quit;
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	bf 90       	pop	r11
 2e2:	af 90       	pop	r10
 2e4:	08 95       	ret

000002e6 <eeprom_read_bytes>:
  TWBR = (F_CPU / 100000UL - 16) / 2;
#endif
}

int eeprom_read_bytes(uint32_t eeaddr, int len, uint8_t *buf)
{
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ea 01       	movw	r28, r20
 2f8:	89 01       	movw	r16, r18
  if((eeaddr < HALF_ADDR) && ((eeaddr + len) > HALF_ADDR))
 2fa:	61 15       	cp	r22, r1
 2fc:	71 05       	cpc	r23, r1
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	82 07       	cpc	r24, r18
 302:	91 05       	cpc	r25, r1
 304:	20 f5       	brcc	.+72     	; 0x34e <eeprom_read_bytes+0x68>
 306:	6a 01       	movw	r12, r20
 308:	ee 24       	eor	r14, r14
 30a:	d7 fc       	sbrc	r13, 7
 30c:	e0 94       	com	r14
 30e:	fe 2c       	mov	r15, r14
 310:	c6 0e       	add	r12, r22
 312:	d7 1e       	adc	r13, r23
 314:	e8 1e       	adc	r14, r24
 316:	f9 1e       	adc	r15, r25
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	c2 16       	cp	r12, r18
 31c:	d1 04       	cpc	r13, r1
 31e:	e2 06       	cpc	r14, r18
 320:	f1 04       	cpc	r15, r1
 322:	a8 f0       	brcs	.+42     	; 0x34e <eeprom_read_bytes+0x68>
  {
    int first = HALF_ADDR - eeaddr;
 324:	ee 24       	eor	r14, r14
 326:	ff 24       	eor	r15, r15
 328:	e6 1a       	sub	r14, r22
 32a:	f7 0a       	sbc	r15, r23
    eeprom_read_bytes_part(eeaddr, first, buf);
 32c:	98 01       	movw	r18, r16
 32e:	a7 01       	movw	r20, r14
 330:	0e 94 6d 00 	call	0xda	; 0xda <eeprom_read_bytes_part>
    return eeprom_read_bytes_part(HALF_ADDR, len - first , buf + first);
 334:	98 01       	movw	r18, r16
 336:	2e 0d       	add	r18, r14
 338:	3f 1d       	adc	r19, r15
 33a:	ae 01       	movw	r20, r28
 33c:	4e 19       	sub	r20, r14
 33e:	5f 09       	sbc	r21, r15
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 6d 00 	call	0xda	; 0xda <eeprom_read_bytes_part>
 34c:	04 c0       	rjmp	.+8      	; 0x356 <eeprom_read_bytes+0x70>
  }
  
  return eeprom_read_bytes_part(eeaddr, len, buf);
 34e:	98 01       	movw	r18, r16
 350:	ae 01       	movw	r20, r28
 352:	0e 94 6d 00 	call	0xda	; 0xda <eeprom_read_bytes_part>
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	08 95       	ret

00000368 <eeprom_write_page>:
  rv = -1;
  goto quit;
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
 368:	af 92       	push	r10
 36a:	bf 92       	push	r11
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	b2 2e       	mov	r11, r18
 37e:	a3 2e       	mov	r10, r19
  uint8_t sla, n = 0;
  int rv = 0;
  uint16_t endaddr;
  
  ///* Added code for handling the two halves of the EEPROM
  if(eeaddr >= HALF_ADDR)
 380:	61 15       	cp	r22, r1
 382:	71 05       	cpc	r23, r1
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	82 07       	cpc	r24, r18
 388:	91 05       	cpc	r25, r1
 38a:	38 f0       	brcs	.+14     	; 0x39a <eeprom_write_page+0x32>
  {
    eeaddr -= HALF_ADDR;
 38c:	01 97       	sbiw	r24, 0x01	; 1
    eeprom_addr |= 0x08;
 38e:	20 91 00 01 	lds	r18, 0x0100
 392:	28 60       	ori	r18, 0x08	; 8
 394:	20 93 00 01 	sts	0x0100, r18
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <eeprom_write_page+0x3c>
  }
  else
    eeprom_addr &= ~0x08;
 39a:	20 91 00 01 	lds	r18, 0x0100
 39e:	27 7f       	andi	r18, 0xF7	; 247
 3a0:	20 93 00 01 	sts	0x0100, r18

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
 3a4:	6a 01       	movw	r12, r20
 3a6:	ee 24       	eor	r14, r14
 3a8:	d7 fc       	sbrc	r13, 7
 3aa:	e0 94       	com	r14
 3ac:	fe 2c       	mov	r15, r14
 3ae:	c6 0e       	add	r12, r22
 3b0:	d7 1e       	adc	r13, r23
 3b2:	e8 1e       	adc	r14, r24
 3b4:	f9 1e       	adc	r15, r25
 3b6:	8b 01       	movw	r16, r22
 3b8:	9c 01       	movw	r18, r24
 3ba:	0f 67       	ori	r16, 0x7F	; 127
 3bc:	c0 16       	cp	r12, r16
 3be:	d1 06       	cpc	r13, r17
 3c0:	e2 06       	cpc	r14, r18
 3c2:	f3 06       	cpc	r15, r19
 3c4:	18 f4       	brcc	.+6      	; 0x3cc <eeprom_write_page+0x64>
    endaddr = eeaddr + len;
 3c6:	46 0f       	add	r20, r22
 3c8:	57 1f       	adc	r21, r23
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <eeprom_write_page+0x6c>
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
 3cc:	ab 01       	movw	r20, r22
 3ce:	4f 67       	ori	r20, 0x7F	; 127
 3d0:	4f 5f       	subi	r20, 0xFF	; 255
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;
 3d4:	00 91 00 01 	lds	r16, 0x0100
    default:
      goto error;		/* must send stop condition */
    }
	
	
  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 3d8:	e7 2e       	mov	r14, r23
 3da:	0f 2e       	mov	r0, r31
 3dc:	f8 ec       	ldi	r31, 0xC8	; 200
 3de:	ff 2e       	mov	r15, r31
 3e0:	f0 2d       	mov	r31, r0
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3e2:	e4 e7       	ldi	r30, 0x74	; 116
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
 3e6:	a1 e7       	ldi	r26, 0x71	; 113
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
  if (n++ >= MAX_ITER)
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3ea:	34 ea       	ldi	r19, 0xA4	; 164
      return -1;		/* error: not in start condition */
      /* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 3ec:	c3 e7       	ldi	r28, 0x73	; 115
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 3f0:	14 e8       	ldi	r17, 0x84	; 132
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <eeprom_write_page+0x92>
 3f4:	fa 94       	dec	r15

  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;

 restart:
  if (n++ >= MAX_ITER)
 3f6:	09 f4       	brne	.+2      	; 0x3fa <eeprom_write_page+0x92>
 3f8:	7d c0       	rjmp	.+250    	; 0x4f4 <eeprom_write_page+0x18c>
    return -1;
 begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3fa:	30 83       	st	Z, r19
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 3fc:	20 81       	ld	r18, Z
 3fe:	22 23       	and	r18, r18
 400:	ec f7       	brge	.-6      	; 0x3fc <eeprom_write_page+0x94>
  switch ((twst = TW_STATUS))
 402:	2c 91       	ld	r18, X
 404:	28 7f       	andi	r18, 0xF8	; 248
 406:	20 93 90 01 	sts	0x0190, r18
 40a:	20 31       	cpi	r18, 0x10	; 16
 40c:	29 f0       	breq	.+10     	; 0x418 <eeprom_write_page+0xb0>
 40e:	28 33       	cpi	r18, 0x38	; 56
 410:	a1 f3       	breq	.-24     	; 0x3fa <eeprom_write_page+0x92>
 412:	28 30       	cpi	r18, 0x08	; 8
 414:	09 f0       	breq	.+2      	; 0x418 <eeprom_write_page+0xb0>
 416:	71 c0       	rjmp	.+226    	; 0x4fa <eeprom_write_page+0x192>
      return -1;		/* error: not in start condition */
      /* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
 418:	08 83       	st	Y, r16
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 41a:	10 83       	st	Z, r17
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 41c:	20 81       	ld	r18, Z
 41e:	22 23       	and	r18, r18
 420:	ec f7       	brge	.-6      	; 0x41c <eeprom_write_page+0xb4>
  switch ((twst = TW_STATUS))
 422:	2c 91       	ld	r18, X
 424:	28 7f       	andi	r18, 0xF8	; 248
 426:	20 93 90 01 	sts	0x0190, r18
 42a:	20 32       	cpi	r18, 0x20	; 32
 42c:	19 f3       	breq	.-58     	; 0x3f4 <eeprom_write_page+0x8c>
 42e:	28 33       	cpi	r18, 0x38	; 56
 430:	21 f3       	breq	.-56     	; 0x3fa <eeprom_write_page+0x92>
 432:	28 31       	cpi	r18, 0x18	; 24
 434:	09 f0       	breq	.+2      	; 0x438 <eeprom_write_page+0xd0>
 436:	4a c0       	rjmp	.+148    	; 0x4cc <eeprom_write_page+0x164>
    default:
      goto error;		/* must send stop condition */
    }
	
	
  TWDR = (eeaddr>>8);		/* high 8 bits of addr */
 438:	e8 82       	st	Y, r14
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 43a:	10 83       	st	Z, r17
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 43c:	20 81       	ld	r18, Z
 43e:	22 23       	and	r18, r18
 440:	ec f7       	brge	.-6      	; 0x43c <eeprom_write_page+0xd4>
  switch ((twst = TW_STATUS))
 442:	2c 91       	ld	r18, X
 444:	28 7f       	andi	r18, 0xF8	; 248
 446:	20 93 90 01 	sts	0x0190, r18
 44a:	20 33       	cpi	r18, 0x30	; 48
 44c:	29 f0       	breq	.+10     	; 0x458 <eeprom_write_page+0xf0>
 44e:	28 33       	cpi	r18, 0x38	; 56
 450:	a1 f2       	breq	.-88     	; 0x3fa <eeprom_write_page+0x92>
 452:	28 32       	cpi	r18, 0x28	; 40
 454:	f1 f5       	brne	.+124    	; 0x4d2 <eeprom_write_page+0x16a>
 456:	03 c0       	rjmp	.+6      	; 0x45e <eeprom_write_page+0xf6>
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	45 c0       	rjmp	.+138    	; 0x4e8 <eeprom_write_page+0x180>
    default:
      goto error;		/* must send stop condition */
    }


  TWDR = eeaddr;		/* low 8 bits of addr */
 45e:	68 83       	st	Y, r22
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 460:	10 83       	st	Z, r17
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 462:	20 81       	ld	r18, Z
 464:	22 23       	and	r18, r18
 466:	ec f7       	brge	.-6      	; 0x462 <eeprom_write_page+0xfa>
  switch ((twst = TW_STATUS))
 468:	2c 91       	ld	r18, X
 46a:	28 7f       	andi	r18, 0xF8	; 248
 46c:	20 93 90 01 	sts	0x0190, r18
 470:	20 33       	cpi	r18, 0x30	; 48
 472:	29 f0       	breq	.+10     	; 0x47e <eeprom_write_page+0x116>
 474:	28 33       	cpi	r18, 0x38	; 56
 476:	09 f2       	breq	.-126    	; 0x3fa <eeprom_write_page+0x92>
 478:	28 32       	cpi	r18, 0x28	; 40
 47a:	71 f5       	brne	.+92     	; 0x4d8 <eeprom_write_page+0x170>
 47c:	03 c0       	rjmp	.+6      	; 0x484 <eeprom_write_page+0x11c>
}

int eeprom_write_page(uint32_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	32 c0       	rjmp	.+100    	; 0x4e8 <eeprom_write_page+0x180>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
 484:	46 1b       	sub	r20, r22
 486:	57 0b       	sbc	r21, r23

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
 488:	14 16       	cp	r1, r20
 48a:	15 06       	cpc	r1, r21
 48c:	44 f5       	brge	.+80     	; 0x4de <eeprom_write_page+0x176>
 48e:	ab 2d       	mov	r26, r11
 490:	ba 2d       	mov	r27, r10
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
    {
      TWDR = *buf++;
 496:	83 e7       	ldi	r24, 0x73	; 115
 498:	90 e0       	ldi	r25, 0x00	; 0
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
 49a:	e4 e7       	ldi	r30, 0x74	; 116
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	74 e8       	ldi	r23, 0x84	; 132
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
      switch ((twst = TW_STATUS))
 4a0:	01 e7       	ldi	r16, 0x71	; 113
 4a2:	10 e0       	ldi	r17, 0x00	; 0
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
 4a4:	6d 91       	ld	r22, X+
 4a6:	ec 01       	movw	r28, r24
 4a8:	68 83       	st	Y, r22
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
 4aa:	70 83       	st	Z, r23
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 4ac:	60 81       	ld	r22, Z
 4ae:	66 23       	and	r22, r22
 4b0:	ec f7       	brge	.-6      	; 0x4ac <eeprom_write_page+0x144>
      switch ((twst = TW_STATUS))
 4b2:	e8 01       	movw	r28, r16
 4b4:	68 81       	ld	r22, Y
 4b6:	68 7f       	andi	r22, 0xF8	; 248
 4b8:	60 93 90 01 	sts	0x0190, r22
 4bc:	68 32       	cpi	r22, 0x28	; 40
 4be:	91 f4       	brne	.+36     	; 0x4e4 <eeprom_write_page+0x17c>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
 4c4:	42 17       	cp	r20, r18
 4c6:	53 07       	cpc	r21, r19
 4c8:	69 f7       	brne	.-38     	; 0x4a4 <eeprom_write_page+0x13c>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <eeprom_write_page+0x180>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	3f ef       	ldi	r19, 0xFF	; 255
 4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <eeprom_write_page+0x180>
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	3f ef       	ldi	r19, 0xFF	; 255
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <eeprom_write_page+0x180>
 4d8:	2f ef       	ldi	r18, 0xFF	; 255
 4da:	3f ef       	ldi	r19, 0xFF	; 255
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <eeprom_write_page+0x180>

    default:
      goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <eeprom_write_page+0x180>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

 error:
  rv = -1;
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	3f ef       	ldi	r19, 0xFF	; 255
	default:
	  goto error;
	}
    }
 quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
 4e8:	84 e9       	ldi	r24, 0x94	; 148
 4ea:	80 93 74 00 	sts	0x0074, r24

  return rv;
 4ee:	82 2f       	mov	r24, r18
 4f0:	93 2f       	mov	r25, r19
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <eeprom_write_page+0x196>
  /* patch high bits of EEPROM address into SLA */
  sla = eeprom_addr;

 restart:
  if (n++ >= MAX_ITER)
    return -1;
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	9f ef       	ldi	r25, 0xFF	; 255
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <eeprom_write_page+0x196>
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      return -1;		/* error: not in start condition */
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

 error:
  rv = -1;
  goto quit;
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	df 90       	pop	r13
 50c:	cf 90       	pop	r12
 50e:	bf 90       	pop	r11
 510:	af 90       	pop	r10
 512:	08 95       	ret

00000514 <eeprom_write_bytes>:

int eeprom_write_bytes(uint32_t eeaddr, int len, uint8_t *buf)
{
 514:	af 92       	push	r10
 516:	bf 92       	push	r11
 518:	cf 92       	push	r12
 51a:	df 92       	push	r13
 51c:	ef 92       	push	r14
 51e:	ff 92       	push	r15
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	6b 01       	movw	r12, r22
 52a:	7c 01       	movw	r14, r24
 52c:	ea 01       	movw	r28, r20
 52e:	89 01       	movw	r16, r18
  int rv, total;

  total = 0;
 530:	a1 2c       	mov	r10, r1
 532:	b1 2c       	mov	r11, r1
  do
    {
      rv = eeprom_write_page(eeaddr, len, buf);
 534:	98 01       	movw	r18, r16
 536:	ae 01       	movw	r20, r28
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	0e 94 b4 01 	call	0x368	; 0x368 <eeprom_write_page>
      if (rv == -1)
 540:	8f 3f       	cpi	r24, 0xFF	; 255
 542:	2f ef       	ldi	r18, 0xFF	; 255
 544:	92 07       	cpc	r25, r18
 546:	99 f0       	breq	.+38     	; 0x56e <eeprom_write_bytes+0x5a>
        return -1;
      eeaddr += rv;
 548:	ac 01       	movw	r20, r24
 54a:	66 27       	eor	r22, r22
 54c:	57 fd       	sbrc	r21, 7
 54e:	60 95       	com	r22
 550:	76 2f       	mov	r23, r22
 552:	c4 0e       	add	r12, r20
 554:	d5 1e       	adc	r13, r21
 556:	e6 1e       	adc	r14, r22
 558:	f7 1e       	adc	r15, r23
      len -= rv;
 55a:	c8 1b       	sub	r28, r24
 55c:	d9 0b       	sbc	r29, r25
      buf += rv;
 55e:	08 0f       	add	r16, r24
 560:	19 1f       	adc	r17, r25
      total += rv;
 562:	a8 0e       	add	r10, r24
 564:	b9 1e       	adc	r11, r25
    }
  while (len > 0);
 566:	1c 16       	cp	r1, r28
 568:	1d 06       	cpc	r1, r29
 56a:	24 f3       	brlt	.-56     	; 0x534 <eeprom_write_bytes+0x20>
 56c:	03 c0       	rjmp	.+6      	; 0x574 <eeprom_write_bytes+0x60>
  total = 0;
  do
    {
      rv = eeprom_write_page(eeaddr, len, buf);
      if (rv == -1)
        return -1;
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	9f ef       	ldi	r25, 0xFF	; 255
 572:	02 c0       	rjmp	.+4      	; 0x578 <eeprom_write_bytes+0x64>
      eeaddr += rv;
      len -= rv;
      buf += rv;
      total += rv;
 574:	8a 2d       	mov	r24, r10
 576:	9b 2d       	mov	r25, r11
    }
  while (len > 0);

  return total;
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	df 90       	pop	r13
 586:	cf 90       	pop	r12
 588:	bf 90       	pop	r11
 58a:	af 90       	pop	r10
 58c:	08 95       	ret

0000058e <write_frame_to_eeprom>:

void write_frame_to_eeprom(uint8_t *frame)
{
 58e:	cf 92       	push	r12
 590:	df 92       	push	r13
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
  //correct the eeprom function for supporting 32-bit addresses
  static uint8_t start = 0;
  
  if((write_addr == read_addr) && start)
 596:	c0 90 7f 01 	lds	r12, 0x017F
 59a:	d0 90 80 01 	lds	r13, 0x0180
 59e:	e0 90 81 01 	lds	r14, 0x0181
 5a2:	f0 90 82 01 	lds	r15, 0x0182
 5a6:	40 91 83 01 	lds	r20, 0x0183
 5aa:	50 91 84 01 	lds	r21, 0x0184
 5ae:	60 91 85 01 	lds	r22, 0x0185
 5b2:	70 91 86 01 	lds	r23, 0x0186
 5b6:	c4 16       	cp	r12, r20
 5b8:	d5 06       	cpc	r13, r21
 5ba:	e6 06       	cpc	r14, r22
 5bc:	f7 06       	cpc	r15, r23
 5be:	91 f4       	brne	.+36     	; 0x5e4 <write_frame_to_eeprom+0x56>
 5c0:	20 91 7e 01 	lds	r18, 0x017E
 5c4:	22 23       	and	r18, r18
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <write_frame_to_eeprom+0x56>
    read_addr +=EEP_FRAME_SIZE;
 5c8:	b7 01       	movw	r22, r14
 5ca:	a6 01       	movw	r20, r12
 5cc:	4a 5e       	subi	r20, 0xEA	; 234
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	6f 4f       	sbci	r22, 0xFF	; 255
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	40 93 83 01 	sts	0x0183, r20
 5d8:	50 93 84 01 	sts	0x0184, r21
 5dc:	60 93 85 01 	sts	0x0185, r22
 5e0:	70 93 86 01 	sts	0x0186, r23
    
  eeprom_write_bytes(write_addr,EEP_FRAME_SIZE,frame);
 5e4:	9c 01       	movw	r18, r24
 5e6:	46 e1       	ldi	r20, 0x16	; 22
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	c7 01       	movw	r24, r14
 5ec:	b6 01       	movw	r22, r12
 5ee:	0e 94 8a 02 	call	0x514	; 0x514 <eeprom_write_bytes>
  write_addr +=EEP_FRAME_SIZE;
 5f2:	d7 01       	movw	r26, r14
 5f4:	c6 01       	movw	r24, r12
 5f6:	46 96       	adiw	r24, 0x16	; 22
 5f8:	a1 1d       	adc	r26, r1
 5fa:	b1 1d       	adc	r27, r1
 5fc:	80 93 7f 01 	sts	0x017F, r24
 600:	90 93 80 01 	sts	0x0180, r25
 604:	a0 93 81 01 	sts	0x0181, r26
 608:	b0 93 82 01 	sts	0x0182, r27
  
  if(write_addr == (HALF_ADDR - (HALF_ADDR %EEP_FRAME_SIZE)))
 60c:	8c 3e       	cpi	r24, 0xEC	; 236
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	a1 05       	cpc	r26, r1
 612:	b1 05       	cpc	r27, r1
 614:	69 f4       	brne	.+26     	; 0x630 <write_frame_to_eeprom+0xa2>
    write_addr = HALF_ADDR;
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a1 e0       	ldi	r26, 0x01	; 1
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	80 93 7f 01 	sts	0x017F, r24
 622:	90 93 80 01 	sts	0x0180, r25
 626:	a0 93 81 01 	sts	0x0181, r26
 62a:	b0 93 82 01 	sts	0x0182, r27
 62e:	14 c0       	rjmp	.+40     	; 0x658 <write_frame_to_eeprom+0xca>
  if(write_addr +EEP_FRAME_SIZE > MAX_ADDR)
 630:	8c e2       	ldi	r24, 0x2C	; 44
 632:	c8 0e       	add	r12, r24
 634:	d1 1c       	adc	r13, r1
 636:	e1 1c       	adc	r14, r1
 638:	f1 1c       	adc	r15, r1
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	c2 16       	cp	r12, r18
 63e:	d1 04       	cpc	r13, r1
 640:	22 e0       	ldi	r18, 0x02	; 2
 642:	e2 06       	cpc	r14, r18
 644:	f1 04       	cpc	r15, r1
 646:	40 f0       	brcs	.+16     	; 0x658 <write_frame_to_eeprom+0xca>
    write_addr = 0;
 648:	10 92 7f 01 	sts	0x017F, r1
 64c:	10 92 80 01 	sts	0x0180, r1
 650:	10 92 81 01 	sts	0x0181, r1
 654:	10 92 82 01 	sts	0x0182, r1
  
  start = 1;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 7e 01 	sts	0x017E, r24
}
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	cf 90       	pop	r12
 666:	08 95       	ret

00000668 <read_frame_from_eeprom>:

void read_frame_from_eeprom(uint8_t *frame)
{
 668:	cf 92       	push	r12
 66a:	df 92       	push	r13
 66c:	ef 92       	push	r14
 66e:	ff 92       	push	r15
  eeprom_read_bytes(read_addr,EEP_FRAME_SIZE, frame);
 670:	c0 90 83 01 	lds	r12, 0x0183
 674:	d0 90 84 01 	lds	r13, 0x0184
 678:	e0 90 85 01 	lds	r14, 0x0185
 67c:	f0 90 86 01 	lds	r15, 0x0186
 680:	9c 01       	movw	r18, r24
 682:	46 e1       	ldi	r20, 0x16	; 22
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	c7 01       	movw	r24, r14
 688:	b6 01       	movw	r22, r12
 68a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <eeprom_read_bytes>
  read_addr +=EEP_FRAME_SIZE;
 68e:	d7 01       	movw	r26, r14
 690:	c6 01       	movw	r24, r12
 692:	46 96       	adiw	r24, 0x16	; 22
 694:	a1 1d       	adc	r26, r1
 696:	b1 1d       	adc	r27, r1
 698:	80 93 83 01 	sts	0x0183, r24
 69c:	90 93 84 01 	sts	0x0184, r25
 6a0:	a0 93 85 01 	sts	0x0185, r26
 6a4:	b0 93 86 01 	sts	0x0186, r27
  
  if(read_addr == (HALF_ADDR - (HALF_ADDR %EEP_FRAME_SIZE)))
 6a8:	8c 3e       	cpi	r24, 0xEC	; 236
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	a1 05       	cpc	r26, r1
 6ae:	b1 05       	cpc	r27, r1
 6b0:	69 f4       	brne	.+26     	; 0x6cc <read_frame_from_eeprom+0x64>
    read_addr = HALF_ADDR;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	a1 e0       	ldi	r26, 0x01	; 1
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	80 93 83 01 	sts	0x0183, r24
 6be:	90 93 84 01 	sts	0x0184, r25
 6c2:	a0 93 85 01 	sts	0x0185, r26
 6c6:	b0 93 86 01 	sts	0x0186, r27
 6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <read_frame_from_eeprom+0x8c>
  if(read_addr +EEP_FRAME_SIZE > MAX_ADDR)
 6cc:	8c e2       	ldi	r24, 0x2C	; 44
 6ce:	c8 0e       	add	r12, r24
 6d0:	d1 1c       	adc	r13, r1
 6d2:	e1 1c       	adc	r14, r1
 6d4:	f1 1c       	adc	r15, r1
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	c2 16       	cp	r12, r18
 6da:	d1 04       	cpc	r13, r1
 6dc:	22 e0       	ldi	r18, 0x02	; 2
 6de:	e2 06       	cpc	r14, r18
 6e0:	f1 04       	cpc	r15, r1
 6e2:	40 f0       	brcs	.+16     	; 0x6f4 <read_frame_from_eeprom+0x8c>
    read_addr = 0;
 6e4:	10 92 83 01 	sts	0x0183, r1
 6e8:	10 92 84 01 	sts	0x0184, r1
 6ec:	10 92 85 01 	sts	0x0185, r1
 6f0:	10 92 86 01 	sts	0x0186, r1
}
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	08 95       	ret

000006fe <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	cc 5d       	subi	r28, 0xDC	; 220
 708:	d1 40       	sbci	r29, 0x01	; 1
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
  
	DDRA = 0x0F;
 714:	8f e0       	ldi	r24, 0x0F	; 15
 716:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 718:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	89 e6       	ldi	r24, 0x69	; 105
 71e:	98 e1       	ldi	r25, 0x18	; 24
 720:	21 50       	subi	r18, 0x01	; 1
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <main+0x22>
 728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x2c>
 72a:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 72c:	1b ba       	out	0x1b, r1	; 27
 72e:	2f ef       	ldi	r18, 0xFF	; 255
 730:	89 e6       	ldi	r24, 0x69	; 105
 732:	98 e1       	ldi	r25, 0x18	; 24
 734:	21 50       	subi	r18, 0x01	; 1
 736:	80 40       	sbci	r24, 0x00	; 0
 738:	90 40       	sbci	r25, 0x00	; 0
 73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x36>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <main+0x40>
 73e:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x0F;
 740:	8f e0       	ldi	r24, 0x0F	; 15
 742:	8b bb       	out	0x1b, r24	; 27
 744:	2f ef       	ldi	r18, 0xFF	; 255
 746:	89 e6       	ldi	r24, 0x69	; 105
 748:	98 e1       	ldi	r25, 0x18	; 24
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	80 40       	sbci	r24, 0x00	; 0
 74e:	90 40       	sbci	r25, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <main+0x4c>
 752:	00 c0       	rjmp	.+0      	; 0x754 <main+0x56>
 754:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 756:	1b ba       	out	0x1b, r1	; 27
 758:	2f ef       	ldi	r18, 0xFF	; 255
 75a:	89 e6       	ldi	r24, 0x69	; 105
 75c:	98 e1       	ldi	r25, 0x18	; 24
 75e:	21 50       	subi	r18, 0x01	; 1
 760:	80 40       	sbci	r24, 0x00	; 0
 762:	90 40       	sbci	r25, 0x00	; 0
 764:	e1 f7       	brne	.-8      	; 0x75e <main+0x60>
 766:	00 c0       	rjmp	.+0      	; 0x768 <main+0x6a>
 768:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 76a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <init_UART0>
	
	transmit_UART0('\r');
 76e:	8d e0       	ldi	r24, 0x0D	; 13
 770:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('\r');
 774:	8d e0       	ldi	r24, 0x0D	; 13
 776:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('H');
 77a:	88 e4       	ldi	r24, 0x48	; 72
 77c:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('e');
 780:	85 e6       	ldi	r24, 0x65	; 101
 782:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('l');
 786:	8c e6       	ldi	r24, 0x6C	; 108
 788:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('l');
 78c:	8c e6       	ldi	r24, 0x6C	; 108
 78e:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('o');
 792:	8f e6       	ldi	r24, 0x6F	; 111
 794:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 798:	88 e2       	ldi	r24, 0x28	; 40
 79a:	e6 e5       	ldi	r30, 0x56	; 86
 79c:	f1 e0       	ldi	r31, 0x01	; 1
 79e:	de 01       	movw	r26, r28
 7a0:	11 96       	adiw	r26, 0x01	; 1
 7a2:	01 90       	ld	r0, Z+
 7a4:	0d 92       	st	X+, r0
 7a6:	8a 95       	dec	r24
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <main+0xa4>
	transmit_string_UART0(array);
 7aa:	ce 01       	movw	r24, r28
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	0e 94 9e 04 	call	0x93c	; 0x93c <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
 7b2:	85 e2       	ldi	r24, 0x25	; 37
 7b4:	e1 e0       	ldi	r30, 0x01	; 1
 7b6:	f1 e0       	ldi	r31, 0x01	; 1
 7b8:	de 01       	movw	r26, r28
 7ba:	99 96       	adiw	r26, 0x29	; 41
 7bc:	01 90       	ld	r0, Z+
 7be:	0d 92       	st	X+, r0
 7c0:	8a 95       	dec	r24
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <main+0xbe>
	sprintf(array2,"\rData read from EEPROM :\t");
 7c4:	8a e1       	ldi	r24, 0x1A	; 26
 7c6:	e6 e2       	ldi	r30, 0x26	; 38
 7c8:	f1 e0       	ldi	r31, 0x01	; 1
 7ca:	de 01       	movw	r26, r28
 7cc:	af 5a       	subi	r26, 0xAF	; 175
 7ce:	bf 4f       	sbci	r27, 0xFF	; 255
 7d0:	01 90       	ld	r0, Z+
 7d2:	0d 92       	st	X+, r0
 7d4:	8a 95       	dec	r24
 7d6:	e1 f7       	brne	.-8      	; 0x7d0 <main+0xd2>
		
/************************************************************/
	char buffer[100];
	uint8_t frame[256], i=0;
	///EEPROM function to initialise I/O
	ioinit();
 7d8:	0e 94 67 00 	call	0xce	; 0xce <ioinit>
	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
	sprintf(array2,"\rData read from EEPROM :\t");
		
/************************************************************/
	char buffer[100];
	uint8_t frame[256], i=0;
 7dc:	91 2c       	mov	r9, r1
	///EEPROM function to initialise I/O
	ioinit();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 7de:	0f 2e       	mov	r0, r31
 7e0:	fa e0       	ldi	r31, 0x0A	; 10
 7e2:	3f 2e       	mov	r3, r31
 7e4:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
 7e6:	0f 2e       	mov	r0, r31
 7e8:	f5 e0       	ldi	r31, 0x05	; 5
 7ea:	8f 2e       	mov	r8, r31
 7ec:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
	_delay_ms(500);
	
	write_addr = HALF_ADDR - (HALF_ADDR % EEP_FRAME_SIZE);
	write_addr -= EEP_FRAME_SIZE;
 7ee:	0f 2e       	mov	r0, r31
 7f0:	f6 ed       	ldi	r31, 0xD6	; 214
 7f2:	4f 2e       	mov	r4, r31
 7f4:	55 24       	eor	r5, r5
 7f6:	5a 94       	dec	r5
 7f8:	61 2c       	mov	r6, r1
 7fa:	71 2c       	mov	r7, r1
 7fc:	f0 2d       	mov	r31, r0
	sprintf(buffer,"Data written %d times",i);
 7fe:	0f 2e       	mov	r0, r31
 800:	f0 e4       	ldi	r31, 0x40	; 64
 802:	af 2e       	mov	r10, r31
 804:	f1 e0       	ldi	r31, 0x01	; 1
 806:	bf 2e       	mov	r11, r31
 808:	f0 2d       	mov	r31, r0
 80a:	8e 01       	movw	r16, r28
 80c:	07 58       	subi	r16, 0x87	; 135
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
	i++;
	write_frame_to_eeprom((uint8_t *)buffer);
	write_frame_to_eeprom((uint8_t *)buffer);
  
	read_addr = HALF_ADDR;
 810:	c1 2c       	mov	r12, r1
 812:	d1 2c       	mov	r13, r1
 814:	76 01       	movw	r14, r12
 816:	e3 94       	inc	r14
	///EEPROM function to initialise I/O
	ioinit();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 818:	3b ba       	out	0x1b, r3	; 27
 81a:	2f ef       	ldi	r18, 0xFF	; 255
 81c:	84 e3       	ldi	r24, 0x34	; 52
 81e:	9c e0       	ldi	r25, 0x0C	; 12
 820:	21 50       	subi	r18, 0x01	; 1
 822:	80 40       	sbci	r24, 0x00	; 0
 824:	90 40       	sbci	r25, 0x00	; 0
 826:	e1 f7       	brne	.-8      	; 0x820 <main+0x122>
 828:	00 c0       	rjmp	.+0      	; 0x82a <main+0x12c>
 82a:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 82c:	8b ba       	out	0x1b, r8	; 27
 82e:	2f ef       	ldi	r18, 0xFF	; 255
 830:	84 e3       	ldi	r24, 0x34	; 52
 832:	9c e0       	ldi	r25, 0x0C	; 12
 834:	21 50       	subi	r18, 0x01	; 1
 836:	80 40       	sbci	r24, 0x00	; 0
 838:	90 40       	sbci	r25, 0x00	; 0
 83a:	e1 f7       	brne	.-8      	; 0x834 <main+0x136>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x140>
 83e:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 840:	8d e0       	ldi	r24, 0x0D	; 13
 842:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('\r');
 846:	8d e0       	ldi	r24, 0x0D	; 13
 848:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('H');
 84c:	88 e4       	ldi	r24, 0x48	; 72
 84e:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	transmit_UART0('i');
 852:	89 e6       	ldi	r24, 0x69	; 105
 854:	0e 94 8c 04 	call	0x918	; 0x918 <transmit_UART0>
	
	transmit_string_UART0(array1);
 858:	ce 01       	movw	r24, r28
 85a:	89 96       	adiw	r24, 0x29	; 41
 85c:	0e 94 9e 04 	call	0x93c	; 0x93c <transmit_string_UART0>
	transmit_string_UART0(array2);
 860:	ce 01       	movw	r24, r28
 862:	8f 5a       	subi	r24, 0xAF	; 175
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	0e 94 9e 04 	call	0x93c	; 0x93c <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
 86a:	3b ba       	out	0x1b, r3	; 27
 86c:	2f ef       	ldi	r18, 0xFF	; 255
 86e:	84 e3       	ldi	r24, 0x34	; 52
 870:	9c e0       	ldi	r25, 0x0C	; 12
 872:	21 50       	subi	r18, 0x01	; 1
 874:	80 40       	sbci	r24, 0x00	; 0
 876:	90 40       	sbci	r25, 0x00	; 0
 878:	e1 f7       	brne	.-8      	; 0x872 <main+0x174>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <main+0x17e>
 87c:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 87e:	8b ba       	out	0x1b, r8	; 27
 880:	2f ef       	ldi	r18, 0xFF	; 255
 882:	84 e3       	ldi	r24, 0x34	; 52
 884:	9c e0       	ldi	r25, 0x0C	; 12
 886:	21 50       	subi	r18, 0x01	; 1
 888:	80 40       	sbci	r24, 0x00	; 0
 88a:	90 40       	sbci	r25, 0x00	; 0
 88c:	e1 f7       	brne	.-8      	; 0x886 <main+0x188>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <main+0x192>
 890:	00 00       	nop
	_delay_ms(500);
	
	write_addr = HALF_ADDR - (HALF_ADDR % EEP_FRAME_SIZE);
	write_addr -= EEP_FRAME_SIZE;
 892:	40 92 87 01 	sts	0x0187, r4
 896:	50 92 88 01 	sts	0x0188, r5
 89a:	60 92 89 01 	sts	0x0189, r6
 89e:	70 92 8a 01 	sts	0x018A, r7
	sprintf(buffer,"Data written %d times",i);
 8a2:	1f 92       	push	r1
 8a4:	9f 92       	push	r9
 8a6:	bf 92       	push	r11
 8a8:	af 92       	push	r10
 8aa:	1f 93       	push	r17
 8ac:	0f 93       	push	r16
 8ae:	0e 94 aa 04 	call	0x954	; 0x954 <sprintf>
	i++;
 8b2:	93 94       	inc	r9
	write_frame_to_eeprom((uint8_t *)buffer);
 8b4:	c8 01       	movw	r24, r16
 8b6:	0e 94 c7 02 	call	0x58e	; 0x58e <write_frame_to_eeprom>
	write_frame_to_eeprom((uint8_t *)buffer);
 8ba:	c8 01       	movw	r24, r16
 8bc:	0e 94 c7 02 	call	0x58e	; 0x58e <write_frame_to_eeprom>
  
	read_addr = HALF_ADDR;
 8c0:	c0 92 8b 01 	sts	0x018B, r12
 8c4:	d0 92 8c 01 	sts	0x018C, r13
 8c8:	e0 92 8d 01 	sts	0x018D, r14
 8cc:	f0 92 8e 01 	sts	0x018E, r15
	read_frame_from_eeprom(frame);
 8d0:	ce 01       	movw	r24, r28
 8d2:	83 52       	subi	r24, 0x23	; 35
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	0e 94 34 03 	call	0x668	; 0x668 <read_frame_from_eeprom>
	send_preflight((char *)frame, EEP_FRAME_SIZE);
 8da:	66 e1       	ldi	r22, 0x16	; 22
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	ce 01       	movw	r24, r28
 8e0:	83 52       	subi	r24, 0x23	; 35
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255
 8e4:	0e 94 90 04 	call	0x920	; 0x920 <send_preflight>
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	91 cf       	rjmp	.-222    	; 0x818 <main+0x11a>

000008f6 <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 8f6:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 8f8:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 8fa:	e5 e9       	ldi	r30, 0x95	; 149
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 900:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 902:	8a b1       	in	r24, 0x0a	; 10
 904:	88 61       	ori	r24, 0x18	; 24
 906:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 908:	80 81       	ld	r24, Z
 90a:	8e 60       	ori	r24, 0x0E	; 14
 90c:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 90e:	87 e6       	ldi	r24, 0x67	; 103
 910:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 912:	10 92 90 00 	sts	0x0090, r1
 916:	08 95       	ret

00000918 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 918:	5d 9b       	sbis	0x0b, 5	; 11
 91a:	fe cf       	rjmp	.-4      	; 0x918 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 91c:	8c b9       	out	0x0c, r24	; 12
 91e:	08 95       	ret

00000920 <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 920:	61 15       	cp	r22, r1
 922:	71 05       	cpc	r23, r1
 924:	51 f0       	breq	.+20     	; 0x93a <send_preflight+0x1a>
 926:	fc 01       	movw	r30, r24
 928:	86 0f       	add	r24, r22
 92a:	97 1f       	adc	r25, r23
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
 92c:	5d 9b       	sbis	0x0b, 5	; 11
 92e:	fe cf       	rjmp	.-4      	; 0x92c <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
 930:	21 91       	ld	r18, Z+
 932:	2c b9       	out	0x0c, r18	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 934:	e8 17       	cp	r30, r24
 936:	f9 07       	cpc	r31, r25
 938:	c9 f7       	brne	.-14     	; 0x92c <send_preflight+0xc>
 93a:	08 95       	ret

0000093c <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 93c:	fc 01       	movw	r30, r24
 93e:	20 81       	ld	r18, Z
 940:	22 23       	and	r18, r18
 942:	39 f0       	breq	.+14     	; 0x952 <transmit_string_UART0+0x16>
 944:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 946:	5d 9b       	sbis	0x0b, 5	; 11
 948:	fe cf       	rjmp	.-4      	; 0x946 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 94a:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 94c:	21 91       	ld	r18, Z+
 94e:	21 11       	cpse	r18, r1
 950:	fa cf       	rjmp	.-12     	; 0x946 <transmit_string_UART0+0xa>
 952:	08 95       	ret

00000954 <sprintf>:
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	2e 97       	sbiw	r28, 0x0e	; 14
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	0d 89       	ldd	r16, Y+21	; 0x15
 96e:	1e 89       	ldd	r17, Y+22	; 0x16
 970:	86 e0       	ldi	r24, 0x06	; 6
 972:	8c 83       	std	Y+4, r24	; 0x04
 974:	1a 83       	std	Y+2, r17	; 0x02
 976:	09 83       	std	Y+1, r16	; 0x01
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f e7       	ldi	r25, 0x7F	; 127
 97c:	9e 83       	std	Y+6, r25	; 0x06
 97e:	8d 83       	std	Y+5, r24	; 0x05
 980:	ae 01       	movw	r20, r28
 982:	47 5e       	subi	r20, 0xE7	; 231
 984:	5f 4f       	sbci	r21, 0xFF	; 255
 986:	6f 89       	ldd	r22, Y+23	; 0x17
 988:	78 8d       	ldd	r23, Y+24	; 0x18
 98a:	ce 01       	movw	r24, r28
 98c:	01 96       	adiw	r24, 0x01	; 1
 98e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vfprintf>
 992:	ef 81       	ldd	r30, Y+7	; 0x07
 994:	f8 85       	ldd	r31, Y+8	; 0x08
 996:	e0 0f       	add	r30, r16
 998:	f1 1f       	adc	r31, r17
 99a:	10 82       	st	Z, r1
 99c:	2e 96       	adiw	r28, 0x0e	; 14
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	f8 94       	cli
 9a2:	de bf       	out	0x3e, r29	; 62
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	cd bf       	out	0x3d, r28	; 61
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	08 95       	ret

000009b2 <vfprintf>:
 9b2:	2f 92       	push	r2
 9b4:	3f 92       	push	r3
 9b6:	4f 92       	push	r4
 9b8:	5f 92       	push	r5
 9ba:	6f 92       	push	r6
 9bc:	7f 92       	push	r7
 9be:	8f 92       	push	r8
 9c0:	9f 92       	push	r9
 9c2:	af 92       	push	r10
 9c4:	bf 92       	push	r11
 9c6:	cf 92       	push	r12
 9c8:	df 92       	push	r13
 9ca:	ef 92       	push	r14
 9cc:	ff 92       	push	r15
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
 9da:	2c 97       	sbiw	r28, 0x0c	; 12
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	f8 94       	cli
 9e0:	de bf       	out	0x3e, r29	; 62
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	cd bf       	out	0x3d, r28	; 61
 9e6:	7c 01       	movw	r14, r24
 9e8:	6b 01       	movw	r12, r22
 9ea:	8a 01       	movw	r16, r20
 9ec:	fc 01       	movw	r30, r24
 9ee:	17 82       	std	Z+7, r1	; 0x07
 9f0:	16 82       	std	Z+6, r1	; 0x06
 9f2:	83 81       	ldd	r24, Z+3	; 0x03
 9f4:	81 ff       	sbrs	r24, 1
 9f6:	bd c1       	rjmp	.+890    	; 0xd72 <vfprintf+0x3c0>
 9f8:	ce 01       	movw	r24, r28
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	4c 01       	movw	r8, r24
 9fe:	f7 01       	movw	r30, r14
 a00:	93 81       	ldd	r25, Z+3	; 0x03
 a02:	f6 01       	movw	r30, r12
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	6f 01       	movw	r12, r30
 a0e:	88 23       	and	r24, r24
 a10:	09 f4       	brne	.+2      	; 0xa14 <vfprintf+0x62>
 a12:	ab c1       	rjmp	.+854    	; 0xd6a <vfprintf+0x3b8>
 a14:	85 32       	cpi	r24, 0x25	; 37
 a16:	39 f4       	brne	.+14     	; 0xa26 <vfprintf+0x74>
 a18:	93 fd       	sbrc	r25, 3
 a1a:	85 91       	lpm	r24, Z+
 a1c:	93 ff       	sbrs	r25, 3
 a1e:	81 91       	ld	r24, Z+
 a20:	6f 01       	movw	r12, r30
 a22:	85 32       	cpi	r24, 0x25	; 37
 a24:	29 f4       	brne	.+10     	; 0xa30 <vfprintf+0x7e>
 a26:	b7 01       	movw	r22, r14
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 a2e:	e7 cf       	rjmp	.-50     	; 0x9fe <vfprintf+0x4c>
 a30:	51 2c       	mov	r5, r1
 a32:	31 2c       	mov	r3, r1
 a34:	20 e0       	ldi	r18, 0x00	; 0
 a36:	20 32       	cpi	r18, 0x20	; 32
 a38:	a0 f4       	brcc	.+40     	; 0xa62 <vfprintf+0xb0>
 a3a:	8b 32       	cpi	r24, 0x2B	; 43
 a3c:	69 f0       	breq	.+26     	; 0xa58 <vfprintf+0xa6>
 a3e:	30 f4       	brcc	.+12     	; 0xa4c <vfprintf+0x9a>
 a40:	80 32       	cpi	r24, 0x20	; 32
 a42:	59 f0       	breq	.+22     	; 0xa5a <vfprintf+0xa8>
 a44:	83 32       	cpi	r24, 0x23	; 35
 a46:	69 f4       	brne	.+26     	; 0xa62 <vfprintf+0xb0>
 a48:	20 61       	ori	r18, 0x10	; 16
 a4a:	2c c0       	rjmp	.+88     	; 0xaa4 <vfprintf+0xf2>
 a4c:	8d 32       	cpi	r24, 0x2D	; 45
 a4e:	39 f0       	breq	.+14     	; 0xa5e <vfprintf+0xac>
 a50:	80 33       	cpi	r24, 0x30	; 48
 a52:	39 f4       	brne	.+14     	; 0xa62 <vfprintf+0xb0>
 a54:	21 60       	ori	r18, 0x01	; 1
 a56:	26 c0       	rjmp	.+76     	; 0xaa4 <vfprintf+0xf2>
 a58:	22 60       	ori	r18, 0x02	; 2
 a5a:	24 60       	ori	r18, 0x04	; 4
 a5c:	23 c0       	rjmp	.+70     	; 0xaa4 <vfprintf+0xf2>
 a5e:	28 60       	ori	r18, 0x08	; 8
 a60:	21 c0       	rjmp	.+66     	; 0xaa4 <vfprintf+0xf2>
 a62:	27 fd       	sbrc	r18, 7
 a64:	27 c0       	rjmp	.+78     	; 0xab4 <vfprintf+0x102>
 a66:	30 ed       	ldi	r19, 0xD0	; 208
 a68:	38 0f       	add	r19, r24
 a6a:	3a 30       	cpi	r19, 0x0A	; 10
 a6c:	78 f4       	brcc	.+30     	; 0xa8c <vfprintf+0xda>
 a6e:	26 ff       	sbrs	r18, 6
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <vfprintf+0xcc>
 a72:	fa e0       	ldi	r31, 0x0A	; 10
 a74:	5f 9e       	mul	r5, r31
 a76:	30 0d       	add	r19, r0
 a78:	11 24       	eor	r1, r1
 a7a:	53 2e       	mov	r5, r19
 a7c:	13 c0       	rjmp	.+38     	; 0xaa4 <vfprintf+0xf2>
 a7e:	8a e0       	ldi	r24, 0x0A	; 10
 a80:	38 9e       	mul	r3, r24
 a82:	30 0d       	add	r19, r0
 a84:	11 24       	eor	r1, r1
 a86:	33 2e       	mov	r3, r19
 a88:	20 62       	ori	r18, 0x20	; 32
 a8a:	0c c0       	rjmp	.+24     	; 0xaa4 <vfprintf+0xf2>
 a8c:	8e 32       	cpi	r24, 0x2E	; 46
 a8e:	21 f4       	brne	.+8      	; 0xa98 <vfprintf+0xe6>
 a90:	26 fd       	sbrc	r18, 6
 a92:	6b c1       	rjmp	.+726    	; 0xd6a <vfprintf+0x3b8>
 a94:	20 64       	ori	r18, 0x40	; 64
 a96:	06 c0       	rjmp	.+12     	; 0xaa4 <vfprintf+0xf2>
 a98:	8c 36       	cpi	r24, 0x6C	; 108
 a9a:	11 f4       	brne	.+4      	; 0xaa0 <vfprintf+0xee>
 a9c:	20 68       	ori	r18, 0x80	; 128
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <vfprintf+0xf2>
 aa0:	88 36       	cpi	r24, 0x68	; 104
 aa2:	41 f4       	brne	.+16     	; 0xab4 <vfprintf+0x102>
 aa4:	f6 01       	movw	r30, r12
 aa6:	93 fd       	sbrc	r25, 3
 aa8:	85 91       	lpm	r24, Z+
 aaa:	93 ff       	sbrs	r25, 3
 aac:	81 91       	ld	r24, Z+
 aae:	6f 01       	movw	r12, r30
 ab0:	81 11       	cpse	r24, r1
 ab2:	c1 cf       	rjmp	.-126    	; 0xa36 <vfprintf+0x84>
 ab4:	98 2f       	mov	r25, r24
 ab6:	9f 7d       	andi	r25, 0xDF	; 223
 ab8:	95 54       	subi	r25, 0x45	; 69
 aba:	93 30       	cpi	r25, 0x03	; 3
 abc:	28 f4       	brcc	.+10     	; 0xac8 <vfprintf+0x116>
 abe:	0c 5f       	subi	r16, 0xFC	; 252
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	ff e3       	ldi	r31, 0x3F	; 63
 ac4:	f9 83       	std	Y+1, r31	; 0x01
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <vfprintf+0x130>
 ac8:	83 36       	cpi	r24, 0x63	; 99
 aca:	31 f0       	breq	.+12     	; 0xad8 <vfprintf+0x126>
 acc:	83 37       	cpi	r24, 0x73	; 115
 ace:	71 f0       	breq	.+28     	; 0xaec <vfprintf+0x13a>
 ad0:	83 35       	cpi	r24, 0x53	; 83
 ad2:	09 f0       	breq	.+2      	; 0xad6 <vfprintf+0x124>
 ad4:	5b c0       	rjmp	.+182    	; 0xb8c <vfprintf+0x1da>
 ad6:	22 c0       	rjmp	.+68     	; 0xb1c <vfprintf+0x16a>
 ad8:	f8 01       	movw	r30, r16
 ada:	80 81       	ld	r24, Z
 adc:	89 83       	std	Y+1, r24	; 0x01
 ade:	0e 5f       	subi	r16, 0xFE	; 254
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
 ae2:	44 24       	eor	r4, r4
 ae4:	43 94       	inc	r4
 ae6:	51 2c       	mov	r5, r1
 ae8:	54 01       	movw	r10, r8
 aea:	15 c0       	rjmp	.+42     	; 0xb16 <vfprintf+0x164>
 aec:	38 01       	movw	r6, r16
 aee:	f2 e0       	ldi	r31, 0x02	; 2
 af0:	6f 0e       	add	r6, r31
 af2:	71 1c       	adc	r7, r1
 af4:	f8 01       	movw	r30, r16
 af6:	a0 80       	ld	r10, Z
 af8:	b1 80       	ldd	r11, Z+1	; 0x01
 afa:	26 ff       	sbrs	r18, 6
 afc:	03 c0       	rjmp	.+6      	; 0xb04 <vfprintf+0x152>
 afe:	65 2d       	mov	r22, r5
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <vfprintf+0x156>
 b04:	6f ef       	ldi	r22, 0xFF	; 255
 b06:	7f ef       	ldi	r23, 0xFF	; 255
 b08:	c5 01       	movw	r24, r10
 b0a:	2c 87       	std	Y+12, r18	; 0x0c
 b0c:	0e 94 df 06 	call	0xdbe	; 0xdbe <strnlen>
 b10:	2c 01       	movw	r4, r24
 b12:	83 01       	movw	r16, r6
 b14:	2c 85       	ldd	r18, Y+12	; 0x0c
 b16:	2f 77       	andi	r18, 0x7F	; 127
 b18:	22 2e       	mov	r2, r18
 b1a:	17 c0       	rjmp	.+46     	; 0xb4a <vfprintf+0x198>
 b1c:	38 01       	movw	r6, r16
 b1e:	f2 e0       	ldi	r31, 0x02	; 2
 b20:	6f 0e       	add	r6, r31
 b22:	71 1c       	adc	r7, r1
 b24:	f8 01       	movw	r30, r16
 b26:	a0 80       	ld	r10, Z
 b28:	b1 80       	ldd	r11, Z+1	; 0x01
 b2a:	26 ff       	sbrs	r18, 6
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x182>
 b2e:	65 2d       	mov	r22, r5
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x186>
 b34:	6f ef       	ldi	r22, 0xFF	; 255
 b36:	7f ef       	ldi	r23, 0xFF	; 255
 b38:	c5 01       	movw	r24, r10
 b3a:	2c 87       	std	Y+12, r18	; 0x0c
 b3c:	0e 94 d4 06 	call	0xda8	; 0xda8 <strnlen_P>
 b40:	2c 01       	movw	r4, r24
 b42:	2c 85       	ldd	r18, Y+12	; 0x0c
 b44:	20 68       	ori	r18, 0x80	; 128
 b46:	22 2e       	mov	r2, r18
 b48:	83 01       	movw	r16, r6
 b4a:	23 fc       	sbrc	r2, 3
 b4c:	1b c0       	rjmp	.+54     	; 0xb84 <vfprintf+0x1d2>
 b4e:	83 2d       	mov	r24, r3
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	48 16       	cp	r4, r24
 b54:	59 06       	cpc	r5, r25
 b56:	b0 f4       	brcc	.+44     	; 0xb84 <vfprintf+0x1d2>
 b58:	b7 01       	movw	r22, r14
 b5a:	80 e2       	ldi	r24, 0x20	; 32
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 b62:	3a 94       	dec	r3
 b64:	f4 cf       	rjmp	.-24     	; 0xb4e <vfprintf+0x19c>
 b66:	f5 01       	movw	r30, r10
 b68:	27 fc       	sbrc	r2, 7
 b6a:	85 91       	lpm	r24, Z+
 b6c:	27 fe       	sbrs	r2, 7
 b6e:	81 91       	ld	r24, Z+
 b70:	5f 01       	movw	r10, r30
 b72:	b7 01       	movw	r22, r14
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 b7a:	31 10       	cpse	r3, r1
 b7c:	3a 94       	dec	r3
 b7e:	f1 e0       	ldi	r31, 0x01	; 1
 b80:	4f 1a       	sub	r4, r31
 b82:	51 08       	sbc	r5, r1
 b84:	41 14       	cp	r4, r1
 b86:	51 04       	cpc	r5, r1
 b88:	71 f7       	brne	.-36     	; 0xb66 <vfprintf+0x1b4>
 b8a:	e5 c0       	rjmp	.+458    	; 0xd56 <vfprintf+0x3a4>
 b8c:	84 36       	cpi	r24, 0x64	; 100
 b8e:	11 f0       	breq	.+4      	; 0xb94 <vfprintf+0x1e2>
 b90:	89 36       	cpi	r24, 0x69	; 105
 b92:	39 f5       	brne	.+78     	; 0xbe2 <vfprintf+0x230>
 b94:	f8 01       	movw	r30, r16
 b96:	27 ff       	sbrs	r18, 7
 b98:	07 c0       	rjmp	.+14     	; 0xba8 <vfprintf+0x1f6>
 b9a:	60 81       	ld	r22, Z
 b9c:	71 81       	ldd	r23, Z+1	; 0x01
 b9e:	82 81       	ldd	r24, Z+2	; 0x02
 ba0:	93 81       	ldd	r25, Z+3	; 0x03
 ba2:	0c 5f       	subi	r16, 0xFC	; 252
 ba4:	1f 4f       	sbci	r17, 0xFF	; 255
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <vfprintf+0x206>
 ba8:	60 81       	ld	r22, Z
 baa:	71 81       	ldd	r23, Z+1	; 0x01
 bac:	88 27       	eor	r24, r24
 bae:	77 fd       	sbrc	r23, 7
 bb0:	80 95       	com	r24
 bb2:	98 2f       	mov	r25, r24
 bb4:	0e 5f       	subi	r16, 0xFE	; 254
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	2f 76       	andi	r18, 0x6F	; 111
 bba:	b2 2e       	mov	r11, r18
 bbc:	97 ff       	sbrs	r25, 7
 bbe:	09 c0       	rjmp	.+18     	; 0xbd2 <vfprintf+0x220>
 bc0:	90 95       	com	r25
 bc2:	80 95       	com	r24
 bc4:	70 95       	com	r23
 bc6:	61 95       	neg	r22
 bc8:	7f 4f       	sbci	r23, 0xFF	; 255
 bca:	8f 4f       	sbci	r24, 0xFF	; 255
 bcc:	9f 4f       	sbci	r25, 0xFF	; 255
 bce:	20 68       	ori	r18, 0x80	; 128
 bd0:	b2 2e       	mov	r11, r18
 bd2:	2a e0       	ldi	r18, 0x0A	; 10
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	a4 01       	movw	r20, r8
 bd8:	0e 94 1c 07 	call	0xe38	; 0xe38 <__ultoa_invert>
 bdc:	a8 2e       	mov	r10, r24
 bde:	a8 18       	sub	r10, r8
 be0:	44 c0       	rjmp	.+136    	; 0xc6a <vfprintf+0x2b8>
 be2:	85 37       	cpi	r24, 0x75	; 117
 be4:	29 f4       	brne	.+10     	; 0xbf0 <vfprintf+0x23e>
 be6:	2f 7e       	andi	r18, 0xEF	; 239
 be8:	b2 2e       	mov	r11, r18
 bea:	2a e0       	ldi	r18, 0x0A	; 10
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	25 c0       	rjmp	.+74     	; 0xc3a <vfprintf+0x288>
 bf0:	f2 2f       	mov	r31, r18
 bf2:	f9 7f       	andi	r31, 0xF9	; 249
 bf4:	bf 2e       	mov	r11, r31
 bf6:	8f 36       	cpi	r24, 0x6F	; 111
 bf8:	c1 f0       	breq	.+48     	; 0xc2a <vfprintf+0x278>
 bfa:	18 f4       	brcc	.+6      	; 0xc02 <vfprintf+0x250>
 bfc:	88 35       	cpi	r24, 0x58	; 88
 bfe:	79 f0       	breq	.+30     	; 0xc1e <vfprintf+0x26c>
 c00:	b4 c0       	rjmp	.+360    	; 0xd6a <vfprintf+0x3b8>
 c02:	80 37       	cpi	r24, 0x70	; 112
 c04:	19 f0       	breq	.+6      	; 0xc0c <vfprintf+0x25a>
 c06:	88 37       	cpi	r24, 0x78	; 120
 c08:	21 f0       	breq	.+8      	; 0xc12 <vfprintf+0x260>
 c0a:	af c0       	rjmp	.+350    	; 0xd6a <vfprintf+0x3b8>
 c0c:	2f 2f       	mov	r18, r31
 c0e:	20 61       	ori	r18, 0x10	; 16
 c10:	b2 2e       	mov	r11, r18
 c12:	b4 fe       	sbrs	r11, 4
 c14:	0d c0       	rjmp	.+26     	; 0xc30 <vfprintf+0x27e>
 c16:	8b 2d       	mov	r24, r11
 c18:	84 60       	ori	r24, 0x04	; 4
 c1a:	b8 2e       	mov	r11, r24
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <vfprintf+0x27e>
 c1e:	24 ff       	sbrs	r18, 4
 c20:	0a c0       	rjmp	.+20     	; 0xc36 <vfprintf+0x284>
 c22:	9f 2f       	mov	r25, r31
 c24:	96 60       	ori	r25, 0x06	; 6
 c26:	b9 2e       	mov	r11, r25
 c28:	06 c0       	rjmp	.+12     	; 0xc36 <vfprintf+0x284>
 c2a:	28 e0       	ldi	r18, 0x08	; 8
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	05 c0       	rjmp	.+10     	; 0xc3a <vfprintf+0x288>
 c30:	20 e1       	ldi	r18, 0x10	; 16
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <vfprintf+0x288>
 c36:	20 e1       	ldi	r18, 0x10	; 16
 c38:	32 e0       	ldi	r19, 0x02	; 2
 c3a:	f8 01       	movw	r30, r16
 c3c:	b7 fe       	sbrs	r11, 7
 c3e:	07 c0       	rjmp	.+14     	; 0xc4e <vfprintf+0x29c>
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	82 81       	ldd	r24, Z+2	; 0x02
 c46:	93 81       	ldd	r25, Z+3	; 0x03
 c48:	0c 5f       	subi	r16, 0xFC	; 252
 c4a:	1f 4f       	sbci	r17, 0xFF	; 255
 c4c:	06 c0       	rjmp	.+12     	; 0xc5a <vfprintf+0x2a8>
 c4e:	60 81       	ld	r22, Z
 c50:	71 81       	ldd	r23, Z+1	; 0x01
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	0e 5f       	subi	r16, 0xFE	; 254
 c58:	1f 4f       	sbci	r17, 0xFF	; 255
 c5a:	a4 01       	movw	r20, r8
 c5c:	0e 94 1c 07 	call	0xe38	; 0xe38 <__ultoa_invert>
 c60:	a8 2e       	mov	r10, r24
 c62:	a8 18       	sub	r10, r8
 c64:	fb 2d       	mov	r31, r11
 c66:	ff 77       	andi	r31, 0x7F	; 127
 c68:	bf 2e       	mov	r11, r31
 c6a:	b6 fe       	sbrs	r11, 6
 c6c:	0b c0       	rjmp	.+22     	; 0xc84 <vfprintf+0x2d2>
 c6e:	2b 2d       	mov	r18, r11
 c70:	2e 7f       	andi	r18, 0xFE	; 254
 c72:	a5 14       	cp	r10, r5
 c74:	50 f4       	brcc	.+20     	; 0xc8a <vfprintf+0x2d8>
 c76:	b4 fe       	sbrs	r11, 4
 c78:	0a c0       	rjmp	.+20     	; 0xc8e <vfprintf+0x2dc>
 c7a:	b2 fc       	sbrc	r11, 2
 c7c:	08 c0       	rjmp	.+16     	; 0xc8e <vfprintf+0x2dc>
 c7e:	2b 2d       	mov	r18, r11
 c80:	2e 7e       	andi	r18, 0xEE	; 238
 c82:	05 c0       	rjmp	.+10     	; 0xc8e <vfprintf+0x2dc>
 c84:	7a 2c       	mov	r7, r10
 c86:	2b 2d       	mov	r18, r11
 c88:	03 c0       	rjmp	.+6      	; 0xc90 <vfprintf+0x2de>
 c8a:	7a 2c       	mov	r7, r10
 c8c:	01 c0       	rjmp	.+2      	; 0xc90 <vfprintf+0x2de>
 c8e:	75 2c       	mov	r7, r5
 c90:	24 ff       	sbrs	r18, 4
 c92:	0d c0       	rjmp	.+26     	; 0xcae <vfprintf+0x2fc>
 c94:	fe 01       	movw	r30, r28
 c96:	ea 0d       	add	r30, r10
 c98:	f1 1d       	adc	r31, r1
 c9a:	80 81       	ld	r24, Z
 c9c:	80 33       	cpi	r24, 0x30	; 48
 c9e:	11 f4       	brne	.+4      	; 0xca4 <vfprintf+0x2f2>
 ca0:	29 7e       	andi	r18, 0xE9	; 233
 ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <vfprintf+0x304>
 ca4:	22 ff       	sbrs	r18, 2
 ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <vfprintf+0x302>
 ca8:	73 94       	inc	r7
 caa:	73 94       	inc	r7
 cac:	04 c0       	rjmp	.+8      	; 0xcb6 <vfprintf+0x304>
 cae:	82 2f       	mov	r24, r18
 cb0:	86 78       	andi	r24, 0x86	; 134
 cb2:	09 f0       	breq	.+2      	; 0xcb6 <vfprintf+0x304>
 cb4:	73 94       	inc	r7
 cb6:	23 fd       	sbrc	r18, 3
 cb8:	13 c0       	rjmp	.+38     	; 0xce0 <vfprintf+0x32e>
 cba:	20 ff       	sbrs	r18, 0
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0x318>
 cbe:	5a 2c       	mov	r5, r10
 cc0:	73 14       	cp	r7, r3
 cc2:	18 f4       	brcc	.+6      	; 0xcca <vfprintf+0x318>
 cc4:	53 0c       	add	r5, r3
 cc6:	57 18       	sub	r5, r7
 cc8:	73 2c       	mov	r7, r3
 cca:	73 14       	cp	r7, r3
 ccc:	68 f4       	brcc	.+26     	; 0xce8 <vfprintf+0x336>
 cce:	b7 01       	movw	r22, r14
 cd0:	80 e2       	ldi	r24, 0x20	; 32
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	2c 87       	std	Y+12, r18	; 0x0c
 cd6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 cda:	73 94       	inc	r7
 cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
 cde:	f5 cf       	rjmp	.-22     	; 0xcca <vfprintf+0x318>
 ce0:	73 14       	cp	r7, r3
 ce2:	10 f4       	brcc	.+4      	; 0xce8 <vfprintf+0x336>
 ce4:	37 18       	sub	r3, r7
 ce6:	01 c0       	rjmp	.+2      	; 0xcea <vfprintf+0x338>
 ce8:	31 2c       	mov	r3, r1
 cea:	24 ff       	sbrs	r18, 4
 cec:	12 c0       	rjmp	.+36     	; 0xd12 <vfprintf+0x360>
 cee:	b7 01       	movw	r22, r14
 cf0:	80 e3       	ldi	r24, 0x30	; 48
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	2c 87       	std	Y+12, r18	; 0x0c
 cf6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 cfa:	2c 85       	ldd	r18, Y+12	; 0x0c
 cfc:	22 ff       	sbrs	r18, 2
 cfe:	17 c0       	rjmp	.+46     	; 0xd2e <vfprintf+0x37c>
 d00:	21 ff       	sbrs	r18, 1
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <vfprintf+0x358>
 d04:	88 e5       	ldi	r24, 0x58	; 88
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x35c>
 d0a:	88 e7       	ldi	r24, 0x78	; 120
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	b7 01       	movw	r22, r14
 d10:	0c c0       	rjmp	.+24     	; 0xd2a <vfprintf+0x378>
 d12:	82 2f       	mov	r24, r18
 d14:	86 78       	andi	r24, 0x86	; 134
 d16:	59 f0       	breq	.+22     	; 0xd2e <vfprintf+0x37c>
 d18:	21 fd       	sbrc	r18, 1
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x36e>
 d1c:	80 e2       	ldi	r24, 0x20	; 32
 d1e:	01 c0       	rjmp	.+2      	; 0xd22 <vfprintf+0x370>
 d20:	8b e2       	ldi	r24, 0x2B	; 43
 d22:	27 fd       	sbrc	r18, 7
 d24:	8d e2       	ldi	r24, 0x2D	; 45
 d26:	b7 01       	movw	r22, r14
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d2e:	a5 14       	cp	r10, r5
 d30:	38 f4       	brcc	.+14     	; 0xd40 <vfprintf+0x38e>
 d32:	b7 01       	movw	r22, r14
 d34:	80 e3       	ldi	r24, 0x30	; 48
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d3c:	5a 94       	dec	r5
 d3e:	f7 cf       	rjmp	.-18     	; 0xd2e <vfprintf+0x37c>
 d40:	aa 94       	dec	r10
 d42:	f4 01       	movw	r30, r8
 d44:	ea 0d       	add	r30, r10
 d46:	f1 1d       	adc	r31, r1
 d48:	80 81       	ld	r24, Z
 d4a:	b7 01       	movw	r22, r14
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d52:	a1 10       	cpse	r10, r1
 d54:	f5 cf       	rjmp	.-22     	; 0xd40 <vfprintf+0x38e>
 d56:	33 20       	and	r3, r3
 d58:	09 f4       	brne	.+2      	; 0xd5c <vfprintf+0x3aa>
 d5a:	51 ce       	rjmp	.-862    	; 0x9fe <vfprintf+0x4c>
 d5c:	b7 01       	movw	r22, r14
 d5e:	80 e2       	ldi	r24, 0x20	; 32
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d66:	3a 94       	dec	r3
 d68:	f6 cf       	rjmp	.-20     	; 0xd56 <vfprintf+0x3a4>
 d6a:	f7 01       	movw	r30, r14
 d6c:	86 81       	ldd	r24, Z+6	; 0x06
 d6e:	97 81       	ldd	r25, Z+7	; 0x07
 d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x3c4>
 d72:	8f ef       	ldi	r24, 0xFF	; 255
 d74:	9f ef       	ldi	r25, 0xFF	; 255
 d76:	2c 96       	adiw	r28, 0x0c	; 12
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	f8 94       	cli
 d7c:	de bf       	out	0x3e, r29	; 62
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	cd bf       	out	0x3d, r28	; 61
 d82:	df 91       	pop	r29
 d84:	cf 91       	pop	r28
 d86:	1f 91       	pop	r17
 d88:	0f 91       	pop	r16
 d8a:	ff 90       	pop	r15
 d8c:	ef 90       	pop	r14
 d8e:	df 90       	pop	r13
 d90:	cf 90       	pop	r12
 d92:	bf 90       	pop	r11
 d94:	af 90       	pop	r10
 d96:	9f 90       	pop	r9
 d98:	8f 90       	pop	r8
 d9a:	7f 90       	pop	r7
 d9c:	6f 90       	pop	r6
 d9e:	5f 90       	pop	r5
 da0:	4f 90       	pop	r4
 da2:	3f 90       	pop	r3
 da4:	2f 90       	pop	r2
 da6:	08 95       	ret

00000da8 <strnlen_P>:
 da8:	fc 01       	movw	r30, r24
 daa:	05 90       	lpm	r0, Z+
 dac:	61 50       	subi	r22, 0x01	; 1
 dae:	70 40       	sbci	r23, 0x00	; 0
 db0:	01 10       	cpse	r0, r1
 db2:	d8 f7       	brcc	.-10     	; 0xdaa <strnlen_P+0x2>
 db4:	80 95       	com	r24
 db6:	90 95       	com	r25
 db8:	8e 0f       	add	r24, r30
 dba:	9f 1f       	adc	r25, r31
 dbc:	08 95       	ret

00000dbe <strnlen>:
 dbe:	fc 01       	movw	r30, r24
 dc0:	61 50       	subi	r22, 0x01	; 1
 dc2:	70 40       	sbci	r23, 0x00	; 0
 dc4:	01 90       	ld	r0, Z+
 dc6:	01 10       	cpse	r0, r1
 dc8:	d8 f7       	brcc	.-10     	; 0xdc0 <strnlen+0x2>
 dca:	80 95       	com	r24
 dcc:	90 95       	com	r25
 dce:	8e 0f       	add	r24, r30
 dd0:	9f 1f       	adc	r25, r31
 dd2:	08 95       	ret

00000dd4 <fputc>:
 dd4:	0f 93       	push	r16
 dd6:	1f 93       	push	r17
 dd8:	cf 93       	push	r28
 dda:	df 93       	push	r29
 ddc:	18 2f       	mov	r17, r24
 dde:	09 2f       	mov	r16, r25
 de0:	eb 01       	movw	r28, r22
 de2:	8b 81       	ldd	r24, Y+3	; 0x03
 de4:	81 fd       	sbrc	r24, 1
 de6:	03 c0       	rjmp	.+6      	; 0xdee <fputc+0x1a>
 de8:	8f ef       	ldi	r24, 0xFF	; 255
 dea:	9f ef       	ldi	r25, 0xFF	; 255
 dec:	20 c0       	rjmp	.+64     	; 0xe2e <fputc+0x5a>
 dee:	82 ff       	sbrs	r24, 2
 df0:	10 c0       	rjmp	.+32     	; 0xe12 <fputc+0x3e>
 df2:	4e 81       	ldd	r20, Y+6	; 0x06
 df4:	5f 81       	ldd	r21, Y+7	; 0x07
 df6:	2c 81       	ldd	r18, Y+4	; 0x04
 df8:	3d 81       	ldd	r19, Y+5	; 0x05
 dfa:	42 17       	cp	r20, r18
 dfc:	53 07       	cpc	r21, r19
 dfe:	7c f4       	brge	.+30     	; 0xe1e <fputc+0x4a>
 e00:	e8 81       	ld	r30, Y
 e02:	f9 81       	ldd	r31, Y+1	; 0x01
 e04:	9f 01       	movw	r18, r30
 e06:	2f 5f       	subi	r18, 0xFF	; 255
 e08:	3f 4f       	sbci	r19, 0xFF	; 255
 e0a:	39 83       	std	Y+1, r19	; 0x01
 e0c:	28 83       	st	Y, r18
 e0e:	10 83       	st	Z, r17
 e10:	06 c0       	rjmp	.+12     	; 0xe1e <fputc+0x4a>
 e12:	e8 85       	ldd	r30, Y+8	; 0x08
 e14:	f9 85       	ldd	r31, Y+9	; 0x09
 e16:	81 2f       	mov	r24, r17
 e18:	09 95       	icall
 e1a:	89 2b       	or	r24, r25
 e1c:	29 f7       	brne	.-54     	; 0xde8 <fputc+0x14>
 e1e:	2e 81       	ldd	r18, Y+6	; 0x06
 e20:	3f 81       	ldd	r19, Y+7	; 0x07
 e22:	2f 5f       	subi	r18, 0xFF	; 255
 e24:	3f 4f       	sbci	r19, 0xFF	; 255
 e26:	3f 83       	std	Y+7, r19	; 0x07
 e28:	2e 83       	std	Y+6, r18	; 0x06
 e2a:	81 2f       	mov	r24, r17
 e2c:	90 2f       	mov	r25, r16
 e2e:	df 91       	pop	r29
 e30:	cf 91       	pop	r28
 e32:	1f 91       	pop	r17
 e34:	0f 91       	pop	r16
 e36:	08 95       	ret

00000e38 <__ultoa_invert>:
 e38:	fa 01       	movw	r30, r20
 e3a:	aa 27       	eor	r26, r26
 e3c:	28 30       	cpi	r18, 0x08	; 8
 e3e:	51 f1       	breq	.+84     	; 0xe94 <__ultoa_invert+0x5c>
 e40:	20 31       	cpi	r18, 0x10	; 16
 e42:	81 f1       	breq	.+96     	; 0xea4 <__ultoa_invert+0x6c>
 e44:	e8 94       	clt
 e46:	6f 93       	push	r22
 e48:	6e 7f       	andi	r22, 0xFE	; 254
 e4a:	6e 5f       	subi	r22, 0xFE	; 254
 e4c:	7f 4f       	sbci	r23, 0xFF	; 255
 e4e:	8f 4f       	sbci	r24, 0xFF	; 255
 e50:	9f 4f       	sbci	r25, 0xFF	; 255
 e52:	af 4f       	sbci	r26, 0xFF	; 255
 e54:	b1 e0       	ldi	r27, 0x01	; 1
 e56:	3e d0       	rcall	.+124    	; 0xed4 <__ultoa_invert+0x9c>
 e58:	b4 e0       	ldi	r27, 0x04	; 4
 e5a:	3c d0       	rcall	.+120    	; 0xed4 <__ultoa_invert+0x9c>
 e5c:	67 0f       	add	r22, r23
 e5e:	78 1f       	adc	r23, r24
 e60:	89 1f       	adc	r24, r25
 e62:	9a 1f       	adc	r25, r26
 e64:	a1 1d       	adc	r26, r1
 e66:	68 0f       	add	r22, r24
 e68:	79 1f       	adc	r23, r25
 e6a:	8a 1f       	adc	r24, r26
 e6c:	91 1d       	adc	r25, r1
 e6e:	a1 1d       	adc	r26, r1
 e70:	6a 0f       	add	r22, r26
 e72:	71 1d       	adc	r23, r1
 e74:	81 1d       	adc	r24, r1
 e76:	91 1d       	adc	r25, r1
 e78:	a1 1d       	adc	r26, r1
 e7a:	20 d0       	rcall	.+64     	; 0xebc <__ultoa_invert+0x84>
 e7c:	09 f4       	brne	.+2      	; 0xe80 <__ultoa_invert+0x48>
 e7e:	68 94       	set
 e80:	3f 91       	pop	r19
 e82:	2a e0       	ldi	r18, 0x0A	; 10
 e84:	26 9f       	mul	r18, r22
 e86:	11 24       	eor	r1, r1
 e88:	30 19       	sub	r19, r0
 e8a:	30 5d       	subi	r19, 0xD0	; 208
 e8c:	31 93       	st	Z+, r19
 e8e:	de f6       	brtc	.-74     	; 0xe46 <__ultoa_invert+0xe>
 e90:	cf 01       	movw	r24, r30
 e92:	08 95       	ret
 e94:	46 2f       	mov	r20, r22
 e96:	47 70       	andi	r20, 0x07	; 7
 e98:	40 5d       	subi	r20, 0xD0	; 208
 e9a:	41 93       	st	Z+, r20
 e9c:	b3 e0       	ldi	r27, 0x03	; 3
 e9e:	0f d0       	rcall	.+30     	; 0xebe <__ultoa_invert+0x86>
 ea0:	c9 f7       	brne	.-14     	; 0xe94 <__ultoa_invert+0x5c>
 ea2:	f6 cf       	rjmp	.-20     	; 0xe90 <__ultoa_invert+0x58>
 ea4:	46 2f       	mov	r20, r22
 ea6:	4f 70       	andi	r20, 0x0F	; 15
 ea8:	40 5d       	subi	r20, 0xD0	; 208
 eaa:	4a 33       	cpi	r20, 0x3A	; 58
 eac:	18 f0       	brcs	.+6      	; 0xeb4 <__ultoa_invert+0x7c>
 eae:	49 5d       	subi	r20, 0xD9	; 217
 eb0:	31 fd       	sbrc	r19, 1
 eb2:	40 52       	subi	r20, 0x20	; 32
 eb4:	41 93       	st	Z+, r20
 eb6:	02 d0       	rcall	.+4      	; 0xebc <__ultoa_invert+0x84>
 eb8:	a9 f7       	brne	.-22     	; 0xea4 <__ultoa_invert+0x6c>
 eba:	ea cf       	rjmp	.-44     	; 0xe90 <__ultoa_invert+0x58>
 ebc:	b4 e0       	ldi	r27, 0x04	; 4
 ebe:	a6 95       	lsr	r26
 ec0:	97 95       	ror	r25
 ec2:	87 95       	ror	r24
 ec4:	77 95       	ror	r23
 ec6:	67 95       	ror	r22
 ec8:	ba 95       	dec	r27
 eca:	c9 f7       	brne	.-14     	; 0xebe <__ultoa_invert+0x86>
 ecc:	00 97       	sbiw	r24, 0x00	; 0
 ece:	61 05       	cpc	r22, r1
 ed0:	71 05       	cpc	r23, r1
 ed2:	08 95       	ret
 ed4:	9b 01       	movw	r18, r22
 ed6:	ac 01       	movw	r20, r24
 ed8:	0a 2e       	mov	r0, r26
 eda:	06 94       	lsr	r0
 edc:	57 95       	ror	r21
 ede:	47 95       	ror	r20
 ee0:	37 95       	ror	r19
 ee2:	27 95       	ror	r18
 ee4:	ba 95       	dec	r27
 ee6:	c9 f7       	brne	.-14     	; 0xeda <__ultoa_invert+0xa2>
 ee8:	62 0f       	add	r22, r18
 eea:	73 1f       	adc	r23, r19
 eec:	84 1f       	adc	r24, r20
 eee:	95 1f       	adc	r25, r21
 ef0:	a0 1d       	adc	r26, r0
 ef2:	08 95       	ret

00000ef4 <_exit>:
 ef4:	f8 94       	cli

00000ef6 <__stop_program>:
 ef6:	ff cf       	rjmp	.-2      	; 0xef6 <__stop_program>
