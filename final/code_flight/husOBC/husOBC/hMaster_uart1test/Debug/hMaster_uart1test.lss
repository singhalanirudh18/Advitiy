
hMaster_uart1test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000296  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000062e  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000262  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033f  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027c  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000183  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 37       	cpi	r26, 0x70	; 112
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	c8 57       	subi	r28, 0x78	; 120
  c8:	d1 09       	sbc	r29, r1
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	char temp;
	
	DDRA = 0xF0;
  d4:	80 ef       	ldi	r24, 0xF0	; 240
  d6:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
  d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x22>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x2c>
  ea:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
  ec:	1b ba       	out	0x1b, r1	; 27
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x36>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x40>
  fe:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	8b bb       	out	0x1b, r24	; 27
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	89 e6       	ldi	r24, 0x69	; 105
 108:	98 e1       	ldi	r25, 0x18	; 24
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x4c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x56>
 114:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 116:	1b ba       	out	0x1b, r1	; 27
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	98 e1       	ldi	r25, 0x18	; 24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x60>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x6a>
 128:	00 00       	nop
	_delay_ms(1000);
	
	init_UART1();
 12a:	0e 94 07 01 	call	0x20e	; 0x20e <init_UART1>
  
	transmit_UART1('\r');
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('\r');
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('H');
 13a:	88 e4       	ldi	r24, 0x48	; 72
 13c:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('e');
 140:	85 e6       	ldi	r24, 0x65	; 101
 142:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('l');
 146:	8c e6       	ldi	r24, 0x6C	; 108
 148:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('l');
 14c:	8c e6       	ldi	r24, 0x6C	; 108
 14e:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('o');
 152:	8f e6       	ldi	r24, 0x6F	; 111
 154:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	e7 e4       	ldi	r30, 0x47	; 71
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	de 01       	movw	r26, r28
 160:	11 96       	adiw	r26, 0x01	; 1
 162:	01 90       	ld	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	8a 95       	dec	r24
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xa4>
	transmit_string_UART1(array);
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 33 01 	call	0x266	; 0x266 <transmit_string_UART1>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 172:	86 e2       	ldi	r24, 0x26	; 38
 174:	e0 e0       	ldi	r30, 0x00	; 0
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	de 01       	movw	r26, r28
 17a:	99 96       	adiw	r26, 0x29	; 41
 17c:	01 90       	ld	r0, Z+
 17e:	0d 92       	st	X+, r0
 180:	8a 95       	dec	r24
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xbe>
	sprintf(array2,"\rU r communicating through UART_");
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	e6 e2       	ldi	r30, 0x26	; 38
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	de 01       	movw	r26, r28
 18c:	af 5a       	subi	r26, 0xAF	; 175
 18e:	bf 4f       	sbci	r27, 0xFF	; 255
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	8a 95       	dec	r24
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xd2>
		
/************************************************************/

	while(1){
	PORTA = 0xA0;
 198:	0f 2e       	mov	r0, r31
 19a:	f0 ea       	ldi	r31, 0xA0	; 160
 19c:	ff 2e       	mov	r15, r31
 19e:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x50;
 1a0:	00 e5       	ldi	r16, 0x50	; 80
	sprintf(array2,"\rU r communicating through UART_");
		
/************************************************************/

	while(1){
	PORTA = 0xA0;
 1a2:	fb ba       	out	0x1b, r15	; 27
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	84 e3       	ldi	r24, 0x34	; 52
 1a8:	9c e0       	ldi	r25, 0x0C	; 12
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0xec>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xf6>
 1b4:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 1b6:	0b bb       	out	0x1b, r16	; 27
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	84 e3       	ldi	r24, 0x34	; 52
 1bc:	9c e0       	ldi	r25, 0x0C	; 12
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x100>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x10a>
 1c8:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART1('\r');
 1ca:	8d e0       	ldi	r24, 0x0D	; 13
 1cc:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('\r');
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('H');
 1d6:	88 e4       	ldi	r24, 0x48	; 72
 1d8:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1('i');
 1dc:	89 e6       	ldi	r24, 0x69	; 105
 1de:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	
	transmit_string_UART1(array1);
 1e2:	ce 01       	movw	r24, r28
 1e4:	89 96       	adiw	r24, 0x29	; 41
 1e6:	0e 94 33 01 	call	0x266	; 0x266 <transmit_string_UART1>
	transmit_string_UART1(array2);
 1ea:	ce 01       	movw	r24, r28
 1ec:	8f 5a       	subi	r24, 0xAF	; 175
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	0e 94 33 01 	call	0x266	; 0x266 <transmit_string_UART1>
	transmit_UART1('1');
 1f4:	81 e3       	ldi	r24, 0x31	; 49
 1f6:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	temp = receive_UART1();
 1fa:	0e 94 2b 01 	call	0x256	; 0x256 <receive_UART1>
 1fe:	18 2f       	mov	r17, r24
	transmit_UART1('\t');
 200:	89 e0       	ldi	r24, 0x09	; 9
 202:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
	transmit_UART1(temp);
 206:	81 2f       	mov	r24, r17
 208:	0e 94 23 01 	call	0x246	; 0x246 <transmit_UART1>
 20c:	ca cf       	rjmp	.-108    	; 0x1a2 <main+0xe4>

0000020e <init_UART1>:
  UBRR0L = 103;
  UBRR0H = 0;
}

void init_UART1(void )
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29

  UCSR1A = 0;
 212:	cb e9       	ldi	r28, 0x9B	; 155
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	18 82       	st	Y, r1
  UCSR1B = 0;
 218:	aa e9       	ldi	r26, 0x9A	; 154
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	1c 92       	st	X, r1
  UCSR1C = 0;
 21e:	ed e9       	ldi	r30, 0x9D	; 157
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
 224:	88 81       	ld	r24, Y
 226:	82 60       	ori	r24, 0x02	; 2
 228:	88 83       	st	Y, r24
  ///Enable Reception
  UCSR1B |= _BV(RXEN1) | _BV(TXEN1);
 22a:	8c 91       	ld	r24, X
 22c:	88 61       	ori	r24, 0x18	; 24
 22e:	8c 93       	st	X, r24
  ///8-bit Data Byte, 2 Stop bits
  UCSR1C |= _BV(USBS1) | _BV(UCSZ11) | _BV(UCSZ10);
 230:	80 81       	ld	r24, Z
 232:	8e 60       	ori	r24, 0x0E	; 14
 234:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
 236:	87 e6       	ldi	r24, 0x67	; 103
 238:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = 0;
 23c:	10 92 98 00 	sts	0x0098, r1
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <transmit_UART1>:

void transmit_UART1(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR1A & (_BV(UDRE1))) );
 246:	eb e9       	ldi	r30, 0x9B	; 155
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	95 ff       	sbrs	r25, 5
 24e:	fd cf       	rjmp	.-6      	; 0x24a <transmit_UART1+0x4>
  //* Start transmission
  UDR1 = data;
 250:	80 93 9c 00 	sts	0x009C, r24
 254:	08 95       	ret

00000256 <receive_UART1>:
  UDR0 = data;
}

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
 256:	eb e9       	ldi	r30, 0x9B	; 155
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	88 23       	and	r24, r24
 25e:	ec f7       	brge	.-6      	; 0x25a <receive_UART1+0x4>
  return UDR1;
 260:	80 91 9c 00 	lds	r24, 0x009C
}
 264:	08 95       	ret

00000266 <transmit_string_UART1>:
    i++;
  }
}

void transmit_string_UART1(char *buffer)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 26a:	fc 01       	movw	r30, r24
 26c:	20 81       	ld	r18, Z
 26e:	22 23       	and	r18, r18
 270:	69 f0       	breq	.+26     	; 0x28c <transmit_string_UART1+0x26>
 272:	dc 01       	movw	r26, r24
 274:	11 96       	adiw	r26, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR1A & (_BV(UDRE1))) );
 276:	eb e9       	ldi	r30, 0x9B	; 155
 278:	f0 e0       	ldi	r31, 0x00	; 0
    	///* Start transmission
    	UDR1 = buffer[i];
 27a:	cc e9       	ldi	r28, 0x9C	; 156
 27c:	d0 e0       	ldi	r29, 0x00	; 0
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR1A & (_BV(UDRE1))) );
 27e:	80 81       	ld	r24, Z
 280:	85 ff       	sbrs	r24, 5
 282:	fd cf       	rjmp	.-6      	; 0x27e <transmit_string_UART1+0x18>
    	///* Start transmission
    	UDR1 = buffer[i];
 284:	28 83       	st	Y, r18

void transmit_string_UART1(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 286:	2d 91       	ld	r18, X+
 288:	21 11       	cpse	r18, r1
 28a:	f9 cf       	rjmp	.-14     	; 0x27e <transmit_string_UART1+0x18>
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
