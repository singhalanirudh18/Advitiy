
OILS_SS_Tor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000009a6  00000a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800108  00800108  00000a42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002113  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a88  00000000  00000000  00002d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002519  00000000  00000000  0000380d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00005d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000086a5  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d2  00000000  00000000  0000e775  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  0000ed47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a3a  00000000  00000000  0000eeb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 39       	cpi	r26, 0x9A	; 154
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	6e c4       	rjmp	.+2268   	; 0x9a2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
/************************************************************/
	char buffer[40];
	double aa;
	int i;
	unsigned int bb;
	init_SPI();
  c8:	5c d2       	rcall	.+1208   	; 0x582 <init_SPI>
	
	transmit_string_UART0(array1);
	transmit_string_UART0(array2);
	
/************************************************************/
	PORTA = 0xA0;
  ca:	80 ea       	ldi	r24, 0xA0	; 160
  cc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	84 e3       	ldi	r24, 0x34	; 52
  d2:	9c e0       	ldi	r25, 0x0C	; 12
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0xc>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x16>
  de:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
  e0:	80 e5       	ldi	r24, 0x50	; 80
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	ef ef       	ldi	r30, 0xFF	; 255
  e6:	f4 e3       	ldi	r31, 0x34	; 52
  e8:	2c e0       	ldi	r18, 0x0C	; 12
  ea:	e1 50       	subi	r30, 0x01	; 1
  ec:	f0 40       	sbci	r31, 0x00	; 0
  ee:	20 40       	sbci	r18, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x22>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x2c>
  f4:	00 00       	nop
	_delay_ms(500);
	configure_torquer();   //tor
  f6:	f1 d1       	rcall	.+994    	; 0x4da <configure_torquer>
	//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
	
	//for(i=0;i<6;i++)
	//{ 
		
		aa = Current_state.ss.reading[0];
  f8:	0f 2e       	mov	r0, r31
  fa:	fb e3       	ldi	r31, 0x3B	; 59
  fc:	8f 2e       	mov	r8, r31
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	9f 2e       	mov	r9, r31
 102:	f0 2d       	mov	r31, r0
		
		bb = ((aa-2047)/2047)*65535 ;
		Current_state.pwm.x_dir =0;             //0;
 104:	0f 2e       	mov	r0, r31
 106:	f0 e6       	ldi	r31, 0x60	; 96
 108:	af 2e       	mov	r10, r31
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	bf 2e       	mov	r11, r31
 10e:	f0 2d       	mov	r31, r0
		Current_state.pwm.x = bb ;             //32768; 0.5
 110:	0f 2e       	mov	r0, r31
 112:	fa e5       	ldi	r31, 0x5A	; 90
 114:	cf 2e       	mov	r12, r31
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	df 2e       	mov	r13, r31
 11a:	f0 2d       	mov	r31, r0
		Current_state.pwm.y_dir = 0;            //0;
 11c:	0f 2e       	mov	r0, r31
 11e:	f1 e6       	ldi	r31, 0x61	; 97
 120:	ef 2e       	mov	r14, r31
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	ff 2e       	mov	r15, r31
 126:	f0 2d       	mov	r31, r0
		Current_state.pwm.y = bb;            //32768; 0.75
 128:	0c e5       	ldi	r16, 0x5C	; 92
 12a:	11 e0       	ldi	r17, 0x01	; 1
		Current_state.pwm.z_dir =0;             // 0;
 12c:	c2 e6       	ldi	r28, 0x62	; 98
 12e:	d1 e0       	ldi	r29, 0x01	; 1
		Current_state.pwm.z = bb;
 130:	0f 2e       	mov	r0, r31
 132:	fe e5       	ldi	r31, 0x5E	; 94
 134:	6f 2e       	mov	r6, r31
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	7f 2e       	mov	r7, r31
 13a:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	configure_torquer();   //tor
	///* * Reading Sunsensor
	while(1)
	{
    read_SS();
 13c:	cb d1       	rcall	.+918    	; 0x4d4 <read_SS>
	//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
	
	//for(i=0;i<6;i++)
	//{ 
		
		aa = Current_state.ss.reading[0];
 13e:	f4 01       	movw	r30, r8
 140:	60 81       	ld	r22, Z
 142:	71 81       	ldd	r23, Z+1	; 0x01
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	3b d3       	rcall	.+1654   	; 0x7c0 <__floatunsisf>
		
		bb = ((aa-2047)/2047)*65535 ;
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 ee       	ldi	r19, 0xE0	; 224
 14e:	4f ef       	ldi	r20, 0xFF	; 255
 150:	54 e4       	ldi	r21, 0x44	; 68
 152:	3d d2       	rcall	.+1146   	; 0x5ce <__subsf3>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 ee       	ldi	r19, 0xE0	; 224
 158:	4f ef       	ldi	r20, 0xFF	; 255
 15a:	54 e4       	ldi	r21, 0x44	; 68
 15c:	9d d2       	rcall	.+1338   	; 0x698 <__divsf3>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	4f e7       	ldi	r20, 0x7F	; 127
 164:	57 e4       	ldi	r21, 0x47	; 71
 166:	ba d3       	rcall	.+1908   	; 0x8dc <__mulsf3>
 168:	ff d2       	rcall	.+1534   	; 0x768 <__fixunssfsi>
		Current_state.pwm.x_dir =0;             //0;
 16a:	f5 01       	movw	r30, r10
 16c:	10 82       	st	Z, r1
		Current_state.pwm.x = bb ;             //32768; 0.5
 16e:	f6 01       	movw	r30, r12
 170:	71 83       	std	Z+1, r23	; 0x01
 172:	60 83       	st	Z, r22
		Current_state.pwm.y_dir = 0;            //0;
 174:	f7 01       	movw	r30, r14
 176:	10 82       	st	Z, r1
		Current_state.pwm.y = bb;            //32768; 0.75
 178:	f8 01       	movw	r30, r16
 17a:	71 83       	std	Z+1, r23	; 0x01
 17c:	60 83       	st	Z, r22
		Current_state.pwm.z_dir =0;             // 0;
 17e:	18 82       	st	Y, r1
		Current_state.pwm.z = bb;
 180:	f3 01       	movw	r30, r6
 182:	71 83       	std	Z+1, r23	; 0x01
 184:	60 83       	st	Z, r22
		set_PWM ();                                    //bb = (aa*4*100)/4096;
 186:	cf d1       	rcall	.+926    	; 0x526 <set_PWM>
 188:	d9 cf       	rjmp	.-78     	; 0x13c <main+0x74>

0000018a <configure_SS>:
#include "peripherals.h"

void configure_SS(void)
{
	///Set PD and Range pins as output
	sbi(DDRB, PB6);
 18a:	be 9a       	sbi	0x17, 6	; 23
	sbi(DDRB, PB7);
 18c:	bf 9a       	sbi	0x17, 7	; 23
  
	///Set PD high: power up the ADC IC
	sbi(PORTB, PB6);
 18e:	c6 9a       	sbi	0x18, 6	; 24
	///Set Range high: Selecting range -> Range2
	sbi(PORTB, PB7);
 190:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8a e1       	ldi	r24, 0x1A	; 26
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <configure_SS+0xa>
 198:	00 c0       	rjmp	.+0      	; 0x19a <configure_SS+0x10>
  
	_delay_us(10);
	///Configure GPIO pins - GPIO3 as PD and GPIO2 as Range input
	init_SPI_trans(ADC_S);
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	00 d2       	rcall	.+1024   	; 0x59e <init_SPI_trans>
	SPI_transfer(0b01000001);
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0d d2       	rcall	.+1050   	; 0x5bc <SPI_transfer>
	SPI_transfer(0b00000000);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0b d2       	rcall	.+1046   	; 0x5bc <SPI_transfer>
	end_SPI();
 1a6:	0f d2       	rcall	.+1054   	; 0x5c6 <end_SPI>
 1a8:	8a e1       	ldi	r24, 0x1A	; 26
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <configure_SS+0x20>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <configure_SS+0x26>
 1b0:	08 95       	ret

000001b2 <poll_SS>:
	_delay_us(10);
}

void poll_SS(void)
{
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 e0       	ldi	r16, 0x00	; 0
 1c0:	10 e0       	ldi	r17, 0x00	; 0
    SPI_transfer(0b00011000 | (channel >> 1));
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    end_SPI();
	_delay_us(1);
    */
    init_SPI_trans(ADC_S);
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	ec d1       	rcall	.+984    	; 0x59e <init_SPI_trans>
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
 1c6:	80 2f       	mov	r24, r16
 1c8:	86 95       	lsr	r24
 1ca:	88 61       	ori	r24, 0x18	; 24
 1cc:	f7 d1       	rcall	.+1006   	; 0x5bc <SPI_transfer>
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e8 01       	movw	r28, r16
 1d2:	cc 0f       	add	r28, r28
 1d4:	dd 1f       	adc	r29, r29
 1d6:	c2 5f       	subi	r28, 0xF2	; 242
 1d8:	de 4f       	sbci	r29, 0xFE	; 254
 1da:	9e a7       	std	Y+46, r25	; 0x2e
 1dc:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
 1de:	8d a5       	ldd	r24, Y+45	; 0x2d
 1e0:	9e a5       	ldd	r25, Y+46	; 0x2e
 1e2:	98 2f       	mov	r25, r24
 1e4:	88 27       	eor	r24, r24
 1e6:	9e a7       	std	Y+46, r25	; 0x2e
 1e8:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] &= 0x0F00;
 1ea:	8d a5       	ldd	r24, Y+45	; 0x2d
 1ec:	9e a5       	ldd	r25, Y+46	; 0x2e
 1ee:	88 27       	eor	r24, r24
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	9e a7       	std	Y+46, r25	; 0x2e
 1f4:	8d a7       	std	Y+45, r24	; 0x2d
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x50);//0x40
 1f6:	ed a4       	ldd	r14, Y+45	; 0x2d
 1f8:	fe a4       	ldd	r15, Y+46	; 0x2e
 1fa:	c8 01       	movw	r24, r16
 1fc:	96 95       	lsr	r25
 1fe:	98 2f       	mov	r25, r24
 200:	88 27       	eor	r24, r24
 202:	97 95       	ror	r25
 204:	87 95       	ror	r24
 206:	80 65       	ori	r24, 0x50	; 80
 208:	d9 d1       	rcall	.+946    	; 0x5bc <SPI_transfer>
 20a:	e8 2a       	or	r14, r24
 20c:	fe a6       	std	Y+46, r15	; 0x2e
 20e:	ed a6       	std	Y+45, r14	; 0x2d
    end_SPI();
 210:	da d1       	rcall	.+948    	; 0x5c6 <end_SPI>
 212:	8a e1       	ldi	r24, 0x1A	; 26
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <poll_SS+0x62>
 218:	00 c0       	rjmp	.+0      	; 0x21a <poll_SS+0x68>
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
 21e:	06 30       	cpi	r16, 0x06	; 6
 220:	11 05       	cpc	r17, r1
 222:	79 f6       	brne	.-98     	; 0x1c2 <poll_SS+0x10>
    
   channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
 224:	c6 98       	cbi	0x18, 6	; 24
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	0b b6       	in	r0, 0x3b	; 59
 240:	0f 92       	push	r0
 242:	2f 93       	push	r18
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
 250:	8c b1       	in	r24, 0x0c	; 12
 252:	80 93 09 01 	sts	0x0109, r24
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
 256:	80 91 0a 01 	lds	r24, 0x010A
 25a:	90 91 0b 01 	lds	r25, 0x010B
 25e:	a0 91 0c 01 	lds	r26, 0x010C
 262:	b0 91 0d 01 	lds	r27, 0x010D
 266:	ba 2f       	mov	r27, r26
 268:	a9 2f       	mov	r26, r25
 26a:	98 2f       	mov	r25, r24
 26c:	88 27       	eor	r24, r24
 26e:	80 93 0a 01 	sts	0x010A, r24
 272:	90 93 0b 01 	sts	0x010B, r25
 276:	a0 93 0c 01 	sts	0x010C, r26
 27a:	b0 93 0d 01 	sts	0x010D, r27
  buffer &= 0xFFFFFF00;
 27e:	80 91 0a 01 	lds	r24, 0x010A
 282:	90 91 0b 01 	lds	r25, 0x010B
 286:	a0 91 0c 01 	lds	r26, 0x010C
 28a:	b0 91 0d 01 	lds	r27, 0x010D
 28e:	88 27       	eor	r24, r24
 290:	80 93 0a 01 	sts	0x010A, r24
 294:	90 93 0b 01 	sts	0x010B, r25
 298:	a0 93 0c 01 	sts	0x010C, r26
 29c:	b0 93 0d 01 	sts	0x010D, r27
  buffer |= (uint32_t) last_byte;
 2a0:	20 91 09 01 	lds	r18, 0x0109
 2a4:	80 91 0a 01 	lds	r24, 0x010A
 2a8:	90 91 0b 01 	lds	r25, 0x010B
 2ac:	a0 91 0c 01 	lds	r26, 0x010C
 2b0:	b0 91 0d 01 	lds	r27, 0x010D
 2b4:	82 2b       	or	r24, r18
 2b6:	80 93 0a 01 	sts	0x010A, r24
 2ba:	90 93 0b 01 	sts	0x010B, r25
 2be:	a0 93 0c 01 	sts	0x010C, r26
 2c2:	b0 93 0d 01 	sts	0x010D, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
 2c6:	80 91 06 01 	lds	r24, 0x0106
 2ca:	8c 30       	cpi	r24, 0x0C	; 12
 2cc:	a0 f4       	brcc	.+40     	; 0x2f6 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 2ce:	e0 91 06 01 	lds	r30, 0x0106
 2d2:	80 91 09 01 	lds	r24, 0x0109
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	e3 59       	subi	r30, 0x93	; 147
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 2de:	80 91 06 01 	lds	r24, 0x0106
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 06 01 	sts	0x0106, r24
    if(pos == 12)
 2e8:	80 91 06 01 	lds	r24, 0x0106
 2ec:	8c 30       	cpi	r24, 0x0C	; 12
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <__vector_18+0xc2>
      pos = 0xFF;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	80 93 06 01 	sts	0x0106, r24
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 2f6:	80 91 05 01 	lds	r24, 0x0105
 2fa:	8c 30       	cpi	r24, 0x0C	; 12
 2fc:	a0 f4       	brcc	.+40     	; 0x326 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 2fe:	e0 91 05 01 	lds	r30, 0x0105
 302:	80 91 09 01 	lds	r24, 0x0109
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	e7 58       	subi	r30, 0x87	; 135
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	80 83       	st	Z, r24
    
    vel++;
 30e:	80 91 05 01 	lds	r24, 0x0105
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 05 01 	sts	0x0105, r24
    if(vel == 12)
 318:	80 91 05 01 	lds	r24, 0x0105
 31c:	8c 30       	cpi	r24, 0x0C	; 12
 31e:	19 f4       	brne	.+6      	; 0x326 <__vector_18+0xf2>
      vel = 0xFF;
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	80 93 05 01 	sts	0x0105, r24
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 326:	80 91 04 01 	lds	r24, 0x0104
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	c0 f4       	brcc	.+48     	; 0x35e <__vector_18+0x12a>
  {
    if(dop >= 2)
 32e:	80 91 04 01 	lds	r24, 0x0104
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	40 f0       	brcs	.+16     	; 0x346 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 336:	e0 91 04 01 	lds	r30, 0x0104
 33a:	80 91 09 01 	lds	r24, 0x0109
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	e2 50       	subi	r30, 0x02	; 2
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	80 83       	st	Z, r24
      
    dop++;
 346:	80 91 04 01 	lds	r24, 0x0104
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 04 01 	sts	0x0104, r24
    if(dop == 4)
 350:	80 91 04 01 	lds	r24, 0x0104
 354:	84 30       	cpi	r24, 0x04	; 4
 356:	19 f4       	brne	.+6      	; 0x35e <__vector_18+0x12a>
      dop = 0xFF;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	80 93 04 01 	sts	0x0104, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 35e:	80 91 03 01 	lds	r24, 0x0103
 362:	80 31       	cpi	r24, 0x10	; 16
 364:	c0 f4       	brcc	.+48     	; 0x396 <__vector_18+0x162>
  {
    if(geo >= 4)
 366:	80 91 03 01 	lds	r24, 0x0103
 36a:	84 30       	cpi	r24, 0x04	; 4
 36c:	40 f0       	brcs	.+16     	; 0x37e <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 36e:	e0 91 03 01 	lds	r30, 0x0103
 372:	80 91 09 01 	lds	r24, 0x0109
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ef 57       	subi	r30, 0x7F	; 127
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 83       	st	Z, r24
    
    geo++;
 37e:	80 91 03 01 	lds	r24, 0x0103
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 03 01 	sts	0x0103, r24
    if(geo == 16)
 388:	80 91 03 01 	lds	r24, 0x0103
 38c:	80 31       	cpi	r24, 0x10	; 16
 38e:	19 f4       	brne	.+6      	; 0x396 <__vector_18+0x162>
      geo = 0xFF;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	80 93 03 01 	sts	0x0103, r24
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 396:	80 91 02 01 	lds	r24, 0x0102
 39a:	87 30       	cpi	r24, 0x07	; 7
 39c:	b8 f4       	brcc	.+46     	; 0x3cc <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 39e:	e0 91 02 01 	lds	r30, 0x0102
 3a2:	80 91 09 01 	lds	r24, 0x0109
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	ef 56       	subi	r30, 0x6F	; 111
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	80 83       	st	Z, r24
    
    time++;
 3ae:	80 91 02 01 	lds	r24, 0x0102
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 02 01 	sts	0x0102, r24
    if(time == 7)
 3b8:	80 91 02 01 	lds	r24, 0x0102
 3bc:	87 30       	cpi	r24, 0x07	; 7
 3be:	31 f4       	brne	.+12     	; 0x3cc <__vector_18+0x198>
    {
      time = 0xFF;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	80 93 02 01 	sts	0x0102, r24
      ///* * The Entire message has been read
      message_end = 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 08 01 	sts	0x0108, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 3cc:	80 91 0a 01 	lds	r24, 0x010A
 3d0:	90 91 0b 01 	lds	r25, 0x010B
 3d4:	a0 91 0c 01 	lds	r26, 0x010C
 3d8:	b0 91 0d 01 	lds	r27, 0x010D
 3dc:	8c 3a       	cpi	r24, 0xAC	; 172
 3de:	94 40       	sbci	r25, 0x04	; 4
 3e0:	af 43       	sbci	r26, 0x3F	; 63
 3e2:	bf 43       	sbci	r27, 0x3F	; 63
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <__vector_18+0x1bc>
  {
    message_end = 0;
 3e6:	10 92 08 01 	sts	0x0108, r1
    pos = 0;
 3ea:	10 92 06 01 	sts	0x0106, r1
 3ee:	3f c0       	rjmp	.+126    	; 0x46e <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 3f0:	80 91 0a 01 	lds	r24, 0x010A
 3f4:	90 91 0b 01 	lds	r25, 0x010B
 3f8:	a0 91 0c 01 	lds	r26, 0x010C
 3fc:	b0 91 0d 01 	lds	r27, 0x010D
 400:	8c 3a       	cpi	r24, 0xAC	; 172
 402:	95 40       	sbci	r25, 0x05	; 5
 404:	af 43       	sbci	r26, 0x3F	; 63
 406:	bf 43       	sbci	r27, 0x3F	; 63
 408:	19 f4       	brne	.+6      	; 0x410 <__vector_18+0x1dc>
    vel = 0;
 40a:	10 92 05 01 	sts	0x0105, r1
 40e:	2f c0       	rjmp	.+94     	; 0x46e <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 410:	80 91 0a 01 	lds	r24, 0x010A
 414:	90 91 0b 01 	lds	r25, 0x010B
 418:	a0 91 0c 01 	lds	r26, 0x010C
 41c:	b0 91 0d 01 	lds	r27, 0x010D
 420:	8c 3a       	cpi	r24, 0xAC	; 172
 422:	9b 40       	sbci	r25, 0x0B	; 11
 424:	af 43       	sbci	r26, 0x3F	; 63
 426:	bf 43       	sbci	r27, 0x3F	; 63
 428:	19 f4       	brne	.+6      	; 0x430 <__vector_18+0x1fc>
    dop = 0;
 42a:	10 92 04 01 	sts	0x0104, r1
 42e:	1f c0       	rjmp	.+62     	; 0x46e <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 430:	80 91 0a 01 	lds	r24, 0x010A
 434:	90 91 0b 01 	lds	r25, 0x010B
 438:	a0 91 0c 01 	lds	r26, 0x010C
 43c:	b0 91 0d 01 	lds	r27, 0x010D
 440:	8c 3a       	cpi	r24, 0xAC	; 172
 442:	9e 40       	sbci	r25, 0x0E	; 14
 444:	af 43       	sbci	r26, 0x3F	; 63
 446:	bf 43       	sbci	r27, 0x3F	; 63
 448:	19 f4       	brne	.+6      	; 0x450 <__vector_18+0x21c>
    geo = 0;
 44a:	10 92 03 01 	sts	0x0103, r1
 44e:	0f c0       	rjmp	.+30     	; 0x46e <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 450:	80 91 0a 01 	lds	r24, 0x010A
 454:	90 91 0b 01 	lds	r25, 0x010B
 458:	a0 91 0c 01 	lds	r26, 0x010C
 45c:	b0 91 0d 01 	lds	r27, 0x010D
 460:	8c 3a       	cpi	r24, 0xAC	; 172
 462:	9f 40       	sbci	r25, 0x0F	; 15
 464:	af 43       	sbci	r26, 0x3F	; 63
 466:	bf 43       	sbci	r27, 0x3F	; 63
 468:	11 f4       	brne	.+4      	; 0x46e <__vector_18+0x23a>
    time = 0;
 46a:	10 92 02 01 	sts	0x0102, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 46e:	80 91 00 01 	lds	r24, 0x0100
 472:	90 91 01 01 	lds	r25, 0x0101
 476:	84 3f       	cpi	r24, 0xF4	; 244
 478:	91 40       	sbci	r25, 0x01	; 1
 47a:	f0 f4       	brcc	.+60     	; 0x4b8 <__vector_18+0x284>
 47c:	80 91 00 01 	lds	r24, 0x0100
 480:	90 91 01 01 	lds	r25, 0x0101
 484:	89 2b       	or	r24, r25
 486:	c1 f0       	breq	.+48     	; 0x4b8 <__vector_18+0x284>
 488:	80 91 08 01 	lds	r24, 0x0108
 48c:	88 23       	and	r24, r24
 48e:	a1 f0       	breq	.+40     	; 0x4b8 <__vector_18+0x284>
  {
    GPS_done = 1;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 63 01 	sts	0x0163, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 496:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	90 93 01 01 	sts	0x0101, r25
 4a0:	80 93 00 01 	sts	0x0100, r24
    message_end = 0;
 4a4:	10 92 08 01 	sts	0x0108, r1
    buffer = 0;
 4a8:	10 92 0a 01 	sts	0x010A, r1
 4ac:	10 92 0b 01 	sts	0x010B, r1
 4b0:	10 92 0c 01 	sts	0x010C, r1
 4b4:	10 92 0d 01 	sts	0x010D, r1
  }
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0b be       	out	0x3b, r0	; 59
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <read_SS>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 4d4:	5a de       	rcall	.-844    	; 0x18a <configure_SS>
 4d6:	6d ce       	rjmp	.-806    	; 0x1b2 <poll_SS>
 4d8:	08 95       	ret

000004da <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
 4da:	84 b3       	in	r24, 0x14	; 20
 4dc:	88 63       	ori	r24, 0x38	; 56
 4de:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
 4e0:	82 b1       	in	r24, 0x02	; 2
 4e2:	88 63       	ori	r24, 0x38	; 56
 4e4:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
 4e6:	ab e8       	ldi	r26, 0x8B	; 139
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	1c 92       	st	X, r1
  TCCR3B = 0;
 4ec:	ea e8       	ldi	r30, 0x8A	; 138
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	10 82       	st	Z, r1
  TCCR3C = 0;
 4f2:	10 92 8c 00 	sts	0x008C, r1
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
 4f6:	8c 91       	ld	r24, X
 4f8:	8a 6a       	ori	r24, 0xAA	; 170
 4fa:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
 4fc:	80 81       	ld	r24, Z
 4fe:	81 61       	ori	r24, 0x11	; 17
 500:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	9f ef       	ldi	r25, 0xFF	; 255
 506:	90 93 81 00 	sts	0x0081, r25
 50a:	80 93 80 00 	sts	0x0080, r24
  OCR3B = 0x0000;
 50e:	e4 e8       	ldi	r30, 0x84	; 132
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	11 82       	std	Z+1, r1	; 0x01
 514:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 516:	11 82       	std	Z+1, r1	; 0x01
 518:	10 82       	st	Z, r1
  OCR3B = 0x0000;
 51a:	11 82       	std	Z+1, r1	; 0x01
 51c:	10 82       	st	Z, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
 51e:	85 b3       	in	r24, 0x15	; 21
 520:	87 7c       	andi	r24, 0xC7	; 199
 522:	85 bb       	out	0x15, r24	; 21
 524:	08 95       	ret

00000526 <set_PWM>:

void set_PWM(void)
{
  
  ///If current direction of axis X/Y/Z opposite of default set pin
  if(Current_state.pwm.x_dir)
 526:	80 91 60 01 	lds	r24, 0x0160
 52a:	88 23       	and	r24, r24
 52c:	11 f0       	breq	.+4      	; 0x532 <set_PWM+0xc>
    PORTC |= _BV(PC5);
 52e:	ad 9a       	sbi	0x15, 5	; 21
 530:	01 c0       	rjmp	.+2      	; 0x534 <set_PWM+0xe>
  else
    PORTC &= ~(_BV(PC5));
 532:	ad 98       	cbi	0x15, 5	; 21
    
  if(Current_state.pwm.y_dir)
 534:	80 91 61 01 	lds	r24, 0x0161
 538:	88 23       	and	r24, r24
 53a:	11 f0       	breq	.+4      	; 0x540 <set_PWM+0x1a>
    PORTC |= _BV(PC4);
 53c:	ac 9a       	sbi	0x15, 4	; 21
 53e:	01 c0       	rjmp	.+2      	; 0x542 <set_PWM+0x1c>
  else
    PORTC &= ~(_BV(PC4));
 540:	ac 98       	cbi	0x15, 4	; 21
    
  if(Current_state.pwm.z_dir)
 542:	80 91 62 01 	lds	r24, 0x0162
 546:	88 23       	and	r24, r24
 548:	11 f0       	breq	.+4      	; 0x54e <set_PWM+0x28>
    PORTC |= _BV(PC3);
 54a:	ab 9a       	sbi	0x15, 3	; 21
 54c:	01 c0       	rjmp	.+2      	; 0x550 <set_PWM+0x2a>
  else
    PORTC &= ~(_BV(PC3));
 54e:	ab 98       	cbi	0x15, 3	; 21
    
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
 550:	80 91 5a 01 	lds	r24, 0x015A
 554:	90 91 5b 01 	lds	r25, 0x015B
 558:	90 93 87 00 	sts	0x0087, r25
 55c:	80 93 86 00 	sts	0x0086, r24
  OCR3B = Current_state.pwm.y;
 560:	80 91 5c 01 	lds	r24, 0x015C
 564:	90 91 5d 01 	lds	r25, 0x015D
 568:	90 93 85 00 	sts	0x0085, r25
 56c:	80 93 84 00 	sts	0x0084, r24
  OCR3C = Current_state.pwm.z;
 570:	80 91 5e 01 	lds	r24, 0x015E
 574:	90 91 5f 01 	lds	r25, 0x015F
 578:	90 93 83 00 	sts	0x0083, r25
 57c:	80 93 82 00 	sts	0x0082, r24
 580:	08 95       	ret

00000582 <init_SPI>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 582:	87 b3       	in	r24, 0x17	; 23
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	87 bb       	out	0x17, r24	; 23
 588:	86 e0       	ldi	r24, 0x06	; 6
 58a:	87 bb       	out	0x17, r24	; 23
 58c:	87 b3       	in	r24, 0x17	; 23
 58e:	81 63       	ori	r24, 0x31	; 49
 590:	87 bb       	out	0x17, r24	; 23
 592:	88 b3       	in	r24, 0x18	; 24
 594:	81 63       	ori	r24, 0x31	; 49
 596:	88 bb       	out	0x18, r24	; 24
 598:	83 e5       	ldi	r24, 0x53	; 83
 59a:	8d b9       	out	0x0d, r24	; 13
 59c:	08 95       	ret

0000059e <init_SPI_trans>:
 59e:	98 b3       	in	r25, 0x18	; 24
 5a0:	91 63       	ori	r25, 0x31	; 49
 5a2:	98 bb       	out	0x18, r25	; 24
 5a4:	98 b3       	in	r25, 0x18	; 24
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <init_SPI_trans+0x12>
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <init_SPI_trans+0xe>
 5b4:	20 95       	com	r18
 5b6:	92 23       	and	r25, r18
 5b8:	98 bb       	out	0x18, r25	; 24
 5ba:	08 95       	ret

000005bc <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 5bc:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 5be:	77 9b       	sbis	0x0e, 7	; 14
 5c0:	fe cf       	rjmp	.-4      	; 0x5be <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 5c2:	8f b1       	in	r24, 0x0f	; 15
}
 5c4:	08 95       	ret

000005c6 <end_SPI>:

void end_SPI(void)
{  
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |=_BV(SLAVE)|_BV(CC1020)|_BV(ADC_S);
 5c6:	88 b3       	in	r24, 0x18	; 24
 5c8:	81 63       	ori	r24, 0x31	; 49
 5ca:	88 bb       	out	0x18, r24	; 24
 5cc:	08 95       	ret

000005ce <__subsf3>:
 5ce:	50 58       	subi	r21, 0x80	; 128

000005d0 <__addsf3>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	aa 27       	eor	r26, r26
 5d4:	0e d0       	rcall	.+28     	; 0x5f2 <__addsf3x>
 5d6:	48 c1       	rjmp	.+656    	; 0x868 <__fp_round>
 5d8:	39 d1       	rcall	.+626    	; 0x84c <__fp_pscA>
 5da:	30 f0       	brcs	.+12     	; 0x5e8 <__addsf3+0x18>
 5dc:	3e d1       	rcall	.+636    	; 0x85a <__fp_pscB>
 5de:	20 f0       	brcs	.+8      	; 0x5e8 <__addsf3+0x18>
 5e0:	31 f4       	brne	.+12     	; 0x5ee <__addsf3+0x1e>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__addsf3+0x1a>
 5e6:	1e f4       	brtc	.+6      	; 0x5ee <__addsf3+0x1e>
 5e8:	2e c1       	rjmp	.+604    	; 0x846 <__fp_nan>
 5ea:	0e f4       	brtc	.+2      	; 0x5ee <__addsf3+0x1e>
 5ec:	e0 95       	com	r30
 5ee:	e7 fb       	bst	r30, 7
 5f0:	24 c1       	rjmp	.+584    	; 0x83a <__fp_inf>

000005f2 <__addsf3x>:
 5f2:	e9 2f       	mov	r30, r25
 5f4:	4a d1       	rcall	.+660    	; 0x88a <__fp_split3>
 5f6:	80 f3       	brcs	.-32     	; 0x5d8 <__addsf3+0x8>
 5f8:	ba 17       	cp	r27, r26
 5fa:	62 07       	cpc	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	95 07       	cpc	r25, r21
 602:	18 f0       	brcs	.+6      	; 0x60a <__addsf3x+0x18>
 604:	71 f4       	brne	.+28     	; 0x622 <__addsf3x+0x30>
 606:	9e f5       	brtc	.+102    	; 0x66e <__addsf3x+0x7c>
 608:	62 c1       	rjmp	.+708    	; 0x8ce <__fp_zero>
 60a:	0e f4       	brtc	.+2      	; 0x60e <__addsf3x+0x1c>
 60c:	e0 95       	com	r30
 60e:	0b 2e       	mov	r0, r27
 610:	ba 2f       	mov	r27, r26
 612:	a0 2d       	mov	r26, r0
 614:	0b 01       	movw	r0, r22
 616:	b9 01       	movw	r22, r18
 618:	90 01       	movw	r18, r0
 61a:	0c 01       	movw	r0, r24
 61c:	ca 01       	movw	r24, r20
 61e:	a0 01       	movw	r20, r0
 620:	11 24       	eor	r1, r1
 622:	ff 27       	eor	r31, r31
 624:	59 1b       	sub	r21, r25
 626:	99 f0       	breq	.+38     	; 0x64e <__addsf3x+0x5c>
 628:	59 3f       	cpi	r21, 0xF9	; 249
 62a:	50 f4       	brcc	.+20     	; 0x640 <__addsf3x+0x4e>
 62c:	50 3e       	cpi	r21, 0xE0	; 224
 62e:	68 f1       	brcs	.+90     	; 0x68a <__addsf3x+0x98>
 630:	1a 16       	cp	r1, r26
 632:	f0 40       	sbci	r31, 0x00	; 0
 634:	a2 2f       	mov	r26, r18
 636:	23 2f       	mov	r18, r19
 638:	34 2f       	mov	r19, r20
 63a:	44 27       	eor	r20, r20
 63c:	58 5f       	subi	r21, 0xF8	; 248
 63e:	f3 cf       	rjmp	.-26     	; 0x626 <__addsf3x+0x34>
 640:	46 95       	lsr	r20
 642:	37 95       	ror	r19
 644:	27 95       	ror	r18
 646:	a7 95       	ror	r26
 648:	f0 40       	sbci	r31, 0x00	; 0
 64a:	53 95       	inc	r21
 64c:	c9 f7       	brne	.-14     	; 0x640 <__addsf3x+0x4e>
 64e:	7e f4       	brtc	.+30     	; 0x66e <__addsf3x+0x7c>
 650:	1f 16       	cp	r1, r31
 652:	ba 0b       	sbc	r27, r26
 654:	62 0b       	sbc	r22, r18
 656:	73 0b       	sbc	r23, r19
 658:	84 0b       	sbc	r24, r20
 65a:	ba f0       	brmi	.+46     	; 0x68a <__addsf3x+0x98>
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	a1 f0       	breq	.+40     	; 0x688 <__addsf3x+0x96>
 660:	ff 0f       	add	r31, r31
 662:	bb 1f       	adc	r27, r27
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	c2 f7       	brpl	.-16     	; 0x65c <__addsf3x+0x6a>
 66c:	0e c0       	rjmp	.+28     	; 0x68a <__addsf3x+0x98>
 66e:	ba 0f       	add	r27, r26
 670:	62 1f       	adc	r22, r18
 672:	73 1f       	adc	r23, r19
 674:	84 1f       	adc	r24, r20
 676:	48 f4       	brcc	.+18     	; 0x68a <__addsf3x+0x98>
 678:	87 95       	ror	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f7 95       	ror	r31
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	08 f0       	brcs	.+2      	; 0x688 <__addsf3x+0x96>
 686:	b3 cf       	rjmp	.-154    	; 0x5ee <__addsf3+0x1e>
 688:	93 95       	inc	r25
 68a:	88 0f       	add	r24, r24
 68c:	08 f0       	brcs	.+2      	; 0x690 <__addsf3x+0x9e>
 68e:	99 27       	eor	r25, r25
 690:	ee 0f       	add	r30, r30
 692:	97 95       	ror	r25
 694:	87 95       	ror	r24
 696:	08 95       	ret

00000698 <__divsf3>:
 698:	0c d0       	rcall	.+24     	; 0x6b2 <__divsf3x>
 69a:	e6 c0       	rjmp	.+460    	; 0x868 <__fp_round>
 69c:	de d0       	rcall	.+444    	; 0x85a <__fp_pscB>
 69e:	40 f0       	brcs	.+16     	; 0x6b0 <__divsf3+0x18>
 6a0:	d5 d0       	rcall	.+426    	; 0x84c <__fp_pscA>
 6a2:	30 f0       	brcs	.+12     	; 0x6b0 <__divsf3+0x18>
 6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x16>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <__divsf3+0x18>
 6aa:	c7 c0       	rjmp	.+398    	; 0x83a <__fp_inf>
 6ac:	51 11       	cpse	r21, r1
 6ae:	10 c1       	rjmp	.+544    	; 0x8d0 <__fp_szero>
 6b0:	ca c0       	rjmp	.+404    	; 0x846 <__fp_nan>

000006b2 <__divsf3x>:
 6b2:	eb d0       	rcall	.+470    	; 0x88a <__fp_split3>
 6b4:	98 f3       	brcs	.-26     	; 0x69c <__divsf3+0x4>

000006b6 <__divsf3_pse>:
 6b6:	99 23       	and	r25, r25
 6b8:	c9 f3       	breq	.-14     	; 0x6ac <__divsf3+0x14>
 6ba:	55 23       	and	r21, r21
 6bc:	b1 f3       	breq	.-20     	; 0x6aa <__divsf3+0x12>
 6be:	95 1b       	sub	r25, r21
 6c0:	55 0b       	sbc	r21, r21
 6c2:	bb 27       	eor	r27, r27
 6c4:	aa 27       	eor	r26, r26
 6c6:	62 17       	cp	r22, r18
 6c8:	73 07       	cpc	r23, r19
 6ca:	84 07       	cpc	r24, r20
 6cc:	38 f0       	brcs	.+14     	; 0x6dc <__divsf3_pse+0x26>
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
 6d6:	44 1f       	adc	r20, r20
 6d8:	aa 1f       	adc	r26, r26
 6da:	a9 f3       	breq	.-22     	; 0x6c6 <__divsf3_pse+0x10>
 6dc:	33 d0       	rcall	.+102    	; 0x744 <__divsf3_pse+0x8e>
 6de:	0e 2e       	mov	r0, r30
 6e0:	3a f0       	brmi	.+14     	; 0x6f0 <__divsf3_pse+0x3a>
 6e2:	e0 e8       	ldi	r30, 0x80	; 128
 6e4:	30 d0       	rcall	.+96     	; 0x746 <__divsf3_pse+0x90>
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	e6 95       	lsr	r30
 6ec:	00 1c       	adc	r0, r0
 6ee:	ca f7       	brpl	.-14     	; 0x6e2 <__divsf3_pse+0x2c>
 6f0:	29 d0       	rcall	.+82     	; 0x744 <__divsf3_pse+0x8e>
 6f2:	fe 2f       	mov	r31, r30
 6f4:	27 d0       	rcall	.+78     	; 0x744 <__divsf3_pse+0x8e>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	bb 1f       	adc	r27, r27
 6fe:	26 17       	cp	r18, r22
 700:	37 07       	cpc	r19, r23
 702:	48 07       	cpc	r20, r24
 704:	ab 07       	cpc	r26, r27
 706:	b0 e8       	ldi	r27, 0x80	; 128
 708:	09 f0       	breq	.+2      	; 0x70c <__divsf3_pse+0x56>
 70a:	bb 0b       	sbc	r27, r27
 70c:	80 2d       	mov	r24, r0
 70e:	bf 01       	movw	r22, r30
 710:	ff 27       	eor	r31, r31
 712:	93 58       	subi	r25, 0x83	; 131
 714:	5f 4f       	sbci	r21, 0xFF	; 255
 716:	2a f0       	brmi	.+10     	; 0x722 <__divsf3_pse+0x6c>
 718:	9e 3f       	cpi	r25, 0xFE	; 254
 71a:	51 05       	cpc	r21, r1
 71c:	68 f0       	brcs	.+26     	; 0x738 <__divsf3_pse+0x82>
 71e:	8d c0       	rjmp	.+282    	; 0x83a <__fp_inf>
 720:	d7 c0       	rjmp	.+430    	; 0x8d0 <__fp_szero>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	ec f3       	brlt	.-6      	; 0x720 <__divsf3_pse+0x6a>
 726:	98 3e       	cpi	r25, 0xE8	; 232
 728:	dc f3       	brlt	.-10     	; 0x720 <__divsf3_pse+0x6a>
 72a:	86 95       	lsr	r24
 72c:	77 95       	ror	r23
 72e:	67 95       	ror	r22
 730:	b7 95       	ror	r27
 732:	f7 95       	ror	r31
 734:	9f 5f       	subi	r25, 0xFF	; 255
 736:	c9 f7       	brne	.-14     	; 0x72a <__divsf3_pse+0x74>
 738:	88 0f       	add	r24, r24
 73a:	91 1d       	adc	r25, r1
 73c:	96 95       	lsr	r25
 73e:	87 95       	ror	r24
 740:	97 f9       	bld	r25, 7
 742:	08 95       	ret
 744:	e1 e0       	ldi	r30, 0x01	; 1
 746:	66 0f       	add	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	bb 1f       	adc	r27, r27
 74e:	62 17       	cp	r22, r18
 750:	73 07       	cpc	r23, r19
 752:	84 07       	cpc	r24, r20
 754:	ba 07       	cpc	r27, r26
 756:	20 f0       	brcs	.+8      	; 0x760 <__divsf3_pse+0xaa>
 758:	62 1b       	sub	r22, r18
 75a:	73 0b       	sbc	r23, r19
 75c:	84 0b       	sbc	r24, r20
 75e:	ba 0b       	sbc	r27, r26
 760:	ee 1f       	adc	r30, r30
 762:	88 f7       	brcc	.-30     	; 0x746 <__divsf3_pse+0x90>
 764:	e0 95       	com	r30
 766:	08 95       	ret

00000768 <__fixunssfsi>:
 768:	98 d0       	rcall	.+304    	; 0x89a <__fp_splitA>
 76a:	88 f0       	brcs	.+34     	; 0x78e <__fixunssfsi+0x26>
 76c:	9f 57       	subi	r25, 0x7F	; 127
 76e:	90 f0       	brcs	.+36     	; 0x794 <__fixunssfsi+0x2c>
 770:	b9 2f       	mov	r27, r25
 772:	99 27       	eor	r25, r25
 774:	b7 51       	subi	r27, 0x17	; 23
 776:	a0 f0       	brcs	.+40     	; 0x7a0 <__fixunssfsi+0x38>
 778:	d1 f0       	breq	.+52     	; 0x7ae <__fixunssfsi+0x46>
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	1a f0       	brmi	.+6      	; 0x78a <__fixunssfsi+0x22>
 784:	ba 95       	dec	r27
 786:	c9 f7       	brne	.-14     	; 0x77a <__fixunssfsi+0x12>
 788:	12 c0       	rjmp	.+36     	; 0x7ae <__fixunssfsi+0x46>
 78a:	b1 30       	cpi	r27, 0x01	; 1
 78c:	81 f0       	breq	.+32     	; 0x7ae <__fixunssfsi+0x46>
 78e:	9f d0       	rcall	.+318    	; 0x8ce <__fp_zero>
 790:	b1 e0       	ldi	r27, 0x01	; 1
 792:	08 95       	ret
 794:	9c c0       	rjmp	.+312    	; 0x8ce <__fp_zero>
 796:	67 2f       	mov	r22, r23
 798:	78 2f       	mov	r23, r24
 79a:	88 27       	eor	r24, r24
 79c:	b8 5f       	subi	r27, 0xF8	; 248
 79e:	39 f0       	breq	.+14     	; 0x7ae <__fixunssfsi+0x46>
 7a0:	b9 3f       	cpi	r27, 0xF9	; 249
 7a2:	cc f3       	brlt	.-14     	; 0x796 <__fixunssfsi+0x2e>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b3 95       	inc	r27
 7ac:	d9 f7       	brne	.-10     	; 0x7a4 <__fixunssfsi+0x3c>
 7ae:	3e f4       	brtc	.+14     	; 0x7be <__fixunssfsi+0x56>
 7b0:	90 95       	com	r25
 7b2:	80 95       	com	r24
 7b4:	70 95       	com	r23
 7b6:	61 95       	neg	r22
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	8f 4f       	sbci	r24, 0xFF	; 255
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	08 95       	ret

000007c0 <__floatunsisf>:
 7c0:	e8 94       	clt
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <__floatsisf+0x12>

000007c4 <__floatsisf>:
 7c4:	97 fb       	bst	r25, 7
 7c6:	3e f4       	brtc	.+14     	; 0x7d6 <__floatsisf+0x12>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	99 23       	and	r25, r25
 7d8:	a9 f0       	breq	.+42     	; 0x804 <__floatsisf+0x40>
 7da:	f9 2f       	mov	r31, r25
 7dc:	96 e9       	ldi	r25, 0x96	; 150
 7de:	bb 27       	eor	r27, r27
 7e0:	93 95       	inc	r25
 7e2:	f6 95       	lsr	r31
 7e4:	87 95       	ror	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f1 11       	cpse	r31, r1
 7ee:	f8 cf       	rjmp	.-16     	; 0x7e0 <__floatsisf+0x1c>
 7f0:	fa f4       	brpl	.+62     	; 0x830 <__floatsisf+0x6c>
 7f2:	bb 0f       	add	r27, r27
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__floatsisf+0x36>
 7f6:	60 ff       	sbrs	r22, 0
 7f8:	1b c0       	rjmp	.+54     	; 0x830 <__floatsisf+0x6c>
 7fa:	6f 5f       	subi	r22, 0xFF	; 255
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	16 c0       	rjmp	.+44     	; 0x830 <__floatsisf+0x6c>
 804:	88 23       	and	r24, r24
 806:	11 f0       	breq	.+4      	; 0x80c <__floatsisf+0x48>
 808:	96 e9       	ldi	r25, 0x96	; 150
 80a:	11 c0       	rjmp	.+34     	; 0x82e <__floatsisf+0x6a>
 80c:	77 23       	and	r23, r23
 80e:	21 f0       	breq	.+8      	; 0x818 <__floatsisf+0x54>
 810:	9e e8       	ldi	r25, 0x8E	; 142
 812:	87 2f       	mov	r24, r23
 814:	76 2f       	mov	r23, r22
 816:	05 c0       	rjmp	.+10     	; 0x822 <__floatsisf+0x5e>
 818:	66 23       	and	r22, r22
 81a:	71 f0       	breq	.+28     	; 0x838 <__floatsisf+0x74>
 81c:	96 e8       	ldi	r25, 0x86	; 134
 81e:	86 2f       	mov	r24, r22
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	2a f0       	brmi	.+10     	; 0x830 <__floatsisf+0x6c>
 826:	9a 95       	dec	r25
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	da f7       	brpl	.-10     	; 0x826 <__floatsisf+0x62>
 830:	88 0f       	add	r24, r24
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret

0000083a <__fp_inf>:
 83a:	97 f9       	bld	r25, 7
 83c:	9f 67       	ori	r25, 0x7F	; 127
 83e:	80 e8       	ldi	r24, 0x80	; 128
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	08 95       	ret

00000846 <__fp_nan>:
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	80 ec       	ldi	r24, 0xC0	; 192
 84a:	08 95       	ret

0000084c <__fp_pscA>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	16 16       	cp	r1, r22
 852:	17 06       	cpc	r1, r23
 854:	18 06       	cpc	r1, r24
 856:	09 06       	cpc	r0, r25
 858:	08 95       	ret

0000085a <__fp_pscB>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	05 06       	cpc	r0, r21
 866:	08 95       	ret

00000868 <__fp_round>:
 868:	09 2e       	mov	r0, r25
 86a:	03 94       	inc	r0
 86c:	00 0c       	add	r0, r0
 86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0xc>
 870:	88 23       	and	r24, r24
 872:	52 f0       	brmi	.+20     	; 0x888 <__fp_round+0x20>
 874:	bb 0f       	add	r27, r27
 876:	40 f4       	brcc	.+16     	; 0x888 <__fp_round+0x20>
 878:	bf 2b       	or	r27, r31
 87a:	11 f4       	brne	.+4      	; 0x880 <__fp_round+0x18>
 87c:	60 ff       	sbrs	r22, 0
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__fp_round+0x20>
 880:	6f 5f       	subi	r22, 0xFF	; 255
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <__fp_split3>:
 88a:	57 fd       	sbrc	r21, 7
 88c:	90 58       	subi	r25, 0x80	; 128
 88e:	44 0f       	add	r20, r20
 890:	55 1f       	adc	r21, r21
 892:	59 f0       	breq	.+22     	; 0x8aa <__fp_splitA+0x10>
 894:	5f 3f       	cpi	r21, 0xFF	; 255
 896:	71 f0       	breq	.+28     	; 0x8b4 <__fp_splitA+0x1a>
 898:	47 95       	ror	r20

0000089a <__fp_splitA>:
 89a:	88 0f       	add	r24, r24
 89c:	97 fb       	bst	r25, 7
 89e:	99 1f       	adc	r25, r25
 8a0:	61 f0       	breq	.+24     	; 0x8ba <__fp_splitA+0x20>
 8a2:	9f 3f       	cpi	r25, 0xFF	; 255
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <__fp_splitA+0x2a>
 8a6:	87 95       	ror	r24
 8a8:	08 95       	ret
 8aa:	12 16       	cp	r1, r18
 8ac:	13 06       	cpc	r1, r19
 8ae:	14 06       	cpc	r1, r20
 8b0:	55 1f       	adc	r21, r21
 8b2:	f2 cf       	rjmp	.-28     	; 0x898 <__fp_split3+0xe>
 8b4:	46 95       	lsr	r20
 8b6:	f1 df       	rcall	.-30     	; 0x89a <__fp_splitA>
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__fp_splitA+0x30>
 8ba:	16 16       	cp	r1, r22
 8bc:	17 06       	cpc	r1, r23
 8be:	18 06       	cpc	r1, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	f1 cf       	rjmp	.-30     	; 0x8a6 <__fp_splitA+0xc>
 8c4:	86 95       	lsr	r24
 8c6:	71 05       	cpc	r23, r1
 8c8:	61 05       	cpc	r22, r1
 8ca:	08 94       	sec
 8cc:	08 95       	ret

000008ce <__fp_zero>:
 8ce:	e8 94       	clt

000008d0 <__fp_szero>:
 8d0:	bb 27       	eor	r27, r27
 8d2:	66 27       	eor	r22, r22
 8d4:	77 27       	eor	r23, r23
 8d6:	cb 01       	movw	r24, r22
 8d8:	97 f9       	bld	r25, 7
 8da:	08 95       	ret

000008dc <__mulsf3>:
 8dc:	0b d0       	rcall	.+22     	; 0x8f4 <__mulsf3x>
 8de:	c4 cf       	rjmp	.-120    	; 0x868 <__fp_round>
 8e0:	b5 df       	rcall	.-150    	; 0x84c <__fp_pscA>
 8e2:	28 f0       	brcs	.+10     	; 0x8ee <__mulsf3+0x12>
 8e4:	ba df       	rcall	.-140    	; 0x85a <__fp_pscB>
 8e6:	18 f0       	brcs	.+6      	; 0x8ee <__mulsf3+0x12>
 8e8:	95 23       	and	r25, r21
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__mulsf3+0x12>
 8ec:	a6 cf       	rjmp	.-180    	; 0x83a <__fp_inf>
 8ee:	ab cf       	rjmp	.-170    	; 0x846 <__fp_nan>
 8f0:	11 24       	eor	r1, r1
 8f2:	ee cf       	rjmp	.-36     	; 0x8d0 <__fp_szero>

000008f4 <__mulsf3x>:
 8f4:	ca df       	rcall	.-108    	; 0x88a <__fp_split3>
 8f6:	a0 f3       	brcs	.-24     	; 0x8e0 <__mulsf3+0x4>

000008f8 <__mulsf3_pse>:
 8f8:	95 9f       	mul	r25, r21
 8fa:	d1 f3       	breq	.-12     	; 0x8f0 <__mulsf3+0x14>
 8fc:	95 0f       	add	r25, r21
 8fe:	50 e0       	ldi	r21, 0x00	; 0
 900:	55 1f       	adc	r21, r21
 902:	62 9f       	mul	r22, r18
 904:	f0 01       	movw	r30, r0
 906:	72 9f       	mul	r23, r18
 908:	bb 27       	eor	r27, r27
 90a:	f0 0d       	add	r31, r0
 90c:	b1 1d       	adc	r27, r1
 90e:	63 9f       	mul	r22, r19
 910:	aa 27       	eor	r26, r26
 912:	f0 0d       	add	r31, r0
 914:	b1 1d       	adc	r27, r1
 916:	aa 1f       	adc	r26, r26
 918:	64 9f       	mul	r22, r20
 91a:	66 27       	eor	r22, r22
 91c:	b0 0d       	add	r27, r0
 91e:	a1 1d       	adc	r26, r1
 920:	66 1f       	adc	r22, r22
 922:	82 9f       	mul	r24, r18
 924:	22 27       	eor	r18, r18
 926:	b0 0d       	add	r27, r0
 928:	a1 1d       	adc	r26, r1
 92a:	62 1f       	adc	r22, r18
 92c:	73 9f       	mul	r23, r19
 92e:	b0 0d       	add	r27, r0
 930:	a1 1d       	adc	r26, r1
 932:	62 1f       	adc	r22, r18
 934:	83 9f       	mul	r24, r19
 936:	a0 0d       	add	r26, r0
 938:	61 1d       	adc	r22, r1
 93a:	22 1f       	adc	r18, r18
 93c:	74 9f       	mul	r23, r20
 93e:	33 27       	eor	r19, r19
 940:	a0 0d       	add	r26, r0
 942:	61 1d       	adc	r22, r1
 944:	23 1f       	adc	r18, r19
 946:	84 9f       	mul	r24, r20
 948:	60 0d       	add	r22, r0
 94a:	21 1d       	adc	r18, r1
 94c:	82 2f       	mov	r24, r18
 94e:	76 2f       	mov	r23, r22
 950:	6a 2f       	mov	r22, r26
 952:	11 24       	eor	r1, r1
 954:	9f 57       	subi	r25, 0x7F	; 127
 956:	50 40       	sbci	r21, 0x00	; 0
 958:	8a f0       	brmi	.+34     	; 0x97c <__mulsf3_pse+0x84>
 95a:	e1 f0       	breq	.+56     	; 0x994 <__mulsf3_pse+0x9c>
 95c:	88 23       	and	r24, r24
 95e:	4a f0       	brmi	.+18     	; 0x972 <__mulsf3_pse+0x7a>
 960:	ee 0f       	add	r30, r30
 962:	ff 1f       	adc	r31, r31
 964:	bb 1f       	adc	r27, r27
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	91 50       	subi	r25, 0x01	; 1
 96e:	50 40       	sbci	r21, 0x00	; 0
 970:	a9 f7       	brne	.-22     	; 0x95c <__mulsf3_pse+0x64>
 972:	9e 3f       	cpi	r25, 0xFE	; 254
 974:	51 05       	cpc	r21, r1
 976:	70 f0       	brcs	.+28     	; 0x994 <__mulsf3_pse+0x9c>
 978:	60 cf       	rjmp	.-320    	; 0x83a <__fp_inf>
 97a:	aa cf       	rjmp	.-172    	; 0x8d0 <__fp_szero>
 97c:	5f 3f       	cpi	r21, 0xFF	; 255
 97e:	ec f3       	brlt	.-6      	; 0x97a <__mulsf3_pse+0x82>
 980:	98 3e       	cpi	r25, 0xE8	; 232
 982:	dc f3       	brlt	.-10     	; 0x97a <__mulsf3_pse+0x82>
 984:	86 95       	lsr	r24
 986:	77 95       	ror	r23
 988:	67 95       	ror	r22
 98a:	b7 95       	ror	r27
 98c:	f7 95       	ror	r31
 98e:	e7 95       	ror	r30
 990:	9f 5f       	subi	r25, 0xFF	; 255
 992:	c1 f7       	brne	.-16     	; 0x984 <__mulsf3_pse+0x8c>
 994:	fe 2b       	or	r31, r30
 996:	88 0f       	add	r24, r24
 998:	91 1d       	adc	r25, r1
 99a:	96 95       	lsr	r25
 99c:	87 95       	ror	r24
 99e:	97 f9       	bld	r25, 7
 9a0:	08 95       	ret

000009a2 <_exit>:
 9a2:	f8 94       	cli

000009a4 <__stop_program>:
 9a4:	ff cf       	rjmp	.-2      	; 0x9a4 <__stop_program>
