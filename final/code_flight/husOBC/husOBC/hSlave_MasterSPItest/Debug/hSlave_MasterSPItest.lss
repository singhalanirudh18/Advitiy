
hSlave_MasterSPItest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  0080016c  0080016c  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015e3  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000657  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000829  00000000  00000000  00002fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000037e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#include "slave_comm.h"
#include "spi.h"
#include "ax25.h"

void slave_send (uint8_t command, char* data, uint8_t size){
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

  static uint32_t seq = 0;
  uint16_t crc = 0xFFFF;
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  uint8_t i, c, tsize = size;
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  
  ///Initialize SPI
  init_SPI_trans (SLAVE);
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  
  ///* Start communication
  c = START_SPI;
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  for (i = 0; i < N_START_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_17>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  
  ///* Notify the command
  SPI_send ((char *)&command,sizeof (uint8_t));
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  crc = update_crc_16(command, crc);
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  
  ///* Send size of data
  if((command == HM_DATA) ||(command == REAL_TIME))
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  {
    tsize += 4;
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    SPI_send ((char *)&tsize,sizeof (uint8_t));
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    crc = update_crc_16(tsize, crc);
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 36       	cpi	r26, 0x6C	; 108
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
    for(i = 0; i < sizeof(uint32_t); i++)
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ac e6       	ldi	r26, 0x6C	; 108
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 96 00 	call	0x12c	; 0x12c <main>
    tsize += 4;
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    crc = update_crc_16(tsize, crc);
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    for(i = 0; i < sizeof(uint32_t); i++)
  c6:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

000000ca <__bad_interrupt>:
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    seq++;
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  ce:	98 e0       	ldi	r25, 0x08	; 8
  d0:	26 2f       	mov	r18, r22
  d2:	21 70       	andi	r18, 0x01	; 1
  d4:	76 95       	lsr	r23
  d6:	67 95       	ror	r22
  d8:	38 2f       	mov	r19, r24
  da:	31 70       	andi	r19, 0x01	; 1
  dc:	32 17       	cp	r19, r18
  de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	62 27       	eor	r22, r18
  e4:	24 e8       	ldi	r18, 0x84	; 132
  e6:	72 27       	eor	r23, r18
  e8:	86 95       	lsr	r24
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
  ee:	cb 01       	movw	r24, r22
  f0:	08 95       	ret

000000f2 <calculate_crc_16>:
  f2:	0f 93       	push	r16
  }
  else
  {
    SPI_send ((char *)&tsize,sizeof (uint8_t));
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	06 2f       	mov	r16, r22
  fc:	66 23       	and	r22, r22
  fe:	69 f0       	breq	.+26     	; 0x11a <calculate_crc_16+0x28>
    crc = update_crc_16(tsize, crc);
 100:	c8 2f       	mov	r28, r24
 102:	d9 2f       	mov	r29, r25
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	bc 01       	movw	r22, r24
 10c:	89 91       	ld	r24, Y+
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
 10e:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
 112:	1f 5f       	subi	r17, 0xFF	; 255
 114:	10 13       	cpse	r17, r16
 116:	f9 cf       	rjmp	.-14     	; 0x10a <calculate_crc_16+0x18>
 118:	02 c0       	rjmp	.+4      	; 0x11e <calculate_crc_16+0x2c>
  for(i = 0; i < size; i++)
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	9f ef       	ldi	r25, 0xFF	; 255
 11e:	80 95       	com	r24
 120:	90 95       	com	r25
 122:	df 91       	pop	r29
    crc = update_crc_16(data[i], crc);
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <main>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	c8 57       	subi	r28, 0x78	; 120
    crc = update_crc_16(tsize, crc);
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
  for(i = 0; i < size; i++)
 136:	d1 09       	sbc	r29, r1
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
    crc = update_crc_16(data[i], crc);
    
  ///* Send CRC
  crc = ~crc;
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	8a bb       	out	0x1a, r24	; 26
 146:	8b bb       	out	0x1b, r24	; 27
  SPI_send ((char *)&crc, sizeof (uint16_t));
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	98 e1       	ldi	r25, 0x18	; 24
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
    
  ///* End communication
  c = END_SPI;
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x22>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x2c>
  for (i = 0; i < N_END_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
 158:	00 00       	nop
 15a:	1b ba       	out	0x1b, r1	; 27
 15c:	ef ef       	ldi	r30, 0xFF	; 255
 15e:	f9 e6       	ldi	r31, 0x69	; 105
 160:	28 e1       	ldi	r18, 0x18	; 24
 162:	e1 50       	subi	r30, 0x01	; 1
 164:	f0 40       	sbci	r31, 0x00	; 0
 166:	20 40       	sbci	r18, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x36>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x40>
 16c:	00 00       	nop
 16e:	8f e0       	ldi	r24, 0x0F	; 15
      
}
 170:	8b bb       	out	0x1b, r24	; 27
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	99 e6       	ldi	r25, 0x69	; 105
 176:	e8 e1       	ldi	r30, 0x18	; 24
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e0 40       	sbci	r30, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x4c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x56>
 182:	00 00       	nop
 184:	1b ba       	out	0x1b, r1	; 27
 186:	ff ef       	ldi	r31, 0xFF	; 255
 188:	29 e6       	ldi	r18, 0x69	; 105
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	f1 50       	subi	r31, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	20 40       	sbci	r18, 0x00	; 0
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x60>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x6a>
 196:	00 00       	nop
	PORTA = 0x0F;
	_delay_ms(1000);
	PORTA = 0x00;
	_delay_ms(1000);
	
	init_UART0();
 198:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <init_UART0>
	
	transmit_UART0('\r');
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('\r');
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('H');
 1a8:	88 e4       	ldi	r24, 0x48	; 72
 1aa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('e');
 1ae:	85 e6       	ldi	r24, 0x65	; 101
 1b0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('l');
 1b4:	8c e6       	ldi	r24, 0x6C	; 108
 1b6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('l');
 1ba:	8c e6       	ldi	r24, 0x6C	; 108
 1bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('o');
 1c0:	8f e6       	ldi	r24, 0x6F	; 111
 1c2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	e3 e4       	ldi	r30, 0x43	; 67
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	de 01       	movw	r26, r28
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	01 90       	ld	r0, Z+
 1d2:	0d 92       	st	X+, r0
 1d4:	8a 95       	dec	r24
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xa4>
	transmit_string_UART0(array);
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0e 94 0d 02 	call	0x41a	; 0x41a <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Slave code...");
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	e0 e0       	ldi	r30, 0x00	; 0
 1e4:	f1 e0       	ldi	r31, 0x01	; 1
 1e6:	de 01       	movw	r26, r28
 1e8:	99 96       	adiw	r26, 0x29	; 41
 1ea:	01 90       	ld	r0, Z+
 1ec:	0d 92       	st	X+, r0
 1ee:	8a 95       	dec	r24
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0xbe>
	sprintf(array2,"\rData received from Master :\t");
 1f2:	8e e1       	ldi	r24, 0x1E	; 30
 1f4:	e5 e2       	ldi	r30, 0x25	; 37
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	de 01       	movw	r26, r28
 1fa:	af 5a       	subi	r26, 0xAF	; 175
 1fc:	bf 4f       	sbci	r27, 0xFF	; 255
 1fe:	01 90       	ld	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	8a 95       	dec	r24
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0xd2>
		
/************************************************************/
	uint8_t command;
	uint16_t crc, recv_crc;
	///Initialise SPI as slave
	init_SPI_slave();
 206:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_SPI_slave>
	
	///Enable Global Interrupts
	sei();
 20a:	78 94       	sei
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 20c:	0f 2e       	mov	r0, r31
 20e:	fa e0       	ldi	r31, 0x0A	; 10
 210:	ef 2e       	mov	r14, r31
 212:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
 214:	0f 2e       	mov	r0, r31
 216:	f5 e0       	ldi	r31, 0x05	; 5
 218:	ff 2e       	mov	r15, r31
 21a:	f0 2d       	mov	r31, r0
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 21c:	ce 2c       	mov	r12, r14
	_delay_ms(500);
	PORTA = 0x05;
 21e:	df 2c       	mov	r13, r15
      if(crc == recv_crc)
      {
        command = message[0];
        if(command == BEGIN_TX_COMM)
        {
          send_preflight((char *)message + 2, message[1]);
 220:	01 e7       	ldi	r16, 0x71	; 113
 222:	11 e0       	ldi	r17, 0x01	; 1
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 224:	cb ba       	out	0x1b, r12	; 27
 226:	9f ef       	ldi	r25, 0xFF	; 255
 228:	e4 e3       	ldi	r30, 0x34	; 52
 22a:	fc e0       	ldi	r31, 0x0C	; 12
 22c:	91 50       	subi	r25, 0x01	; 1
 22e:	e0 40       	sbci	r30, 0x00	; 0
 230:	f0 40       	sbci	r31, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x100>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x10a>
 236:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 238:	db ba       	out	0x1b, r13	; 27
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	84 e3       	ldi	r24, 0x34	; 52
 23e:	9c e0       	ldi	r25, 0x0C	; 12
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x114>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x11e>
 24a:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('\r');
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('H');
 258:	88 e4       	ldi	r24, 0x48	; 72
 25a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	transmit_UART0('i');
 25e:	89 e6       	ldi	r24, 0x69	; 105
 260:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <transmit_UART0>
	
	transmit_string_UART0(array1);
 264:	ce 01       	movw	r24, r28
 266:	89 96       	adiw	r24, 0x29	; 41
 268:	0e 94 0d 02 	call	0x41a	; 0x41a <transmit_string_UART0>
	transmit_string_UART0(array2);
 26c:	ce 01       	movw	r24, r28
 26e:	8f 5a       	subi	r24, 0xAF	; 175
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	0e 94 0d 02 	call	0x41a	; 0x41a <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
 276:	eb ba       	out	0x1b, r14	; 27
 278:	ef ef       	ldi	r30, 0xFF	; 255
 27a:	f4 e3       	ldi	r31, 0x34	; 52
 27c:	2c e0       	ldi	r18, 0x0C	; 12
 27e:	e1 50       	subi	r30, 0x01	; 1
 280:	f0 40       	sbci	r31, 0x00	; 0
 282:	20 40       	sbci	r18, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x152>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x15c>
 288:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 28a:	fb ba       	out	0x1b, r15	; 27
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	94 e3       	ldi	r25, 0x34	; 52
 290:	ec e0       	ldi	r30, 0x0C	; 12
 292:	81 50       	subi	r24, 0x01	; 1
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e0 40       	sbci	r30, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x166>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x170>
 29c:	00 00       	nop
	_delay_ms(500);
	
	if(process)
 29e:	80 91 6c 01 	lds	r24, 0x016C
 2a2:	88 23       	and	r24, r24
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <main+0x17c>
 2a6:	be cf       	rjmp	.-132    	; 0x224 <main+0xf8>
    {
      crc = calculate_crc_16((uint8_t *)message, t - (end_spi + sizeof(uint16_t)));
 2a8:	60 91 6d 01 	lds	r22, 0x016D
 2ac:	80 91 6f 01 	lds	r24, 0x016F
 2b0:	62 50       	subi	r22, 0x02	; 2
 2b2:	68 1b       	sub	r22, r24
 2b4:	80 e7       	ldi	r24, 0x70	; 112
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
 2bc:	e0 91 6d 01 	lds	r30, 0x016D
 2c0:	20 91 6f 01 	lds	r18, 0x016F
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	32 97       	sbiw	r30, 0x02	; 2
 2c8:	e2 1b       	sub	r30, r18
 2ca:	f1 09       	sbc	r31, r1
 2cc:	e0 59       	subi	r30, 0x90	; 144
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
      if(crc == recv_crc)
 2d0:	20 81       	ld	r18, Z
 2d2:	31 81       	ldd	r19, Z+1	; 0x01
 2d4:	82 17       	cp	r24, r18
 2d6:	93 07       	cpc	r25, r19
 2d8:	89 f4       	brne	.+34     	; 0x2fc <main+0x1d0>
      {
        command = message[0];
 2da:	80 91 70 01 	lds	r24, 0x0170
        if(command == BEGIN_TX_COMM)
 2de:	8a 35       	cpi	r24, 0x5A	; 90
 2e0:	41 f4       	brne	.+16     	; 0x2f2 <main+0x1c6>
        {
          send_preflight((char *)message + 2, message[1]);
 2e2:	f8 01       	movw	r30, r16
 2e4:	60 81       	ld	r22, Z
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	82 e7       	ldi	r24, 0x72	; 114
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 ff 01 	call	0x3fe	; 0x3fe <send_preflight>
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <main+0x1d0>
        }
        else if(command == END_TX)
 2f2:	83 33       	cpi	r24, 0x33	; 51
 2f4:	19 f4       	brne	.+6      	; 0x2fc <main+0x1d0>
        {
          SPI_transfer(ACK);
 2f6:	82 e9       	ldi	r24, 0x92	; 146
 2f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SPI_transfer>
        }
      }
      end_spi = 0;
 2fc:	10 92 6f 01 	sts	0x016F, r1
      start_spi = 0;
 300:	10 92 6e 01 	sts	0x016E, r1
      t = 0;
 304:	10 92 6d 01 	sts	0x016D, r1
      process = 0;
 308:	10 92 6c 01 	sts	0x016C, r1
 30c:	8b cf       	rjmp	.-234    	; 0x224 <main+0xf8>

0000030e <__vector_17>:

/**
 * @brief Interrupt service routine for SPI
 */
ISR(SPI_STC_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	0b b6       	in	r0, 0x3b	; 59
 31a:	0f 92       	push	r0
 31c:	8f 93       	push	r24
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
  spi = SPDR;
 322:	8f b1       	in	r24, 0x0f	; 15
 324:	80 93 70 02 	sts	0x0270, r24
  
  if((!process) && (start_spi >= N_END_SPI))
 328:	80 91 6c 01 	lds	r24, 0x016C
 32c:	81 11       	cpse	r24, r1
 32e:	2b c0       	rjmp	.+86     	; 0x386 <__vector_17+0x78>
 330:	80 91 6e 01 	lds	r24, 0x016E
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	38 f1       	brcs	.+78     	; 0x386 <__vector_17+0x78>
  {
    message[t] = spi;
 338:	e0 91 6d 01 	lds	r30, 0x016D
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 91 70 02 	lds	r24, 0x0270
 342:	e0 59       	subi	r30, 0x90	; 144
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	80 83       	st	Z, r24
    
    if(message[t] == END_SPI)
 348:	e0 91 6d 01 	lds	r30, 0x016D
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e0 59       	subi	r30, 0x90	; 144
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	80 81       	ld	r24, Z
 354:	8a 3a       	cpi	r24, 0xAA	; 170
 356:	31 f4       	brne	.+12     	; 0x364 <__vector_17+0x56>
      end_spi++;
 358:	80 91 6f 01 	lds	r24, 0x016F
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 6f 01 	sts	0x016F, r24
 362:	05 c0       	rjmp	.+10     	; 0x36e <__vector_17+0x60>
    else if(end_spi)
 364:	80 91 6f 01 	lds	r24, 0x016F
 368:	81 11       	cpse	r24, r1
      end_spi = 0;
 36a:	10 92 6f 01 	sts	0x016F, r1
      
    if(end_spi == N_END_SPI)
 36e:	80 91 6f 01 	lds	r24, 0x016F
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	19 f4       	brne	.+6      	; 0x37c <__vector_17+0x6e>
      process = 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 6c 01 	sts	0x016C, r24
    t++;
 37c:	80 91 6d 01 	lds	r24, 0x016D
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 6d 01 	sts	0x016D, r24
  }
  
  if(spi == START_SPI)
 386:	80 91 70 02 	lds	r24, 0x0270
 38a:	87 3e       	cpi	r24, 0xE7	; 231
 38c:	31 f4       	brne	.+12     	; 0x39a <__vector_17+0x8c>
    start_spi++;
 38e:	80 91 6e 01 	lds	r24, 0x016E
 392:	8f 5f       	subi	r24, 0xFF	; 255
 394:	80 93 6e 01 	sts	0x016E, r24
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <__vector_17+0x98>
  else if(start_spi < N_END_SPI)
 39a:	80 91 6e 01 	lds	r24, 0x016E
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	10 f4       	brcc	.+4      	; 0x3a6 <__vector_17+0x98>
    start_spi = 0;
 3a2:	10 92 6e 01 	sts	0x016E, r1
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	8f 91       	pop	r24
 3ac:	0f 90       	pop	r0
 3ae:	0b be       	out	0x3b, r0	; 59
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <init_SPI_slave>:
#include "common.h"

void init_SPI_slave(void)
{
  ///Set the Direction register for the SPI pins
  DDR_SPI &= 0xF0;
 3ba:	87 b3       	in	r24, 0x17	; 23
 3bc:	80 7f       	andi	r24, 0xF0	; 240
 3be:	87 bb       	out	0x17, r24	; 23
  DDR_SPI = _BV(SPIDI);
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	87 bb       	out	0x17, r24	; 23
  
  ///Enable SPI, Interrupt, Slave 
  ///@todo Check frequency 
  SPCR = (1<<SPIE) |(1<<SPE);
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	8d b9       	out	0x0d, r24	; 13
 3c8:	08 95       	ret

000003ca <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 3ca:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 3cc:	77 9b       	sbis	0x0e, 7	; 14
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 3d0:	8f b1       	in	r24, 0x0f	; 15
}
 3d2:	08 95       	ret

000003d4 <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 3d4:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 3d6:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 3d8:	e5 e9       	ldi	r30, 0x95	; 149
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 3de:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 3e0:	8a b1       	in	r24, 0x0a	; 10
 3e2:	88 61       	ori	r24, 0x18	; 24
 3e4:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 3e6:	80 81       	ld	r24, Z
 3e8:	8e 60       	ori	r24, 0x0E	; 14
 3ea:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 3ec:	87 e6       	ldi	r24, 0x67	; 103
 3ee:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 3f0:	10 92 90 00 	sts	0x0090, r1
 3f4:	08 95       	ret

000003f6 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 3f6:	5d 9b       	sbis	0x0b, 5	; 11
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 3fa:	8c b9       	out	0x0c, r24	; 12
 3fc:	08 95       	ret

000003fe <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 3fe:	61 15       	cp	r22, r1
 400:	71 05       	cpc	r23, r1
 402:	51 f0       	breq	.+20     	; 0x418 <send_preflight+0x1a>
 404:	fc 01       	movw	r30, r24
 406:	86 0f       	add	r24, r22
 408:	97 1f       	adc	r25, r23
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
 40a:	5d 9b       	sbis	0x0b, 5	; 11
 40c:	fe cf       	rjmp	.-4      	; 0x40a <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
 40e:	21 91       	ld	r18, Z+
 410:	2c b9       	out	0x0c, r18	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
 412:	e8 17       	cp	r30, r24
 414:	f9 07       	cpc	r31, r25
 416:	c9 f7       	brne	.-14     	; 0x40a <send_preflight+0xc>
 418:	08 95       	ret

0000041a <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 41a:	fc 01       	movw	r30, r24
 41c:	20 81       	ld	r18, Z
 41e:	22 23       	and	r18, r18
 420:	39 f0       	breq	.+14     	; 0x430 <transmit_string_UART0+0x16>
 422:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 424:	5d 9b       	sbis	0x0b, 5	; 11
 426:	fe cf       	rjmp	.-4      	; 0x424 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 428:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 42a:	21 91       	ld	r18, Z+
 42c:	21 11       	cpse	r18, r1
 42e:	fa cf       	rjmp	.-12     	; 0x424 <transmit_string_UART0+0xa>
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
