
hMaster_GPStest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00000938  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080016a  0080016a  00000a36  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023bb  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b12  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf6  00000000  00000000  00003b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00004750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000583  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000683  00000000  00000000  000050af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "hm.h"
#include "twi.h"
#include "peripherals.h"

void get_HM_data(void)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
void get_HM_data(void)
{
  ///Counter for the 7 bytes of Health monitoring data
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
}
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
  ///Set Baud Rate to 9600
  UBRR1L = 103;
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  UBRR1H = 0;
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
}
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    SPI_transfer(0b00011000 | (channel >> 1));
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    sbi(PORTB, ADC_S);
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    SPI_transfer(0b00011000 | (channel >> 1));
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    sbi(PORTB, ADC_S);
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] &= 0x0F00;
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x40);
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
    sbi(PORTB, ADC_S);
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 36       	cpi	r26, 0x6A	; 106
  ae:	b1 07       	cpc	r27, r17
    
    channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
}
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e6       	ldi	r26, 0x6A	; 106
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 36       	cpi	r26, 0x6F	; 111
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  c2:	0e 94 08 01 	call	0x210	; 0x210 <main>
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
  c6:	0c 94 9a 04 	jmp	0x934	; 0x934 <_exit>

000000ca <__bad_interrupt>:
  TWDR = (addr << 1) + TW_READ;
  TWCR = (1 << TWINT) | (1 << TWEN);

  while (!(TWCR & (1 << TWINT)));
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_UART_GPS>:
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
}
  ce:	1b b8       	out	0x0b, r1	; 11

void init_UART_GPS(void )
{

  UCSR0A = 0;
  UCSR0B = 0;
  d0:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
  d2:	e5 e9       	ldi	r30, 0x95	; 149
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
  d8:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	88 69       	ori	r24, 0x98	; 152
  de:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
  e0:	80 81       	ld	r24, Z
  e2:	8e 60       	ori	r24, 0x0E	; 14
  e4:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
  ea:	10 92 90 00 	sts	0x0090, r1
  ee:	08 95       	ret

000000f0 <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	0b b6       	in	r0, 0x3b	; 59
  fc:	0f 92       	push	r0
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	a8 97       	sbiw	r28, 0x28	; 40
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61
  char array[40];
  char arrayy[40];
  char arrayx[40];
  char arrayz[40];
  ///Buffer the Received Byte
  last_byte = UDR0;
 128:	8c b1       	in	r24, 0x0c	; 12
 12a:	80 93 6a 01 	sts	0x016A, r24
  sprintf(array,"%x",last_byte);
 12e:	80 91 6a 01 	lds	r24, 0x016A
 132:	1f 92       	push	r1
 134:	8f 93       	push	r24
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	9f 93       	push	r25
 13c:	8f 93       	push	r24
 13e:	8e 01       	movw	r16, r28
 140:	0f 5f       	subi	r16, 0xFF	; 255
 142:	1f 4f       	sbci	r17, 0xFF	; 255
 144:	1f 93       	push	r17
 146:	0f 93       	push	r16
 148:	0e 94 ca 01 	call	0x394	; 0x394 <sprintf>
  transmit_string_UART0(array);
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 be 01 	call	0x37c	; 0x37c <transmit_string_UART0>
  transmit_UART0('\r');
 152:	8d e0       	ldi	r24, 0x0D	; 13
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
 15a:	80 91 6b 01 	lds	r24, 0x016B
 15e:	90 91 6c 01 	lds	r25, 0x016C
 162:	a0 91 6d 01 	lds	r26, 0x016D
 166:	b0 91 6e 01 	lds	r27, 0x016E
 16a:	ba 2f       	mov	r27, r26
 16c:	a9 2f       	mov	r26, r25
 16e:	98 2f       	mov	r25, r24
 170:	88 27       	eor	r24, r24
 172:	80 93 6b 01 	sts	0x016B, r24
 176:	90 93 6c 01 	sts	0x016C, r25
 17a:	a0 93 6d 01 	sts	0x016D, r26
 17e:	b0 93 6e 01 	sts	0x016E, r27
  buffer &= 0xFFFFFF00;
 182:	80 91 6b 01 	lds	r24, 0x016B
 186:	90 91 6c 01 	lds	r25, 0x016C
 18a:	a0 91 6d 01 	lds	r26, 0x016D
 18e:	b0 91 6e 01 	lds	r27, 0x016E
 192:	88 27       	eor	r24, r24
 194:	80 93 6b 01 	sts	0x016B, r24
 198:	90 93 6c 01 	sts	0x016C, r25
 19c:	a0 93 6d 01 	sts	0x016D, r26
 1a0:	b0 93 6e 01 	sts	0x016E, r27
  buffer |= (uint32_t) last_byte;
 1a4:	20 91 6a 01 	lds	r18, 0x016A
 1a8:	80 91 6b 01 	lds	r24, 0x016B
 1ac:	90 91 6c 01 	lds	r25, 0x016C
 1b0:	a0 91 6d 01 	lds	r26, 0x016D
 1b4:	b0 91 6e 01 	lds	r27, 0x016E
 1b8:	82 2b       	or	r24, r18
 1ba:	80 93 6b 01 	sts	0x016B, r24
 1be:	90 93 6c 01 	sts	0x016C, r25
 1c2:	a0 93 6d 01 	sts	0x016D, r26
 1c6:	b0 93 6e 01 	sts	0x016E, r27
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
    pdop = 0xFFFF;
    message_end = 0;
    buffer = 0;
  }*/
  return 0;//ch1
}
 1d6:	a8 96       	adiw	r28, 0x28	; 40
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	0f 90       	pop	r0
 204:	0b be       	out	0x3b, r0	; 59
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	c8 57       	subi	r28, 0x78	; 120
 21a:	d1 09       	sbc	r29, r1
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
	    Current_state.gps.minutes = 1;
	    Current_state.gps.month = 1;
	    Current_state.gps.seconds = 1;
	    Current_state.gps.time_since_reading = 1;
*/
	DDRA = 0xF0;
 226:	80 ef       	ldi	r24, 0xF0	; 240
 228:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 22a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	89 e6       	ldi	r24, 0x69	; 105
 230:	98 e1       	ldi	r25, 0x18	; 24
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x22>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x2c>
 23c:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 23e:	1b ba       	out	0x1b, r1	; 27
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	89 e6       	ldi	r24, 0x69	; 105
 244:	98 e1       	ldi	r25, 0x18	; 24
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x36>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x40>
 250:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 252:	80 ef       	ldi	r24, 0xF0	; 240
 254:	8b bb       	out	0x1b, r24	; 27
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	89 e6       	ldi	r24, 0x69	; 105
 25a:	98 e1       	ldi	r25, 0x18	; 24
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x4c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x56>
 266:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 268:	1b ba       	out	0x1b, r1	; 27
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	89 e6       	ldi	r24, 0x69	; 105
 26e:	98 e1       	ldi	r25, 0x18	; 24
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x60>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x6a>
 27a:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 27c:	0e 94 a9 01 	call	0x352	; 0x352 <init_UART0>
  
	transmit_UART0('\r');
 280:	8d e0       	ldi	r24, 0x0D	; 13
 282:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	transmit_UART0('\r');
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	transmit_UART0('H');
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	transmit_UART0('e');
 292:	85 e6       	ldi	r24, 0x65	; 101
 294:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	transmit_UART0('l');
 298:	8c e6       	ldi	r24, 0x6C	; 108
 29a:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	transmit_UART0('l');
 29e:	8c e6       	ldi	r24, 0x6C	; 108
 2a0:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	transmit_UART0('o');
 2a4:	8f e6       	ldi	r24, 0x6F	; 111
 2a6:	0e 94 ba 01 	call	0x374	; 0x374 <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 2aa:	88 e2       	ldi	r24, 0x28	; 40
 2ac:	e2 e4       	ldi	r30, 0x42	; 66
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	de 01       	movw	r26, r28
 2b2:	11 96       	adiw	r26, 0x01	; 1
 2b4:	01 90       	ld	r0, Z+
 2b6:	0d 92       	st	X+, r0
 2b8:	8a 95       	dec	r24
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0xa4>
	transmit_string_UART0(array);
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	0e 94 be 01 	call	0x37c	; 0x37c <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 2c4:	86 e2       	ldi	r24, 0x26	; 38
 2c6:	e3 e0       	ldi	r30, 0x03	; 3
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	de 01       	movw	r26, r28
 2cc:	99 96       	adiw	r26, 0x29	; 41
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0xbe>
	sprintf(array2,"\rCurrent GPS state is =\t");
 2d6:	89 e1       	ldi	r24, 0x19	; 25
 2d8:	e9 e2       	ldi	r30, 0x29	; 41
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	de 01       	movw	r26, r28
 2de:	af 5a       	subi	r26, 0xAF	; 175
 2e0:	bf 4f       	sbci	r27, 0xFF	; 255
 2e2:	01 90       	ld	r0, Z+
 2e4:	0d 92       	st	X+, r0
 2e6:	8a 95       	dec	r24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0xd2>
		
/************************************************************/
	init_UART_GPS();
 2ea:	0e 94 67 00 	call	0xce	; 0xce <init_UART_GPS>
	
	///* Switch on Global interrupts
	sei();
 2ee:	78 94       	sei
  
/************************************************************/
	while(1){
	PORTA = 0xA0;
 2f0:	00 ea       	ldi	r16, 0xA0	; 160
	_delay_ms(500);
	PORTA = 0x50;
 2f2:	10 e5       	ldi	r17, 0x50	; 80
	///* Switch on Global interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0xA0;
 2f4:	0b bb       	out	0x1b, r16	; 27
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	84 e3       	ldi	r24, 0x34	; 52
 2fa:	9c e0       	ldi	r25, 0x0C	; 12
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0xec>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0xf6>
 306:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 308:	1b bb       	out	0x1b, r17	; 27
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	84 e3       	ldi	r24, 0x34	; 52
 30e:	9c e0       	ldi	r25, 0x0C	; 12
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x100>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x10a>
 31a:	00 00       	nop
	
	transmit_string_UART0(array1);
	transmit_string_UART0(array2);
	
/************************************************************/
	PORTA = 0xA0;
 31c:	0b bb       	out	0x1b, r16	; 27
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	84 e3       	ldi	r24, 0x34	; 52
 322:	9c e0       	ldi	r25, 0x0C	; 12
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x114>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x11e>
 32e:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 330:	1b bb       	out	0x1b, r17	; 27
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	84 e3       	ldi	r24, 0x34	; 52
 336:	9c e0       	ldi	r25, 0x0C	; 12
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x128>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x132>
 342:	00 00       	nop
	_delay_ms(500);
	
	///* * Reading GPS
    read_GPS();
 344:	0e 94 a7 01 	call	0x34e	; 0x34e <read_GPS>
    while(UCSR0B & _BV(RXCIE0));
 348:	57 99       	sbic	0x0a, 7	; 10
 34a:	fe cf       	rjmp	.-4      	; 0x348 <main+0x138>
 34c:	d3 cf       	rjmp	.-90     	; 0x2f4 <main+0xe4>

0000034e <read_GPS>:
  send_loads();
}

void read_GPS(void){
  ///* Switch on the GPS interrupt
  UCSR0B |= _BV(RXCIE0);
 34e:	57 9a       	sbi	0x0a, 7	; 10
 350:	08 95       	ret

00000352 <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 352:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 354:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 356:	e5 e9       	ldi	r30, 0x95	; 149
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 35c:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 35e:	8a b1       	in	r24, 0x0a	; 10
 360:	88 61       	ori	r24, 0x18	; 24
 362:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 364:	80 81       	ld	r24, Z
 366:	8e 60       	ori	r24, 0x0E	; 14
 368:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 36a:	87 e6       	ldi	r24, 0x67	; 103
 36c:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 36e:	10 92 90 00 	sts	0x0090, r1
 372:	08 95       	ret

00000374 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 374:	5d 9b       	sbis	0x0b, 5	; 11
 376:	fe cf       	rjmp	.-4      	; 0x374 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 378:	8c b9       	out	0x0c, r24	; 12
 37a:	08 95       	ret

0000037c <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 37c:	fc 01       	movw	r30, r24
 37e:	20 81       	ld	r18, Z
 380:	22 23       	and	r18, r18
 382:	39 f0       	breq	.+14     	; 0x392 <transmit_string_UART0+0x16>
 384:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 386:	5d 9b       	sbis	0x0b, 5	; 11
 388:	fe cf       	rjmp	.-4      	; 0x386 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 38a:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 38c:	21 91       	ld	r18, Z+
 38e:	21 11       	cpse	r18, r1
 390:	fa cf       	rjmp	.-12     	; 0x386 <transmit_string_UART0+0xa>
 392:	08 95       	ret

00000394 <sprintf>:
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	2e 97       	sbiw	r28, 0x0e	; 14
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
 3ac:	0d 89       	ldd	r16, Y+21	; 0x15
 3ae:	1e 89       	ldd	r17, Y+22	; 0x16
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	8c 83       	std	Y+4, r24	; 0x04
 3b4:	1a 83       	std	Y+2, r17	; 0x02
 3b6:	09 83       	std	Y+1, r16	; 0x01
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	9f e7       	ldi	r25, 0x7F	; 127
 3bc:	9e 83       	std	Y+6, r25	; 0x06
 3be:	8d 83       	std	Y+5, r24	; 0x05
 3c0:	ae 01       	movw	r20, r28
 3c2:	47 5e       	subi	r20, 0xE7	; 231
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	6f 89       	ldd	r22, Y+23	; 0x17
 3c8:	78 8d       	ldd	r23, Y+24	; 0x18
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <vfprintf>
 3d2:	ef 81       	ldd	r30, Y+7	; 0x07
 3d4:	f8 85       	ldd	r31, Y+8	; 0x08
 3d6:	e0 0f       	add	r30, r16
 3d8:	f1 1f       	adc	r31, r17
 3da:	10 82       	st	Z, r1
 3dc:	2e 96       	adiw	r28, 0x0e	; 14
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <vfprintf>:
 3f2:	2f 92       	push	r2
 3f4:	3f 92       	push	r3
 3f6:	4f 92       	push	r4
 3f8:	5f 92       	push	r5
 3fa:	6f 92       	push	r6
 3fc:	7f 92       	push	r7
 3fe:	8f 92       	push	r8
 400:	9f 92       	push	r9
 402:	af 92       	push	r10
 404:	bf 92       	push	r11
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	2c 97       	sbiw	r28, 0x0c	; 12
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	7c 01       	movw	r14, r24
 428:	6b 01       	movw	r12, r22
 42a:	8a 01       	movw	r16, r20
 42c:	fc 01       	movw	r30, r24
 42e:	17 82       	std	Z+7, r1	; 0x07
 430:	16 82       	std	Z+6, r1	; 0x06
 432:	83 81       	ldd	r24, Z+3	; 0x03
 434:	81 ff       	sbrs	r24, 1
 436:	bd c1       	rjmp	.+890    	; 0x7b2 <vfprintf+0x3c0>
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	4c 01       	movw	r8, r24
 43e:	f7 01       	movw	r30, r14
 440:	93 81       	ldd	r25, Z+3	; 0x03
 442:	f6 01       	movw	r30, r12
 444:	93 fd       	sbrc	r25, 3
 446:	85 91       	lpm	r24, Z+
 448:	93 ff       	sbrs	r25, 3
 44a:	81 91       	ld	r24, Z+
 44c:	6f 01       	movw	r12, r30
 44e:	88 23       	and	r24, r24
 450:	09 f4       	brne	.+2      	; 0x454 <vfprintf+0x62>
 452:	ab c1       	rjmp	.+854    	; 0x7aa <vfprintf+0x3b8>
 454:	85 32       	cpi	r24, 0x25	; 37
 456:	39 f4       	brne	.+14     	; 0x466 <vfprintf+0x74>
 458:	93 fd       	sbrc	r25, 3
 45a:	85 91       	lpm	r24, Z+
 45c:	93 ff       	sbrs	r25, 3
 45e:	81 91       	ld	r24, Z+
 460:	6f 01       	movw	r12, r30
 462:	85 32       	cpi	r24, 0x25	; 37
 464:	29 f4       	brne	.+10     	; 0x470 <vfprintf+0x7e>
 466:	b7 01       	movw	r22, r14
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 46e:	e7 cf       	rjmp	.-50     	; 0x43e <vfprintf+0x4c>
 470:	51 2c       	mov	r5, r1
 472:	31 2c       	mov	r3, r1
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	20 32       	cpi	r18, 0x20	; 32
 478:	a0 f4       	brcc	.+40     	; 0x4a2 <vfprintf+0xb0>
 47a:	8b 32       	cpi	r24, 0x2B	; 43
 47c:	69 f0       	breq	.+26     	; 0x498 <vfprintf+0xa6>
 47e:	30 f4       	brcc	.+12     	; 0x48c <vfprintf+0x9a>
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	59 f0       	breq	.+22     	; 0x49a <vfprintf+0xa8>
 484:	83 32       	cpi	r24, 0x23	; 35
 486:	69 f4       	brne	.+26     	; 0x4a2 <vfprintf+0xb0>
 488:	20 61       	ori	r18, 0x10	; 16
 48a:	2c c0       	rjmp	.+88     	; 0x4e4 <vfprintf+0xf2>
 48c:	8d 32       	cpi	r24, 0x2D	; 45
 48e:	39 f0       	breq	.+14     	; 0x49e <vfprintf+0xac>
 490:	80 33       	cpi	r24, 0x30	; 48
 492:	39 f4       	brne	.+14     	; 0x4a2 <vfprintf+0xb0>
 494:	21 60       	ori	r18, 0x01	; 1
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <vfprintf+0xf2>
 498:	22 60       	ori	r18, 0x02	; 2
 49a:	24 60       	ori	r18, 0x04	; 4
 49c:	23 c0       	rjmp	.+70     	; 0x4e4 <vfprintf+0xf2>
 49e:	28 60       	ori	r18, 0x08	; 8
 4a0:	21 c0       	rjmp	.+66     	; 0x4e4 <vfprintf+0xf2>
 4a2:	27 fd       	sbrc	r18, 7
 4a4:	27 c0       	rjmp	.+78     	; 0x4f4 <vfprintf+0x102>
 4a6:	30 ed       	ldi	r19, 0xD0	; 208
 4a8:	38 0f       	add	r19, r24
 4aa:	3a 30       	cpi	r19, 0x0A	; 10
 4ac:	78 f4       	brcc	.+30     	; 0x4cc <vfprintf+0xda>
 4ae:	26 ff       	sbrs	r18, 6
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <vfprintf+0xcc>
 4b2:	fa e0       	ldi	r31, 0x0A	; 10
 4b4:	5f 9e       	mul	r5, r31
 4b6:	30 0d       	add	r19, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	53 2e       	mov	r5, r19
 4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <vfprintf+0xf2>
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	38 9e       	mul	r3, r24
 4c2:	30 0d       	add	r19, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	33 2e       	mov	r3, r19
 4c8:	20 62       	ori	r18, 0x20	; 32
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <vfprintf+0xf2>
 4cc:	8e 32       	cpi	r24, 0x2E	; 46
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <vfprintf+0xe6>
 4d0:	26 fd       	sbrc	r18, 6
 4d2:	6b c1       	rjmp	.+726    	; 0x7aa <vfprintf+0x3b8>
 4d4:	20 64       	ori	r18, 0x40	; 64
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <vfprintf+0xf2>
 4d8:	8c 36       	cpi	r24, 0x6C	; 108
 4da:	11 f4       	brne	.+4      	; 0x4e0 <vfprintf+0xee>
 4dc:	20 68       	ori	r18, 0x80	; 128
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <vfprintf+0xf2>
 4e0:	88 36       	cpi	r24, 0x68	; 104
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <vfprintf+0x102>
 4e4:	f6 01       	movw	r30, r12
 4e6:	93 fd       	sbrc	r25, 3
 4e8:	85 91       	lpm	r24, Z+
 4ea:	93 ff       	sbrs	r25, 3
 4ec:	81 91       	ld	r24, Z+
 4ee:	6f 01       	movw	r12, r30
 4f0:	81 11       	cpse	r24, r1
 4f2:	c1 cf       	rjmp	.-126    	; 0x476 <vfprintf+0x84>
 4f4:	98 2f       	mov	r25, r24
 4f6:	9f 7d       	andi	r25, 0xDF	; 223
 4f8:	95 54       	subi	r25, 0x45	; 69
 4fa:	93 30       	cpi	r25, 0x03	; 3
 4fc:	28 f4       	brcc	.+10     	; 0x508 <vfprintf+0x116>
 4fe:	0c 5f       	subi	r16, 0xFC	; 252
 500:	1f 4f       	sbci	r17, 0xFF	; 255
 502:	ff e3       	ldi	r31, 0x3F	; 63
 504:	f9 83       	std	Y+1, r31	; 0x01
 506:	0d c0       	rjmp	.+26     	; 0x522 <vfprintf+0x130>
 508:	83 36       	cpi	r24, 0x63	; 99
 50a:	31 f0       	breq	.+12     	; 0x518 <vfprintf+0x126>
 50c:	83 37       	cpi	r24, 0x73	; 115
 50e:	71 f0       	breq	.+28     	; 0x52c <vfprintf+0x13a>
 510:	83 35       	cpi	r24, 0x53	; 83
 512:	09 f0       	breq	.+2      	; 0x516 <vfprintf+0x124>
 514:	5b c0       	rjmp	.+182    	; 0x5cc <vfprintf+0x1da>
 516:	22 c0       	rjmp	.+68     	; 0x55c <vfprintf+0x16a>
 518:	f8 01       	movw	r30, r16
 51a:	80 81       	ld	r24, Z
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	0e 5f       	subi	r16, 0xFE	; 254
 520:	1f 4f       	sbci	r17, 0xFF	; 255
 522:	44 24       	eor	r4, r4
 524:	43 94       	inc	r4
 526:	51 2c       	mov	r5, r1
 528:	54 01       	movw	r10, r8
 52a:	15 c0       	rjmp	.+42     	; 0x556 <vfprintf+0x164>
 52c:	38 01       	movw	r6, r16
 52e:	f2 e0       	ldi	r31, 0x02	; 2
 530:	6f 0e       	add	r6, r31
 532:	71 1c       	adc	r7, r1
 534:	f8 01       	movw	r30, r16
 536:	a0 80       	ld	r10, Z
 538:	b1 80       	ldd	r11, Z+1	; 0x01
 53a:	26 ff       	sbrs	r18, 6
 53c:	03 c0       	rjmp	.+6      	; 0x544 <vfprintf+0x152>
 53e:	65 2d       	mov	r22, r5
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <vfprintf+0x156>
 544:	6f ef       	ldi	r22, 0xFF	; 255
 546:	7f ef       	ldi	r23, 0xFF	; 255
 548:	c5 01       	movw	r24, r10
 54a:	2c 87       	std	Y+12, r18	; 0x0c
 54c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strnlen>
 550:	2c 01       	movw	r4, r24
 552:	83 01       	movw	r16, r6
 554:	2c 85       	ldd	r18, Y+12	; 0x0c
 556:	2f 77       	andi	r18, 0x7F	; 127
 558:	22 2e       	mov	r2, r18
 55a:	17 c0       	rjmp	.+46     	; 0x58a <vfprintf+0x198>
 55c:	38 01       	movw	r6, r16
 55e:	f2 e0       	ldi	r31, 0x02	; 2
 560:	6f 0e       	add	r6, r31
 562:	71 1c       	adc	r7, r1
 564:	f8 01       	movw	r30, r16
 566:	a0 80       	ld	r10, Z
 568:	b1 80       	ldd	r11, Z+1	; 0x01
 56a:	26 ff       	sbrs	r18, 6
 56c:	03 c0       	rjmp	.+6      	; 0x574 <vfprintf+0x182>
 56e:	65 2d       	mov	r22, r5
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <vfprintf+0x186>
 574:	6f ef       	ldi	r22, 0xFF	; 255
 576:	7f ef       	ldi	r23, 0xFF	; 255
 578:	c5 01       	movw	r24, r10
 57a:	2c 87       	std	Y+12, r18	; 0x0c
 57c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <strnlen_P>
 580:	2c 01       	movw	r4, r24
 582:	2c 85       	ldd	r18, Y+12	; 0x0c
 584:	20 68       	ori	r18, 0x80	; 128
 586:	22 2e       	mov	r2, r18
 588:	83 01       	movw	r16, r6
 58a:	23 fc       	sbrc	r2, 3
 58c:	1b c0       	rjmp	.+54     	; 0x5c4 <vfprintf+0x1d2>
 58e:	83 2d       	mov	r24, r3
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	48 16       	cp	r4, r24
 594:	59 06       	cpc	r5, r25
 596:	b0 f4       	brcc	.+44     	; 0x5c4 <vfprintf+0x1d2>
 598:	b7 01       	movw	r22, r14
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 5a2:	3a 94       	dec	r3
 5a4:	f4 cf       	rjmp	.-24     	; 0x58e <vfprintf+0x19c>
 5a6:	f5 01       	movw	r30, r10
 5a8:	27 fc       	sbrc	r2, 7
 5aa:	85 91       	lpm	r24, Z+
 5ac:	27 fe       	sbrs	r2, 7
 5ae:	81 91       	ld	r24, Z+
 5b0:	5f 01       	movw	r10, r30
 5b2:	b7 01       	movw	r22, r14
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 5ba:	31 10       	cpse	r3, r1
 5bc:	3a 94       	dec	r3
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	4f 1a       	sub	r4, r31
 5c2:	51 08       	sbc	r5, r1
 5c4:	41 14       	cp	r4, r1
 5c6:	51 04       	cpc	r5, r1
 5c8:	71 f7       	brne	.-36     	; 0x5a6 <vfprintf+0x1b4>
 5ca:	e5 c0       	rjmp	.+458    	; 0x796 <vfprintf+0x3a4>
 5cc:	84 36       	cpi	r24, 0x64	; 100
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <vfprintf+0x1e2>
 5d0:	89 36       	cpi	r24, 0x69	; 105
 5d2:	39 f5       	brne	.+78     	; 0x622 <vfprintf+0x230>
 5d4:	f8 01       	movw	r30, r16
 5d6:	27 ff       	sbrs	r18, 7
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <vfprintf+0x1f6>
 5da:	60 81       	ld	r22, Z
 5dc:	71 81       	ldd	r23, Z+1	; 0x01
 5de:	82 81       	ldd	r24, Z+2	; 0x02
 5e0:	93 81       	ldd	r25, Z+3	; 0x03
 5e2:	0c 5f       	subi	r16, 0xFC	; 252
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <vfprintf+0x206>
 5e8:	60 81       	ld	r22, Z
 5ea:	71 81       	ldd	r23, Z+1	; 0x01
 5ec:	88 27       	eor	r24, r24
 5ee:	77 fd       	sbrc	r23, 7
 5f0:	80 95       	com	r24
 5f2:	98 2f       	mov	r25, r24
 5f4:	0e 5f       	subi	r16, 0xFE	; 254
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	2f 76       	andi	r18, 0x6F	; 111
 5fa:	b2 2e       	mov	r11, r18
 5fc:	97 ff       	sbrs	r25, 7
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <vfprintf+0x220>
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	20 68       	ori	r18, 0x80	; 128
 610:	b2 2e       	mov	r11, r18
 612:	2a e0       	ldi	r18, 0x0A	; 10
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	a4 01       	movw	r20, r8
 618:	0e 94 3c 04 	call	0x878	; 0x878 <__ultoa_invert>
 61c:	a8 2e       	mov	r10, r24
 61e:	a8 18       	sub	r10, r8
 620:	44 c0       	rjmp	.+136    	; 0x6aa <vfprintf+0x2b8>
 622:	85 37       	cpi	r24, 0x75	; 117
 624:	29 f4       	brne	.+10     	; 0x630 <vfprintf+0x23e>
 626:	2f 7e       	andi	r18, 0xEF	; 239
 628:	b2 2e       	mov	r11, r18
 62a:	2a e0       	ldi	r18, 0x0A	; 10
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	25 c0       	rjmp	.+74     	; 0x67a <vfprintf+0x288>
 630:	f2 2f       	mov	r31, r18
 632:	f9 7f       	andi	r31, 0xF9	; 249
 634:	bf 2e       	mov	r11, r31
 636:	8f 36       	cpi	r24, 0x6F	; 111
 638:	c1 f0       	breq	.+48     	; 0x66a <vfprintf+0x278>
 63a:	18 f4       	brcc	.+6      	; 0x642 <vfprintf+0x250>
 63c:	88 35       	cpi	r24, 0x58	; 88
 63e:	79 f0       	breq	.+30     	; 0x65e <vfprintf+0x26c>
 640:	b4 c0       	rjmp	.+360    	; 0x7aa <vfprintf+0x3b8>
 642:	80 37       	cpi	r24, 0x70	; 112
 644:	19 f0       	breq	.+6      	; 0x64c <vfprintf+0x25a>
 646:	88 37       	cpi	r24, 0x78	; 120
 648:	21 f0       	breq	.+8      	; 0x652 <vfprintf+0x260>
 64a:	af c0       	rjmp	.+350    	; 0x7aa <vfprintf+0x3b8>
 64c:	2f 2f       	mov	r18, r31
 64e:	20 61       	ori	r18, 0x10	; 16
 650:	b2 2e       	mov	r11, r18
 652:	b4 fe       	sbrs	r11, 4
 654:	0d c0       	rjmp	.+26     	; 0x670 <vfprintf+0x27e>
 656:	8b 2d       	mov	r24, r11
 658:	84 60       	ori	r24, 0x04	; 4
 65a:	b8 2e       	mov	r11, r24
 65c:	09 c0       	rjmp	.+18     	; 0x670 <vfprintf+0x27e>
 65e:	24 ff       	sbrs	r18, 4
 660:	0a c0       	rjmp	.+20     	; 0x676 <vfprintf+0x284>
 662:	9f 2f       	mov	r25, r31
 664:	96 60       	ori	r25, 0x06	; 6
 666:	b9 2e       	mov	r11, r25
 668:	06 c0       	rjmp	.+12     	; 0x676 <vfprintf+0x284>
 66a:	28 e0       	ldi	r18, 0x08	; 8
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	05 c0       	rjmp	.+10     	; 0x67a <vfprintf+0x288>
 670:	20 e1       	ldi	r18, 0x10	; 16
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <vfprintf+0x288>
 676:	20 e1       	ldi	r18, 0x10	; 16
 678:	32 e0       	ldi	r19, 0x02	; 2
 67a:	f8 01       	movw	r30, r16
 67c:	b7 fe       	sbrs	r11, 7
 67e:	07 c0       	rjmp	.+14     	; 0x68e <vfprintf+0x29c>
 680:	60 81       	ld	r22, Z
 682:	71 81       	ldd	r23, Z+1	; 0x01
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	93 81       	ldd	r25, Z+3	; 0x03
 688:	0c 5f       	subi	r16, 0xFC	; 252
 68a:	1f 4f       	sbci	r17, 0xFF	; 255
 68c:	06 c0       	rjmp	.+12     	; 0x69a <vfprintf+0x2a8>
 68e:	60 81       	ld	r22, Z
 690:	71 81       	ldd	r23, Z+1	; 0x01
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 5f       	subi	r16, 0xFE	; 254
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	a4 01       	movw	r20, r8
 69c:	0e 94 3c 04 	call	0x878	; 0x878 <__ultoa_invert>
 6a0:	a8 2e       	mov	r10, r24
 6a2:	a8 18       	sub	r10, r8
 6a4:	fb 2d       	mov	r31, r11
 6a6:	ff 77       	andi	r31, 0x7F	; 127
 6a8:	bf 2e       	mov	r11, r31
 6aa:	b6 fe       	sbrs	r11, 6
 6ac:	0b c0       	rjmp	.+22     	; 0x6c4 <vfprintf+0x2d2>
 6ae:	2b 2d       	mov	r18, r11
 6b0:	2e 7f       	andi	r18, 0xFE	; 254
 6b2:	a5 14       	cp	r10, r5
 6b4:	50 f4       	brcc	.+20     	; 0x6ca <vfprintf+0x2d8>
 6b6:	b4 fe       	sbrs	r11, 4
 6b8:	0a c0       	rjmp	.+20     	; 0x6ce <vfprintf+0x2dc>
 6ba:	b2 fc       	sbrc	r11, 2
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <vfprintf+0x2dc>
 6be:	2b 2d       	mov	r18, r11
 6c0:	2e 7e       	andi	r18, 0xEE	; 238
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <vfprintf+0x2dc>
 6c4:	7a 2c       	mov	r7, r10
 6c6:	2b 2d       	mov	r18, r11
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <vfprintf+0x2de>
 6ca:	7a 2c       	mov	r7, r10
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <vfprintf+0x2de>
 6ce:	75 2c       	mov	r7, r5
 6d0:	24 ff       	sbrs	r18, 4
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <vfprintf+0x2fc>
 6d4:	fe 01       	movw	r30, r28
 6d6:	ea 0d       	add	r30, r10
 6d8:	f1 1d       	adc	r31, r1
 6da:	80 81       	ld	r24, Z
 6dc:	80 33       	cpi	r24, 0x30	; 48
 6de:	11 f4       	brne	.+4      	; 0x6e4 <vfprintf+0x2f2>
 6e0:	29 7e       	andi	r18, 0xE9	; 233
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <vfprintf+0x304>
 6e4:	22 ff       	sbrs	r18, 2
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <vfprintf+0x302>
 6e8:	73 94       	inc	r7
 6ea:	73 94       	inc	r7
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <vfprintf+0x304>
 6ee:	82 2f       	mov	r24, r18
 6f0:	86 78       	andi	r24, 0x86	; 134
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <vfprintf+0x304>
 6f4:	73 94       	inc	r7
 6f6:	23 fd       	sbrc	r18, 3
 6f8:	13 c0       	rjmp	.+38     	; 0x720 <vfprintf+0x32e>
 6fa:	20 ff       	sbrs	r18, 0
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <vfprintf+0x318>
 6fe:	5a 2c       	mov	r5, r10
 700:	73 14       	cp	r7, r3
 702:	18 f4       	brcc	.+6      	; 0x70a <vfprintf+0x318>
 704:	53 0c       	add	r5, r3
 706:	57 18       	sub	r5, r7
 708:	73 2c       	mov	r7, r3
 70a:	73 14       	cp	r7, r3
 70c:	68 f4       	brcc	.+26     	; 0x728 <vfprintf+0x336>
 70e:	b7 01       	movw	r22, r14
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	2c 87       	std	Y+12, r18	; 0x0c
 716:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 71a:	73 94       	inc	r7
 71c:	2c 85       	ldd	r18, Y+12	; 0x0c
 71e:	f5 cf       	rjmp	.-22     	; 0x70a <vfprintf+0x318>
 720:	73 14       	cp	r7, r3
 722:	10 f4       	brcc	.+4      	; 0x728 <vfprintf+0x336>
 724:	37 18       	sub	r3, r7
 726:	01 c0       	rjmp	.+2      	; 0x72a <vfprintf+0x338>
 728:	31 2c       	mov	r3, r1
 72a:	24 ff       	sbrs	r18, 4
 72c:	12 c0       	rjmp	.+36     	; 0x752 <vfprintf+0x360>
 72e:	b7 01       	movw	r22, r14
 730:	80 e3       	ldi	r24, 0x30	; 48
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	2c 87       	std	Y+12, r18	; 0x0c
 736:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 73a:	2c 85       	ldd	r18, Y+12	; 0x0c
 73c:	22 ff       	sbrs	r18, 2
 73e:	17 c0       	rjmp	.+46     	; 0x76e <vfprintf+0x37c>
 740:	21 ff       	sbrs	r18, 1
 742:	03 c0       	rjmp	.+6      	; 0x74a <vfprintf+0x358>
 744:	88 e5       	ldi	r24, 0x58	; 88
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <vfprintf+0x35c>
 74a:	88 e7       	ldi	r24, 0x78	; 120
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	b7 01       	movw	r22, r14
 750:	0c c0       	rjmp	.+24     	; 0x76a <vfprintf+0x378>
 752:	82 2f       	mov	r24, r18
 754:	86 78       	andi	r24, 0x86	; 134
 756:	59 f0       	breq	.+22     	; 0x76e <vfprintf+0x37c>
 758:	21 fd       	sbrc	r18, 1
 75a:	02 c0       	rjmp	.+4      	; 0x760 <vfprintf+0x36e>
 75c:	80 e2       	ldi	r24, 0x20	; 32
 75e:	01 c0       	rjmp	.+2      	; 0x762 <vfprintf+0x370>
 760:	8b e2       	ldi	r24, 0x2B	; 43
 762:	27 fd       	sbrc	r18, 7
 764:	8d e2       	ldi	r24, 0x2D	; 45
 766:	b7 01       	movw	r22, r14
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 76e:	a5 14       	cp	r10, r5
 770:	38 f4       	brcc	.+14     	; 0x780 <vfprintf+0x38e>
 772:	b7 01       	movw	r22, r14
 774:	80 e3       	ldi	r24, 0x30	; 48
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 77c:	5a 94       	dec	r5
 77e:	f7 cf       	rjmp	.-18     	; 0x76e <vfprintf+0x37c>
 780:	aa 94       	dec	r10
 782:	f4 01       	movw	r30, r8
 784:	ea 0d       	add	r30, r10
 786:	f1 1d       	adc	r31, r1
 788:	80 81       	ld	r24, Z
 78a:	b7 01       	movw	r22, r14
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 792:	a1 10       	cpse	r10, r1
 794:	f5 cf       	rjmp	.-22     	; 0x780 <vfprintf+0x38e>
 796:	33 20       	and	r3, r3
 798:	09 f4       	brne	.+2      	; 0x79c <vfprintf+0x3aa>
 79a:	51 ce       	rjmp	.-862    	; 0x43e <vfprintf+0x4c>
 79c:	b7 01       	movw	r22, r14
 79e:	80 e2       	ldi	r24, 0x20	; 32
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 0a 04 	call	0x814	; 0x814 <fputc>
 7a6:	3a 94       	dec	r3
 7a8:	f6 cf       	rjmp	.-20     	; 0x796 <vfprintf+0x3a4>
 7aa:	f7 01       	movw	r30, r14
 7ac:	86 81       	ldd	r24, Z+6	; 0x06
 7ae:	97 81       	ldd	r25, Z+7	; 0x07
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x3c4>
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	9f ef       	ldi	r25, 0xFF	; 255
 7b6:	2c 96       	adiw	r28, 0x0c	; 12
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	f8 94       	cli
 7bc:	de bf       	out	0x3e, r29	; 62
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	cd bf       	out	0x3d, r28	; 61
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
 7ce:	df 90       	pop	r13
 7d0:	cf 90       	pop	r12
 7d2:	bf 90       	pop	r11
 7d4:	af 90       	pop	r10
 7d6:	9f 90       	pop	r9
 7d8:	8f 90       	pop	r8
 7da:	7f 90       	pop	r7
 7dc:	6f 90       	pop	r6
 7de:	5f 90       	pop	r5
 7e0:	4f 90       	pop	r4
 7e2:	3f 90       	pop	r3
 7e4:	2f 90       	pop	r2
 7e6:	08 95       	ret

000007e8 <strnlen_P>:
 7e8:	fc 01       	movw	r30, r24
 7ea:	05 90       	lpm	r0, Z+
 7ec:	61 50       	subi	r22, 0x01	; 1
 7ee:	70 40       	sbci	r23, 0x00	; 0
 7f0:	01 10       	cpse	r0, r1
 7f2:	d8 f7       	brcc	.-10     	; 0x7ea <strnlen_P+0x2>
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	8e 0f       	add	r24, r30
 7fa:	9f 1f       	adc	r25, r31
 7fc:	08 95       	ret

000007fe <strnlen>:
 7fe:	fc 01       	movw	r30, r24
 800:	61 50       	subi	r22, 0x01	; 1
 802:	70 40       	sbci	r23, 0x00	; 0
 804:	01 90       	ld	r0, Z+
 806:	01 10       	cpse	r0, r1
 808:	d8 f7       	brcc	.-10     	; 0x800 <strnlen+0x2>
 80a:	80 95       	com	r24
 80c:	90 95       	com	r25
 80e:	8e 0f       	add	r24, r30
 810:	9f 1f       	adc	r25, r31
 812:	08 95       	ret

00000814 <fputc>:
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	18 2f       	mov	r17, r24
 81e:	09 2f       	mov	r16, r25
 820:	eb 01       	movw	r28, r22
 822:	8b 81       	ldd	r24, Y+3	; 0x03
 824:	81 fd       	sbrc	r24, 1
 826:	03 c0       	rjmp	.+6      	; 0x82e <fputc+0x1a>
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	20 c0       	rjmp	.+64     	; 0x86e <fputc+0x5a>
 82e:	82 ff       	sbrs	r24, 2
 830:	10 c0       	rjmp	.+32     	; 0x852 <fputc+0x3e>
 832:	4e 81       	ldd	r20, Y+6	; 0x06
 834:	5f 81       	ldd	r21, Y+7	; 0x07
 836:	2c 81       	ldd	r18, Y+4	; 0x04
 838:	3d 81       	ldd	r19, Y+5	; 0x05
 83a:	42 17       	cp	r20, r18
 83c:	53 07       	cpc	r21, r19
 83e:	7c f4       	brge	.+30     	; 0x85e <fputc+0x4a>
 840:	e8 81       	ld	r30, Y
 842:	f9 81       	ldd	r31, Y+1	; 0x01
 844:	9f 01       	movw	r18, r30
 846:	2f 5f       	subi	r18, 0xFF	; 255
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	39 83       	std	Y+1, r19	; 0x01
 84c:	28 83       	st	Y, r18
 84e:	10 83       	st	Z, r17
 850:	06 c0       	rjmp	.+12     	; 0x85e <fputc+0x4a>
 852:	e8 85       	ldd	r30, Y+8	; 0x08
 854:	f9 85       	ldd	r31, Y+9	; 0x09
 856:	81 2f       	mov	r24, r17
 858:	09 95       	icall
 85a:	89 2b       	or	r24, r25
 85c:	29 f7       	brne	.-54     	; 0x828 <fputc+0x14>
 85e:	2e 81       	ldd	r18, Y+6	; 0x06
 860:	3f 81       	ldd	r19, Y+7	; 0x07
 862:	2f 5f       	subi	r18, 0xFF	; 255
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	3f 83       	std	Y+7, r19	; 0x07
 868:	2e 83       	std	Y+6, r18	; 0x06
 86a:	81 2f       	mov	r24, r17
 86c:	90 2f       	mov	r25, r16
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	1f 91       	pop	r17
 874:	0f 91       	pop	r16
 876:	08 95       	ret

00000878 <__ultoa_invert>:
 878:	fa 01       	movw	r30, r20
 87a:	aa 27       	eor	r26, r26
 87c:	28 30       	cpi	r18, 0x08	; 8
 87e:	51 f1       	breq	.+84     	; 0x8d4 <__ultoa_invert+0x5c>
 880:	20 31       	cpi	r18, 0x10	; 16
 882:	81 f1       	breq	.+96     	; 0x8e4 <__ultoa_invert+0x6c>
 884:	e8 94       	clt
 886:	6f 93       	push	r22
 888:	6e 7f       	andi	r22, 0xFE	; 254
 88a:	6e 5f       	subi	r22, 0xFE	; 254
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	af 4f       	sbci	r26, 0xFF	; 255
 894:	b1 e0       	ldi	r27, 0x01	; 1
 896:	3e d0       	rcall	.+124    	; 0x914 <__ultoa_invert+0x9c>
 898:	b4 e0       	ldi	r27, 0x04	; 4
 89a:	3c d0       	rcall	.+120    	; 0x914 <__ultoa_invert+0x9c>
 89c:	67 0f       	add	r22, r23
 89e:	78 1f       	adc	r23, r24
 8a0:	89 1f       	adc	r24, r25
 8a2:	9a 1f       	adc	r25, r26
 8a4:	a1 1d       	adc	r26, r1
 8a6:	68 0f       	add	r22, r24
 8a8:	79 1f       	adc	r23, r25
 8aa:	8a 1f       	adc	r24, r26
 8ac:	91 1d       	adc	r25, r1
 8ae:	a1 1d       	adc	r26, r1
 8b0:	6a 0f       	add	r22, r26
 8b2:	71 1d       	adc	r23, r1
 8b4:	81 1d       	adc	r24, r1
 8b6:	91 1d       	adc	r25, r1
 8b8:	a1 1d       	adc	r26, r1
 8ba:	20 d0       	rcall	.+64     	; 0x8fc <__ultoa_invert+0x84>
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <__ultoa_invert+0x48>
 8be:	68 94       	set
 8c0:	3f 91       	pop	r19
 8c2:	2a e0       	ldi	r18, 0x0A	; 10
 8c4:	26 9f       	mul	r18, r22
 8c6:	11 24       	eor	r1, r1
 8c8:	30 19       	sub	r19, r0
 8ca:	30 5d       	subi	r19, 0xD0	; 208
 8cc:	31 93       	st	Z+, r19
 8ce:	de f6       	brtc	.-74     	; 0x886 <__ultoa_invert+0xe>
 8d0:	cf 01       	movw	r24, r30
 8d2:	08 95       	ret
 8d4:	46 2f       	mov	r20, r22
 8d6:	47 70       	andi	r20, 0x07	; 7
 8d8:	40 5d       	subi	r20, 0xD0	; 208
 8da:	41 93       	st	Z+, r20
 8dc:	b3 e0       	ldi	r27, 0x03	; 3
 8de:	0f d0       	rcall	.+30     	; 0x8fe <__ultoa_invert+0x86>
 8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__ultoa_invert+0x5c>
 8e2:	f6 cf       	rjmp	.-20     	; 0x8d0 <__ultoa_invert+0x58>
 8e4:	46 2f       	mov	r20, r22
 8e6:	4f 70       	andi	r20, 0x0F	; 15
 8e8:	40 5d       	subi	r20, 0xD0	; 208
 8ea:	4a 33       	cpi	r20, 0x3A	; 58
 8ec:	18 f0       	brcs	.+6      	; 0x8f4 <__ultoa_invert+0x7c>
 8ee:	49 5d       	subi	r20, 0xD9	; 217
 8f0:	31 fd       	sbrc	r19, 1
 8f2:	40 52       	subi	r20, 0x20	; 32
 8f4:	41 93       	st	Z+, r20
 8f6:	02 d0       	rcall	.+4      	; 0x8fc <__ultoa_invert+0x84>
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__ultoa_invert+0x6c>
 8fa:	ea cf       	rjmp	.-44     	; 0x8d0 <__ultoa_invert+0x58>
 8fc:	b4 e0       	ldi	r27, 0x04	; 4
 8fe:	a6 95       	lsr	r26
 900:	97 95       	ror	r25
 902:	87 95       	ror	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	ba 95       	dec	r27
 90a:	c9 f7       	brne	.-14     	; 0x8fe <__ultoa_invert+0x86>
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	61 05       	cpc	r22, r1
 910:	71 05       	cpc	r23, r1
 912:	08 95       	ret
 914:	9b 01       	movw	r18, r22
 916:	ac 01       	movw	r20, r24
 918:	0a 2e       	mov	r0, r26
 91a:	06 94       	lsr	r0
 91c:	57 95       	ror	r21
 91e:	47 95       	ror	r20
 920:	37 95       	ror	r19
 922:	27 95       	ror	r18
 924:	ba 95       	dec	r27
 926:	c9 f7       	brne	.-14     	; 0x91a <__ultoa_invert+0xa2>
 928:	62 0f       	add	r22, r18
 92a:	73 1f       	adc	r23, r19
 92c:	84 1f       	adc	r24, r20
 92e:	95 1f       	adc	r25, r21
 930:	a0 1d       	adc	r26, r0
 932:	08 95       	ret

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
