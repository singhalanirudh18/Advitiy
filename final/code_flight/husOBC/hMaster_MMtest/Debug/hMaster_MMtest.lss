
hMaster_MMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800158  00800158  00000c80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002445  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b28  00000000  00000000  00003319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c7d  00000000  00000000  00003e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d8  00000000  00000000  00004ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000544  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ce  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00005aaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "hm.h"
#include "twi.h"
#include "peripherals.h"

void get_HM_data(void)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
void get_HM_data(void)
{
  ///Counter for the 7 bytes of Health monitoring data
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
}
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    PORTC |= _BV(PC3);
  else
    PORTC &= ~(_BV(PC3));
    
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  OCR3B = Current_state.pwm.y;
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  OCR3C = Current_state.pwm.z;
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    sbi(PORTB, ADC_S);
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] &= 0x0F00;
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x40);
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
    sbi(PORTB, ADC_S);
  9a:	a0 e0       	ldi	r26, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
    
    channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
}
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3e       	cpi	r26, 0xEA	; 234
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  c2:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
  c6:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <_exit>

000000ca <__bad_interrupt>:
  TWDR = (addr << 1) + TW_READ;
  TWCR = (1 << TWINT) | (1 << TWEN);

  while (!(TWCR & (1 << TWINT)));
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
}
  ce:	1f 92       	push	r1
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
  ea:	8c b1       	in	r24, 0x0c	; 12
  ec:	80 93 59 01 	sts	0x0159, r24
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
  f0:	80 91 5a 01 	lds	r24, 0x015A
  f4:	90 91 5b 01 	lds	r25, 0x015B
  f8:	a0 91 5c 01 	lds	r26, 0x015C
  fc:	b0 91 5d 01 	lds	r27, 0x015D
 100:	ba 2f       	mov	r27, r26
 102:	a9 2f       	mov	r26, r25
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	80 93 5a 01 	sts	0x015A, r24
 10c:	90 93 5b 01 	sts	0x015B, r25
 110:	a0 93 5c 01 	sts	0x015C, r26
 114:	b0 93 5d 01 	sts	0x015D, r27
  buffer &= 0xFFFFFF00;
 118:	80 91 5a 01 	lds	r24, 0x015A
 11c:	90 91 5b 01 	lds	r25, 0x015B
 120:	a0 91 5c 01 	lds	r26, 0x015C
 124:	b0 91 5d 01 	lds	r27, 0x015D
 128:	88 27       	eor	r24, r24
 12a:	80 93 5a 01 	sts	0x015A, r24
 12e:	90 93 5b 01 	sts	0x015B, r25
 132:	a0 93 5c 01 	sts	0x015C, r26
 136:	b0 93 5d 01 	sts	0x015D, r27
  buffer |= (uint32_t) last_byte;
 13a:	20 91 59 01 	lds	r18, 0x0159
 13e:	80 91 5a 01 	lds	r24, 0x015A
 142:	90 91 5b 01 	lds	r25, 0x015B
 146:	a0 91 5c 01 	lds	r26, 0x015C
 14a:	b0 91 5d 01 	lds	r27, 0x015D
 14e:	82 2b       	or	r24, r18
 150:	80 93 5a 01 	sts	0x015A, r24
 154:	90 93 5b 01 	sts	0x015B, r25
 158:	a0 93 5c 01 	sts	0x015C, r26
 15c:	b0 93 5d 01 	sts	0x015D, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
 160:	80 91 06 01 	lds	r24, 0x0106
 164:	8c 30       	cpi	r24, 0x0C	; 12
 166:	a0 f4       	brcc	.+40     	; 0x190 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 168:	e0 91 06 01 	lds	r30, 0x0106
 16c:	80 91 59 01 	lds	r24, 0x0159
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e2 5a       	subi	r30, 0xA2	; 162
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 178:	80 91 06 01 	lds	r24, 0x0106
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 06 01 	sts	0x0106, r24
    if(pos == 12)
 182:	80 91 06 01 	lds	r24, 0x0106
 186:	8c 30       	cpi	r24, 0x0C	; 12
 188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xc2>
      pos = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 06 01 	sts	0x0106, r24
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 190:	80 91 05 01 	lds	r24, 0x0105
 194:	8c 30       	cpi	r24, 0x0C	; 12
 196:	a0 f4       	brcc	.+40     	; 0x1c0 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 198:	e0 91 05 01 	lds	r30, 0x0105
 19c:	80 91 59 01 	lds	r24, 0x0159
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e6 59       	subi	r30, 0x96	; 150
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 83       	st	Z, r24
    
    vel++;
 1a8:	80 91 05 01 	lds	r24, 0x0105
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 05 01 	sts	0x0105, r24
    if(vel == 12)
 1b2:	80 91 05 01 	lds	r24, 0x0105
 1b6:	8c 30       	cpi	r24, 0x0C	; 12
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_18+0xf2>
      vel = 0xFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 05 01 	sts	0x0105, r24
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 1c0:	80 91 04 01 	lds	r24, 0x0104
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	c0 f4       	brcc	.+48     	; 0x1f8 <__vector_18+0x12a>
  {
    if(dop >= 2)
 1c8:	80 91 04 01 	lds	r24, 0x0104
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 1d0:	e0 91 04 01 	lds	r30, 0x0104
 1d4:	80 91 59 01 	lds	r24, 0x0159
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e2 50       	subi	r30, 0x02	; 2
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 83       	st	Z, r24
      
    dop++;
 1e0:	80 91 04 01 	lds	r24, 0x0104
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 04 01 	sts	0x0104, r24
    if(dop == 4)
 1ea:	80 91 04 01 	lds	r24, 0x0104
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_18+0x12a>
      dop = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 04 01 	sts	0x0104, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 1f8:	80 91 03 01 	lds	r24, 0x0103
 1fc:	80 31       	cpi	r24, 0x10	; 16
 1fe:	c0 f4       	brcc	.+48     	; 0x230 <__vector_18+0x162>
  {
    if(geo >= 4)
 200:	80 91 03 01 	lds	r24, 0x0103
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	40 f0       	brcs	.+16     	; 0x218 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 208:	e0 91 03 01 	lds	r30, 0x0103
 20c:	80 91 59 01 	lds	r24, 0x0159
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 58       	subi	r30, 0x8E	; 142
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 83       	st	Z, r24
    
    geo++;
 218:	80 91 03 01 	lds	r24, 0x0103
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 03 01 	sts	0x0103, r24
    if(geo == 16)
 222:	80 91 03 01 	lds	r24, 0x0103
 226:	80 31       	cpi	r24, 0x10	; 16
 228:	19 f4       	brne	.+6      	; 0x230 <__vector_18+0x162>
      geo = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 03 01 	sts	0x0103, r24
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 230:	80 91 02 01 	lds	r24, 0x0102
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	b8 f4       	brcc	.+46     	; 0x266 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 238:	e0 91 02 01 	lds	r30, 0x0102
 23c:	80 91 59 01 	lds	r24, 0x0159
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 57       	subi	r30, 0x7E	; 126
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 83       	st	Z, r24
    
    time++;
 248:	80 91 02 01 	lds	r24, 0x0102
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 02 01 	sts	0x0102, r24
    if(time == 7)
 252:	80 91 02 01 	lds	r24, 0x0102
 256:	87 30       	cpi	r24, 0x07	; 7
 258:	31 f4       	brne	.+12     	; 0x266 <__vector_18+0x198>
    {
      time = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 02 01 	sts	0x0102, r24
      ///* * The Entire message has been read
      message_end = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 58 01 	sts	0x0158, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 266:	80 91 5a 01 	lds	r24, 0x015A
 26a:	90 91 5b 01 	lds	r25, 0x015B
 26e:	a0 91 5c 01 	lds	r26, 0x015C
 272:	b0 91 5d 01 	lds	r27, 0x015D
 276:	8c 3a       	cpi	r24, 0xAC	; 172
 278:	94 40       	sbci	r25, 0x04	; 4
 27a:	af 43       	sbci	r26, 0x3F	; 63
 27c:	bf 43       	sbci	r27, 0x3F	; 63
 27e:	29 f4       	brne	.+10     	; 0x28a <__vector_18+0x1bc>
  {
    message_end = 0;
 280:	10 92 58 01 	sts	0x0158, r1
    pos = 0;
 284:	10 92 06 01 	sts	0x0106, r1
 288:	3f c0       	rjmp	.+126    	; 0x308 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 28a:	80 91 5a 01 	lds	r24, 0x015A
 28e:	90 91 5b 01 	lds	r25, 0x015B
 292:	a0 91 5c 01 	lds	r26, 0x015C
 296:	b0 91 5d 01 	lds	r27, 0x015D
 29a:	8c 3a       	cpi	r24, 0xAC	; 172
 29c:	95 40       	sbci	r25, 0x05	; 5
 29e:	af 43       	sbci	r26, 0x3F	; 63
 2a0:	bf 43       	sbci	r27, 0x3F	; 63
 2a2:	19 f4       	brne	.+6      	; 0x2aa <__vector_18+0x1dc>
    vel = 0;
 2a4:	10 92 05 01 	sts	0x0105, r1
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 2aa:	80 91 5a 01 	lds	r24, 0x015A
 2ae:	90 91 5b 01 	lds	r25, 0x015B
 2b2:	a0 91 5c 01 	lds	r26, 0x015C
 2b6:	b0 91 5d 01 	lds	r27, 0x015D
 2ba:	8c 3a       	cpi	r24, 0xAC	; 172
 2bc:	9b 40       	sbci	r25, 0x0B	; 11
 2be:	af 43       	sbci	r26, 0x3F	; 63
 2c0:	bf 43       	sbci	r27, 0x3F	; 63
 2c2:	19 f4       	brne	.+6      	; 0x2ca <__vector_18+0x1fc>
    dop = 0;
 2c4:	10 92 04 01 	sts	0x0104, r1
 2c8:	1f c0       	rjmp	.+62     	; 0x308 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 2ca:	80 91 5a 01 	lds	r24, 0x015A
 2ce:	90 91 5b 01 	lds	r25, 0x015B
 2d2:	a0 91 5c 01 	lds	r26, 0x015C
 2d6:	b0 91 5d 01 	lds	r27, 0x015D
 2da:	8c 3a       	cpi	r24, 0xAC	; 172
 2dc:	9e 40       	sbci	r25, 0x0E	; 14
 2de:	af 43       	sbci	r26, 0x3F	; 63
 2e0:	bf 43       	sbci	r27, 0x3F	; 63
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__vector_18+0x21c>
    geo = 0;
 2e4:	10 92 03 01 	sts	0x0103, r1
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 2ea:	80 91 5a 01 	lds	r24, 0x015A
 2ee:	90 91 5b 01 	lds	r25, 0x015B
 2f2:	a0 91 5c 01 	lds	r26, 0x015C
 2f6:	b0 91 5d 01 	lds	r27, 0x015D
 2fa:	8c 3a       	cpi	r24, 0xAC	; 172
 2fc:	9f 40       	sbci	r25, 0x0F	; 15
 2fe:	af 43       	sbci	r26, 0x3F	; 63
 300:	bf 43       	sbci	r27, 0x3F	; 63
 302:	11 f4       	brne	.+4      	; 0x308 <__vector_18+0x23a>
    time = 0;
 304:	10 92 02 01 	sts	0x0102, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 308:	80 91 00 01 	lds	r24, 0x0100
 30c:	90 91 01 01 	lds	r25, 0x0101
 310:	84 3f       	cpi	r24, 0xF4	; 244
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	f0 f4       	brcc	.+60     	; 0x352 <__vector_18+0x284>
 316:	80 91 00 01 	lds	r24, 0x0100
 31a:	90 91 01 01 	lds	r25, 0x0101
 31e:	89 2b       	or	r24, r25
 320:	c1 f0       	breq	.+48     	; 0x352 <__vector_18+0x284>
 322:	80 91 58 01 	lds	r24, 0x0158
 326:	88 23       	and	r24, r24
 328:	a1 f0       	breq	.+40     	; 0x352 <__vector_18+0x284>
  {
    GPS_done = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 e0 01 	sts	0x01E0, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 330:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	90 93 01 01 	sts	0x0101, r25
 33a:	80 93 00 01 	sts	0x0100, r24
    message_end = 0;
 33e:	10 92 58 01 	sts	0x0158, r1
    buffer = 0;
 342:	10 92 5a 01 	sts	0x015A, r1
 346:	10 92 5b 01 	sts	0x015B, r1
 34a:	10 92 5c 01 	sts	0x015C, r1
 34e:	10 92 5d 01 	sts	0x015D, r1
  }
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	c4 5b       	subi	r28, 0xB4	; 180
 378:	d1 09       	sbc	r29, r1
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	char array2[40];
		 int16_t Bx;
		 int16_t By;
		 int16_t Bz;
	
	DDRA = 0xF0;
 384:	80 ef       	ldi	r24, 0xF0	; 240
 386:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 388:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	89 e6       	ldi	r24, 0x69	; 105
 38e:	98 e1       	ldi	r25, 0x18	; 24
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x22>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x2c>
 39a:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 39c:	1b ba       	out	0x1b, r1	; 27
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	89 e6       	ldi	r24, 0x69	; 105
 3a2:	98 e1       	ldi	r25, 0x18	; 24
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x36>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x40>
 3ae:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 3b0:	80 ef       	ldi	r24, 0xF0	; 240
 3b2:	8b bb       	out	0x1b, r24	; 27
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	89 e6       	ldi	r24, 0x69	; 105
 3b8:	98 e1       	ldi	r25, 0x18	; 24
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x4c>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x56>
 3c4:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3c6:	1b ba       	out	0x1b, r1	; 27
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	89 e6       	ldi	r24, 0x69	; 105
 3cc:	98 e1       	ldi	r25, 0x18	; 24
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x60>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x6a>
 3d8:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 3da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <init_UART0>
  
	transmit_UART0('\r');
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	transmit_UART0('\r');
 3e4:	8d e0       	ldi	r24, 0x0D	; 13
 3e6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	transmit_UART0('H');
 3ea:	88 e4       	ldi	r24, 0x48	; 72
 3ec:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	transmit_UART0('e');
 3f0:	85 e6       	ldi	r24, 0x65	; 101
 3f2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	transmit_UART0('l');
 3f6:	8c e6       	ldi	r24, 0x6C	; 108
 3f8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	transmit_UART0('l');
 3fc:	8c e6       	ldi	r24, 0x6C	; 108
 3fe:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	transmit_UART0('o');
 402:	8f e6       	ldi	r24, 0x6F	; 111
 404:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	int16_t a=1500;
	sprintf(array,"%d",a);
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	8f 93       	push	r24
 40c:	8c ed       	ldi	r24, 0xDC	; 220
 40e:	8f 93       	push	r24
 410:	87 e0       	ldi	r24, 0x07	; 7
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	8e 01       	movw	r16, r28
 41a:	0f 5f       	subi	r16, 0xFF	; 255
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
 41e:	1f 93       	push	r17
 420:	0f 93       	push	r16
 422:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sprintf>
	transmit_string_UART0(array);
 426:	c8 01       	movw	r24, r16
 428:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 42c:	86 e2       	ldi	r24, 0x26	; 38
 42e:	ea e0       	ldi	r30, 0x0A	; 10
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	de 01       	movw	r26, r28
 434:	99 96       	adiw	r26, 0x29	; 41
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <main+0xc8>
	sprintf(array2,"\rCurrent MagnetoMetr state is =\t");
 43e:	81 e2       	ldi	r24, 0x21	; 33
 440:	e0 e3       	ldi	r30, 0x30	; 48
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	de 01       	movw	r26, r28
 446:	af 5a       	subi	r26, 0xAF	; 175
 448:	bf 4f       	sbci	r27, 0xFF	; 255
 44a:	01 90       	ld	r0, Z+
 44c:	0d 92       	st	X+, r0
 44e:	8a 95       	dec	r24
 450:	e1 f7       	brne	.-8      	; 0x44a <main+0xdc>
		
/************************************************************/
	init_UART_MM();
 452:	0e 94 9d 02 	call	0x53a	; 0x53a <init_UART_MM>
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
			 Bz=(Bz<<8); Bz &= 0xFF00;
			 Bz|=(int16_t)receive_MM();
			 transmit_UART0('x');
		     receive_MM();
			 transmit_UART0('\r');
	 sprintf(sx,"%d",Bx);
 462:	07 e0       	ldi	r16, 0x07	; 7
 464:	11 e0       	ldi	r17, 0x01	; 1
 466:	5e 01       	movw	r10, r28
 468:	29 e7       	ldi	r18, 0x79	; 121
 46a:	a2 0e       	add	r10, r18
 46c:	b1 1c       	adc	r11, r1
	 sprintf(sy,"%d",By);
 46e:	6e 01       	movw	r12, r28
 470:	8d e8       	ldi	r24, 0x8D	; 141
 472:	c8 0e       	add	r12, r24
 474:	d1 1c       	adc	r13, r1
	 sprintf(sz,"%d",Bz);
 476:	7e 01       	movw	r14, r28
 478:	91 ea       	ldi	r25, 0xA1	; 161
 47a:	e9 0e       	add	r14, r25
 47c:	f1 1c       	adc	r15, r1
	char sy[20];
	char sz[20];
	
	   while (1){
	 //  transmit_UART0('d');
	   send_MM_cmd("*00P\r");
 47e:	81 e5       	ldi	r24, 0x51	; 81
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 c1 02 	call	0x582	; 0x582 <send_MM_cmd>
			 Bx=(int16_t)receive_MM();
 486:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
 48a:	68 2e       	mov	r6, r24
 48c:	71 2c       	mov	r7, r1
		     Bx=(Bx<<8); 
 48e:	76 2c       	mov	r7, r6
 490:	66 24       	eor	r6, r6
			 Bx &= 0xFF00;
		     Bx|=(int16_t)receive_MM();
 492:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
 496:	68 2a       	or	r6, r24
			 transmit_UART0('x');
 498:	88 e7       	ldi	r24, 0x78	; 120
 49a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
			 By=(int16_t)receive_MM();
 49e:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
 4a2:	88 2e       	mov	r8, r24
 4a4:	91 2c       	mov	r9, r1
			 By=(By<<8); By &= 0xFF00;
 4a6:	98 2c       	mov	r9, r8
 4a8:	88 24       	eor	r8, r8
			 By|=(int16_t)receive_MM();
 4aa:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
 4ae:	24 01       	movw	r4, r8
 4b0:	48 2a       	or	r4, r24
			 transmit_UART0('y');		 
 4b2:	89 e7       	ldi	r24, 0x79	; 121
 4b4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
			 Bz=(int16_t)receive_MM();
 4b8:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
 4bc:	88 2e       	mov	r8, r24
 4be:	91 2c       	mov	r9, r1
			 Bz=(Bz<<8); Bz &= 0xFF00;
 4c0:	98 2c       	mov	r9, r8
 4c2:	88 24       	eor	r8, r8
			 Bz|=(int16_t)receive_MM();
 4c4:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
 4c8:	88 2a       	or	r8, r24
			 transmit_UART0('x');
 4ca:	88 e7       	ldi	r24, 0x78	; 120
 4cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
		     receive_MM();
 4d0:	0e 94 b9 02 	call	0x572	; 0x572 <receive_MM>
			 transmit_UART0('\r');
 4d4:	8d e0       	ldi	r24, 0x0D	; 13
 4d6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	 sprintf(sx,"%d",Bx);
 4da:	7f 92       	push	r7
 4dc:	6f 92       	push	r6
 4de:	1f 93       	push	r17
 4e0:	0f 93       	push	r16
 4e2:	bf 92       	push	r11
 4e4:	af 92       	push	r10
 4e6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sprintf>
	 sprintf(sy,"%d",By);
 4ea:	5f 92       	push	r5
 4ec:	4f 92       	push	r4
 4ee:	1f 93       	push	r17
 4f0:	0f 93       	push	r16
 4f2:	df 92       	push	r13
 4f4:	cf 92       	push	r12
 4f6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sprintf>
	 sprintf(sz,"%d",Bz);
 4fa:	9f 92       	push	r9
 4fc:	8f 92       	push	r8
 4fe:	1f 93       	push	r17
 500:	0f 93       	push	r16
 502:	ff 92       	push	r15
 504:	ef 92       	push	r14
 506:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sprintf>
	 transmit_string_UART0(sx);
 50a:	c5 01       	movw	r24, r10
 50c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <transmit_string_UART0>
	 transmit_UART0(' ');
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	 transmit_string_UART0(sy);
 516:	c6 01       	movw	r24, r12
 518:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <transmit_string_UART0>
	 transmit_UART0(' ');
 51c:	80 e2       	ldi	r24, 0x20	; 32
 51e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
	 transmit_string_UART0(sz);
 522:	c7 01       	movw	r24, r14
 524:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <transmit_string_UART0>
	 transmit_UART0('\r');
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <transmit_UART0>
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	a2 cf       	rjmp	.-188    	; 0x47e <main+0x110>

0000053a <init_UART_MM>:
#include "peripherals.h"
#include "uart.h"


void init_UART_MM(void )
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29

  UCSR1A = 0;
 53e:	cb e9       	ldi	r28, 0x9B	; 155
 540:	d0 e0       	ldi	r29, 0x00	; 0
 542:	18 82       	st	Y, r1
  UCSR1B = 0;
 544:	aa e9       	ldi	r26, 0x9A	; 154
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	1c 92       	st	X, r1
  UCSR1C = 0;
 54a:	ed e9       	ldi	r30, 0x9D	; 157
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
 550:	88 81       	ld	r24, Y
 552:	82 60       	ori	r24, 0x02	; 2
 554:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
 556:	8c 91       	ld	r24, X
 558:	88 69       	ori	r24, 0x98	; 152
 55a:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
 55c:	80 81       	ld	r24, Z
 55e:	86 60       	ori	r24, 0x06	; 6
 560:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
 562:	87 e6       	ldi	r24, 0x67	; 103
 564:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = 0;
 568:	10 92 98 00 	sts	0x0098, r1
}
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <receive_MM>:
}

uint8_t receive_MM(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSR1A & _BV(RXC1)));
 572:	eb e9       	ldi	r30, 0x9B	; 155
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	88 23       	and	r24, r24
 57a:	ec f7       	brge	.-6      	; 0x576 <receive_MM+0x4>
  return UDR1; 
 57c:	80 91 9c 00 	lds	r24, 0x009C
}
 580:	08 95       	ret

00000582 <send_MM_cmd>:

void send_MM_cmd(char *data)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
  ///Send the char array till stop
  while((*data) != '\0')
 586:	fc 01       	movw	r30, r24
 588:	20 81       	ld	r18, Z
 58a:	22 23       	and	r18, r18
 58c:	69 f0       	breq	.+26     	; 0x5a8 <send_MM_cmd+0x26>
 58e:	dc 01       	movw	r26, r24
 590:	11 96       	adiw	r26, 0x01	; 1
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
 592:	eb e9       	ldi	r30, 0x9B	; 155
 594:	f0 e0       	ldi	r31, 0x00	; 0
    ///* Start transmission
    UDR1 = *data;
 596:	cc e9       	ldi	r28, 0x9C	; 156
 598:	d0 e0       	ldi	r29, 0x00	; 0
{
  ///Send the char array till stop
  while((*data) != '\0')
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
 59a:	80 81       	ld	r24, Z
 59c:	85 ff       	sbrs	r24, 5
 59e:	fd cf       	rjmp	.-6      	; 0x59a <send_MM_cmd+0x18>
    ///* Start transmission
    UDR1 = *data;
 5a0:	28 83       	st	Y, r18
}

void send_MM_cmd(char *data)
{
  ///Send the char array till stop
  while((*data) != '\0')
 5a2:	2d 91       	ld	r18, X+
 5a4:	21 11       	cpse	r18, r1
 5a6:	f9 cf       	rjmp	.-14     	; 0x59a <send_MM_cmd+0x18>
    while ( !(UCSR1A & (_BV(UDRE1))) );
    ///* Start transmission
    UDR1 = *data;
    data++;
  }
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 5ae:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 5b0:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 5b2:	e5 e9       	ldi	r30, 0x95	; 149
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 5b8:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 5ba:	8a b1       	in	r24, 0x0a	; 10
 5bc:	88 61       	ori	r24, 0x18	; 24
 5be:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 5c0:	80 81       	ld	r24, Z
 5c2:	8e 60       	ori	r24, 0x0E	; 14
 5c4:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 5c6:	87 e6       	ldi	r24, 0x67	; 103
 5c8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 5ca:	10 92 90 00 	sts	0x0090, r1
 5ce:	08 95       	ret

000005d0 <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 5d0:	5d 9b       	sbis	0x0b, 5	; 11
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 5d4:	8c b9       	out	0x0c, r24	; 12
 5d6:	08 95       	ret

000005d8 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 5d8:	fc 01       	movw	r30, r24
 5da:	20 81       	ld	r18, Z
 5dc:	22 23       	and	r18, r18
 5de:	39 f0       	breq	.+14     	; 0x5ee <transmit_string_UART0+0x16>
 5e0:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 5e2:	5d 9b       	sbis	0x0b, 5	; 11
 5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 5e6:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 5e8:	21 91       	ld	r18, Z+
 5ea:	21 11       	cpse	r18, r1
 5ec:	fa cf       	rjmp	.-12     	; 0x5e2 <transmit_string_UART0+0xa>
 5ee:	08 95       	ret

000005f0 <sprintf>:
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	2e 97       	sbiw	r28, 0x0e	; 14
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
 608:	0d 89       	ldd	r16, Y+21	; 0x15
 60a:	1e 89       	ldd	r17, Y+22	; 0x16
 60c:	86 e0       	ldi	r24, 0x06	; 6
 60e:	8c 83       	std	Y+4, r24	; 0x04
 610:	1a 83       	std	Y+2, r17	; 0x02
 612:	09 83       	std	Y+1, r16	; 0x01
 614:	8f ef       	ldi	r24, 0xFF	; 255
 616:	9f e7       	ldi	r25, 0x7F	; 127
 618:	9e 83       	std	Y+6, r25	; 0x06
 61a:	8d 83       	std	Y+5, r24	; 0x05
 61c:	ae 01       	movw	r20, r28
 61e:	47 5e       	subi	r20, 0xE7	; 231
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	6f 89       	ldd	r22, Y+23	; 0x17
 624:	78 8d       	ldd	r23, Y+24	; 0x18
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	0e 94 27 03 	call	0x64e	; 0x64e <vfprintf>
 62e:	ef 81       	ldd	r30, Y+7	; 0x07
 630:	f8 85       	ldd	r31, Y+8	; 0x08
 632:	e0 0f       	add	r30, r16
 634:	f1 1f       	adc	r31, r17
 636:	10 82       	st	Z, r1
 638:	2e 96       	adiw	r28, 0x0e	; 14
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	08 95       	ret

0000064e <vfprintf>:
 64e:	2f 92       	push	r2
 650:	3f 92       	push	r3
 652:	4f 92       	push	r4
 654:	5f 92       	push	r5
 656:	6f 92       	push	r6
 658:	7f 92       	push	r7
 65a:	8f 92       	push	r8
 65c:	9f 92       	push	r9
 65e:	af 92       	push	r10
 660:	bf 92       	push	r11
 662:	cf 92       	push	r12
 664:	df 92       	push	r13
 666:	ef 92       	push	r14
 668:	ff 92       	push	r15
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	2c 97       	sbiw	r28, 0x0c	; 12
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
 682:	7c 01       	movw	r14, r24
 684:	6b 01       	movw	r12, r22
 686:	8a 01       	movw	r16, r20
 688:	fc 01       	movw	r30, r24
 68a:	17 82       	std	Z+7, r1	; 0x07
 68c:	16 82       	std	Z+6, r1	; 0x06
 68e:	83 81       	ldd	r24, Z+3	; 0x03
 690:	81 ff       	sbrs	r24, 1
 692:	bd c1       	rjmp	.+890    	; 0xa0e <vfprintf+0x3c0>
 694:	ce 01       	movw	r24, r28
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	4c 01       	movw	r8, r24
 69a:	f7 01       	movw	r30, r14
 69c:	93 81       	ldd	r25, Z+3	; 0x03
 69e:	f6 01       	movw	r30, r12
 6a0:	93 fd       	sbrc	r25, 3
 6a2:	85 91       	lpm	r24, Z+
 6a4:	93 ff       	sbrs	r25, 3
 6a6:	81 91       	ld	r24, Z+
 6a8:	6f 01       	movw	r12, r30
 6aa:	88 23       	and	r24, r24
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <vfprintf+0x62>
 6ae:	ab c1       	rjmp	.+854    	; 0xa06 <vfprintf+0x3b8>
 6b0:	85 32       	cpi	r24, 0x25	; 37
 6b2:	39 f4       	brne	.+14     	; 0x6c2 <vfprintf+0x74>
 6b4:	93 fd       	sbrc	r25, 3
 6b6:	85 91       	lpm	r24, Z+
 6b8:	93 ff       	sbrs	r25, 3
 6ba:	81 91       	ld	r24, Z+
 6bc:	6f 01       	movw	r12, r30
 6be:	85 32       	cpi	r24, 0x25	; 37
 6c0:	29 f4       	brne	.+10     	; 0x6cc <vfprintf+0x7e>
 6c2:	b7 01       	movw	r22, r14
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 6ca:	e7 cf       	rjmp	.-50     	; 0x69a <vfprintf+0x4c>
 6cc:	51 2c       	mov	r5, r1
 6ce:	31 2c       	mov	r3, r1
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	20 32       	cpi	r18, 0x20	; 32
 6d4:	a0 f4       	brcc	.+40     	; 0x6fe <vfprintf+0xb0>
 6d6:	8b 32       	cpi	r24, 0x2B	; 43
 6d8:	69 f0       	breq	.+26     	; 0x6f4 <vfprintf+0xa6>
 6da:	30 f4       	brcc	.+12     	; 0x6e8 <vfprintf+0x9a>
 6dc:	80 32       	cpi	r24, 0x20	; 32
 6de:	59 f0       	breq	.+22     	; 0x6f6 <vfprintf+0xa8>
 6e0:	83 32       	cpi	r24, 0x23	; 35
 6e2:	69 f4       	brne	.+26     	; 0x6fe <vfprintf+0xb0>
 6e4:	20 61       	ori	r18, 0x10	; 16
 6e6:	2c c0       	rjmp	.+88     	; 0x740 <vfprintf+0xf2>
 6e8:	8d 32       	cpi	r24, 0x2D	; 45
 6ea:	39 f0       	breq	.+14     	; 0x6fa <vfprintf+0xac>
 6ec:	80 33       	cpi	r24, 0x30	; 48
 6ee:	39 f4       	brne	.+14     	; 0x6fe <vfprintf+0xb0>
 6f0:	21 60       	ori	r18, 0x01	; 1
 6f2:	26 c0       	rjmp	.+76     	; 0x740 <vfprintf+0xf2>
 6f4:	22 60       	ori	r18, 0x02	; 2
 6f6:	24 60       	ori	r18, 0x04	; 4
 6f8:	23 c0       	rjmp	.+70     	; 0x740 <vfprintf+0xf2>
 6fa:	28 60       	ori	r18, 0x08	; 8
 6fc:	21 c0       	rjmp	.+66     	; 0x740 <vfprintf+0xf2>
 6fe:	27 fd       	sbrc	r18, 7
 700:	27 c0       	rjmp	.+78     	; 0x750 <vfprintf+0x102>
 702:	30 ed       	ldi	r19, 0xD0	; 208
 704:	38 0f       	add	r19, r24
 706:	3a 30       	cpi	r19, 0x0A	; 10
 708:	78 f4       	brcc	.+30     	; 0x728 <vfprintf+0xda>
 70a:	26 ff       	sbrs	r18, 6
 70c:	06 c0       	rjmp	.+12     	; 0x71a <vfprintf+0xcc>
 70e:	fa e0       	ldi	r31, 0x0A	; 10
 710:	5f 9e       	mul	r5, r31
 712:	30 0d       	add	r19, r0
 714:	11 24       	eor	r1, r1
 716:	53 2e       	mov	r5, r19
 718:	13 c0       	rjmp	.+38     	; 0x740 <vfprintf+0xf2>
 71a:	8a e0       	ldi	r24, 0x0A	; 10
 71c:	38 9e       	mul	r3, r24
 71e:	30 0d       	add	r19, r0
 720:	11 24       	eor	r1, r1
 722:	33 2e       	mov	r3, r19
 724:	20 62       	ori	r18, 0x20	; 32
 726:	0c c0       	rjmp	.+24     	; 0x740 <vfprintf+0xf2>
 728:	8e 32       	cpi	r24, 0x2E	; 46
 72a:	21 f4       	brne	.+8      	; 0x734 <vfprintf+0xe6>
 72c:	26 fd       	sbrc	r18, 6
 72e:	6b c1       	rjmp	.+726    	; 0xa06 <vfprintf+0x3b8>
 730:	20 64       	ori	r18, 0x40	; 64
 732:	06 c0       	rjmp	.+12     	; 0x740 <vfprintf+0xf2>
 734:	8c 36       	cpi	r24, 0x6C	; 108
 736:	11 f4       	brne	.+4      	; 0x73c <vfprintf+0xee>
 738:	20 68       	ori	r18, 0x80	; 128
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0xf2>
 73c:	88 36       	cpi	r24, 0x68	; 104
 73e:	41 f4       	brne	.+16     	; 0x750 <vfprintf+0x102>
 740:	f6 01       	movw	r30, r12
 742:	93 fd       	sbrc	r25, 3
 744:	85 91       	lpm	r24, Z+
 746:	93 ff       	sbrs	r25, 3
 748:	81 91       	ld	r24, Z+
 74a:	6f 01       	movw	r12, r30
 74c:	81 11       	cpse	r24, r1
 74e:	c1 cf       	rjmp	.-126    	; 0x6d2 <vfprintf+0x84>
 750:	98 2f       	mov	r25, r24
 752:	9f 7d       	andi	r25, 0xDF	; 223
 754:	95 54       	subi	r25, 0x45	; 69
 756:	93 30       	cpi	r25, 0x03	; 3
 758:	28 f4       	brcc	.+10     	; 0x764 <vfprintf+0x116>
 75a:	0c 5f       	subi	r16, 0xFC	; 252
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	ff e3       	ldi	r31, 0x3F	; 63
 760:	f9 83       	std	Y+1, r31	; 0x01
 762:	0d c0       	rjmp	.+26     	; 0x77e <vfprintf+0x130>
 764:	83 36       	cpi	r24, 0x63	; 99
 766:	31 f0       	breq	.+12     	; 0x774 <vfprintf+0x126>
 768:	83 37       	cpi	r24, 0x73	; 115
 76a:	71 f0       	breq	.+28     	; 0x788 <vfprintf+0x13a>
 76c:	83 35       	cpi	r24, 0x53	; 83
 76e:	09 f0       	breq	.+2      	; 0x772 <vfprintf+0x124>
 770:	5b c0       	rjmp	.+182    	; 0x828 <vfprintf+0x1da>
 772:	22 c0       	rjmp	.+68     	; 0x7b8 <vfprintf+0x16a>
 774:	f8 01       	movw	r30, r16
 776:	80 81       	ld	r24, Z
 778:	89 83       	std	Y+1, r24	; 0x01
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	44 24       	eor	r4, r4
 780:	43 94       	inc	r4
 782:	51 2c       	mov	r5, r1
 784:	54 01       	movw	r10, r8
 786:	15 c0       	rjmp	.+42     	; 0x7b2 <vfprintf+0x164>
 788:	38 01       	movw	r6, r16
 78a:	f2 e0       	ldi	r31, 0x02	; 2
 78c:	6f 0e       	add	r6, r31
 78e:	71 1c       	adc	r7, r1
 790:	f8 01       	movw	r30, r16
 792:	a0 80       	ld	r10, Z
 794:	b1 80       	ldd	r11, Z+1	; 0x01
 796:	26 ff       	sbrs	r18, 6
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <vfprintf+0x152>
 79a:	65 2d       	mov	r22, r5
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <vfprintf+0x156>
 7a0:	6f ef       	ldi	r22, 0xFF	; 255
 7a2:	7f ef       	ldi	r23, 0xFF	; 255
 7a4:	c5 01       	movw	r24, r10
 7a6:	2c 87       	std	Y+12, r18	; 0x0c
 7a8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <strnlen>
 7ac:	2c 01       	movw	r4, r24
 7ae:	83 01       	movw	r16, r6
 7b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7b2:	2f 77       	andi	r18, 0x7F	; 127
 7b4:	22 2e       	mov	r2, r18
 7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <vfprintf+0x198>
 7b8:	38 01       	movw	r6, r16
 7ba:	f2 e0       	ldi	r31, 0x02	; 2
 7bc:	6f 0e       	add	r6, r31
 7be:	71 1c       	adc	r7, r1
 7c0:	f8 01       	movw	r30, r16
 7c2:	a0 80       	ld	r10, Z
 7c4:	b1 80       	ldd	r11, Z+1	; 0x01
 7c6:	26 ff       	sbrs	r18, 6
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <vfprintf+0x182>
 7ca:	65 2d       	mov	r22, r5
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x186>
 7d0:	6f ef       	ldi	r22, 0xFF	; 255
 7d2:	7f ef       	ldi	r23, 0xFF	; 255
 7d4:	c5 01       	movw	r24, r10
 7d6:	2c 87       	std	Y+12, r18	; 0x0c
 7d8:	0e 94 22 05 	call	0xa44	; 0xa44 <strnlen_P>
 7dc:	2c 01       	movw	r4, r24
 7de:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e0:	20 68       	ori	r18, 0x80	; 128
 7e2:	22 2e       	mov	r2, r18
 7e4:	83 01       	movw	r16, r6
 7e6:	23 fc       	sbrc	r2, 3
 7e8:	1b c0       	rjmp	.+54     	; 0x820 <vfprintf+0x1d2>
 7ea:	83 2d       	mov	r24, r3
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	48 16       	cp	r4, r24
 7f0:	59 06       	cpc	r5, r25
 7f2:	b0 f4       	brcc	.+44     	; 0x820 <vfprintf+0x1d2>
 7f4:	b7 01       	movw	r22, r14
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 7fe:	3a 94       	dec	r3
 800:	f4 cf       	rjmp	.-24     	; 0x7ea <vfprintf+0x19c>
 802:	f5 01       	movw	r30, r10
 804:	27 fc       	sbrc	r2, 7
 806:	85 91       	lpm	r24, Z+
 808:	27 fe       	sbrs	r2, 7
 80a:	81 91       	ld	r24, Z+
 80c:	5f 01       	movw	r10, r30
 80e:	b7 01       	movw	r22, r14
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 816:	31 10       	cpse	r3, r1
 818:	3a 94       	dec	r3
 81a:	f1 e0       	ldi	r31, 0x01	; 1
 81c:	4f 1a       	sub	r4, r31
 81e:	51 08       	sbc	r5, r1
 820:	41 14       	cp	r4, r1
 822:	51 04       	cpc	r5, r1
 824:	71 f7       	brne	.-36     	; 0x802 <vfprintf+0x1b4>
 826:	e5 c0       	rjmp	.+458    	; 0x9f2 <vfprintf+0x3a4>
 828:	84 36       	cpi	r24, 0x64	; 100
 82a:	11 f0       	breq	.+4      	; 0x830 <vfprintf+0x1e2>
 82c:	89 36       	cpi	r24, 0x69	; 105
 82e:	39 f5       	brne	.+78     	; 0x87e <vfprintf+0x230>
 830:	f8 01       	movw	r30, r16
 832:	27 ff       	sbrs	r18, 7
 834:	07 c0       	rjmp	.+14     	; 0x844 <vfprintf+0x1f6>
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	93 81       	ldd	r25, Z+3	; 0x03
 83e:	0c 5f       	subi	r16, 0xFC	; 252
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	08 c0       	rjmp	.+16     	; 0x854 <vfprintf+0x206>
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	88 27       	eor	r24, r24
 84a:	77 fd       	sbrc	r23, 7
 84c:	80 95       	com	r24
 84e:	98 2f       	mov	r25, r24
 850:	0e 5f       	subi	r16, 0xFE	; 254
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	2f 76       	andi	r18, 0x6F	; 111
 856:	b2 2e       	mov	r11, r18
 858:	97 ff       	sbrs	r25, 7
 85a:	09 c0       	rjmp	.+18     	; 0x86e <vfprintf+0x220>
 85c:	90 95       	com	r25
 85e:	80 95       	com	r24
 860:	70 95       	com	r23
 862:	61 95       	neg	r22
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	20 68       	ori	r18, 0x80	; 128
 86c:	b2 2e       	mov	r11, r18
 86e:	2a e0       	ldi	r18, 0x0A	; 10
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	a4 01       	movw	r20, r8
 874:	0e 94 6a 05 	call	0xad4	; 0xad4 <__ultoa_invert>
 878:	a8 2e       	mov	r10, r24
 87a:	a8 18       	sub	r10, r8
 87c:	44 c0       	rjmp	.+136    	; 0x906 <vfprintf+0x2b8>
 87e:	85 37       	cpi	r24, 0x75	; 117
 880:	29 f4       	brne	.+10     	; 0x88c <vfprintf+0x23e>
 882:	2f 7e       	andi	r18, 0xEF	; 239
 884:	b2 2e       	mov	r11, r18
 886:	2a e0       	ldi	r18, 0x0A	; 10
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	25 c0       	rjmp	.+74     	; 0x8d6 <vfprintf+0x288>
 88c:	f2 2f       	mov	r31, r18
 88e:	f9 7f       	andi	r31, 0xF9	; 249
 890:	bf 2e       	mov	r11, r31
 892:	8f 36       	cpi	r24, 0x6F	; 111
 894:	c1 f0       	breq	.+48     	; 0x8c6 <vfprintf+0x278>
 896:	18 f4       	brcc	.+6      	; 0x89e <vfprintf+0x250>
 898:	88 35       	cpi	r24, 0x58	; 88
 89a:	79 f0       	breq	.+30     	; 0x8ba <vfprintf+0x26c>
 89c:	b4 c0       	rjmp	.+360    	; 0xa06 <vfprintf+0x3b8>
 89e:	80 37       	cpi	r24, 0x70	; 112
 8a0:	19 f0       	breq	.+6      	; 0x8a8 <vfprintf+0x25a>
 8a2:	88 37       	cpi	r24, 0x78	; 120
 8a4:	21 f0       	breq	.+8      	; 0x8ae <vfprintf+0x260>
 8a6:	af c0       	rjmp	.+350    	; 0xa06 <vfprintf+0x3b8>
 8a8:	2f 2f       	mov	r18, r31
 8aa:	20 61       	ori	r18, 0x10	; 16
 8ac:	b2 2e       	mov	r11, r18
 8ae:	b4 fe       	sbrs	r11, 4
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <vfprintf+0x27e>
 8b2:	8b 2d       	mov	r24, r11
 8b4:	84 60       	ori	r24, 0x04	; 4
 8b6:	b8 2e       	mov	r11, r24
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <vfprintf+0x27e>
 8ba:	24 ff       	sbrs	r18, 4
 8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <vfprintf+0x284>
 8be:	9f 2f       	mov	r25, r31
 8c0:	96 60       	ori	r25, 0x06	; 6
 8c2:	b9 2e       	mov	r11, r25
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <vfprintf+0x284>
 8c6:	28 e0       	ldi	r18, 0x08	; 8
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <vfprintf+0x288>
 8cc:	20 e1       	ldi	r18, 0x10	; 16
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <vfprintf+0x288>
 8d2:	20 e1       	ldi	r18, 0x10	; 16
 8d4:	32 e0       	ldi	r19, 0x02	; 2
 8d6:	f8 01       	movw	r30, r16
 8d8:	b7 fe       	sbrs	r11, 7
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <vfprintf+0x29c>
 8dc:	60 81       	ld	r22, Z
 8de:	71 81       	ldd	r23, Z+1	; 0x01
 8e0:	82 81       	ldd	r24, Z+2	; 0x02
 8e2:	93 81       	ldd	r25, Z+3	; 0x03
 8e4:	0c 5f       	subi	r16, 0xFC	; 252
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x2a8>
 8ea:	60 81       	ld	r22, Z
 8ec:	71 81       	ldd	r23, Z+1	; 0x01
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 5f       	subi	r16, 0xFE	; 254
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	a4 01       	movw	r20, r8
 8f8:	0e 94 6a 05 	call	0xad4	; 0xad4 <__ultoa_invert>
 8fc:	a8 2e       	mov	r10, r24
 8fe:	a8 18       	sub	r10, r8
 900:	fb 2d       	mov	r31, r11
 902:	ff 77       	andi	r31, 0x7F	; 127
 904:	bf 2e       	mov	r11, r31
 906:	b6 fe       	sbrs	r11, 6
 908:	0b c0       	rjmp	.+22     	; 0x920 <vfprintf+0x2d2>
 90a:	2b 2d       	mov	r18, r11
 90c:	2e 7f       	andi	r18, 0xFE	; 254
 90e:	a5 14       	cp	r10, r5
 910:	50 f4       	brcc	.+20     	; 0x926 <vfprintf+0x2d8>
 912:	b4 fe       	sbrs	r11, 4
 914:	0a c0       	rjmp	.+20     	; 0x92a <vfprintf+0x2dc>
 916:	b2 fc       	sbrc	r11, 2
 918:	08 c0       	rjmp	.+16     	; 0x92a <vfprintf+0x2dc>
 91a:	2b 2d       	mov	r18, r11
 91c:	2e 7e       	andi	r18, 0xEE	; 238
 91e:	05 c0       	rjmp	.+10     	; 0x92a <vfprintf+0x2dc>
 920:	7a 2c       	mov	r7, r10
 922:	2b 2d       	mov	r18, r11
 924:	03 c0       	rjmp	.+6      	; 0x92c <vfprintf+0x2de>
 926:	7a 2c       	mov	r7, r10
 928:	01 c0       	rjmp	.+2      	; 0x92c <vfprintf+0x2de>
 92a:	75 2c       	mov	r7, r5
 92c:	24 ff       	sbrs	r18, 4
 92e:	0d c0       	rjmp	.+26     	; 0x94a <vfprintf+0x2fc>
 930:	fe 01       	movw	r30, r28
 932:	ea 0d       	add	r30, r10
 934:	f1 1d       	adc	r31, r1
 936:	80 81       	ld	r24, Z
 938:	80 33       	cpi	r24, 0x30	; 48
 93a:	11 f4       	brne	.+4      	; 0x940 <vfprintf+0x2f2>
 93c:	29 7e       	andi	r18, 0xE9	; 233
 93e:	09 c0       	rjmp	.+18     	; 0x952 <vfprintf+0x304>
 940:	22 ff       	sbrs	r18, 2
 942:	06 c0       	rjmp	.+12     	; 0x950 <vfprintf+0x302>
 944:	73 94       	inc	r7
 946:	73 94       	inc	r7
 948:	04 c0       	rjmp	.+8      	; 0x952 <vfprintf+0x304>
 94a:	82 2f       	mov	r24, r18
 94c:	86 78       	andi	r24, 0x86	; 134
 94e:	09 f0       	breq	.+2      	; 0x952 <vfprintf+0x304>
 950:	73 94       	inc	r7
 952:	23 fd       	sbrc	r18, 3
 954:	13 c0       	rjmp	.+38     	; 0x97c <vfprintf+0x32e>
 956:	20 ff       	sbrs	r18, 0
 958:	06 c0       	rjmp	.+12     	; 0x966 <vfprintf+0x318>
 95a:	5a 2c       	mov	r5, r10
 95c:	73 14       	cp	r7, r3
 95e:	18 f4       	brcc	.+6      	; 0x966 <vfprintf+0x318>
 960:	53 0c       	add	r5, r3
 962:	57 18       	sub	r5, r7
 964:	73 2c       	mov	r7, r3
 966:	73 14       	cp	r7, r3
 968:	68 f4       	brcc	.+26     	; 0x984 <vfprintf+0x336>
 96a:	b7 01       	movw	r22, r14
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	2c 87       	std	Y+12, r18	; 0x0c
 972:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 976:	73 94       	inc	r7
 978:	2c 85       	ldd	r18, Y+12	; 0x0c
 97a:	f5 cf       	rjmp	.-22     	; 0x966 <vfprintf+0x318>
 97c:	73 14       	cp	r7, r3
 97e:	10 f4       	brcc	.+4      	; 0x984 <vfprintf+0x336>
 980:	37 18       	sub	r3, r7
 982:	01 c0       	rjmp	.+2      	; 0x986 <vfprintf+0x338>
 984:	31 2c       	mov	r3, r1
 986:	24 ff       	sbrs	r18, 4
 988:	12 c0       	rjmp	.+36     	; 0x9ae <vfprintf+0x360>
 98a:	b7 01       	movw	r22, r14
 98c:	80 e3       	ldi	r24, 0x30	; 48
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	2c 87       	std	Y+12, r18	; 0x0c
 992:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 996:	2c 85       	ldd	r18, Y+12	; 0x0c
 998:	22 ff       	sbrs	r18, 2
 99a:	17 c0       	rjmp	.+46     	; 0x9ca <vfprintf+0x37c>
 99c:	21 ff       	sbrs	r18, 1
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <vfprintf+0x358>
 9a0:	88 e5       	ldi	r24, 0x58	; 88
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <vfprintf+0x35c>
 9a6:	88 e7       	ldi	r24, 0x78	; 120
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	b7 01       	movw	r22, r14
 9ac:	0c c0       	rjmp	.+24     	; 0x9c6 <vfprintf+0x378>
 9ae:	82 2f       	mov	r24, r18
 9b0:	86 78       	andi	r24, 0x86	; 134
 9b2:	59 f0       	breq	.+22     	; 0x9ca <vfprintf+0x37c>
 9b4:	21 fd       	sbrc	r18, 1
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x36e>
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <vfprintf+0x370>
 9bc:	8b e2       	ldi	r24, 0x2B	; 43
 9be:	27 fd       	sbrc	r18, 7
 9c0:	8d e2       	ldi	r24, 0x2D	; 45
 9c2:	b7 01       	movw	r22, r14
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 9ca:	a5 14       	cp	r10, r5
 9cc:	38 f4       	brcc	.+14     	; 0x9dc <vfprintf+0x38e>
 9ce:	b7 01       	movw	r22, r14
 9d0:	80 e3       	ldi	r24, 0x30	; 48
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 9d8:	5a 94       	dec	r5
 9da:	f7 cf       	rjmp	.-18     	; 0x9ca <vfprintf+0x37c>
 9dc:	aa 94       	dec	r10
 9de:	f4 01       	movw	r30, r8
 9e0:	ea 0d       	add	r30, r10
 9e2:	f1 1d       	adc	r31, r1
 9e4:	80 81       	ld	r24, Z
 9e6:	b7 01       	movw	r22, r14
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 9ee:	a1 10       	cpse	r10, r1
 9f0:	f5 cf       	rjmp	.-22     	; 0x9dc <vfprintf+0x38e>
 9f2:	33 20       	and	r3, r3
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <vfprintf+0x3aa>
 9f6:	51 ce       	rjmp	.-862    	; 0x69a <vfprintf+0x4c>
 9f8:	b7 01       	movw	r22, r14
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 a02:	3a 94       	dec	r3
 a04:	f6 cf       	rjmp	.-20     	; 0x9f2 <vfprintf+0x3a4>
 a06:	f7 01       	movw	r30, r14
 a08:	86 81       	ldd	r24, Z+6	; 0x06
 a0a:	97 81       	ldd	r25, Z+7	; 0x07
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <vfprintf+0x3c4>
 a0e:	8f ef       	ldi	r24, 0xFF	; 255
 a10:	9f ef       	ldi	r25, 0xFF	; 255
 a12:	2c 96       	adiw	r28, 0x0c	; 12
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	df 91       	pop	r29
 a20:	cf 91       	pop	r28
 a22:	1f 91       	pop	r17
 a24:	0f 91       	pop	r16
 a26:	ff 90       	pop	r15
 a28:	ef 90       	pop	r14
 a2a:	df 90       	pop	r13
 a2c:	cf 90       	pop	r12
 a2e:	bf 90       	pop	r11
 a30:	af 90       	pop	r10
 a32:	9f 90       	pop	r9
 a34:	8f 90       	pop	r8
 a36:	7f 90       	pop	r7
 a38:	6f 90       	pop	r6
 a3a:	5f 90       	pop	r5
 a3c:	4f 90       	pop	r4
 a3e:	3f 90       	pop	r3
 a40:	2f 90       	pop	r2
 a42:	08 95       	ret

00000a44 <strnlen_P>:
 a44:	fc 01       	movw	r30, r24
 a46:	05 90       	lpm	r0, Z+
 a48:	61 50       	subi	r22, 0x01	; 1
 a4a:	70 40       	sbci	r23, 0x00	; 0
 a4c:	01 10       	cpse	r0, r1
 a4e:	d8 f7       	brcc	.-10     	; 0xa46 <strnlen_P+0x2>
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	8e 0f       	add	r24, r30
 a56:	9f 1f       	adc	r25, r31
 a58:	08 95       	ret

00000a5a <strnlen>:
 a5a:	fc 01       	movw	r30, r24
 a5c:	61 50       	subi	r22, 0x01	; 1
 a5e:	70 40       	sbci	r23, 0x00	; 0
 a60:	01 90       	ld	r0, Z+
 a62:	01 10       	cpse	r0, r1
 a64:	d8 f7       	brcc	.-10     	; 0xa5c <strnlen+0x2>
 a66:	80 95       	com	r24
 a68:	90 95       	com	r25
 a6a:	8e 0f       	add	r24, r30
 a6c:	9f 1f       	adc	r25, r31
 a6e:	08 95       	ret

00000a70 <fputc>:
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	18 2f       	mov	r17, r24
 a7a:	09 2f       	mov	r16, r25
 a7c:	eb 01       	movw	r28, r22
 a7e:	8b 81       	ldd	r24, Y+3	; 0x03
 a80:	81 fd       	sbrc	r24, 1
 a82:	03 c0       	rjmp	.+6      	; 0xa8a <fputc+0x1a>
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	20 c0       	rjmp	.+64     	; 0xaca <fputc+0x5a>
 a8a:	82 ff       	sbrs	r24, 2
 a8c:	10 c0       	rjmp	.+32     	; 0xaae <fputc+0x3e>
 a8e:	4e 81       	ldd	r20, Y+6	; 0x06
 a90:	5f 81       	ldd	r21, Y+7	; 0x07
 a92:	2c 81       	ldd	r18, Y+4	; 0x04
 a94:	3d 81       	ldd	r19, Y+5	; 0x05
 a96:	42 17       	cp	r20, r18
 a98:	53 07       	cpc	r21, r19
 a9a:	7c f4       	brge	.+30     	; 0xaba <fputc+0x4a>
 a9c:	e8 81       	ld	r30, Y
 a9e:	f9 81       	ldd	r31, Y+1	; 0x01
 aa0:	9f 01       	movw	r18, r30
 aa2:	2f 5f       	subi	r18, 0xFF	; 255
 aa4:	3f 4f       	sbci	r19, 0xFF	; 255
 aa6:	39 83       	std	Y+1, r19	; 0x01
 aa8:	28 83       	st	Y, r18
 aaa:	10 83       	st	Z, r17
 aac:	06 c0       	rjmp	.+12     	; 0xaba <fputc+0x4a>
 aae:	e8 85       	ldd	r30, Y+8	; 0x08
 ab0:	f9 85       	ldd	r31, Y+9	; 0x09
 ab2:	81 2f       	mov	r24, r17
 ab4:	09 95       	icall
 ab6:	89 2b       	or	r24, r25
 ab8:	29 f7       	brne	.-54     	; 0xa84 <fputc+0x14>
 aba:	2e 81       	ldd	r18, Y+6	; 0x06
 abc:	3f 81       	ldd	r19, Y+7	; 0x07
 abe:	2f 5f       	subi	r18, 0xFF	; 255
 ac0:	3f 4f       	sbci	r19, 0xFF	; 255
 ac2:	3f 83       	std	Y+7, r19	; 0x07
 ac4:	2e 83       	std	Y+6, r18	; 0x06
 ac6:	81 2f       	mov	r24, r17
 ac8:	90 2f       	mov	r25, r16
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	08 95       	ret

00000ad4 <__ultoa_invert>:
 ad4:	fa 01       	movw	r30, r20
 ad6:	aa 27       	eor	r26, r26
 ad8:	28 30       	cpi	r18, 0x08	; 8
 ada:	51 f1       	breq	.+84     	; 0xb30 <__ultoa_invert+0x5c>
 adc:	20 31       	cpi	r18, 0x10	; 16
 ade:	81 f1       	breq	.+96     	; 0xb40 <__ultoa_invert+0x6c>
 ae0:	e8 94       	clt
 ae2:	6f 93       	push	r22
 ae4:	6e 7f       	andi	r22, 0xFE	; 254
 ae6:	6e 5f       	subi	r22, 0xFE	; 254
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	af 4f       	sbci	r26, 0xFF	; 255
 af0:	b1 e0       	ldi	r27, 0x01	; 1
 af2:	3e d0       	rcall	.+124    	; 0xb70 <__ultoa_invert+0x9c>
 af4:	b4 e0       	ldi	r27, 0x04	; 4
 af6:	3c d0       	rcall	.+120    	; 0xb70 <__ultoa_invert+0x9c>
 af8:	67 0f       	add	r22, r23
 afa:	78 1f       	adc	r23, r24
 afc:	89 1f       	adc	r24, r25
 afe:	9a 1f       	adc	r25, r26
 b00:	a1 1d       	adc	r26, r1
 b02:	68 0f       	add	r22, r24
 b04:	79 1f       	adc	r23, r25
 b06:	8a 1f       	adc	r24, r26
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	6a 0f       	add	r22, r26
 b0e:	71 1d       	adc	r23, r1
 b10:	81 1d       	adc	r24, r1
 b12:	91 1d       	adc	r25, r1
 b14:	a1 1d       	adc	r26, r1
 b16:	20 d0       	rcall	.+64     	; 0xb58 <__ultoa_invert+0x84>
 b18:	09 f4       	brne	.+2      	; 0xb1c <__ultoa_invert+0x48>
 b1a:	68 94       	set
 b1c:	3f 91       	pop	r19
 b1e:	2a e0       	ldi	r18, 0x0A	; 10
 b20:	26 9f       	mul	r18, r22
 b22:	11 24       	eor	r1, r1
 b24:	30 19       	sub	r19, r0
 b26:	30 5d       	subi	r19, 0xD0	; 208
 b28:	31 93       	st	Z+, r19
 b2a:	de f6       	brtc	.-74     	; 0xae2 <__ultoa_invert+0xe>
 b2c:	cf 01       	movw	r24, r30
 b2e:	08 95       	ret
 b30:	46 2f       	mov	r20, r22
 b32:	47 70       	andi	r20, 0x07	; 7
 b34:	40 5d       	subi	r20, 0xD0	; 208
 b36:	41 93       	st	Z+, r20
 b38:	b3 e0       	ldi	r27, 0x03	; 3
 b3a:	0f d0       	rcall	.+30     	; 0xb5a <__ultoa_invert+0x86>
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__ultoa_invert+0x5c>
 b3e:	f6 cf       	rjmp	.-20     	; 0xb2c <__ultoa_invert+0x58>
 b40:	46 2f       	mov	r20, r22
 b42:	4f 70       	andi	r20, 0x0F	; 15
 b44:	40 5d       	subi	r20, 0xD0	; 208
 b46:	4a 33       	cpi	r20, 0x3A	; 58
 b48:	18 f0       	brcs	.+6      	; 0xb50 <__ultoa_invert+0x7c>
 b4a:	49 5d       	subi	r20, 0xD9	; 217
 b4c:	31 fd       	sbrc	r19, 1
 b4e:	40 52       	subi	r20, 0x20	; 32
 b50:	41 93       	st	Z+, r20
 b52:	02 d0       	rcall	.+4      	; 0xb58 <__ultoa_invert+0x84>
 b54:	a9 f7       	brne	.-22     	; 0xb40 <__ultoa_invert+0x6c>
 b56:	ea cf       	rjmp	.-44     	; 0xb2c <__ultoa_invert+0x58>
 b58:	b4 e0       	ldi	r27, 0x04	; 4
 b5a:	a6 95       	lsr	r26
 b5c:	97 95       	ror	r25
 b5e:	87 95       	ror	r24
 b60:	77 95       	ror	r23
 b62:	67 95       	ror	r22
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0x86>
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	61 05       	cpc	r22, r1
 b6c:	71 05       	cpc	r23, r1
 b6e:	08 95       	ret
 b70:	9b 01       	movw	r18, r22
 b72:	ac 01       	movw	r20, r24
 b74:	0a 2e       	mov	r0, r26
 b76:	06 94       	lsr	r0
 b78:	57 95       	ror	r21
 b7a:	47 95       	ror	r20
 b7c:	37 95       	ror	r19
 b7e:	27 95       	ror	r18
 b80:	ba 95       	dec	r27
 b82:	c9 f7       	brne	.-14     	; 0xb76 <__ultoa_invert+0xa2>
 b84:	62 0f       	add	r22, r18
 b86:	73 1f       	adc	r23, r19
 b88:	84 1f       	adc	r24, r20
 b8a:	95 1f       	adc	r25, r21
 b8c:	a0 1d       	adc	r26, r0
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
