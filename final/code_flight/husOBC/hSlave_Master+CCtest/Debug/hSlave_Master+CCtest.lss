
hSlave_Master+CCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  008001bc  008001bc  00000d3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e7b  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c8b  00000000  00000000  00003e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cc0  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000055c  00000000  00000000  00005758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000703  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000172e  00000000  00000000  000063b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00007ae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  
  return bit;
}

uint8_t cc1020_receive_packet(uint8_t *data)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  uint8_t i, bit, size = 0, flag = 0;
  uint8_t ax_counter = 0;
  
  uint16_t crc_in_packet, crc;
  
  while(byte != AX_FLAG)
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  {
    bit = cc1020_receive_bit();
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    byte = byte << 1;
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    if(bit == 0)
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      byte &= ~(0x01);
    else
      byte |= 0x01;
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  uint8_t i, bit, size = 0, flag = 0;
  uint8_t ax_counter = 0;
  
  uint16_t crc_in_packet, crc;
  
  while(byte != AX_FLAG)
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
              return 0;
          }
        }
      }
      else
        ax_counter = 0;
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
          if(bit)
          {
            byte = byte << 1;
            byte |= 0x01;
            
            flag = 1;
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      byte |= 0x01;
  }
  
  do
  {
    for(i = 0; i < 8; i++)
  44:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_17>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      if(bit)
      {
        ax_counter++;
        if(ax_counter == 5)
        {
          ax_counter = 0;
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      byte |= 0x01;
  }
  
  do
  {
    for(i = 0; i < 8; i++)
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    {
      bit = cc1020_receive_bit();
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      byte = byte << 1;
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      if(bit == 0)
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
        byte &= ~(0x01);
      else
        byte |= 0x01;
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      
      if(bit)
      {
        ax_counter++;
        if(ax_counter == 5)
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
        {
          ax_counter = 0;
          bit = cc1020_receive_bit();
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
          if(bit)
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
          {
            byte = byte << 1;
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
            byte |= 0x01;
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
            
            flag = 1;
            
            if(i == 5)
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
              i++;
            else
              return 0;
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  do
  {
    for(i = 0; i < 8; i++)
    {
      bit = cc1020_receive_bit();
      byte = byte << 1;
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
              return 0;
          }
        }
      }
      else
        ax_counter = 0;
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
      if(bit)
      {
        ax_counter++;
        if(ax_counter == 5)
        {
          ax_counter = 0;
  94:	de bf       	out	0x3e, r29	; 62
      byte |= 0x01;
  }
  
  do
  {
    for(i = 0; i < 8; i++)
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
        }
      }
      else
        ax_counter = 0;
    }
    data[size++] = byte;
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 3b       	cpi	r26, 0xBC	; 188
    
  }while(!flag);
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
        }
      }
      else
        ax_counter = 0;
    }
    data[size++] = byte;
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ac eb       	ldi	r26, 0xBC	; 188
    
  }while(!flag);
  
  if(size < 4)
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
    return 0;
  
  memcpy(&crc_in_packet, data + size - 3, sizeof(uint16_t));
  bc:	a1 3c       	cpi	r26, 0xC1	; 193
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  c6:	0c 94 f5 05 	jmp	0xbea	; 0xbea <_exit>

000000ca <__bad_interrupt>:
  crc = calculate_crc_16(data, size - 3);
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  ce:	98 e0       	ldi	r25, 0x08	; 8
  d0:	26 2f       	mov	r18, r22
  if (crc_in_packet == crc)
  d2:	21 70       	andi	r18, 0x01	; 1
  d4:	76 95       	lsr	r23
  d6:	67 95       	ror	r22
  d8:	38 2f       	mov	r19, r24
    data[size++] = byte;
    
  }while(!flag);
  
  if(size < 4)
    return 0;
  da:	31 70       	andi	r19, 0x01	; 1
  dc:	32 17       	cp	r19, r18
        }
      }
      else
        ax_counter = 0;
    }
    data[size++] = byte;
  de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
    return size;
  
  //send_UART(data, size);
  //send_UART("CRC fail\r", 9);
  //return 0;
}
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	62 27       	eor	r22, r18
  e4:	24 e8       	ldi	r18, 0x84	; 132
  e6:	72 27       	eor	r23, r18
  e8:	86 95       	lsr	r24
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
  ee:	cb 01       	movw	r24, r22
  f0:	08 95       	ret

000000f2 <calculate_crc_16>:
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  }
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  f8:	df 93       	push	r29
  fa:	06 2f       	mov	r16, r22
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
  fc:	66 23       	and	r22, r22
  fe:	69 f0       	breq	.+26     	; 0x11a <calculate_crc_16+0x28>
 100:	c8 2f       	mov	r28, r24
 102:	d9 2f       	mov	r29, r25
 104:	10 e0       	ldi	r17, 0x00	; 0
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	9f ef       	ldi	r25, 0xFF	; 255
  uint8_t i;
  
  for(i = 0; i < size; i++)
    crc = update_crc_16(data[i], crc);
 10a:	bc 01       	movw	r22, r24
 10c:	89 91       	ld	r24, Y+
 10e:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
  uint8_t i;
  
  for(i = 0; i < size; i++)
 112:	1f 5f       	subi	r17, 0xFF	; 255
 114:	10 13       	cpse	r17, r16
 116:	f9 cf       	rjmp	.-14     	; 0x10a <calculate_crc_16+0x18>
 118:	02 c0       	rjmp	.+4      	; 0x11e <calculate_crc_16+0x2c>
  return crc;
}

uint16_t calculate_crc_16(uint8_t *data, uint8_t size)
{
  uint16_t crc = 0xFFFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	9f ef       	ldi	r25, 0xFF	; 255
  
  for(i = 0; i < size; i++)
    crc = update_crc_16(data[i], crc);
    
  return ~crc;
}
 11e:	80 95       	com	r24
 120:	90 95       	com	r25
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <make_ax25_frame_from_data>:
 */ 

#include "ax25.h"

void make_ax25_frame_from_data(uint8_t *frame, uint8_t *data)
{
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	2a 97       	sbiw	r28, 0x0a	; 10
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	8c 01       	movw	r16, r24
  uint8_t i, buf[10], size = 0;
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
 14a:	2e e7       	ldi	r18, 0x7E	; 126
 14c:	fc 01       	movw	r30, r24
 14e:	21 93       	st	Z+, r18
 150:	cf 01       	movw	r24, r30
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
 152:	26 e0       	ldi	r18, 0x06	; 6
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	ae 01       	movw	r20, r28
 15a:	4f 5f       	subi	r20, 0xFF	; 255
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	da 01       	movw	r26, r20
 160:	01 90       	ld	r0, Z+
 162:	0d 92       	st	X+, r0
 164:	2a 95       	dec	r18
 166:	e1 f7       	brne	.-8      	; 0x160 <make_ax25_frame_from_data+0x34>
 168:	e4 2e       	mov	r14, r20
 16a:	f5 2e       	mov	r15, r21
 16c:	fc 01       	movw	r30, r24
 16e:	9e 01       	movw	r18, r28
 170:	29 5f       	subi	r18, 0xF9	; 249
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	da 01       	movw	r26, r20
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 176:	4d 91       	ld	r20, X+
 178:	44 0f       	add	r20, r20
 17a:	41 93       	st	Z+, r20
  uint16_t crc;
  
  frame[size++] = AX_FLAG;
  
  memcpy(buf, "CQ    ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 17c:	a2 17       	cp	r26, r18
 17e:	b3 07       	cpc	r27, r19
 180:	d1 f7       	brne	.-12     	; 0x176 <make_ax25_frame_from_data+0x4a>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
 182:	40 e6       	ldi	r20, 0x60	; 96
 184:	f8 01       	movw	r30, r16
 186:	47 83       	std	Z+7, r20	; 0x07
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
 188:	46 e0       	ldi	r20, 0x06	; 6
 18a:	e7 e0       	ldi	r30, 0x07	; 7
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	de 01       	movw	r26, r28
 190:	11 96       	adiw	r26, 0x01	; 1
 192:	01 90       	ld	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	4a 95       	dec	r20
 198:	e1 f7       	brne	.-8      	; 0x192 <make_ax25_frame_from_data+0x66>
 19a:	f8 01       	movw	r30, r16
 19c:	38 96       	adiw	r30, 0x08	; 8
 19e:	ae 2d       	mov	r26, r14
 1a0:	bf 2d       	mov	r27, r15
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 1a2:	4d 91       	ld	r20, X+
 1a4:	44 0f       	add	r20, r20
 1a6:	41 93       	st	Z+, r20
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100000;
  
  memcpy(buf, "VU2DMQ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 1a8:	a2 17       	cp	r26, r18
 1aa:	b3 07       	cpc	r27, r19
 1ac:	d1 f7       	brne	.-12     	; 0x1a2 <make_ax25_frame_from_data+0x76>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
 1ae:	48 e6       	ldi	r20, 0x68	; 104
 1b0:	f8 01       	movw	r30, r16
 1b2:	46 87       	std	Z+14, r20	; 0x0e
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
 1b4:	46 e0       	ldi	r20, 0x06	; 6
 1b6:	ee e0       	ldi	r30, 0x0E	; 14
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	4a 95       	dec	r20
 1c4:	e1 f7       	brne	.-8      	; 0x1be <make_ax25_frame_from_data+0x92>
 1c6:	f8 01       	movw	r30, r16
 1c8:	3f 96       	adiw	r30, 0x0f	; 15
 1ca:	ae 2d       	mov	r26, r14
 1cc:	bf 2d       	mov	r27, r15
  for(i = 0; i < AX_ADDR_SIZE; i++)
    frame[i + size] = buf[i] << 1;
 1ce:	4d 91       	ld	r20, X+
 1d0:	44 0f       	add	r20, r20
 1d2:	41 93       	st	Z+, r20
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01101000;
  
  memcpy(buf, "RELAY ", AX_ADDR_SIZE);
  for(i = 0; i < AX_ADDR_SIZE; i++)
 1d4:	a2 17       	cp	r26, r18
 1d6:	b3 07       	cpc	r27, r19
 1d8:	d1 f7       	brne	.-12     	; 0x1ce <make_ax25_frame_from_data+0xa2>
    frame[i + size] = buf[i] << 1;
  size += AX_ADDR_SIZE;
  frame[size++] = 0b01100001;
 1da:	21 e6       	ldi	r18, 0x61	; 97
 1dc:	f8 01       	movw	r30, r16
 1de:	25 8b       	std	Z+21, r18	; 0x15
  
  frame[size++] = AX_CONTROL;
 1e0:	23 e0       	ldi	r18, 0x03	; 3
 1e2:	26 8b       	std	Z+22, r18	; 0x16
  frame[size++] = AX_PID;
 1e4:	20 ef       	ldi	r18, 0xF0	; 240
 1e6:	27 8b       	std	Z+23, r18	; 0x17
  
  memcpy(frame + size, data, HM_SIZE);
 1e8:	d8 01       	movw	r26, r16
 1ea:	58 96       	adiw	r26, 0x18	; 24
 1ec:	27 e0       	ldi	r18, 0x07	; 7
 1ee:	fb 01       	movw	r30, r22
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	2a 95       	dec	r18
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <make_ax25_frame_from_data+0xc4>
  size += HM_SIZE;
  
  crc = calculate_crc_16(frame + 1, FRAME_SIZE - 4);
 1f8:	6e e1       	ldi	r22, 0x1E	; 30
 1fa:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
  
  memcpy(frame + size, &crc, 2);
 1fe:	f8 01       	movw	r30, r16
 200:	90 a3       	std	Z+32, r25	; 0x20
 202:	87 8f       	std	Z+31, r24	; 0x1f
  size += 2;
  
  frame[size] = AX_FLAG;
 204:	8e e7       	ldi	r24, 0x7E	; 126
 206:	81 a3       	std	Z+33, r24	; 0x21
  
}
 208:	2a 96       	adiw	r28, 0x0a	; 10
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <cc1020_init_dio>:
uint8_t x;
char arr[100];

void cc1020_init_dio(void)
{
  cbi(DDR_TRX, DCLK);
 222:	14 98       	cbi	0x02, 4	; 2
  sbi(DDR_TRX, DIO);
 224:	15 9a       	sbi	0x02, 5	; 2
  sbi(PORT_TRX, DIO);
 226:	1d 9a       	sbi	0x03, 5	; 3
 228:	08 95       	ret

0000022a <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	c8 57       	subi	r28, 0x78	; 120
 234:	d1 40       	sbci	r29, 0x01	; 1
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
  
	DDRA = 0x0F;
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 244:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	89 e6       	ldi	r24, 0x69	; 105
 24a:	98 e1       	ldi	r25, 0x18	; 24
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x22>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x2c>
 256:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 258:	1b ba       	out	0x1b, r1	; 27
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	89 e6       	ldi	r24, 0x69	; 105
 25e:	98 e1       	ldi	r25, 0x18	; 24
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x36>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x40>
 26a:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x0F;
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	8b bb       	out	0x1b, r24	; 27
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	89 e6       	ldi	r24, 0x69	; 105
 274:	98 e1       	ldi	r25, 0x18	; 24
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x4c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x56>
 280:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 282:	1b ba       	out	0x1b, r1	; 27
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	89 e6       	ldi	r24, 0x69	; 105
 288:	98 e1       	ldi	r25, 0x18	; 24
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x60>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x6a>
 294:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 296:	0e 94 04 03 	call	0x608	; 0x608 <init_UART0>
	
	transmit_UART0('\r');
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('\r');
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('H');
 2a6:	88 e4       	ldi	r24, 0x48	; 72
 2a8:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('e');
 2ac:	85 e6       	ldi	r24, 0x65	; 101
 2ae:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('l');
 2b2:	8c e6       	ldi	r24, 0x6C	; 108
 2b4:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('l');
 2b8:	8c e6       	ldi	r24, 0x6C	; 108
 2ba:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('o');
 2be:	8f e6       	ldi	r24, 0x6F	; 111
 2c0:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	e3 e9       	ldi	r30, 0x93	; 147
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	de 01       	movw	r26, r28
 2cc:	11 96       	adiw	r26, 0x01	; 1
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0xa4>
	transmit_string_UART0(array);
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	0e 94 19 03 	call	0x632	; 0x632 <transmit_string_UART0>

	sprintf(array,"\tThis is HUSSAIN's OBC-Slave code...");
 2de:	85 e2       	ldi	r24, 0x25	; 37
 2e0:	e5 e1       	ldi	r30, 0x15	; 21
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	de 01       	movw	r26, r28
 2e6:	11 96       	adiw	r26, 0x01	; 1
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	8a 95       	dec	r24
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0xbe>
	sprintf(array1,"\rData received from Master :\t");
 2f0:	8e e1       	ldi	r24, 0x1E	; 30
 2f2:	ea e3       	ldi	r30, 0x3A	; 58
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	de 01       	movw	r26, r28
 2f8:	99 96       	adiw	r26, 0x29	; 41
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0xd0>
	/// Current state of satellite
	uint8_t frame[256];
	uint8_t transmission = 0, command;
	uint16_t crc, recv_crc;
	///Initialise SPI as slave
	init_SPI_slave();
 302:	0e 94 98 02 	call	0x530	; 0x530 <init_SPI_slave>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	89 e6       	ldi	r24, 0x69	; 105
 30a:	98 e1       	ldi	r25, 0x18	; 24
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0xe2>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0xec>
 316:	00 00       	nop
	_delay_ms(1000);
   
	cc1020_init_dio();
 318:	0e 94 11 01 	call	0x222	; 0x222 <cc1020_init_dio>
	
	///Enable Global Interrupts
	sei();
 31c:	78 94       	sei
	sprintf(array1,"\rData received from Master :\t");
		
/************************************************************/
	/// Current state of satellite
	uint8_t frame[256];
	uint8_t transmission = 0, command;
 31e:	a1 2c       	mov	r10, r1
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 320:	0f 2e       	mov	r0, r31
 322:	fa e0       	ldi	r31, 0x0A	; 10
 324:	cf 2e       	mov	r12, r31
 326:	f0 2d       	mov	r31, r0
	_delay_ms(500);
	PORTA = 0x05;
 328:	0f 2e       	mov	r0, r31
 32a:	f5 e0       	ldi	r31, 0x05	; 5
 32c:	df 2e       	mov	r13, r31
 32e:	f0 2d       	mov	r31, r0
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
      if(crc == recv_crc)
      {
        command = message[0];
        if(command == BEGIN_TX_COMM)
        	transmission = IN;
 330:	99 24       	eor	r9, r9
 332:	93 94       	inc	r9
      start_spi = 0;
      t = 0;
      process = 0;
    }
    
	sprintf(array2,"\rCommand received from Master :\t%d", command);
 334:	0f 2e       	mov	r0, r31
 336:	f8 e5       	ldi	r31, 0x58	; 88
 338:	ef 2e       	mov	r14, r31
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	ff 2e       	mov	r15, r31
 33e:	f0 2d       	mov	r31, r0
 340:	8e 01       	movw	r16, r28
 342:	0f 5a       	subi	r16, 0xAF	; 175
 344:	1f 4f       	sbci	r17, 0xFF	; 255
	///Enable Global Interrupts
	sei();
  
/************************************************************/
	while(1){
	PORTA = 0x0A;
 346:	cb ba       	out	0x1b, r12	; 27
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	84 e3       	ldi	r24, 0x34	; 52
 34c:	9c e0       	ldi	r25, 0x0C	; 12
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0x124>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x12e>
 358:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 35a:	db ba       	out	0x1b, r13	; 27
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	84 e3       	ldi	r24, 0x34	; 52
 360:	9c e0       	ldi	r25, 0x0C	; 12
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x138>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x142>
 36c:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 36e:	8d e0       	ldi	r24, 0x0D	; 13
 370:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('\r');
 374:	8d e0       	ldi	r24, 0x0D	; 13
 376:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('H');
 37a:	88 e4       	ldi	r24, 0x48	; 72
 37c:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	transmit_UART0('i');
 380:	89 e6       	ldi	r24, 0x69	; 105
 382:	0e 94 15 03 	call	0x62a	; 0x62a <transmit_UART0>
	
	transmit_string_UART0(array1);
 386:	ce 01       	movw	r24, r28
 388:	89 96       	adiw	r24, 0x29	; 41
 38a:	0e 94 19 03 	call	0x632	; 0x632 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0x0A;
 38e:	cb ba       	out	0x1b, r12	; 27
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	84 e3       	ldi	r24, 0x34	; 52
 394:	9c e0       	ldi	r25, 0x0C	; 12
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x16c>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x176>
 3a0:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x05;
 3a2:	db ba       	out	0x1b, r13	; 27
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	84 e3       	ldi	r24, 0x34	; 52
 3a8:	9c e0       	ldi	r25, 0x0C	; 12
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x180>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x18a>
 3b4:	00 00       	nop
	_delay_ms(500);
	
	if(process)
 3b6:	80 91 bc 01 	lds	r24, 0x01BC
 3ba:	88 23       	and	r24, r24
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <main+0x196>
 3be:	43 c0       	rjmp	.+134    	; 0x446 <main+0x21c>
    {
      crc = calculate_crc_16((uint8_t *)message, t - (end_spi + sizeof(uint16_t)));
 3c0:	60 91 bd 01 	lds	r22, 0x01BD
 3c4:	80 91 bf 01 	lds	r24, 0x01BF
 3c8:	62 50       	subi	r22, 0x02	; 2
 3ca:	68 1b       	sub	r22, r24
 3cc:	80 ec       	ldi	r24, 0xC0	; 192
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 79 00 	call	0xf2	; 0xf2 <calculate_crc_16>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
 3d4:	e0 91 bd 01 	lds	r30, 0x01BD
 3d8:	20 91 bf 01 	lds	r18, 0x01BF
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	32 97       	sbiw	r30, 0x02	; 2
 3e0:	e2 1b       	sub	r30, r18
 3e2:	f1 09       	sbc	r31, r1
 3e4:	e0 54       	subi	r30, 0x40	; 64
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
      if(crc == recv_crc)
 3e8:	20 81       	ld	r18, Z
 3ea:	31 81       	ldd	r19, Z+1	; 0x01
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	11 f5       	brne	.+68     	; 0x436 <main+0x20c>
      {
        command = message[0];
 3f2:	b0 90 c0 01 	lds	r11, 0x01C0
        if(command == BEGIN_TX_COMM)
 3f6:	2a e5       	ldi	r18, 0x5A	; 90
 3f8:	b2 16       	cp	r11, r18
 3fa:	e1 f0       	breq	.+56     	; 0x434 <main+0x20a>
        	transmission = IN;
		else if(command == END_TX)
 3fc:	83 e3       	ldi	r24, 0x33	; 51
 3fe:	b8 12       	cpse	r11, r24
 400:	05 c0       	rjmp	.+10     	; 0x40c <main+0x1e2>
        {
			SPI_transfer(ACK);
 402:	82 e9       	ldi	r24, 0x92	; 146
 404:	0e 94 a0 02 	call	0x540	; 0x540 <SPI_transfer>
			transmission = 0;
 408:	a1 2c       	mov	r10, r1
 40a:	15 c0       	rjmp	.+42     	; 0x436 <main+0x20c>
        }
        else if(command == REAL_TIME)
 40c:	95 ed       	ldi	r25, 0xD5	; 213
 40e:	b9 12       	cpse	r11, r25
 410:	12 c0       	rjmp	.+36     	; 0x436 <main+0x20c>
        {	make_ax25_frame_from_data(frame, (uint8_t *)message + 2);
 412:	62 ec       	ldi	r22, 0xC2	; 194
 414:	71 e0       	ldi	r23, 0x01	; 1
 416:	ce 01       	movw	r24, r28
 418:	87 58       	subi	r24, 0x87	; 135
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	0e 94 96 00 	call	0x12c	; 0x12c <make_ax25_frame_from_data>
			transmit_string_UART0(array1);
 420:	ce 01       	movw	r24, r28
 422:	89 96       	adiw	r24, 0x29	; 41
 424:	0e 94 19 03 	call	0x632	; 0x632 <transmit_string_UART0>
			transmit_string_UART0(frame);	
 428:	ce 01       	movw	r24, r28
 42a:	87 58       	subi	r24, 0x87	; 135
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	0e 94 19 03 	call	0x632	; 0x632 <transmit_string_UART0>
 432:	01 c0       	rjmp	.+2      	; 0x436 <main+0x20c>
      memcpy((void *)&recv_crc, (void *)&(message[t - (end_spi + sizeof(uint16_t))]), sizeof(uint16_t));
      if(crc == recv_crc)
      {
        command = message[0];
        if(command == BEGIN_TX_COMM)
        	transmission = IN;
 434:	a9 2c       	mov	r10, r9
			transmit_string_UART0(array1);
			transmit_string_UART0(frame);	
		}		
      }
	  
      end_spi = 0;
 436:	10 92 bf 01 	sts	0x01BF, r1
      start_spi = 0;
 43a:	10 92 be 01 	sts	0x01BE, r1
      t = 0;
 43e:	10 92 bd 01 	sts	0x01BD, r1
      process = 0;
 442:	10 92 bc 01 	sts	0x01BC, r1
    }
    
	sprintf(array2,"\rCommand received from Master :\t%d", command);
 446:	1f 92       	push	r1
 448:	bf 92       	push	r11
 44a:	ff 92       	push	r15
 44c:	ef 92       	push	r14
 44e:	1f 93       	push	r17
 450:	0f 93       	push	r16
 452:	0e 94 25 03 	call	0x64a	; 0x64a <sprintf>
	transmit_string_UART0(array2);
 456:	c8 01       	movw	r24, r16
 458:	0e 94 19 03 	call	0x632	; 0x632 <transmit_string_UART0>
		
	if(transmission == IN)
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	a2 12       	cpse	r10, r18
 46c:	6c cf       	rjmp	.-296    	; 0x346 <main+0x11c>
    {/**********		Start Transmission		**********/
		cc1020_transmit_packet(frame, FRAME_SIZE);
 46e:	62 e2       	ldi	r22, 0x22	; 34
 470:	ce 01       	movw	r24, r28
 472:	87 58       	subi	r24, 0x87	; 135
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	0e 94 af 02 	call	0x55e	; 0x55e <cc1020_transmit_packet>
    	transmit_string_UART0("\rTransmission complete\r");
 47a:	8b e7       	ldi	r24, 0x7B	; 123
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 19 03 	call	0x632	; 0x632 <transmit_string_UART0>
 482:	61 cf       	rjmp	.-318    	; 0x346 <main+0x11c>

00000484 <__vector_17>:

/**
 * @brief Interrupt service routine for SPI
 */
ISR(SPI_STC_vect)
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	0b b6       	in	r0, 0x3b	; 59
 490:	0f 92       	push	r0
 492:	8f 93       	push	r24
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
  spi = SPDR;
 498:	8f b1       	in	r24, 0x0f	; 15
 49a:	80 93 c0 02 	sts	0x02C0, r24
  
  if((!process) && (start_spi >= N_END_SPI))
 49e:	80 91 bc 01 	lds	r24, 0x01BC
 4a2:	81 11       	cpse	r24, r1
 4a4:	2b c0       	rjmp	.+86     	; 0x4fc <__vector_17+0x78>
 4a6:	80 91 be 01 	lds	r24, 0x01BE
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	38 f1       	brcs	.+78     	; 0x4fc <__vector_17+0x78>
  {
    message[t] = spi;
 4ae:	e0 91 bd 01 	lds	r30, 0x01BD
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 91 c0 02 	lds	r24, 0x02C0
 4b8:	e0 54       	subi	r30, 0x40	; 64
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	80 83       	st	Z, r24
    
    if(message[t] == END_SPI)
 4be:	e0 91 bd 01 	lds	r30, 0x01BD
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	e0 54       	subi	r30, 0x40	; 64
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	80 81       	ld	r24, Z
 4ca:	8a 3a       	cpi	r24, 0xAA	; 170
 4cc:	31 f4       	brne	.+12     	; 0x4da <__vector_17+0x56>
      end_spi++;
 4ce:	80 91 bf 01 	lds	r24, 0x01BF
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 bf 01 	sts	0x01BF, r24
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__vector_17+0x60>
    else if(end_spi)
 4da:	80 91 bf 01 	lds	r24, 0x01BF
 4de:	81 11       	cpse	r24, r1
      end_spi = 0;
 4e0:	10 92 bf 01 	sts	0x01BF, r1
      
    if(end_spi == N_END_SPI)
 4e4:	80 91 bf 01 	lds	r24, 0x01BF
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <__vector_17+0x6e>
      process = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 bc 01 	sts	0x01BC, r24
    t++;
 4f2:	80 91 bd 01 	lds	r24, 0x01BD
 4f6:	8f 5f       	subi	r24, 0xFF	; 255
 4f8:	80 93 bd 01 	sts	0x01BD, r24
  }
  
  if(spi == START_SPI)
 4fc:	80 91 c0 02 	lds	r24, 0x02C0
 500:	87 3e       	cpi	r24, 0xE7	; 231
 502:	31 f4       	brne	.+12     	; 0x510 <__vector_17+0x8c>
    start_spi++;
 504:	80 91 be 01 	lds	r24, 0x01BE
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 be 01 	sts	0x01BE, r24
 50e:	06 c0       	rjmp	.+12     	; 0x51c <__vector_17+0x98>
  else if(start_spi < N_END_SPI)
 510:	80 91 be 01 	lds	r24, 0x01BE
 514:	82 30       	cpi	r24, 0x02	; 2
 516:	10 f4       	brcc	.+4      	; 0x51c <__vector_17+0x98>
    start_spi = 0;
 518:	10 92 be 01 	sts	0x01BE, r1
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	8f 91       	pop	r24
 522:	0f 90       	pop	r0
 524:	0b be       	out	0x3b, r0	; 59
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <init_SPI_slave>:
#include "common.h"

void init_SPI_slave(void)
{
  ///Set the Direction register for the SPI pins
  DDR_SPI &= 0xF0;
 530:	87 b3       	in	r24, 0x17	; 23
 532:	80 7f       	andi	r24, 0xF0	; 240
 534:	87 bb       	out	0x17, r24	; 23
  DDR_SPI = _BV(SPIDI);
 536:	88 e0       	ldi	r24, 0x08	; 8
 538:	87 bb       	out	0x17, r24	; 23
  
  ///Enable SPI, Interrupt, Slave 
  ///@todo Check frequency 
  SPCR = (1<<SPIE) |(1<<SPE);
 53a:	80 ec       	ldi	r24, 0xC0	; 192
 53c:	8d b9       	out	0x0d, r24	; 13
 53e:	08 95       	ret

00000540 <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
 540:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
 542:	77 9b       	sbis	0x0e, 7	; 14
 544:	fe cf       	rjmp	.-4      	; 0x542 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
 546:	8f b1       	in	r24, 0x0f	; 15
}
 548:	08 95       	ret

0000054a <cc1020_transmit_bit>:
#include "uart.h"
#include "transmit.h"

void cc1020_transmit_bit(uint8_t bit)
{
  while(PIN_TRX & (1 << DCLK));
 54a:	0c 99       	sbic	0x01, 4	; 1
 54c:	fe cf       	rjmp	.-4      	; 0x54a <cc1020_transmit_bit>
  if(bit == 0)
 54e:	81 11       	cpse	r24, r1
 550:	02 c0       	rjmp	.+4      	; 0x556 <cc1020_transmit_bit+0xc>
    cbi(PORT_TRX, DIO);
 552:	1d 98       	cbi	0x03, 5	; 3
 554:	01 c0       	rjmp	.+2      	; 0x558 <cc1020_transmit_bit+0xe>
  else
    sbi(PORT_TRX, DIO);
 556:	1d 9a       	sbi	0x03, 5	; 3
  while(!(PIN_TRX & (1 << DCLK)));
 558:	0c 9b       	sbis	0x01, 4	; 1
 55a:	fe cf       	rjmp	.-4      	; 0x558 <cc1020_transmit_bit+0xe>
}
 55c:	08 95       	ret

0000055e <cc1020_transmit_packet>:

//with bit stuffing
void cc1020_transmit_packet(uint8_t *data, uint8_t size)
{
 55e:	6f 92       	push	r6
 560:	7f 92       	push	r7
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	d8 2f       	mov	r29, r24
 57c:	c9 2f       	mov	r28, r25
 57e:	76 2e       	mov	r7, r22
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
  
  cc1020_transmit_bit(1);
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 a5 02 	call	0x54a	; 0x54a <cc1020_transmit_bit>
  
  for(i = 0; i < size; i++)
 586:	77 20       	and	r7, r7
 588:	79 f1       	breq	.+94     	; 0x5e8 <cc1020_transmit_packet+0x8a>
 58a:	ed 2e       	mov	r14, r29
 58c:	fc 2e       	mov	r15, r28
 58e:	c0 e0       	ldi	r28, 0x00	; 0
 590:	d0 e0       	ldi	r29, 0x00	; 0

//with bit stuffing
void cc1020_transmit_packet(uint8_t *data, uint8_t size)
{
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
 592:	a1 2c       	mov	r10, r1
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
 594:	68 94       	set
 596:	66 24       	eor	r6, r6
 598:	63 f8       	bld	r6, 3
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
      cc1020_transmit_bit(bit);
      
      if((i != 0) && (i != size - 1))
 59a:	07 2d       	mov	r16, r7
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	01 50       	subi	r16, 0x01	; 1
 5a0:	11 09       	sbc	r17, r1
      {
        if(bit)
          ax_counter++;
        else
          ax_counter = 0;
 5a2:	81 2c       	mov	r8, r1
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
 5a4:	f7 01       	movw	r30, r14
 5a6:	c1 90       	ld	r12, Z+
 5a8:	7f 01       	movw	r14, r30
 5aa:	d6 2c       	mov	r13, r6
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
      cc1020_transmit_bit(bit);
      
      if((i != 0) && (i != size - 1))
 5ac:	9c 2e       	mov	r9, r28
  for(i = 0; i < size; i++)
  {
    byte = data[i];
    for(j = 0; j < 8; j++)
    {
      bit = byte & 0x80;
 5ae:	fc 2d       	mov	r31, r12
 5b0:	f0 78       	andi	r31, 0x80	; 128
 5b2:	bf 2e       	mov	r11, r31
      cc1020_transmit_bit(bit);
 5b4:	8f 2f       	mov	r24, r31
 5b6:	0e 94 a5 02 	call	0x54a	; 0x54a <cc1020_transmit_bit>
      
      if((i != 0) && (i != size - 1))
 5ba:	99 20       	and	r9, r9
 5bc:	79 f0       	breq	.+30     	; 0x5dc <cc1020_transmit_packet+0x7e>
 5be:	c0 17       	cp	r28, r16
 5c0:	d1 07       	cpc	r29, r17
 5c2:	61 f0       	breq	.+24     	; 0x5dc <cc1020_transmit_packet+0x7e>
      {
        if(bit)
 5c4:	bb 20       	and	r11, r11
 5c6:	49 f0       	breq	.+18     	; 0x5da <cc1020_transmit_packet+0x7c>
          ax_counter++;
 5c8:	a3 94       	inc	r10
        else
          ax_counter = 0;
        if(ax_counter == 5)
 5ca:	85 e0       	ldi	r24, 0x05	; 5
 5cc:	a8 12       	cpse	r10, r24
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <cc1020_transmit_packet+0x7e>
        {
          ax_counter = 0;
          cc1020_transmit_bit(0);
 5d0:	88 2d       	mov	r24, r8
 5d2:	0e 94 a5 02 	call	0x54a	; 0x54a <cc1020_transmit_bit>
          ax_counter++;
        else
          ax_counter = 0;
        if(ax_counter == 5)
        {
          ax_counter = 0;
 5d6:	a8 2c       	mov	r10, r8
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <cc1020_transmit_packet+0x7e>
      if((i != 0) && (i != size - 1))
      {
        if(bit)
          ax_counter++;
        else
          ax_counter = 0;
 5da:	a8 2c       	mov	r10, r8
          ax_counter = 0;
          cc1020_transmit_bit(0);
        }
      }  
      
      byte = byte << 1;
 5dc:	cc 0c       	add	r12, r12
 5de:	da 94       	dec	r13
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
  {
    byte = data[i];
    for(j = 0; j < 8; j++)
 5e0:	31 f7       	brne	.-52     	; 0x5ae <cc1020_transmit_packet+0x50>
 5e2:	21 96       	adiw	r28, 0x01	; 1
  uint8_t i, j, byte, bit;
  uint8_t ax_counter = 0;
  
  cc1020_transmit_bit(1);
  
  for(i = 0; i < size; i++)
 5e4:	c7 15       	cp	r28, r7
 5e6:	f0 f2       	brcs	.-68     	; 0x5a4 <cc1020_transmit_packet+0x46>
      
      byte = byte << 1;
    }
  }
  
  sbi(PORT_TRX, DIO);
 5e8:	1d 9a       	sbi	0x03, 5	; 3
}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	ff 90       	pop	r15
 5f4:	ef 90       	pop	r14
 5f6:	df 90       	pop	r13
 5f8:	cf 90       	pop	r12
 5fa:	bf 90       	pop	r11
 5fc:	af 90       	pop	r10
 5fe:	9f 90       	pop	r9
 600:	8f 90       	pop	r8
 602:	7f 90       	pop	r7
 604:	6f 90       	pop	r6
 606:	08 95       	ret

00000608 <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 608:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 60a:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 60c:	e5 e9       	ldi	r30, 0x95	; 149
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 612:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 614:	8a b1       	in	r24, 0x0a	; 10
 616:	88 61       	ori	r24, 0x18	; 24
 618:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 61a:	80 81       	ld	r24, Z
 61c:	8e 60       	ori	r24, 0x0E	; 14
 61e:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 620:	87 e6       	ldi	r24, 0x67	; 103
 622:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 624:	10 92 90 00 	sts	0x0090, r1
 628:	08 95       	ret

0000062a <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 62a:	5d 9b       	sbis	0x0b, 5	; 11
 62c:	fe cf       	rjmp	.-4      	; 0x62a <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 62e:	8c b9       	out	0x0c, r24	; 12
 630:	08 95       	ret

00000632 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 632:	fc 01       	movw	r30, r24
 634:	20 81       	ld	r18, Z
 636:	22 23       	and	r18, r18
 638:	39 f0       	breq	.+14     	; 0x648 <transmit_string_UART0+0x16>
 63a:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 63c:	5d 9b       	sbis	0x0b, 5	; 11
 63e:	fe cf       	rjmp	.-4      	; 0x63c <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 640:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 642:	21 91       	ld	r18, Z+
 644:	21 11       	cpse	r18, r1
 646:	fa cf       	rjmp	.-12     	; 0x63c <transmit_string_UART0+0xa>
 648:	08 95       	ret

0000064a <sprintf>:
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	2e 97       	sbiw	r28, 0x0e	; 14
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	0d 89       	ldd	r16, Y+21	; 0x15
 664:	1e 89       	ldd	r17, Y+22	; 0x16
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	8c 83       	std	Y+4, r24	; 0x04
 66a:	1a 83       	std	Y+2, r17	; 0x02
 66c:	09 83       	std	Y+1, r16	; 0x01
 66e:	8f ef       	ldi	r24, 0xFF	; 255
 670:	9f e7       	ldi	r25, 0x7F	; 127
 672:	9e 83       	std	Y+6, r25	; 0x06
 674:	8d 83       	std	Y+5, r24	; 0x05
 676:	ae 01       	movw	r20, r28
 678:	47 5e       	subi	r20, 0xE7	; 231
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	6f 89       	ldd	r22, Y+23	; 0x17
 67e:	78 8d       	ldd	r23, Y+24	; 0x18
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	0e 94 54 03 	call	0x6a8	; 0x6a8 <vfprintf>
 688:	ef 81       	ldd	r30, Y+7	; 0x07
 68a:	f8 85       	ldd	r31, Y+8	; 0x08
 68c:	e0 0f       	add	r30, r16
 68e:	f1 1f       	adc	r31, r17
 690:	10 82       	st	Z, r1
 692:	2e 96       	adiw	r28, 0x0e	; 14
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	1f 91       	pop	r17
 6a4:	0f 91       	pop	r16
 6a6:	08 95       	ret

000006a8 <vfprintf>:
 6a8:	2f 92       	push	r2
 6aa:	3f 92       	push	r3
 6ac:	4f 92       	push	r4
 6ae:	5f 92       	push	r5
 6b0:	6f 92       	push	r6
 6b2:	7f 92       	push	r7
 6b4:	8f 92       	push	r8
 6b6:	9f 92       	push	r9
 6b8:	af 92       	push	r10
 6ba:	bf 92       	push	r11
 6bc:	cf 92       	push	r12
 6be:	df 92       	push	r13
 6c0:	ef 92       	push	r14
 6c2:	ff 92       	push	r15
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	2c 97       	sbiw	r28, 0x0c	; 12
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	7c 01       	movw	r14, r24
 6de:	6b 01       	movw	r12, r22
 6e0:	8a 01       	movw	r16, r20
 6e2:	fc 01       	movw	r30, r24
 6e4:	17 82       	std	Z+7, r1	; 0x07
 6e6:	16 82       	std	Z+6, r1	; 0x06
 6e8:	83 81       	ldd	r24, Z+3	; 0x03
 6ea:	81 ff       	sbrs	r24, 1
 6ec:	bd c1       	rjmp	.+890    	; 0xa68 <vfprintf+0x3c0>
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	4c 01       	movw	r8, r24
 6f4:	f7 01       	movw	r30, r14
 6f6:	93 81       	ldd	r25, Z+3	; 0x03
 6f8:	f6 01       	movw	r30, r12
 6fa:	93 fd       	sbrc	r25, 3
 6fc:	85 91       	lpm	r24, Z+
 6fe:	93 ff       	sbrs	r25, 3
 700:	81 91       	ld	r24, Z+
 702:	6f 01       	movw	r12, r30
 704:	88 23       	and	r24, r24
 706:	09 f4       	brne	.+2      	; 0x70a <vfprintf+0x62>
 708:	ab c1       	rjmp	.+854    	; 0xa60 <vfprintf+0x3b8>
 70a:	85 32       	cpi	r24, 0x25	; 37
 70c:	39 f4       	brne	.+14     	; 0x71c <vfprintf+0x74>
 70e:	93 fd       	sbrc	r25, 3
 710:	85 91       	lpm	r24, Z+
 712:	93 ff       	sbrs	r25, 3
 714:	81 91       	ld	r24, Z+
 716:	6f 01       	movw	r12, r30
 718:	85 32       	cpi	r24, 0x25	; 37
 71a:	29 f4       	brne	.+10     	; 0x726 <vfprintf+0x7e>
 71c:	b7 01       	movw	r22, r14
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 724:	e7 cf       	rjmp	.-50     	; 0x6f4 <vfprintf+0x4c>
 726:	51 2c       	mov	r5, r1
 728:	31 2c       	mov	r3, r1
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	20 32       	cpi	r18, 0x20	; 32
 72e:	a0 f4       	brcc	.+40     	; 0x758 <vfprintf+0xb0>
 730:	8b 32       	cpi	r24, 0x2B	; 43
 732:	69 f0       	breq	.+26     	; 0x74e <vfprintf+0xa6>
 734:	30 f4       	brcc	.+12     	; 0x742 <vfprintf+0x9a>
 736:	80 32       	cpi	r24, 0x20	; 32
 738:	59 f0       	breq	.+22     	; 0x750 <vfprintf+0xa8>
 73a:	83 32       	cpi	r24, 0x23	; 35
 73c:	69 f4       	brne	.+26     	; 0x758 <vfprintf+0xb0>
 73e:	20 61       	ori	r18, 0x10	; 16
 740:	2c c0       	rjmp	.+88     	; 0x79a <vfprintf+0xf2>
 742:	8d 32       	cpi	r24, 0x2D	; 45
 744:	39 f0       	breq	.+14     	; 0x754 <vfprintf+0xac>
 746:	80 33       	cpi	r24, 0x30	; 48
 748:	39 f4       	brne	.+14     	; 0x758 <vfprintf+0xb0>
 74a:	21 60       	ori	r18, 0x01	; 1
 74c:	26 c0       	rjmp	.+76     	; 0x79a <vfprintf+0xf2>
 74e:	22 60       	ori	r18, 0x02	; 2
 750:	24 60       	ori	r18, 0x04	; 4
 752:	23 c0       	rjmp	.+70     	; 0x79a <vfprintf+0xf2>
 754:	28 60       	ori	r18, 0x08	; 8
 756:	21 c0       	rjmp	.+66     	; 0x79a <vfprintf+0xf2>
 758:	27 fd       	sbrc	r18, 7
 75a:	27 c0       	rjmp	.+78     	; 0x7aa <vfprintf+0x102>
 75c:	30 ed       	ldi	r19, 0xD0	; 208
 75e:	38 0f       	add	r19, r24
 760:	3a 30       	cpi	r19, 0x0A	; 10
 762:	78 f4       	brcc	.+30     	; 0x782 <vfprintf+0xda>
 764:	26 ff       	sbrs	r18, 6
 766:	06 c0       	rjmp	.+12     	; 0x774 <vfprintf+0xcc>
 768:	fa e0       	ldi	r31, 0x0A	; 10
 76a:	5f 9e       	mul	r5, r31
 76c:	30 0d       	add	r19, r0
 76e:	11 24       	eor	r1, r1
 770:	53 2e       	mov	r5, r19
 772:	13 c0       	rjmp	.+38     	; 0x79a <vfprintf+0xf2>
 774:	8a e0       	ldi	r24, 0x0A	; 10
 776:	38 9e       	mul	r3, r24
 778:	30 0d       	add	r19, r0
 77a:	11 24       	eor	r1, r1
 77c:	33 2e       	mov	r3, r19
 77e:	20 62       	ori	r18, 0x20	; 32
 780:	0c c0       	rjmp	.+24     	; 0x79a <vfprintf+0xf2>
 782:	8e 32       	cpi	r24, 0x2E	; 46
 784:	21 f4       	brne	.+8      	; 0x78e <vfprintf+0xe6>
 786:	26 fd       	sbrc	r18, 6
 788:	6b c1       	rjmp	.+726    	; 0xa60 <vfprintf+0x3b8>
 78a:	20 64       	ori	r18, 0x40	; 64
 78c:	06 c0       	rjmp	.+12     	; 0x79a <vfprintf+0xf2>
 78e:	8c 36       	cpi	r24, 0x6C	; 108
 790:	11 f4       	brne	.+4      	; 0x796 <vfprintf+0xee>
 792:	20 68       	ori	r18, 0x80	; 128
 794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0xf2>
 796:	88 36       	cpi	r24, 0x68	; 104
 798:	41 f4       	brne	.+16     	; 0x7aa <vfprintf+0x102>
 79a:	f6 01       	movw	r30, r12
 79c:	93 fd       	sbrc	r25, 3
 79e:	85 91       	lpm	r24, Z+
 7a0:	93 ff       	sbrs	r25, 3
 7a2:	81 91       	ld	r24, Z+
 7a4:	6f 01       	movw	r12, r30
 7a6:	81 11       	cpse	r24, r1
 7a8:	c1 cf       	rjmp	.-126    	; 0x72c <vfprintf+0x84>
 7aa:	98 2f       	mov	r25, r24
 7ac:	9f 7d       	andi	r25, 0xDF	; 223
 7ae:	95 54       	subi	r25, 0x45	; 69
 7b0:	93 30       	cpi	r25, 0x03	; 3
 7b2:	28 f4       	brcc	.+10     	; 0x7be <vfprintf+0x116>
 7b4:	0c 5f       	subi	r16, 0xFC	; 252
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
 7b8:	ff e3       	ldi	r31, 0x3F	; 63
 7ba:	f9 83       	std	Y+1, r31	; 0x01
 7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <vfprintf+0x130>
 7be:	83 36       	cpi	r24, 0x63	; 99
 7c0:	31 f0       	breq	.+12     	; 0x7ce <vfprintf+0x126>
 7c2:	83 37       	cpi	r24, 0x73	; 115
 7c4:	71 f0       	breq	.+28     	; 0x7e2 <vfprintf+0x13a>
 7c6:	83 35       	cpi	r24, 0x53	; 83
 7c8:	09 f0       	breq	.+2      	; 0x7cc <vfprintf+0x124>
 7ca:	5b c0       	rjmp	.+182    	; 0x882 <vfprintf+0x1da>
 7cc:	22 c0       	rjmp	.+68     	; 0x812 <vfprintf+0x16a>
 7ce:	f8 01       	movw	r30, r16
 7d0:	80 81       	ld	r24, Z
 7d2:	89 83       	std	Y+1, r24	; 0x01
 7d4:	0e 5f       	subi	r16, 0xFE	; 254
 7d6:	1f 4f       	sbci	r17, 0xFF	; 255
 7d8:	44 24       	eor	r4, r4
 7da:	43 94       	inc	r4
 7dc:	51 2c       	mov	r5, r1
 7de:	54 01       	movw	r10, r8
 7e0:	15 c0       	rjmp	.+42     	; 0x80c <vfprintf+0x164>
 7e2:	38 01       	movw	r6, r16
 7e4:	f2 e0       	ldi	r31, 0x02	; 2
 7e6:	6f 0e       	add	r6, r31
 7e8:	71 1c       	adc	r7, r1
 7ea:	f8 01       	movw	r30, r16
 7ec:	a0 80       	ld	r10, Z
 7ee:	b1 80       	ldd	r11, Z+1	; 0x01
 7f0:	26 ff       	sbrs	r18, 6
 7f2:	03 c0       	rjmp	.+6      	; 0x7fa <vfprintf+0x152>
 7f4:	65 2d       	mov	r22, r5
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x156>
 7fa:	6f ef       	ldi	r22, 0xFF	; 255
 7fc:	7f ef       	ldi	r23, 0xFF	; 255
 7fe:	c5 01       	movw	r24, r10
 800:	2c 87       	std	Y+12, r18	; 0x0c
 802:	0e 94 5a 05 	call	0xab4	; 0xab4 <strnlen>
 806:	2c 01       	movw	r4, r24
 808:	83 01       	movw	r16, r6
 80a:	2c 85       	ldd	r18, Y+12	; 0x0c
 80c:	2f 77       	andi	r18, 0x7F	; 127
 80e:	22 2e       	mov	r2, r18
 810:	17 c0       	rjmp	.+46     	; 0x840 <vfprintf+0x198>
 812:	38 01       	movw	r6, r16
 814:	f2 e0       	ldi	r31, 0x02	; 2
 816:	6f 0e       	add	r6, r31
 818:	71 1c       	adc	r7, r1
 81a:	f8 01       	movw	r30, r16
 81c:	a0 80       	ld	r10, Z
 81e:	b1 80       	ldd	r11, Z+1	; 0x01
 820:	26 ff       	sbrs	r18, 6
 822:	03 c0       	rjmp	.+6      	; 0x82a <vfprintf+0x182>
 824:	65 2d       	mov	r22, r5
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0x186>
 82a:	6f ef       	ldi	r22, 0xFF	; 255
 82c:	7f ef       	ldi	r23, 0xFF	; 255
 82e:	c5 01       	movw	r24, r10
 830:	2c 87       	std	Y+12, r18	; 0x0c
 832:	0e 94 4f 05 	call	0xa9e	; 0xa9e <strnlen_P>
 836:	2c 01       	movw	r4, r24
 838:	2c 85       	ldd	r18, Y+12	; 0x0c
 83a:	20 68       	ori	r18, 0x80	; 128
 83c:	22 2e       	mov	r2, r18
 83e:	83 01       	movw	r16, r6
 840:	23 fc       	sbrc	r2, 3
 842:	1b c0       	rjmp	.+54     	; 0x87a <vfprintf+0x1d2>
 844:	83 2d       	mov	r24, r3
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	48 16       	cp	r4, r24
 84a:	59 06       	cpc	r5, r25
 84c:	b0 f4       	brcc	.+44     	; 0x87a <vfprintf+0x1d2>
 84e:	b7 01       	movw	r22, r14
 850:	80 e2       	ldi	r24, 0x20	; 32
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 858:	3a 94       	dec	r3
 85a:	f4 cf       	rjmp	.-24     	; 0x844 <vfprintf+0x19c>
 85c:	f5 01       	movw	r30, r10
 85e:	27 fc       	sbrc	r2, 7
 860:	85 91       	lpm	r24, Z+
 862:	27 fe       	sbrs	r2, 7
 864:	81 91       	ld	r24, Z+
 866:	5f 01       	movw	r10, r30
 868:	b7 01       	movw	r22, r14
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 870:	31 10       	cpse	r3, r1
 872:	3a 94       	dec	r3
 874:	f1 e0       	ldi	r31, 0x01	; 1
 876:	4f 1a       	sub	r4, r31
 878:	51 08       	sbc	r5, r1
 87a:	41 14       	cp	r4, r1
 87c:	51 04       	cpc	r5, r1
 87e:	71 f7       	brne	.-36     	; 0x85c <vfprintf+0x1b4>
 880:	e5 c0       	rjmp	.+458    	; 0xa4c <vfprintf+0x3a4>
 882:	84 36       	cpi	r24, 0x64	; 100
 884:	11 f0       	breq	.+4      	; 0x88a <vfprintf+0x1e2>
 886:	89 36       	cpi	r24, 0x69	; 105
 888:	39 f5       	brne	.+78     	; 0x8d8 <vfprintf+0x230>
 88a:	f8 01       	movw	r30, r16
 88c:	27 ff       	sbrs	r18, 7
 88e:	07 c0       	rjmp	.+14     	; 0x89e <vfprintf+0x1f6>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	82 81       	ldd	r24, Z+2	; 0x02
 896:	93 81       	ldd	r25, Z+3	; 0x03
 898:	0c 5f       	subi	r16, 0xFC	; 252
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <vfprintf+0x206>
 89e:	60 81       	ld	r22, Z
 8a0:	71 81       	ldd	r23, Z+1	; 0x01
 8a2:	88 27       	eor	r24, r24
 8a4:	77 fd       	sbrc	r23, 7
 8a6:	80 95       	com	r24
 8a8:	98 2f       	mov	r25, r24
 8aa:	0e 5f       	subi	r16, 0xFE	; 254
 8ac:	1f 4f       	sbci	r17, 0xFF	; 255
 8ae:	2f 76       	andi	r18, 0x6F	; 111
 8b0:	b2 2e       	mov	r11, r18
 8b2:	97 ff       	sbrs	r25, 7
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x220>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	20 68       	ori	r18, 0x80	; 128
 8c6:	b2 2e       	mov	r11, r18
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	a4 01       	movw	r20, r8
 8ce:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ultoa_invert>
 8d2:	a8 2e       	mov	r10, r24
 8d4:	a8 18       	sub	r10, r8
 8d6:	44 c0       	rjmp	.+136    	; 0x960 <vfprintf+0x2b8>
 8d8:	85 37       	cpi	r24, 0x75	; 117
 8da:	29 f4       	brne	.+10     	; 0x8e6 <vfprintf+0x23e>
 8dc:	2f 7e       	andi	r18, 0xEF	; 239
 8de:	b2 2e       	mov	r11, r18
 8e0:	2a e0       	ldi	r18, 0x0A	; 10
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	25 c0       	rjmp	.+74     	; 0x930 <vfprintf+0x288>
 8e6:	f2 2f       	mov	r31, r18
 8e8:	f9 7f       	andi	r31, 0xF9	; 249
 8ea:	bf 2e       	mov	r11, r31
 8ec:	8f 36       	cpi	r24, 0x6F	; 111
 8ee:	c1 f0       	breq	.+48     	; 0x920 <vfprintf+0x278>
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <vfprintf+0x250>
 8f2:	88 35       	cpi	r24, 0x58	; 88
 8f4:	79 f0       	breq	.+30     	; 0x914 <vfprintf+0x26c>
 8f6:	b4 c0       	rjmp	.+360    	; 0xa60 <vfprintf+0x3b8>
 8f8:	80 37       	cpi	r24, 0x70	; 112
 8fa:	19 f0       	breq	.+6      	; 0x902 <vfprintf+0x25a>
 8fc:	88 37       	cpi	r24, 0x78	; 120
 8fe:	21 f0       	breq	.+8      	; 0x908 <vfprintf+0x260>
 900:	af c0       	rjmp	.+350    	; 0xa60 <vfprintf+0x3b8>
 902:	2f 2f       	mov	r18, r31
 904:	20 61       	ori	r18, 0x10	; 16
 906:	b2 2e       	mov	r11, r18
 908:	b4 fe       	sbrs	r11, 4
 90a:	0d c0       	rjmp	.+26     	; 0x926 <vfprintf+0x27e>
 90c:	8b 2d       	mov	r24, r11
 90e:	84 60       	ori	r24, 0x04	; 4
 910:	b8 2e       	mov	r11, r24
 912:	09 c0       	rjmp	.+18     	; 0x926 <vfprintf+0x27e>
 914:	24 ff       	sbrs	r18, 4
 916:	0a c0       	rjmp	.+20     	; 0x92c <vfprintf+0x284>
 918:	9f 2f       	mov	r25, r31
 91a:	96 60       	ori	r25, 0x06	; 6
 91c:	b9 2e       	mov	r11, r25
 91e:	06 c0       	rjmp	.+12     	; 0x92c <vfprintf+0x284>
 920:	28 e0       	ldi	r18, 0x08	; 8
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	05 c0       	rjmp	.+10     	; 0x930 <vfprintf+0x288>
 926:	20 e1       	ldi	r18, 0x10	; 16
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <vfprintf+0x288>
 92c:	20 e1       	ldi	r18, 0x10	; 16
 92e:	32 e0       	ldi	r19, 0x02	; 2
 930:	f8 01       	movw	r30, r16
 932:	b7 fe       	sbrs	r11, 7
 934:	07 c0       	rjmp	.+14     	; 0x944 <vfprintf+0x29c>
 936:	60 81       	ld	r22, Z
 938:	71 81       	ldd	r23, Z+1	; 0x01
 93a:	82 81       	ldd	r24, Z+2	; 0x02
 93c:	93 81       	ldd	r25, Z+3	; 0x03
 93e:	0c 5f       	subi	r16, 0xFC	; 252
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	06 c0       	rjmp	.+12     	; 0x950 <vfprintf+0x2a8>
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 5f       	subi	r16, 0xFE	; 254
 94e:	1f 4f       	sbci	r17, 0xFF	; 255
 950:	a4 01       	movw	r20, r8
 952:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ultoa_invert>
 956:	a8 2e       	mov	r10, r24
 958:	a8 18       	sub	r10, r8
 95a:	fb 2d       	mov	r31, r11
 95c:	ff 77       	andi	r31, 0x7F	; 127
 95e:	bf 2e       	mov	r11, r31
 960:	b6 fe       	sbrs	r11, 6
 962:	0b c0       	rjmp	.+22     	; 0x97a <vfprintf+0x2d2>
 964:	2b 2d       	mov	r18, r11
 966:	2e 7f       	andi	r18, 0xFE	; 254
 968:	a5 14       	cp	r10, r5
 96a:	50 f4       	brcc	.+20     	; 0x980 <vfprintf+0x2d8>
 96c:	b4 fe       	sbrs	r11, 4
 96e:	0a c0       	rjmp	.+20     	; 0x984 <vfprintf+0x2dc>
 970:	b2 fc       	sbrc	r11, 2
 972:	08 c0       	rjmp	.+16     	; 0x984 <vfprintf+0x2dc>
 974:	2b 2d       	mov	r18, r11
 976:	2e 7e       	andi	r18, 0xEE	; 238
 978:	05 c0       	rjmp	.+10     	; 0x984 <vfprintf+0x2dc>
 97a:	7a 2c       	mov	r7, r10
 97c:	2b 2d       	mov	r18, r11
 97e:	03 c0       	rjmp	.+6      	; 0x986 <vfprintf+0x2de>
 980:	7a 2c       	mov	r7, r10
 982:	01 c0       	rjmp	.+2      	; 0x986 <vfprintf+0x2de>
 984:	75 2c       	mov	r7, r5
 986:	24 ff       	sbrs	r18, 4
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <vfprintf+0x2fc>
 98a:	fe 01       	movw	r30, r28
 98c:	ea 0d       	add	r30, r10
 98e:	f1 1d       	adc	r31, r1
 990:	80 81       	ld	r24, Z
 992:	80 33       	cpi	r24, 0x30	; 48
 994:	11 f4       	brne	.+4      	; 0x99a <vfprintf+0x2f2>
 996:	29 7e       	andi	r18, 0xE9	; 233
 998:	09 c0       	rjmp	.+18     	; 0x9ac <vfprintf+0x304>
 99a:	22 ff       	sbrs	r18, 2
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <vfprintf+0x302>
 99e:	73 94       	inc	r7
 9a0:	73 94       	inc	r7
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <vfprintf+0x304>
 9a4:	82 2f       	mov	r24, r18
 9a6:	86 78       	andi	r24, 0x86	; 134
 9a8:	09 f0       	breq	.+2      	; 0x9ac <vfprintf+0x304>
 9aa:	73 94       	inc	r7
 9ac:	23 fd       	sbrc	r18, 3
 9ae:	13 c0       	rjmp	.+38     	; 0x9d6 <vfprintf+0x32e>
 9b0:	20 ff       	sbrs	r18, 0
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <vfprintf+0x318>
 9b4:	5a 2c       	mov	r5, r10
 9b6:	73 14       	cp	r7, r3
 9b8:	18 f4       	brcc	.+6      	; 0x9c0 <vfprintf+0x318>
 9ba:	53 0c       	add	r5, r3
 9bc:	57 18       	sub	r5, r7
 9be:	73 2c       	mov	r7, r3
 9c0:	73 14       	cp	r7, r3
 9c2:	68 f4       	brcc	.+26     	; 0x9de <vfprintf+0x336>
 9c4:	b7 01       	movw	r22, r14
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	2c 87       	std	Y+12, r18	; 0x0c
 9cc:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 9d0:	73 94       	inc	r7
 9d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d4:	f5 cf       	rjmp	.-22     	; 0x9c0 <vfprintf+0x318>
 9d6:	73 14       	cp	r7, r3
 9d8:	10 f4       	brcc	.+4      	; 0x9de <vfprintf+0x336>
 9da:	37 18       	sub	r3, r7
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <vfprintf+0x338>
 9de:	31 2c       	mov	r3, r1
 9e0:	24 ff       	sbrs	r18, 4
 9e2:	12 c0       	rjmp	.+36     	; 0xa08 <vfprintf+0x360>
 9e4:	b7 01       	movw	r22, r14
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	2c 87       	std	Y+12, r18	; 0x0c
 9ec:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 9f0:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f2:	22 ff       	sbrs	r18, 2
 9f4:	17 c0       	rjmp	.+46     	; 0xa24 <vfprintf+0x37c>
 9f6:	21 ff       	sbrs	r18, 1
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <vfprintf+0x358>
 9fa:	88 e5       	ldi	r24, 0x58	; 88
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <vfprintf+0x35c>
 a00:	88 e7       	ldi	r24, 0x78	; 120
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	b7 01       	movw	r22, r14
 a06:	0c c0       	rjmp	.+24     	; 0xa20 <vfprintf+0x378>
 a08:	82 2f       	mov	r24, r18
 a0a:	86 78       	andi	r24, 0x86	; 134
 a0c:	59 f0       	breq	.+22     	; 0xa24 <vfprintf+0x37c>
 a0e:	21 fd       	sbrc	r18, 1
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <vfprintf+0x36e>
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	01 c0       	rjmp	.+2      	; 0xa18 <vfprintf+0x370>
 a16:	8b e2       	ldi	r24, 0x2B	; 43
 a18:	27 fd       	sbrc	r18, 7
 a1a:	8d e2       	ldi	r24, 0x2D	; 45
 a1c:	b7 01       	movw	r22, r14
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a24:	a5 14       	cp	r10, r5
 a26:	38 f4       	brcc	.+14     	; 0xa36 <vfprintf+0x38e>
 a28:	b7 01       	movw	r22, r14
 a2a:	80 e3       	ldi	r24, 0x30	; 48
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a32:	5a 94       	dec	r5
 a34:	f7 cf       	rjmp	.-18     	; 0xa24 <vfprintf+0x37c>
 a36:	aa 94       	dec	r10
 a38:	f4 01       	movw	r30, r8
 a3a:	ea 0d       	add	r30, r10
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	b7 01       	movw	r22, r14
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a48:	a1 10       	cpse	r10, r1
 a4a:	f5 cf       	rjmp	.-22     	; 0xa36 <vfprintf+0x38e>
 a4c:	33 20       	and	r3, r3
 a4e:	09 f4       	brne	.+2      	; 0xa52 <vfprintf+0x3aa>
 a50:	51 ce       	rjmp	.-862    	; 0x6f4 <vfprintf+0x4c>
 a52:	b7 01       	movw	r22, r14
 a54:	80 e2       	ldi	r24, 0x20	; 32
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a5c:	3a 94       	dec	r3
 a5e:	f6 cf       	rjmp	.-20     	; 0xa4c <vfprintf+0x3a4>
 a60:	f7 01       	movw	r30, r14
 a62:	86 81       	ldd	r24, Z+6	; 0x06
 a64:	97 81       	ldd	r25, Z+7	; 0x07
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0x3c4>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	9f ef       	ldi	r25, 0xFF	; 255
 a6c:	2c 96       	adiw	r28, 0x0c	; 12
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	bf 90       	pop	r11
 a8a:	af 90       	pop	r10
 a8c:	9f 90       	pop	r9
 a8e:	8f 90       	pop	r8
 a90:	7f 90       	pop	r7
 a92:	6f 90       	pop	r6
 a94:	5f 90       	pop	r5
 a96:	4f 90       	pop	r4
 a98:	3f 90       	pop	r3
 a9a:	2f 90       	pop	r2
 a9c:	08 95       	ret

00000a9e <strnlen_P>:
 a9e:	fc 01       	movw	r30, r24
 aa0:	05 90       	lpm	r0, Z+
 aa2:	61 50       	subi	r22, 0x01	; 1
 aa4:	70 40       	sbci	r23, 0x00	; 0
 aa6:	01 10       	cpse	r0, r1
 aa8:	d8 f7       	brcc	.-10     	; 0xaa0 <strnlen_P+0x2>
 aaa:	80 95       	com	r24
 aac:	90 95       	com	r25
 aae:	8e 0f       	add	r24, r30
 ab0:	9f 1f       	adc	r25, r31
 ab2:	08 95       	ret

00000ab4 <strnlen>:
 ab4:	fc 01       	movw	r30, r24
 ab6:	61 50       	subi	r22, 0x01	; 1
 ab8:	70 40       	sbci	r23, 0x00	; 0
 aba:	01 90       	ld	r0, Z+
 abc:	01 10       	cpse	r0, r1
 abe:	d8 f7       	brcc	.-10     	; 0xab6 <strnlen+0x2>
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	8e 0f       	add	r24, r30
 ac6:	9f 1f       	adc	r25, r31
 ac8:	08 95       	ret

00000aca <fputc>:
 aca:	0f 93       	push	r16
 acc:	1f 93       	push	r17
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	18 2f       	mov	r17, r24
 ad4:	09 2f       	mov	r16, r25
 ad6:	eb 01       	movw	r28, r22
 ad8:	8b 81       	ldd	r24, Y+3	; 0x03
 ada:	81 fd       	sbrc	r24, 1
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <fputc+0x1a>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	20 c0       	rjmp	.+64     	; 0xb24 <fputc+0x5a>
 ae4:	82 ff       	sbrs	r24, 2
 ae6:	10 c0       	rjmp	.+32     	; 0xb08 <fputc+0x3e>
 ae8:	4e 81       	ldd	r20, Y+6	; 0x06
 aea:	5f 81       	ldd	r21, Y+7	; 0x07
 aec:	2c 81       	ldd	r18, Y+4	; 0x04
 aee:	3d 81       	ldd	r19, Y+5	; 0x05
 af0:	42 17       	cp	r20, r18
 af2:	53 07       	cpc	r21, r19
 af4:	7c f4       	brge	.+30     	; 0xb14 <fputc+0x4a>
 af6:	e8 81       	ld	r30, Y
 af8:	f9 81       	ldd	r31, Y+1	; 0x01
 afa:	9f 01       	movw	r18, r30
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	39 83       	std	Y+1, r19	; 0x01
 b02:	28 83       	st	Y, r18
 b04:	10 83       	st	Z, r17
 b06:	06 c0       	rjmp	.+12     	; 0xb14 <fputc+0x4a>
 b08:	e8 85       	ldd	r30, Y+8	; 0x08
 b0a:	f9 85       	ldd	r31, Y+9	; 0x09
 b0c:	81 2f       	mov	r24, r17
 b0e:	09 95       	icall
 b10:	89 2b       	or	r24, r25
 b12:	29 f7       	brne	.-54     	; 0xade <fputc+0x14>
 b14:	2e 81       	ldd	r18, Y+6	; 0x06
 b16:	3f 81       	ldd	r19, Y+7	; 0x07
 b18:	2f 5f       	subi	r18, 0xFF	; 255
 b1a:	3f 4f       	sbci	r19, 0xFF	; 255
 b1c:	3f 83       	std	Y+7, r19	; 0x07
 b1e:	2e 83       	std	Y+6, r18	; 0x06
 b20:	81 2f       	mov	r24, r17
 b22:	90 2f       	mov	r25, r16
 b24:	df 91       	pop	r29
 b26:	cf 91       	pop	r28
 b28:	1f 91       	pop	r17
 b2a:	0f 91       	pop	r16
 b2c:	08 95       	ret

00000b2e <__ultoa_invert>:
 b2e:	fa 01       	movw	r30, r20
 b30:	aa 27       	eor	r26, r26
 b32:	28 30       	cpi	r18, 0x08	; 8
 b34:	51 f1       	breq	.+84     	; 0xb8a <__ultoa_invert+0x5c>
 b36:	20 31       	cpi	r18, 0x10	; 16
 b38:	81 f1       	breq	.+96     	; 0xb9a <__ultoa_invert+0x6c>
 b3a:	e8 94       	clt
 b3c:	6f 93       	push	r22
 b3e:	6e 7f       	andi	r22, 0xFE	; 254
 b40:	6e 5f       	subi	r22, 0xFE	; 254
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	af 4f       	sbci	r26, 0xFF	; 255
 b4a:	b1 e0       	ldi	r27, 0x01	; 1
 b4c:	3e d0       	rcall	.+124    	; 0xbca <__ultoa_invert+0x9c>
 b4e:	b4 e0       	ldi	r27, 0x04	; 4
 b50:	3c d0       	rcall	.+120    	; 0xbca <__ultoa_invert+0x9c>
 b52:	67 0f       	add	r22, r23
 b54:	78 1f       	adc	r23, r24
 b56:	89 1f       	adc	r24, r25
 b58:	9a 1f       	adc	r25, r26
 b5a:	a1 1d       	adc	r26, r1
 b5c:	68 0f       	add	r22, r24
 b5e:	79 1f       	adc	r23, r25
 b60:	8a 1f       	adc	r24, r26
 b62:	91 1d       	adc	r25, r1
 b64:	a1 1d       	adc	r26, r1
 b66:	6a 0f       	add	r22, r26
 b68:	71 1d       	adc	r23, r1
 b6a:	81 1d       	adc	r24, r1
 b6c:	91 1d       	adc	r25, r1
 b6e:	a1 1d       	adc	r26, r1
 b70:	20 d0       	rcall	.+64     	; 0xbb2 <__ultoa_invert+0x84>
 b72:	09 f4       	brne	.+2      	; 0xb76 <__ultoa_invert+0x48>
 b74:	68 94       	set
 b76:	3f 91       	pop	r19
 b78:	2a e0       	ldi	r18, 0x0A	; 10
 b7a:	26 9f       	mul	r18, r22
 b7c:	11 24       	eor	r1, r1
 b7e:	30 19       	sub	r19, r0
 b80:	30 5d       	subi	r19, 0xD0	; 208
 b82:	31 93       	st	Z+, r19
 b84:	de f6       	brtc	.-74     	; 0xb3c <__ultoa_invert+0xe>
 b86:	cf 01       	movw	r24, r30
 b88:	08 95       	ret
 b8a:	46 2f       	mov	r20, r22
 b8c:	47 70       	andi	r20, 0x07	; 7
 b8e:	40 5d       	subi	r20, 0xD0	; 208
 b90:	41 93       	st	Z+, r20
 b92:	b3 e0       	ldi	r27, 0x03	; 3
 b94:	0f d0       	rcall	.+30     	; 0xbb4 <__ultoa_invert+0x86>
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0x5c>
 b98:	f6 cf       	rjmp	.-20     	; 0xb86 <__ultoa_invert+0x58>
 b9a:	46 2f       	mov	r20, r22
 b9c:	4f 70       	andi	r20, 0x0F	; 15
 b9e:	40 5d       	subi	r20, 0xD0	; 208
 ba0:	4a 33       	cpi	r20, 0x3A	; 58
 ba2:	18 f0       	brcs	.+6      	; 0xbaa <__ultoa_invert+0x7c>
 ba4:	49 5d       	subi	r20, 0xD9	; 217
 ba6:	31 fd       	sbrc	r19, 1
 ba8:	40 52       	subi	r20, 0x20	; 32
 baa:	41 93       	st	Z+, r20
 bac:	02 d0       	rcall	.+4      	; 0xbb2 <__ultoa_invert+0x84>
 bae:	a9 f7       	brne	.-22     	; 0xb9a <__ultoa_invert+0x6c>
 bb0:	ea cf       	rjmp	.-44     	; 0xb86 <__ultoa_invert+0x58>
 bb2:	b4 e0       	ldi	r27, 0x04	; 4
 bb4:	a6 95       	lsr	r26
 bb6:	97 95       	ror	r25
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	ba 95       	dec	r27
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__ultoa_invert+0x86>
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	61 05       	cpc	r22, r1
 bc6:	71 05       	cpc	r23, r1
 bc8:	08 95       	ret
 bca:	9b 01       	movw	r18, r22
 bcc:	ac 01       	movw	r20, r24
 bce:	0a 2e       	mov	r0, r26
 bd0:	06 94       	lsr	r0
 bd2:	57 95       	ror	r21
 bd4:	47 95       	ror	r20
 bd6:	37 95       	ror	r19
 bd8:	27 95       	ror	r18
 bda:	ba 95       	dec	r27
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__ultoa_invert+0xa2>
 bde:	62 0f       	add	r22, r18
 be0:	73 1f       	adc	r23, r19
 be2:	84 1f       	adc	r24, r20
 be4:	95 1f       	adc	r25, r21
 be6:	a0 1d       	adc	r26, r0
 be8:	08 95       	ret

00000bea <_exit>:
 bea:	f8 94       	cli

00000bec <__stop_program>:
 bec:	ff cf       	rjmp	.-2      	; 0xbec <__stop_program>
