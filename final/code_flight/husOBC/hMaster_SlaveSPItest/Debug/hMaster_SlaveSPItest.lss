
hMaster_SlaveSPItest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000792  00000826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800180  00800180  000008a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002982  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c95  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ecf  00000000  00000000  00004135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  00005004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c0  00000000  00000000  00005484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c1b  00000000  00000000  00005a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000665f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "hm.h"
#include "twi.h"
#include "peripherals.h"

void get_HM_data(void)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
void get_HM_data(void)
{
  ///Counter for the 7 bytes of Health monitoring data
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
}
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
  ///Set Baud Rate to 9600
  UBRR1L = 103;
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  UBRR1H = 0;
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
}
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    PORTC |= _BV(PC3);
  else
    PORTC &= ~(_BV(PC3));
    
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  OCR3B = Current_state.pwm.y;
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_18>
  OCR3C = Current_state.pwm.z;
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    sbi(PORTB, ADC_S);
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
    Current_state.ss.reading[channel] &= 0x0F00;
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x40);
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
    sbi(PORTB, ADC_S);
  9a:	a0 e0       	ldi	r26, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 38       	cpi	r26, 0x80	; 128
  ae:	b1 07       	cpc	r27, r17
    
    channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
}
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e8       	ldi	r26, 0x80	; 128
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  c2:	0e 94 c9 01 	call	0x392	; 0x392 <main>
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
  c6:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_exit>

000000ca <__bad_interrupt>:
  TWDR = (addr << 1) + TW_READ;
  TWCR = (1 << TWINT) | (1 << TWEN);

  while (!(TWCR & (1 << TWINT)));
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
}
  ce:	98 e0       	ldi	r25, 0x08	; 8
  frame[size++] = AX_PID;
  
  memcpy(frame + size, data, HM_SIZE);
  size += HM_SIZE;
  
  crc = calculate_crc_16(frame + 1, FRAME_SIZE - 4);
  d0:	26 2f       	mov	r18, r22
  
  memcpy(frame + size, &crc, 2);
  d2:	21 70       	andi	r18, 0x01	; 1
  d4:	76 95       	lsr	r23
  d6:	67 95       	ror	r22
  size += 2;
  
  frame[size] = AX_FLAG;
  d8:	38 2f       	mov	r19, r24
  da:	31 70       	andi	r19, 0x01	; 1
  
}
  dc:	32 17       	cp	r19, r18
  de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
  e0:	28 e0       	ldi	r18, 0x08	; 8
  e2:	62 27       	eor	r22, r18
  e4:	24 e8       	ldi	r18, 0x84	; 132
  e6:	72 27       	eor	r23, r18
  e8:	86 95       	lsr	r24
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
  ee:	cb 01       	movw	r24, r22
  f0:	08 95       	ret

000000f2 <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	0b b6       	in	r0, 0x3b	; 59
  fe:	0f 92       	push	r0
 100:	2f 93       	push	r18
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
 10e:	8c b1       	in	r24, 0x0c	; 12
 110:	80 93 81 01 	sts	0x0181, r24
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
 114:	80 91 82 01 	lds	r24, 0x0182
 118:	90 91 83 01 	lds	r25, 0x0183
 11c:	a0 91 84 01 	lds	r26, 0x0184
 120:	b0 91 85 01 	lds	r27, 0x0185
 124:	ba 2f       	mov	r27, r26
 126:	a9 2f       	mov	r26, r25
 128:	98 2f       	mov	r25, r24
 12a:	88 27       	eor	r24, r24
 12c:	80 93 82 01 	sts	0x0182, r24
 130:	90 93 83 01 	sts	0x0183, r25
 134:	a0 93 84 01 	sts	0x0184, r26
 138:	b0 93 85 01 	sts	0x0185, r27
  buffer &= 0xFFFFFF00;
 13c:	80 91 82 01 	lds	r24, 0x0182
 140:	90 91 83 01 	lds	r25, 0x0183
 144:	a0 91 84 01 	lds	r26, 0x0184
 148:	b0 91 85 01 	lds	r27, 0x0185
 14c:	88 27       	eor	r24, r24
 14e:	80 93 82 01 	sts	0x0182, r24
 152:	90 93 83 01 	sts	0x0183, r25
 156:	a0 93 84 01 	sts	0x0184, r26
 15a:	b0 93 85 01 	sts	0x0185, r27
  buffer |= (uint32_t) last_byte;
 15e:	20 91 81 01 	lds	r18, 0x0181
 162:	80 91 82 01 	lds	r24, 0x0182
 166:	90 91 83 01 	lds	r25, 0x0183
 16a:	a0 91 84 01 	lds	r26, 0x0184
 16e:	b0 91 85 01 	lds	r27, 0x0185
 172:	82 2b       	or	r24, r18
 174:	80 93 82 01 	sts	0x0182, r24
 178:	90 93 83 01 	sts	0x0183, r25
 17c:	a0 93 84 01 	sts	0x0184, r26
 180:	b0 93 85 01 	sts	0x0185, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
 184:	80 91 06 01 	lds	r24, 0x0106
 188:	8c 30       	cpi	r24, 0x0C	; 12
 18a:	a0 f4       	brcc	.+40     	; 0x1b4 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
 18c:	e0 91 06 01 	lds	r30, 0x0106
 190:	80 91 81 01 	lds	r24, 0x0181
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e6 57       	subi	r30, 0x76	; 118
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
 19c:	80 91 06 01 	lds	r24, 0x0106
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 06 01 	sts	0x0106, r24
    if(pos == 12)
 1a6:	80 91 06 01 	lds	r24, 0x0106
 1aa:	8c 30       	cpi	r24, 0x0C	; 12
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <__vector_18+0xc2>
      pos = 0xFF;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	80 93 06 01 	sts	0x0106, r24
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
 1b4:	80 91 05 01 	lds	r24, 0x0105
 1b8:	8c 30       	cpi	r24, 0x0C	; 12
 1ba:	a0 f4       	brcc	.+40     	; 0x1e4 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
 1bc:	e0 91 05 01 	lds	r30, 0x0105
 1c0:	80 91 81 01 	lds	r24, 0x0181
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ea 56       	subi	r30, 0x6A	; 106
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	80 83       	st	Z, r24
    
    vel++;
 1cc:	80 91 05 01 	lds	r24, 0x0105
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 05 01 	sts	0x0105, r24
    if(vel == 12)
 1d6:	80 91 05 01 	lds	r24, 0x0105
 1da:	8c 30       	cpi	r24, 0x0C	; 12
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <__vector_18+0xf2>
      vel = 0xFF;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 93 05 01 	sts	0x0105, r24
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
 1e4:	80 91 04 01 	lds	r24, 0x0104
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	c0 f4       	brcc	.+48     	; 0x21c <__vector_18+0x12a>
  {
    if(dop >= 2)
 1ec:	80 91 04 01 	lds	r24, 0x0104
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	40 f0       	brcs	.+16     	; 0x204 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
 1f4:	e0 91 04 01 	lds	r30, 0x0104
 1f8:	80 91 81 01 	lds	r24, 0x0181
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e2 50       	subi	r30, 0x02	; 2
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 83       	st	Z, r24
      
    dop++;
 204:	80 91 04 01 	lds	r24, 0x0104
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 04 01 	sts	0x0104, r24
    if(dop == 4)
 20e:	80 91 04 01 	lds	r24, 0x0104
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	19 f4       	brne	.+6      	; 0x21c <__vector_18+0x12a>
      dop = 0xFF;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	80 93 04 01 	sts	0x0104, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
 21c:	80 91 03 01 	lds	r24, 0x0103
 220:	80 31       	cpi	r24, 0x10	; 16
 222:	c0 f4       	brcc	.+48     	; 0x254 <__vector_18+0x162>
  {
    if(geo >= 4)
 224:	80 91 03 01 	lds	r24, 0x0103
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	40 f0       	brcs	.+16     	; 0x23c <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
 22c:	e0 91 03 01 	lds	r30, 0x0103
 230:	80 91 81 01 	lds	r24, 0x0181
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e2 56       	subi	r30, 0x62	; 98
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	80 83       	st	Z, r24
    
    geo++;
 23c:	80 91 03 01 	lds	r24, 0x0103
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 03 01 	sts	0x0103, r24
    if(geo == 16)
 246:	80 91 03 01 	lds	r24, 0x0103
 24a:	80 31       	cpi	r24, 0x10	; 16
 24c:	19 f4       	brne	.+6      	; 0x254 <__vector_18+0x162>
      geo = 0xFF;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	80 93 03 01 	sts	0x0103, r24
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
 254:	80 91 02 01 	lds	r24, 0x0102
 258:	87 30       	cpi	r24, 0x07	; 7
 25a:	b8 f4       	brcc	.+46     	; 0x28a <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
 25c:	e0 91 02 01 	lds	r30, 0x0102
 260:	80 91 81 01 	lds	r24, 0x0181
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	e2 55       	subi	r30, 0x52	; 82
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	80 83       	st	Z, r24
    
    time++;
 26c:	80 91 02 01 	lds	r24, 0x0102
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 02 01 	sts	0x0102, r24
    if(time == 7)
 276:	80 91 02 01 	lds	r24, 0x0102
 27a:	87 30       	cpi	r24, 0x07	; 7
 27c:	31 f4       	brne	.+12     	; 0x28a <__vector_18+0x198>
    {
      time = 0xFF;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	80 93 02 01 	sts	0x0102, r24
      ///* * The Entire message has been read
      message_end = 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 80 01 	sts	0x0180, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
 28a:	80 91 82 01 	lds	r24, 0x0182
 28e:	90 91 83 01 	lds	r25, 0x0183
 292:	a0 91 84 01 	lds	r26, 0x0184
 296:	b0 91 85 01 	lds	r27, 0x0185
 29a:	8c 3a       	cpi	r24, 0xAC	; 172
 29c:	94 40       	sbci	r25, 0x04	; 4
 29e:	af 43       	sbci	r26, 0x3F	; 63
 2a0:	bf 43       	sbci	r27, 0x3F	; 63
 2a2:	29 f4       	brne	.+10     	; 0x2ae <__vector_18+0x1bc>
  {
    message_end = 0;
 2a4:	10 92 80 01 	sts	0x0180, r1
    pos = 0;
 2a8:	10 92 06 01 	sts	0x0106, r1
 2ac:	3f c0       	rjmp	.+126    	; 0x32c <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
 2ae:	80 91 82 01 	lds	r24, 0x0182
 2b2:	90 91 83 01 	lds	r25, 0x0183
 2b6:	a0 91 84 01 	lds	r26, 0x0184
 2ba:	b0 91 85 01 	lds	r27, 0x0185
 2be:	8c 3a       	cpi	r24, 0xAC	; 172
 2c0:	95 40       	sbci	r25, 0x05	; 5
 2c2:	af 43       	sbci	r26, 0x3F	; 63
 2c4:	bf 43       	sbci	r27, 0x3F	; 63
 2c6:	19 f4       	brne	.+6      	; 0x2ce <__vector_18+0x1dc>
    vel = 0;
 2c8:	10 92 05 01 	sts	0x0105, r1
 2cc:	2f c0       	rjmp	.+94     	; 0x32c <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
 2ce:	80 91 82 01 	lds	r24, 0x0182
 2d2:	90 91 83 01 	lds	r25, 0x0183
 2d6:	a0 91 84 01 	lds	r26, 0x0184
 2da:	b0 91 85 01 	lds	r27, 0x0185
 2de:	8c 3a       	cpi	r24, 0xAC	; 172
 2e0:	9b 40       	sbci	r25, 0x0B	; 11
 2e2:	af 43       	sbci	r26, 0x3F	; 63
 2e4:	bf 43       	sbci	r27, 0x3F	; 63
 2e6:	19 f4       	brne	.+6      	; 0x2ee <__vector_18+0x1fc>
    dop = 0;
 2e8:	10 92 04 01 	sts	0x0104, r1
 2ec:	1f c0       	rjmp	.+62     	; 0x32c <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
 2ee:	80 91 82 01 	lds	r24, 0x0182
 2f2:	90 91 83 01 	lds	r25, 0x0183
 2f6:	a0 91 84 01 	lds	r26, 0x0184
 2fa:	b0 91 85 01 	lds	r27, 0x0185
 2fe:	8c 3a       	cpi	r24, 0xAC	; 172
 300:	9e 40       	sbci	r25, 0x0E	; 14
 302:	af 43       	sbci	r26, 0x3F	; 63
 304:	bf 43       	sbci	r27, 0x3F	; 63
 306:	19 f4       	brne	.+6      	; 0x30e <__vector_18+0x21c>
    geo = 0;
 308:	10 92 03 01 	sts	0x0103, r1
 30c:	0f c0       	rjmp	.+30     	; 0x32c <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
 30e:	80 91 82 01 	lds	r24, 0x0182
 312:	90 91 83 01 	lds	r25, 0x0183
 316:	a0 91 84 01 	lds	r26, 0x0184
 31a:	b0 91 85 01 	lds	r27, 0x0185
 31e:	8c 3a       	cpi	r24, 0xAC	; 172
 320:	9f 40       	sbci	r25, 0x0F	; 15
 322:	af 43       	sbci	r26, 0x3F	; 63
 324:	bf 43       	sbci	r27, 0x3F	; 63
 326:	11 f4       	brne	.+4      	; 0x32c <__vector_18+0x23a>
    time = 0;
 328:	10 92 02 01 	sts	0x0102, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
 32c:	80 91 00 01 	lds	r24, 0x0100
 330:	90 91 01 01 	lds	r25, 0x0101
 334:	84 3f       	cpi	r24, 0xF4	; 244
 336:	91 40       	sbci	r25, 0x01	; 1
 338:	f0 f4       	brcc	.+60     	; 0x376 <__vector_18+0x284>
 33a:	80 91 00 01 	lds	r24, 0x0100
 33e:	90 91 01 01 	lds	r25, 0x0101
 342:	89 2b       	or	r24, r25
 344:	c1 f0       	breq	.+48     	; 0x376 <__vector_18+0x284>
 346:	80 91 80 01 	lds	r24, 0x0180
 34a:	88 23       	and	r24, r24
 34c:	a1 f0       	breq	.+40     	; 0x376 <__vector_18+0x284>
  {
    GPS_done = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 0c 02 	sts	0x020C, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
 354:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	90 93 01 01 	sts	0x0101, r25
 35e:	80 93 00 01 	sts	0x0100, r24
    message_end = 0;
 362:	10 92 80 01 	sts	0x0180, r1
    buffer = 0;
 366:	10 92 82 01 	sts	0x0182, r1
 36a:	10 92 83 01 	sts	0x0183, r1
 36e:	10 92 84 01 	sts	0x0184, r1
 372:	10 92 85 01 	sts	0x0185, r1
  }
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0b be       	out	0x3b, r0	; 59
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	c8 57       	subi	r28, 0x78	; 120
 39c:	d1 09       	sbc	r29, r1
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
	char array[40];
	char array1[40];
	char array2[40];
	
	DDRA = 0xF0;
 3a8:	80 ef       	ldi	r24, 0xF0	; 240
 3aa:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
 3ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	89 e6       	ldi	r24, 0x69	; 105
 3b2:	98 e1       	ldi	r25, 0x18	; 24
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x22>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x2c>
 3be:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3c0:	1b ba       	out	0x1b, r1	; 27
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	89 e6       	ldi	r24, 0x69	; 105
 3c6:	98 e1       	ldi	r25, 0x18	; 24
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x36>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x40>
 3d2:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
 3d4:	80 ef       	ldi	r24, 0xF0	; 240
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	89 e6       	ldi	r24, 0x69	; 105
 3dc:	98 e1       	ldi	r25, 0x18	; 24
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x4c>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x56>
 3e8:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
 3ea:	1b ba       	out	0x1b, r1	; 27
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	89 e6       	ldi	r24, 0x69	; 105
 3f0:	98 e1       	ldi	r25, 0x18	; 24
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0x60>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x6a>
 3fc:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
 3fe:	0e 94 a6 03 	call	0x74c	; 0x74c <init_UART0>
  
	transmit_UART0('\r');
 402:	8d e0       	ldi	r24, 0x0D	; 13
 404:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('\r');
 408:	8d e0       	ldi	r24, 0x0D	; 13
 40a:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('H');
 40e:	88 e4       	ldi	r24, 0x48	; 72
 410:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('e');
 414:	85 e6       	ldi	r24, 0x65	; 101
 416:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('l');
 41a:	8c e6       	ldi	r24, 0x6C	; 108
 41c:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('l');
 420:	8c e6       	ldi	r24, 0x6C	; 108
 422:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('o');
 426:	8f e6       	ldi	r24, 0x6F	; 111
 428:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	
	sprintf(array,"\t..This is IITB's Student Satellite...\r");
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	e7 e5       	ldi	r30, 0x57	; 87
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	de 01       	movw	r26, r28
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <main+0xa4>
	transmit_string_UART0(array);
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	0e 94 bb 03 	call	0x776	; 0x776 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
 446:	86 e2       	ldi	r24, 0x26	; 38
 448:	e7 e0       	ldi	r30, 0x07	; 7
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	de 01       	movw	r26, r28
 44e:	99 96       	adiw	r26, 0x29	; 41
 450:	01 90       	ld	r0, Z+
 452:	0d 92       	st	X+, r0
 454:	8a 95       	dec	r24
 456:	e1 f7       	brne	.-8      	; 0x450 <main+0xbe>
	sprintf(array2,"\rData send to Slave :\t");
 458:	87 e1       	ldi	r24, 0x17	; 23
 45a:	ed e2       	ldi	r30, 0x2D	; 45
 45c:	f1 e0       	ldi	r31, 0x01	; 1
 45e:	de 01       	movw	r26, r28
 460:	af 5a       	subi	r26, 0xAF	; 175
 462:	bf 4f       	sbci	r27, 0xFF	; 255
 464:	01 90       	ld	r0, Z+
 466:	0d 92       	st	X+, r0
 468:	8a 95       	dec	r24
 46a:	e1 f7       	brne	.-8      	; 0x464 <main+0xd2>
		
/************************************************************/
	
	init_SPI();
 46c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <init_SPI>
  
/************************************************************/
	while(1){
	PORTA = 0xA0;
 470:	00 ea       	ldi	r16, 0xA0	; 160
	_delay_ms(500);
	PORTA = 0x50;
 472:	10 e5       	ldi	r17, 0x50	; 80
	
	init_SPI();
  
/************************************************************/
	while(1){
	PORTA = 0xA0;
 474:	0b bb       	out	0x1b, r16	; 27
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	84 e3       	ldi	r24, 0x34	; 52
 47a:	9c e0       	ldi	r25, 0x0C	; 12
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0xea>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0xf4>
 486:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 488:	1b bb       	out	0x1b, r17	; 27
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	84 e3       	ldi	r24, 0x34	; 52
 48e:	9c e0       	ldi	r25, 0x0C	; 12
 490:	21 50       	subi	r18, 0x01	; 1
 492:	80 40       	sbci	r24, 0x00	; 0
 494:	90 40       	sbci	r25, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0xfe>
 498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x108>
 49a:	00 00       	nop
	_delay_ms(500);
	
	transmit_UART0('\r');
 49c:	8d e0       	ldi	r24, 0x0D	; 13
 49e:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('\r');
 4a2:	8d e0       	ldi	r24, 0x0D	; 13
 4a4:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('H');
 4a8:	88 e4       	ldi	r24, 0x48	; 72
 4aa:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	transmit_UART0('i');
 4ae:	89 e6       	ldi	r24, 0x69	; 105
 4b0:	0e 94 b7 03 	call	0x76e	; 0x76e <transmit_UART0>
	
	transmit_string_UART0(array1);
 4b4:	ce 01       	movw	r24, r28
 4b6:	89 96       	adiw	r24, 0x29	; 41
 4b8:	0e 94 bb 03 	call	0x776	; 0x776 <transmit_string_UART0>
	transmit_string_UART0(array2);
 4bc:	ce 01       	movw	r24, r28
 4be:	8f 5a       	subi	r24, 0xAF	; 175
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	0e 94 bb 03 	call	0x776	; 0x776 <transmit_string_UART0>
	
/************************************************************/
	PORTA = 0xA0;
 4c6:	0b bb       	out	0x1b, r16	; 27
 4c8:	2f ef       	ldi	r18, 0xFF	; 255
 4ca:	84 e3       	ldi	r24, 0x34	; 52
 4cc:	9c e0       	ldi	r25, 0x0C	; 12
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <main+0x13c>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <main+0x146>
 4d8:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 4da:	1b bb       	out	0x1b, r17	; 27
 4dc:	2f ef       	ldi	r18, 0xFF	; 255
 4de:	84 e3       	ldi	r24, 0x34	; 52
 4e0:	9c e0       	ldi	r25, 0x0C	; 12
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	80 40       	sbci	r24, 0x00	; 0
 4e6:	90 40       	sbci	r25, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <main+0x150>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <main+0x15a>
 4ec:	00 00       	nop
	_delay_ms(500);
	
	///* * Sending Slave
    slave_send(BEGIN_TX_COMM, "HelloWorld", 10);
 4ee:	4a e0       	ldi	r20, 0x0A	; 10
 4f0:	64 e4       	ldi	r22, 0x44	; 68
 4f2:	71 e0       	ldi	r23, 0x01	; 1
 4f4:	8a e5       	ldi	r24, 0x5A	; 90
 4f6:	0e 94 b4 02 	call	0x568	; 0x568 <slave_send>
	transmit_string_UART0("HelloWorld");
 4fa:	84 e4       	ldi	r24, 0x44	; 68
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 bb 03 	call	0x776	; 0x776 <transmit_string_UART0>

	PORTA = 0xA0;
 502:	0b bb       	out	0x1b, r16	; 27
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	84 e3       	ldi	r24, 0x34	; 52
 508:	9c e0       	ldi	r25, 0x0C	; 12
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x178>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x182>
 514:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 516:	1b bb       	out	0x1b, r17	; 27
 518:	2f ef       	ldi	r18, 0xFF	; 255
 51a:	84 e3       	ldi	r24, 0x34	; 52
 51c:	9c e0       	ldi	r25, 0x0C	; 12
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <main+0x18c>
 526:	00 c0       	rjmp	.+0      	; 0x528 <main+0x196>
 528:	00 00       	nop
	_delay_ms(500);
	PORTA = 0xA0;
 52a:	0b bb       	out	0x1b, r16	; 27
 52c:	2f ef       	ldi	r18, 0xFF	; 255
 52e:	84 e3       	ldi	r24, 0x34	; 52
 530:	9c e0       	ldi	r25, 0x0C	; 12
 532:	21 50       	subi	r18, 0x01	; 1
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0x1a0>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <main+0x1aa>
 53c:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
 53e:	1b bb       	out	0x1b, r17	; 27
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	84 e3       	ldi	r24, 0x34	; 52
 544:	9c e0       	ldi	r25, 0x0C	; 12
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <main+0x1b4>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <main+0x1be>
 550:	00 00       	nop
	_delay_ms(500);
	
	slave_send(BEGIN_TX_COMM, "PRATHAM", 7);
 552:	47 e0       	ldi	r20, 0x07	; 7
 554:	6f e4       	ldi	r22, 0x4F	; 79
 556:	71 e0       	ldi	r23, 0x01	; 1
 558:	8a e5       	ldi	r24, 0x5A	; 90
 55a:	0e 94 b4 02 	call	0x568	; 0x568 <slave_send>
	transmit_string_UART0("PRATHAM");
 55e:	8f e4       	ldi	r24, 0x4F	; 79
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 bb 03 	call	0x776	; 0x776 <transmit_string_UART0>
 566:	86 cf       	rjmp	.-244    	; 0x474 <main+0xe2>

00000568 <slave_send>:

#include "slave_comm.h"
#include "spi.h"
#include "ax25.h"

void slave_send (uint8_t command, char* data, uint8_t size){
 568:	af 92       	push	r10
 56a:	bf 92       	push	r11
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	00 d0       	rcall	.+0      	; 0x57c <slave_send+0x14>
 57c:	00 d0       	rcall	.+0      	; 0x57e <slave_send+0x16>
 57e:	1f 92       	push	r1
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	8d 83       	std	Y+5, r24	; 0x05
 586:	d6 2e       	mov	r13, r22
 588:	e7 2e       	mov	r14, r23
 58a:	f4 2e       	mov	r15, r20

  static uint32_t seq = 0;
  uint16_t crc = 0xFFFF;
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	9a 83       	std	Y+2, r25	; 0x02
 592:	89 83       	std	Y+1, r24	; 0x01
  uint8_t i, c, tsize = size;
 594:	4c 83       	std	Y+4, r20	; 0x04
  
  ///Initialize SPI
  init_SPI_trans (SLAVE);
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 89 03 	call	0x712	; 0x712 <init_SPI_trans>
  
  ///* Start communication
  c = START_SPI;
 59c:	87 ee       	ldi	r24, 0xE7	; 231
 59e:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_START_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	ce 01       	movw	r24, r28
 5a6:	03 96       	adiw	r24, 0x03	; 3
 5a8:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	ce 01       	movw	r24, r28
 5b2:	03 96       	adiw	r24, 0x03	; 3
 5b4:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
  
  ///* Notify the command
  SPI_send ((char *)&command,sizeof (uint8_t));
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	ce 01       	movw	r24, r28
 5be:	05 96       	adiw	r24, 0x05	; 5
 5c0:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
  crc = update_crc_16(command, crc);
 5c4:	69 81       	ldd	r22, Y+1	; 0x01
 5c6:	7a 81       	ldd	r23, Y+2	; 0x02
 5c8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ca:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
 5ce:	9a 83       	std	Y+2, r25	; 0x02
 5d0:	89 83       	std	Y+1, r24	; 0x01
  
  ///* Send size of data
  if((command == HM_DATA) ||(command == REAL_TIME))
 5d2:	8d 81       	ldd	r24, Y+5	; 0x05
 5d4:	88 23       	and	r24, r24
 5d6:	19 f0       	breq	.+6      	; 0x5de <slave_send+0x76>
 5d8:	85 3d       	cpi	r24, 0xD5	; 213
 5da:	09 f0       	breq	.+2      	; 0x5de <slave_send+0x76>
 5dc:	3f c0       	rjmp	.+126    	; 0x65c <slave_send+0xf4>
  {
    tsize += 4;
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	8c 5f       	subi	r24, 0xFC	; 252
 5e2:	8c 83       	std	Y+4, r24	; 0x04
    SPI_send ((char *)&tsize,sizeof (uint8_t));
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	ce 01       	movw	r24, r28
 5ea:	04 96       	adiw	r24, 0x04	; 4
 5ec:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
    crc = update_crc_16(tsize, crc);
 5f0:	69 81       	ldd	r22, Y+1	; 0x01
 5f2:	7a 81       	ldd	r23, Y+2	; 0x02
 5f4:	8c 81       	ldd	r24, Y+4	; 0x04
 5f6:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
 5fa:	9a 83       	std	Y+2, r25	; 0x02
 5fc:	89 83       	std	Y+1, r24	; 0x01
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	86 e8       	ldi	r24, 0x86	; 134
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
 60a:	06 e8       	ldi	r16, 0x86	; 134
 60c:	11 e0       	ldi	r17, 0x01	; 1
 60e:	0f 2e       	mov	r0, r31
 610:	fa e8       	ldi	r31, 0x8A	; 138
 612:	af 2e       	mov	r10, r31
 614:	f1 e0       	ldi	r31, 0x01	; 1
 616:	bf 2e       	mov	r11, r31
 618:	f0 2d       	mov	r31, r0
    for(i = 0; i < sizeof(uint32_t); i++)
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
 61a:	69 81       	ldd	r22, Y+1	; 0x01
 61c:	7a 81       	ldd	r23, Y+2	; 0x02
 61e:	f8 01       	movw	r30, r16
 620:	81 91       	ld	r24, Z+
 622:	8f 01       	movw	r16, r30
 624:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
 628:	9a 83       	std	Y+2, r25	; 0x02
 62a:	89 83       	std	Y+1, r24	; 0x01
    tsize += 4;
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    crc = update_crc_16(tsize, crc);
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    for(i = 0; i < sizeof(uint32_t); i++)
 62c:	0a 15       	cp	r16, r10
 62e:	1b 05       	cpc	r17, r11
 630:	a1 f7       	brne	.-24     	; 0x61a <slave_send+0xb2>
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    seq++;
 632:	00 91 86 01 	lds	r16, 0x0186
 636:	10 91 87 01 	lds	r17, 0x0187
 63a:	20 91 88 01 	lds	r18, 0x0188
 63e:	30 91 89 01 	lds	r19, 0x0189
 642:	0f 5f       	subi	r16, 0xFF	; 255
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	2f 4f       	sbci	r18, 0xFF	; 255
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	00 93 86 01 	sts	0x0186, r16
 64e:	10 93 87 01 	sts	0x0187, r17
 652:	20 93 88 01 	sts	0x0188, r18
 656:	30 93 89 01 	sts	0x0189, r19
 65a:	0d c0       	rjmp	.+26     	; 0x676 <slave_send+0x10e>
  }
  else
  {
    SPI_send ((char *)&tsize,sizeof (uint8_t));
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	ce 01       	movw	r24, r28
 662:	04 96       	adiw	r24, 0x04	; 4
 664:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
    crc = update_crc_16(tsize, crc);
 668:	69 81       	ldd	r22, Y+1	; 0x01
 66a:	7a 81       	ldd	r23, Y+2	; 0x02
 66c:	8c 81       	ldd	r24, Y+4	; 0x04
 66e:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
 672:	9a 83       	std	Y+2, r25	; 0x02
 674:	89 83       	std	Y+1, r24	; 0x01
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
 676:	6f 2d       	mov	r22, r15
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	8d 2d       	mov	r24, r13
 67c:	9e 2d       	mov	r25, r14
 67e:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
  for(i = 0; i < size; i++)
 682:	ff 20       	and	r15, r15
 684:	79 f0       	breq	.+30     	; 0x6a4 <slave_send+0x13c>
 686:	0d 2d       	mov	r16, r13
 688:	1e 2d       	mov	r17, r14
 68a:	e1 2c       	mov	r14, r1
    crc = update_crc_16(data[i], crc);
 68c:	69 81       	ldd	r22, Y+1	; 0x01
 68e:	7a 81       	ldd	r23, Y+2	; 0x02
 690:	f8 01       	movw	r30, r16
 692:	81 91       	ld	r24, Z+
 694:	8f 01       	movw	r16, r30
 696:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
 69a:	9a 83       	std	Y+2, r25	; 0x02
 69c:	89 83       	std	Y+1, r24	; 0x01
    crc = update_crc_16(tsize, crc);
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
  for(i = 0; i < size; i++)
 69e:	e3 94       	inc	r14
 6a0:	ef 10       	cpse	r14, r15
 6a2:	f4 cf       	rjmp	.-24     	; 0x68c <slave_send+0x124>
    crc = update_crc_16(data[i], crc);
    
  ///* Send CRC
  crc = ~crc;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	80 95       	com	r24
 6aa:	90 95       	com	r25
 6ac:	9a 83       	std	Y+2, r25	; 0x02
 6ae:	89 83       	std	Y+1, r24	; 0x01
  SPI_send ((char *)&crc, sizeof (uint16_t));
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	ce 01       	movw	r24, r28
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
    
  ///* End communication
  c = END_SPI;
 6bc:	8a ea       	ldi	r24, 0xAA	; 170
 6be:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_END_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	ce 01       	movw	r24, r28
 6c6:	03 96       	adiw	r24, 0x03	; 3
 6c8:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	ce 01       	movw	r24, r28
 6d2:	03 96       	adiw	r24, 0x03	; 3
 6d4:	0e 94 98 03 	call	0x730	; 0x730 <SPI_send>
      
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	ff 90       	pop	r15
 6ec:	ef 90       	pop	r14
 6ee:	df 90       	pop	r13
 6f0:	bf 90       	pop	r11
 6f2:	af 90       	pop	r10
 6f4:	08 95       	ret

000006f6 <init_SPI>:
}

void init_SPI(void)
{
  ///Set MOSI and SCK output, all others input
  DDRB &= 0xF0;
 6f6:	87 b3       	in	r24, 0x17	; 23
 6f8:	80 7f       	andi	r24, 0xF0	; 240
 6fa:	87 bb       	out	0x17, r24	; 23
  DDRB = _BV(SPICLK) | _BV(SPIDO);
 6fc:	86 e0       	ldi	r24, 0x06	; 6
 6fe:	87 bb       	out	0x17, r24	; 23
  
  DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
 700:	87 b3       	in	r24, 0x17	; 23
 702:	81 63       	ori	r24, 0x31	; 49
 704:	87 bb       	out	0x17, r24	; 23
  ///Switch off all devices
  PORT_CS |=_BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
 706:	88 b3       	in	r24, 0x18	; 24
 708:	81 63       	ori	r24, 0x31	; 49
 70a:	88 bb       	out	0x18, r24	; 24
  
  ///Enable SPI, Master, set clock rate
  ///@todo Check frequency 
  SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
 70c:	83 e5       	ldi	r24, 0x53	; 83
 70e:	8d b9       	out	0x0d, r24	; 13
 710:	08 95       	ret

00000712 <init_SPI_trans>:
}

void init_SPI_trans(uint8_t CS_pin){
  
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |=_BV(SLAVE)|_BV(CC1020)|_BV(ADC_S);
 712:	98 b3       	in	r25, 0x18	; 24
 714:	91 63       	ori	r25, 0x31	; 49
 716:	98 bb       	out	0x18, r25	; 24
  cbi (PORT_CS, CS_pin);
 718:	98 b3       	in	r25, 0x18	; 24
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <init_SPI_trans+0x12>
 720:	22 0f       	add	r18, r18
 722:	33 1f       	adc	r19, r19
 724:	8a 95       	dec	r24
 726:	e2 f7       	brpl	.-8      	; 0x720 <init_SPI_trans+0xe>
 728:	20 95       	com	r18
 72a:	92 23       	and	r25, r18
 72c:	98 bb       	out	0x18, r25	; 24
 72e:	08 95       	ret

00000730 <SPI_send>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 730:	61 15       	cp	r22, r1
 732:	71 05       	cpc	r23, r1
 734:	51 f0       	breq	.+20     	; 0x74a <SPI_send+0x1a>
 736:	fc 01       	movw	r30, r24
 738:	86 0f       	add	r24, r22
 73a:	97 1f       	adc	r25, r23
  {
	 ///* Send one char
    SPDR = str[i];
 73c:	21 91       	ld	r18, Z+
 73e:	2f b9       	out	0x0f, r18	; 15
	 ///* Wait for SPIF flag to be set (TX complete)
    while(!(SPSR & (1<<SPIF)));
 740:	77 9b       	sbis	0x0e, 7	; 14
 742:	fe cf       	rjmp	.-4      	; 0x740 <SPI_send+0x10>

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
 744:	e8 17       	cp	r30, r24
 746:	f9 07       	cpc	r31, r25
 748:	c9 f7       	brne	.-14     	; 0x73c <SPI_send+0xc>
 74a:	08 95       	ret

0000074c <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
 74c:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 74e:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 750:	e5 e9       	ldi	r30, 0x95	; 149
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 756:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 758:	8a b1       	in	r24, 0x0a	; 10
 75a:	88 61       	ori	r24, 0x18	; 24
 75c:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 75e:	80 81       	ld	r24, Z
 760:	8e 60       	ori	r24, 0x0E	; 14
 762:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 764:	87 e6       	ldi	r24, 0x67	; 103
 766:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 768:	10 92 90 00 	sts	0x0090, r1
 76c:	08 95       	ret

0000076e <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 76e:	5d 9b       	sbis	0x0b, 5	; 11
 770:	fe cf       	rjmp	.-4      	; 0x76e <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 772:	8c b9       	out	0x0c, r24	; 12
 774:	08 95       	ret

00000776 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 776:	fc 01       	movw	r30, r24
 778:	20 81       	ld	r18, Z
 77a:	22 23       	and	r18, r18
 77c:	39 f0       	breq	.+14     	; 0x78c <transmit_string_UART0+0x16>
 77e:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 780:	5d 9b       	sbis	0x0b, 5	; 11
 782:	fe cf       	rjmp	.-4      	; 0x780 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 784:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 786:	21 91       	ld	r18, Z+
 788:	21 11       	cpse	r18, r1
 78a:	fa cf       	rjmp	.-12     	; 0x780 <transmit_string_UART0+0xa>
 78c:	08 95       	ret

0000078e <_exit>:
 78e:	f8 94       	cli

00000790 <__stop_program>:
 790:	ff cf       	rjmp	.-2      	; 0x790 <__stop_program>
