
hMaster_Preflighttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00001d28  00001dbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  00800344  00800344  00002000  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000042b4  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010f7  00000000  00000000  00006620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001430  00000000  00000000  00007717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000704  00000000  00000000  00008b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000077c  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001566  00000000  00000000  000099c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  0000af2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

void timer_reset_two_sec(void){
  ///@todo Confirm the configuration of the Timer
  
  ///* Clear Timer Compare Flag
  sbi(TIFR, OCF1A);
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  
  ///* Stop Timer
  TCCR1B = 0x00;
  
  ///* Reset Count
  TCNT1H = 0;
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  TCNT1L = 0;
  
  ///* Output compare match value 8 MHz clock
  OCR1A = TIMER_TWO_SEC;
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  
  ///* Start Timer
  TCCR1A = 0x00; 
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  TCCR1B = 0x05;
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e2       	ldi	r30, 0x28	; 40
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 33       	cpi	r26, 0x3E	; 62
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <main>
      c6:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <update_crc_16>:
  frame[size++] = AX_PID;
  
  memcpy(frame + size, data, HM_SIZE);
  size += HM_SIZE;
  
  crc = calculate_crc_16(frame + 1, FRAME_SIZE - 4);
      ce:	98 e0       	ldi	r25, 0x08	; 8
      d0:	26 2f       	mov	r18, r22
  
  memcpy(frame + size, &crc, 2);
      d2:	21 70       	andi	r18, 0x01	; 1
      d4:	76 95       	lsr	r23
      d6:	67 95       	ror	r22
  size += 2;
  
  frame[size] = AX_FLAG;
      d8:	38 2f       	mov	r19, r24
      da:	31 70       	andi	r19, 0x01	; 1
  
}
      dc:	32 17       	cp	r19, r18
      de:	21 f0       	breq	.+8      	; 0xe8 <update_crc_16+0x1a>
      e0:	28 e0       	ldi	r18, 0x08	; 8
      e2:	62 27       	eor	r22, r18
      e4:	24 e8       	ldi	r18, 0x84	; 132
      e6:	72 27       	eor	r23, r18
      e8:	86 95       	lsr	r24
      ea:	91 50       	subi	r25, 0x01	; 1
      ec:	89 f7       	brne	.-30     	; 0xd0 <update_crc_16+0x2>
      ee:	cb 01       	movw	r24, r22
      f0:	08 95       	ret

000000f2 <WriteToCC1020Register>:
/****************************************************************************/
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	d8 2f       	mov	r29, r24
      f8:	c6 2f       	mov	r28, r22
	init_SPI_trans(CC1020);
      fa:	84 e0       	ldi	r24, 0x04	; 4
      fc:	0e 94 8a 09 	call	0x1314	; 0x1314 <init_SPI_trans>
  
	addr = (addr << 1) | 0x01;
     100:	8d 2f       	mov	r24, r29
     102:	88 0f       	add	r24, r24
	SPI_transfer(addr);
     104:	81 60       	ori	r24, 0x01	; 1
     106:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
	SPI_transfer(data);
     10a:	8c 2f       	mov	r24, r28
     10c:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
  
	end_SPI();
     110:	0e 94 ac 09 	call	0x1358	; 0x1358 <end_SPI>
}
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <ReadFromCC1020Register>:
/****************************************************************************/
/*  This routine reads from a single CC1020 register                        */
/****************************************************************************/

unsigned char ReadFromCC1020Register(unsigned char addr)
{
     11a:	cf 93       	push	r28
     11c:	c8 2f       	mov	r28, r24
	init_SPI_trans(CC1020);
     11e:	84 e0       	ldi	r24, 0x04	; 4
     120:	0e 94 8a 09 	call	0x1314	; 0x1314 <init_SPI_trans>
  
	char Value;
	addr = (addr << 1) & 0xFE;
	SPI_transfer(addr);
     124:	8c 2f       	mov	r24, r28
     126:	88 0f       	add	r24, r24
     128:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
  
	Value = SPI_transfer(0xFF);
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
     132:	c8 2f       	mov	r28, r24
  
	end_SPI();
     134:	0e 94 ac 09 	call	0x1358	; 0x1358 <end_SPI>
	return Value;
}
     138:	8c 2f       	mov	r24, r28
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <SetupCC1020PD>:
/*  followed by SetupCC1020RX or WakeupCC1020ToTX followed by SetupCC1020TX */
/*  to wake up from power down                                              */
/****************************************************************************/

void SetupCC1020PD(void)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
  
  // Put CC1020 into power-down
  WriteToCC1020Register(CC1020_MAIN,0x1F);
     142:	6f e1       	ldi	r22, 0x1F	; 31
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
  
  x = ReadFromCC1020Register(CC1020_MAIN);
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     150:	80 93 b2 03 	sts	0x03B2, r24
  sprintf(arr, "\rRead: %x\r\n", x);
     154:	1f 92       	push	r1
     156:	8f 93       	push	r24
     158:	88 e0       	ldi	r24, 0x08	; 8
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	9f 93       	push	r25
     15e:	8f 93       	push	r24
     160:	ce e4       	ldi	r28, 0x4E	; 78
     162:	d3 e0       	ldi	r29, 0x03	; 3
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
  send_preflight(arr, strlen(arr));
     16c:	09 90       	ld	r0, Y+
     16e:	00 20       	and	r0, r0
     170:	e9 f7       	brne	.-6      	; 0x16c <SetupCC1020PD+0x2e>
     172:	21 97       	sbiw	r28, 0x01	; 1
     174:	be 01       	movw	r22, r28
     176:	6e 54       	subi	r22, 0x4E	; 78
     178:	73 40       	sbci	r23, 0x03	; 3
     17a:	8e e4       	ldi	r24, 0x4E	; 78
     17c:	93 e0       	ldi	r25, 0x03	; 3
     17e:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>

  // Turn off PA to minimise current draw
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	8c e1       	ldi	r24, 0x1C	; 28
     186:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <ResetCC1020>:
/****************************************************************************/  

void ResetCC1020(void)
{
  // Reset CC1020
  WriteToCC1020Register(CC1020_MAIN, 0x0E);
     19c:	6e e0       	ldi	r22, 0x0E	; 14
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Bring CC1020 out of reset
  WriteToCC1020Register(CC1020_MAIN, 0x1F);
     1a4:	6f e1       	ldi	r22, 0x1F	; 31
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     1ac:	08 95       	ret

000001ae <SetupCC1020Allregisters>:
/****************************************************************************/
/*  This routine configures all CC1020 registers as per values stored in DefaultConfig433[] */
/****************************************************************************/

void SetupCC1020Allregisters(void)
{
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	cb e7       	ldi	r28, 0x7B	; 123
     1b6:	d1 e0       	ldi	r29, 0x01	; 1
  char counter, value;
  
  for(counter = 0x01; counter <= 0x20; counter++)
     1b8:	11 e0       	ldi	r17, 0x01	; 1
  {
    value = DefaultConfig433[counter - 1];				// For Transmitter as well as Receiver
     1ba:	69 91       	ld	r22, Y+
    WriteToCC1020Register(counter, value);
     1bc:	81 2f       	mov	r24, r17
     1be:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

void SetupCC1020Allregisters(void)
{
  char counter, value;
  
  for(counter = 0x01; counter <= 0x20; counter++)
     1c2:	1f 5f       	subi	r17, 0xFF	; 255
     1c4:	11 32       	cpi	r17, 0x21	; 33
     1c6:	c9 f7       	brne	.-14     	; 0x1ba <SetupCC1020Allregisters+0xc>
  {
    value = DefaultConfig433[counter - 1];				// For Transmitter as well as Receiver
    WriteToCC1020Register(counter, value);
  }
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	08 95       	ret

000001d0 <WakeUpCC1020ToRX>:
/****************************************************************************/
/*  This routine wakes the CC1020 up from PD mode to RX mode                */
/****************************************************************************/

void WakeUpCC1020ToRX(char RXANALOG1)
{
     1d0:	cf 93       	push	r28
     1d2:	c8 2f       	mov	r28, r24
  //volatile int i;

  // Turn on xtal oscillator core
  WriteToCC1020Register(CC1020_MAIN,0x1B);
     1d4:	6b e1       	ldi	r22, 0x1B	; 27
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,RXANALOG1);
     1dc:	6c 2f       	mov	r22, r28
     1de:	87 e1       	ldi	r24, 0x17	; 23
     1e0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e4:	8f e6       	ldi	r24, 0x6F	; 111
     1e6:	97 e1       	ldi	r25, 0x17	; 23
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <WakeUpCC1020ToRX+0x18>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <WakeUpCC1020ToRX+0x1e>
     1ee:	00 00       	nop
  // typically takes 2-5ms.
  //for (i=0x0260; i > 0; i--);
	_delay_ms(3);

  // Turn on bias generator
  WriteToCC1020Register(CC1020_MAIN,0x19);
     1f0:	69 e1       	ldi	r22, 0x19	; 25
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f8:	8b e2       	ldi	r24, 0x2B	; 43
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <WakeUpCC1020ToRX+0x2c>
     200:	00 c0       	rjmp	.+0      	; 0x202 <WakeUpCC1020ToRX+0x32>
     202:	00 00       	nop
  // Wait for 150 usec
  //for (int i=0x0010; i > 0; i--);
	_delay_us(150);

  // Turn on frequency synthesiser
  WriteToCC1020Register(CC1020_MAIN,0x11);
     204:	61 e1       	ldi	r22, 0x11	; 17
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
}
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <WakeUpCC1020ToTX>:
/*  This routine wakes the CC1020 up from PD mode to TX mode. CC is still in 
	power down mode 		*/
/****************************************************************************/

void WakeUpCC1020ToTX(char TXANALOG1)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	c8 2f       	mov	r28, r24
  // Turn on xtal oscillator core
  WriteToCC1020Register(CC1020_MAIN,0xDB);
     216:	6b ed       	ldi	r22, 0xDB	; 219
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,TXANALOG1);
     21e:	6c 2f       	mov	r22, r28
     220:	87 e1       	ldi	r24, 0x17	; 23
     222:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	8f e6       	ldi	r24, 0x6F	; 111
     228:	97 e1       	ldi	r25, 0x17	; 23
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <WakeUpCC1020ToTX+0x1a>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <WakeUpCC1020ToTX+0x20>
     230:	00 00       	nop
  // Insert wait routine here, must wait for xtal oscillator to stabilise, 
  // typically takes 2-5ms.
	_delay_ms(3);

  // Turn on bias generator
  WriteToCC1020Register(CC1020_MAIN,0xD9);
     232:	69 ed       	ldi	r22, 0xD9	; 217
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	8b e2       	ldi	r24, 0x2B	; 43
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <WakeUpCC1020ToTX+0x2e>
     242:	00 c0       	rjmp	.+0      	; 0x244 <WakeUpCC1020ToTX+0x34>
     244:	00 00       	nop

  // Wait for 150 usec
	_delay_us(150);		

  // Turn on frequency synthesiser
  WriteToCC1020Register(CC1020_MAIN,0xD1);
     246:	61 ed       	ldi	r22, 0xD1	; 209
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
  
  x = ReadFromCC1020Register(CC1020_MAIN);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     254:	80 93 b2 03 	sts	0x03B2, r24
  sprintf(arr, "Read: %x\r\n", x);
     258:	1f 92       	push	r1
     25a:	8f 93       	push	r24
     25c:	89 e0       	ldi	r24, 0x09	; 9
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	9f 93       	push	r25
     262:	8f 93       	push	r24
     264:	ce e4       	ldi	r28, 0x4E	; 78
     266:	d3 e0       	ldi	r29, 0x03	; 3
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
  send_preflight(arr, strlen(arr));
     270:	09 90       	ld	r0, Y+
     272:	00 20       	and	r0, r0
     274:	e9 f7       	brne	.-6      	; 0x270 <WakeUpCC1020ToTX+0x60>
     276:	21 97       	sbiw	r28, 0x01	; 1
     278:	be 01       	movw	r22, r28
     27a:	6e 54       	subi	r22, 0x4E	; 78
     27c:	73 40       	sbci	r23, 0x03	; 3
     27e:	8e e4       	ldi	r24, 0x4E	; 78
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
  
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <CalibrateCC1020>:
/*  Returns 0 if calibration fails, non-zero otherwise. Checks the LOCK     */
/*  to check for success.                                                   */
/****************************************************************************/

int CalibrateCC1020(char PA_POWER1)
{
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	d8 2e       	mov	r13, r24
  int TimeOutCounter;
  int nCalAttempt;

  // Turn off PA to avoid spurs during calibration in TX mode
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	8c e1       	ldi	r24, 0x1C	; 28
     2ac:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     2b0:	04 e0       	ldi	r16, 0x04	; 4
     2b2:	10 e0       	ldi	r17, 0x00	; 0

    // Monitor calibration complete bit in STATUS register
    // CAL_COMPLETE bit set to 1 when calibration is complete
    // Waiting time according to register settings is approx 27ms. Ref_freq=fosc/2 and CAL_WAIT = 11
    // We are waiting for 30ms
    for(TimeOutCounter = 30; ((ReadFromCC1020Register(CC1020_STATUS) & 0x80) == 0x00) && (TimeOutCounter > 0); TimeOutCounter--)
     2b4:	0f 2e       	mov	r0, r31
     2b6:	ff e1       	ldi	r31, 0x1F	; 31
     2b8:	ef 2e       	mov	r14, r31
     2ba:	f0 2d       	mov	r31, r0
     2bc:	f1 2c       	mov	r15, r1
  // Calibrate, and re-calibrate if necessary:
  for (nCalAttempt = CAL_ATTEMPT_MAX; nCalAttempt > 0; nCalAttempt--) 
  {

    // Start calibration
    WriteToCC1020Register(CC1020_CALIBRATE,0xB4);            // verified with cc1020 datasheet
     2be:	64 eb       	ldi	r22, 0xB4	; 180
     2c0:	8b e1       	ldi	r24, 0x1B	; 27
     2c2:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
     2c6:	87 ec       	ldi	r24, 0xC7	; 199
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <CalibrateCC1020+0x32>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <CalibrateCC1020+0x38>
     2d0:	00 00       	nop

    // Monitor calibration complete bit in STATUS register
    // CAL_COMPLETE bit set to 1 when calibration is complete
    // Waiting time according to register settings is approx 27ms. Ref_freq=fosc/2 and CAL_WAIT = 11
    // We are waiting for 30ms
    for(TimeOutCounter = 30; ((ReadFromCC1020Register(CC1020_STATUS) & 0x80) == 0x00) && (TimeOutCounter > 0); TimeOutCounter--)
     2d2:	ce 2d       	mov	r28, r14
     2d4:	df 2d       	mov	r29, r15
     2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <CalibrateCC1020+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d8:	8f ec       	ldi	r24, 0xCF	; 207
     2da:	97 e0       	ldi	r25, 0x07	; 7
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <CalibrateCC1020+0x44>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <CalibrateCC1020+0x4a>
     2e2:	00 00       	nop
     2e4:	80 e4       	ldi	r24, 0x40	; 64
     2e6:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     2ea:	88 23       	and	r24, r24
     2ec:	1c f4       	brge	.+6      	; 0x2f4 <CalibrateCC1020+0x5c>
     2ee:	ce 2d       	mov	r28, r14
     2f0:	df 2d       	mov	r29, r15
     2f2:	0a c0       	rjmp	.+20     	; 0x308 <CalibrateCC1020+0x70>
     2f4:	21 97       	sbiw	r28, 0x01	; 1
     2f6:	20 97       	sbiw	r28, 0x00	; 0
     2f8:	79 f7       	brne	.-34     	; 0x2d8 <CalibrateCC1020+0x40>
     2fa:	f9 cf       	rjmp	.-14     	; 0x2ee <CalibrateCC1020+0x56>
     2fc:	8f ec       	ldi	r24, 0xCF	; 207
     2fe:	97 e0       	ldi	r25, 0x07	; 7
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <CalibrateCC1020+0x68>
     304:	00 c0       	rjmp	.+0      	; 0x306 <CalibrateCC1020+0x6e>
     306:	00 00       	nop
      _delay_ms(1);
    
    // Monitor lock
    // LOCK_CONTINUOUS bit in STATUS register is set to 1 when PLL is in LOCK
    for(TimeOutCounter = 30; ((ReadFromCC1020Register(CC1020_STATUS) & 0x10) == 0x00) && (TimeOutCounter > 0); TimeOutCounter--)
     308:	80 e4       	ldi	r24, 0x40	; 64
     30a:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     30e:	84 fd       	sbrc	r24, 4
     310:	03 c0       	rjmp	.+6      	; 0x318 <CalibrateCC1020+0x80>
     312:	21 97       	sbiw	r28, 0x01	; 1
     314:	20 97       	sbiw	r28, 0x00	; 0
     316:	91 f7       	brne	.-28     	; 0x2fc <CalibrateCC1020+0x64>
      _delay_ms(1);	

    // Abort further recalibration attempts if successful LOCK
    if((ReadFromCC1020Register(CC1020_STATUS) & 0x10) == 0x10) 
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     31e:	84 fd       	sbrc	r24, 4
     320:	05 c0       	rjmp	.+10     	; 0x32c <CalibrateCC1020+0x94>
     322:	01 50       	subi	r16, 0x01	; 1
     324:	11 09       	sbc	r17, r1

  // Turn off PA to avoid spurs during calibration in TX mode
  WriteToCC1020Register(CC1020_PA_POWER,0x00);

  // Calibrate, and re-calibrate if necessary:
  for (nCalAttempt = CAL_ATTEMPT_MAX; nCalAttempt > 0; nCalAttempt--) 
     326:	01 15       	cp	r16, r1
     328:	11 05       	cpc	r17, r1
     32a:	49 f6       	brne	.-110    	; 0x2be <CalibrateCC1020+0x26>
    if((ReadFromCC1020Register(CC1020_STATUS) & 0x10) == 0x10) 
		 break;
  }

  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER, PA_POWER1);
     32c:	6d 2d       	mov	r22, r13
     32e:	8c e1       	ldi	r24, 0x1C	; 28
     330:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Return state of LOCK_CONTINUOUS bit
  return ((ReadFromCC1020Register(CC1020_STATUS) & 0x10) == 0x10);
     334:	80 e4       	ldi	r24, 0x40	; 64
     336:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
}
     33a:	82 95       	swap	r24
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	08 95       	ret

00000350 <init_CC1020>:
  sbi(DDR_TRX, DIO);
  sbi(PORT_TRX, DIO);
}

void init_CC1020 (void)
{  
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	6e 97       	sbiw	r28, 0x1e	; 30
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
	char buff[30];
  
	init_SPI_trans(CC1020);
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	0e 94 8a 09 	call	0x1314	; 0x1314 <init_SPI_trans>
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	84 e3       	ldi	r24, 0x34	; 52
     372:	9c e0       	ldi	r25, 0x0C	; 12
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <init_CC1020+0x24>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <init_CC1020+0x2e>
     37e:	00 00       	nop
	
	_delay_ms(500);
   
	SetupCC1020PD();
     380:	0e 94 9f 00 	call	0x13e	; 0x13e <SetupCC1020PD>
	ResetCC1020();//CC is still in PD (Power_Down mode) after reset
     384:	0e 94 ce 00 	call	0x19c	; 0x19c <ResetCC1020>
	SetupCC1020Allregisters();
     388:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SetupCC1020Allregisters>
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	84 e3       	ldi	r24, 0x34	; 52
     390:	9c e0       	ldi	r25, 0x0C	; 12
     392:	21 50       	subi	r18, 0x01	; 1
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	90 40       	sbci	r25, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <init_CC1020+0x42>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <init_CC1020+0x4c>
     39c:	00 00       	nop
	
	_delay_ms(500);
   
	WakeUpCC1020ToRX(RXANALOG);
     39e:	87 e4       	ldi	r24, 0x47	; 71
     3a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <WakeUpCC1020ToRX>
	if (CalibrateCC1020(PA_POWER)) 
     3a4:	80 ef       	ldi	r24, 0xF0	; 240
     3a6:	0e 94 4c 01 	call	0x298	; 0x298 <CalibrateCC1020>
     3aa:	89 2b       	or	r24, r25
     3ac:	29 f0       	breq	.+10     	; 0x3b8 <init_CC1020+0x68>
		transmit_string_UART0("\rRx config done....");
     3ae:	84 e1       	ldi	r24, 0x14	; 20
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <init_CC1020+0x70>
	else
		transmit_string_UART0("\rRx config error....\n\r");
     3b8:	88 e2       	ldi	r24, 0x28	; 40
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	84 e3       	ldi	r24, 0x34	; 52
     3c4:	9c e0       	ldi	r25, 0x0C	; 12
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <init_CC1020+0x76>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <init_CC1020+0x80>
     3d0:	00 00       	nop

	_delay_ms(500);
	
	WakeUpCC1020ToTX(TXANALOG);
     3d2:	87 e4       	ldi	r24, 0x47	; 71
     3d4:	0e 94 08 01 	call	0x210	; 0x210 <WakeUpCC1020ToTX>
  	if (!CalibrateCC1020(PA_POWER)) 
     3d8:	80 ef       	ldi	r24, 0xF0	; 240
     3da:	0e 94 4c 01 	call	0x298	; 0x298 <CalibrateCC1020>
     3de:	89 2b       	or	r24, r25
     3e0:	29 f4       	brne	.+10     	; 0x3ec <init_CC1020+0x9c>
		transmit_string_UART0("\rTx config error....\n\r");
     3e2:	8f e3       	ldi	r24, 0x3F	; 63
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <init_CC1020+0xa4>
	else 
		transmit_string_UART0("\rTx config done....\n\r");
     3ec:	86 e5       	ldi	r24, 0x56	; 86
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		
	sprintf(buff,"\n\r STATUS = %x",ReadFromCC1020Register(CC1020_STATUS));			// Expected value = 0xBX
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     3fa:	1f 92       	push	r1
     3fc:	8f 93       	push	r24
     3fe:	8c e6       	ldi	r24, 0x6C	; 108
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	8e 01       	movw	r16, r28
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	1f 93       	push	r17
     40e:	0f 93       	push	r16
     410:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
	transmit_string_UART0(buff);
     414:	c8 01       	movw	r24, r16
     416:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
}	
     426:	6e 96       	adiw	r28, 0x1e	; 30
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <SetupCC1020TX>:
/*  This routine puts the CC1020 into TX mode (from RX). When switching to  */
/*  TX from PD, use WakeupCC1020ToTX first                                  */
/****************************************************************************/

char SetupCC1020TX(char TXANALOG1, char PA_POWER1)
{
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	c8 2f       	mov	r28, r24
     444:	16 2f       	mov	r17, r22
  int TimeOutCounter;
  int lock_status;

  // Turn off PA to avoid frequency splatter
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	8c e1       	ldi	r24, 0x1C	; 28
     44a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,TXANALOG1);
     44e:	6c 2f       	mov	r22, r28
     450:	87 e1       	ldi	r24, 0x17	; 23
     452:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage
     456:	61 ec       	ldi	r22, 0xC1	; 193
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     45e:	cf e1       	ldi	r28, 0x1F	; 31
     460:	d0 e0       	ldi	r29, 0x00	; 0
     462:	06 c0       	rjmp	.+12     	; 0x470 <SetupCC1020TX+0x34>
     464:	8f ec       	ldi	r24, 0xCF	; 207
     466:	97 e0       	ldi	r25, 0x07	; 7
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <SetupCC1020TX+0x2c>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <SetupCC1020TX+0x32>
     46e:	00 00       	nop
     470:	80 e4       	ldi	r24, 0x40	; 64
     472:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     476:	84 fd       	sbrc	r24, 4
     478:	03 c0       	rjmp	.+6      	; 0x480 <SetupCC1020TX+0x44>
     47a:	21 97       	sbiw	r28, 0x01	; 1
     47c:	20 97       	sbiw	r28, 0x00	; 0
     47e:	91 f7       	brne	.-28     	; 0x464 <SetupCC1020TX+0x28>
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
     480:	80 e4       	ldi	r24, 0x40	; 64
     482:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     486:	84 fd       	sbrc	r24, 4
     488:	08 c0       	rjmp	.+16     	; 0x49a <SetupCC1020TX+0x5e>
    lock_status = TRUE;
    
  else	// if PLL is not locked then Recalibrate
  {
    // If recalibration ok
		if(CalibrateCC1020(PA_POWER1))
     48a:	81 2f       	mov	r24, r17
     48c:	0e 94 4c 01 	call	0x298	; 0x298 <CalibrateCC1020>
     490:	c1 e0       	ldi	r28, 0x01	; 1
     492:	89 2b       	or	r24, r25
     494:	19 f4       	brne	.+6      	; 0x49c <SetupCC1020TX+0x60>
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	01 c0       	rjmp	.+2      	; 0x49c <SetupCC1020TX+0x60>
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
    _delay_ms(1);
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
    lock_status = TRUE;
     49a:	c1 e0       	ldi	r28, 0x01	; 1
    else
      lock_status = FALSE;
  }

  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER,PA_POWER1);
     49c:	61 2f       	mov	r22, r17
     49e:	8c e1       	ldi	r24, 0x1C	; 28
     4a0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Turn OFF DCLK_CS (Carrier Sense Squelch) in TX
  WriteToCC1020Register(CC1020_INTERFACE,ReadFromCC1020Register(CC1020_INTERFACE) & (~0x10));
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 8d 00 	call	0x11a	; 0x11a <ReadFromCC1020Register>
     4aa:	68 2f       	mov	r22, r24
     4ac:	6f 7e       	andi	r22, 0xEF	; 239
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>
  
  // Configure LOCK pin to continuous lock status. Active low indicates PLL in lock
  WriteToCC1020Register(CC1020_LOCK,0x20);
     4b4:	60 e2       	ldi	r22, 0x20	; 32
     4b6:	85 e1       	ldi	r24, 0x15	; 21
     4b8:	0e 94 79 00 	call	0xf2	; 0xf2 <WriteToCC1020Register>

  // Return LOCK status to application
  return (lock_status);
}
     4bc:	8c 2f       	mov	r24, r28
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret

000004c6 <init_CC1020_TX>:
	transmit_string_UART0(buff);
}	
	
int init_CC1020_TX (void)
{  
	sbi(DDR_TRX, DIO);
     4c6:	15 9a       	sbi	0x02, 5	; 2
	sbi(PORT_TRX, DIO);
     4c8:	1d 9a       	sbi	0x03, 5	; 3
	WakeUpCC1020ToTX(TXANALOG);													
     4ca:	87 e4       	ldi	r24, 0x47	; 71
     4cc:	0e 94 08 01 	call	0x210	; 0x210 <WakeUpCC1020ToTX>
	return SetupCC1020TX(TXANALOG,PA_POWER);
     4d0:	60 ef       	ldi	r22, 0xF0	; 240
     4d2:	87 e4       	ldi	r24, 0x47	; 71
     4d4:	0e 94 1e 02 	call	0x43c	; 0x43c <SetupCC1020TX>
}
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	08 95       	ret

000004dc <init_UART_GPS>:
volatile struct GPS_reading gps;

void init_UART_GPS(void )
{

  UCSR0A = 0;
     4dc:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
     4de:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
     4e0:	e5 e9       	ldi	r30, 0x95	; 149
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
     4e6:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
     4e8:	8a b1       	in	r24, 0x0a	; 10
     4ea:	88 61       	ori	r24, 0x18	; 24
     4ec:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
     4ee:	80 81       	ld	r24, Z
     4f0:	8e 60       	ori	r24, 0x0E	; 14
     4f2:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
     4f4:	87 e6       	ldi	r24, 0x67	; 103
     4f6:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
     4f8:	10 92 90 00 	sts	0x0090, r1
     4fc:	08 95       	ret

000004fe <__vector_18>:
}

/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	0b b6       	in	r0, 0x3b	; 59
     50a:	0f 92       	push	r0
     50c:	2f 93       	push	r18
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	af 93       	push	r26
     514:	bf 93       	push	r27
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
  
  ///Buffer the Received Byte
  last_byte = UDR0;
     51a:	8c b1       	in	r24, 0x0c	; 12
     51c:	80 93 45 03 	sts	0x0345, r24
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
     520:	80 91 46 03 	lds	r24, 0x0346
     524:	90 91 47 03 	lds	r25, 0x0347
     528:	a0 91 48 03 	lds	r26, 0x0348
     52c:	b0 91 49 03 	lds	r27, 0x0349
     530:	ba 2f       	mov	r27, r26
     532:	a9 2f       	mov	r26, r25
     534:	98 2f       	mov	r25, r24
     536:	88 27       	eor	r24, r24
     538:	80 93 46 03 	sts	0x0346, r24
     53c:	90 93 47 03 	sts	0x0347, r25
     540:	a0 93 48 03 	sts	0x0348, r26
     544:	b0 93 49 03 	sts	0x0349, r27
  buffer &= 0xFFFFFF00;
     548:	80 91 46 03 	lds	r24, 0x0346
     54c:	90 91 47 03 	lds	r25, 0x0347
     550:	a0 91 48 03 	lds	r26, 0x0348
     554:	b0 91 49 03 	lds	r27, 0x0349
     558:	88 27       	eor	r24, r24
     55a:	80 93 46 03 	sts	0x0346, r24
     55e:	90 93 47 03 	sts	0x0347, r25
     562:	a0 93 48 03 	sts	0x0348, r26
     566:	b0 93 49 03 	sts	0x0349, r27
  buffer |= (uint32_t) last_byte;
     56a:	20 91 45 03 	lds	r18, 0x0345
     56e:	80 91 46 03 	lds	r24, 0x0346
     572:	90 91 47 03 	lds	r25, 0x0347
     576:	a0 91 48 03 	lds	r26, 0x0348
     57a:	b0 91 49 03 	lds	r27, 0x0349
     57e:	82 2b       	or	r24, r18
     580:	80 93 46 03 	sts	0x0346, r24
     584:	90 93 47 03 	sts	0x0347, r25
     588:	a0 93 48 03 	sts	0x0348, r26
     58c:	b0 93 49 03 	sts	0x0349, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
     590:	80 91 06 01 	lds	r24, 0x0106
     594:	8c 30       	cpi	r24, 0x0C	; 12
     596:	a0 f4       	brcc	.+40     	; 0x5c0 <__vector_18+0xc2>
  {
    
    ///* Put the data into the structure
    *((uint8_t *)&gps.x + pos) = last_byte;
     598:	e0 91 06 01 	lds	r30, 0x0106
     59c:	80 91 45 03 	lds	r24, 0x0345
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ed 54       	subi	r30, 0x4D	; 77
     5a4:	fc 4f       	sbci	r31, 0xFC	; 252
     5a6:	80 83       	st	Z, r24
    
    ///* Increment position and terminate it if full
    pos++;
     5a8:	80 91 06 01 	lds	r24, 0x0106
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	80 93 06 01 	sts	0x0106, r24
    if(pos == 12)
     5b2:	80 91 06 01 	lds	r24, 0x0106
     5b6:	8c 30       	cpi	r24, 0x0C	; 12
     5b8:	19 f4       	brne	.+6      	; 0x5c0 <__vector_18+0xc2>
      pos = 0xFF;
     5ba:	8f ef       	ldi	r24, 0xFF	; 255
     5bc:	80 93 06 01 	sts	0x0106, r24
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
     5c0:	80 91 05 01 	lds	r24, 0x0105
     5c4:	8c 30       	cpi	r24, 0x0C	; 12
     5c6:	a0 f4       	brcc	.+40     	; 0x5f0 <__vector_18+0xf2>
  {
    *((uint8_t *)&gps.v_x + vel) = last_byte;
     5c8:	e0 91 05 01 	lds	r30, 0x0105
     5cc:	80 91 45 03 	lds	r24, 0x0345
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	e1 54       	subi	r30, 0x41	; 65
     5d4:	fc 4f       	sbci	r31, 0xFC	; 252
     5d6:	80 83       	st	Z, r24
    
    vel++;
     5d8:	80 91 05 01 	lds	r24, 0x0105
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
     5de:	80 93 05 01 	sts	0x0105, r24
    if(vel == 12)
     5e2:	80 91 05 01 	lds	r24, 0x0105
     5e6:	8c 30       	cpi	r24, 0x0C	; 12
     5e8:	19 f4       	brne	.+6      	; 0x5f0 <__vector_18+0xf2>
      vel = 0xFF;
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 05 01 	sts	0x0105, r24
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
     5f0:	80 91 04 01 	lds	r24, 0x0104
     5f4:	84 30       	cpi	r24, 0x04	; 4
     5f6:	c0 f4       	brcc	.+48     	; 0x628 <__vector_18+0x12a>
  {
    if(dop >= 2)
     5f8:	80 91 04 01 	lds	r24, 0x0104
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	40 f0       	brcs	.+16     	; 0x610 <__vector_18+0x112>
      *((uint8_t *)&pdop + (dop - 2)) = last_byte;
     600:	e0 91 04 01 	lds	r30, 0x0104
     604:	80 91 45 03 	lds	r24, 0x0345
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	e2 50       	subi	r30, 0x02	; 2
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	80 83       	st	Z, r24
      
    dop++;
     610:	80 91 04 01 	lds	r24, 0x0104
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	80 93 04 01 	sts	0x0104, r24
    if(dop == 4)
     61a:	80 91 04 01 	lds	r24, 0x0104
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	19 f4       	brne	.+6      	; 0x628 <__vector_18+0x12a>
      dop = 0xFF;
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	80 93 04 01 	sts	0x0104, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
     628:	80 91 03 01 	lds	r24, 0x0103
     62c:	80 31       	cpi	r24, 0x10	; 16
     62e:	c0 f4       	brcc	.+48     	; 0x660 <__vector_18+0x162>
  {
    if(geo >= 4)
     630:	80 91 03 01 	lds	r24, 0x0103
     634:	84 30       	cpi	r24, 0x04	; 4
     636:	40 f0       	brcs	.+16     	; 0x648 <__vector_18+0x14a>
    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
     638:	e0 91 03 01 	lds	r30, 0x0103
     63c:	80 91 45 03 	lds	r24, 0x0345
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	e9 53       	subi	r30, 0x39	; 57
     644:	fc 4f       	sbci	r31, 0xFC	; 252
     646:	80 83       	st	Z, r24
    
    geo++;
     648:	80 91 03 01 	lds	r24, 0x0103
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	80 93 03 01 	sts	0x0103, r24
    if(geo == 16)
     652:	80 91 03 01 	lds	r24, 0x0103
     656:	80 31       	cpi	r24, 0x10	; 16
     658:	19 f4       	brne	.+6      	; 0x660 <__vector_18+0x162>
      geo = 0xFF;
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	80 93 03 01 	sts	0x0103, r24
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
     660:	80 91 02 01 	lds	r24, 0x0102
     664:	87 30       	cpi	r24, 0x07	; 7
     666:	b8 f4       	brcc	.+46     	; 0x696 <__vector_18+0x198>
  {
    *((uint8_t *)&gps.hours + time) = last_byte;
     668:	e0 91 02 01 	lds	r30, 0x0102
     66c:	80 91 45 03 	lds	r24, 0x0345
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	e9 52       	subi	r30, 0x29	; 41
     674:	fc 4f       	sbci	r31, 0xFC	; 252
     676:	80 83       	st	Z, r24
    
    time++;
     678:	80 91 02 01 	lds	r24, 0x0102
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	80 93 02 01 	sts	0x0102, r24
    if(time == 7)
     682:	80 91 02 01 	lds	r24, 0x0102
     686:	87 30       	cpi	r24, 0x07	; 7
     688:	31 f4       	brne	.+12     	; 0x696 <__vector_18+0x198>
    {
      time = 0xFF;
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	80 93 02 01 	sts	0x0102, r24
      ///* * The Entire message has been read
      message_end = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 93 44 03 	sts	0x0344, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
     696:	80 91 46 03 	lds	r24, 0x0346
     69a:	90 91 47 03 	lds	r25, 0x0347
     69e:	a0 91 48 03 	lds	r26, 0x0348
     6a2:	b0 91 49 03 	lds	r27, 0x0349
     6a6:	8c 3a       	cpi	r24, 0xAC	; 172
     6a8:	94 40       	sbci	r25, 0x04	; 4
     6aa:	af 43       	sbci	r26, 0x3F	; 63
     6ac:	bf 43       	sbci	r27, 0x3F	; 63
     6ae:	29 f4       	brne	.+10     	; 0x6ba <__vector_18+0x1bc>
  {
    message_end = 0;
     6b0:	10 92 44 03 	sts	0x0344, r1
    pos = 0;
     6b4:	10 92 06 01 	sts	0x0106, r1
     6b8:	3f c0       	rjmp	.+126    	; 0x738 <__vector_18+0x23a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
     6ba:	80 91 46 03 	lds	r24, 0x0346
     6be:	90 91 47 03 	lds	r25, 0x0347
     6c2:	a0 91 48 03 	lds	r26, 0x0348
     6c6:	b0 91 49 03 	lds	r27, 0x0349
     6ca:	8c 3a       	cpi	r24, 0xAC	; 172
     6cc:	95 40       	sbci	r25, 0x05	; 5
     6ce:	af 43       	sbci	r26, 0x3F	; 63
     6d0:	bf 43       	sbci	r27, 0x3F	; 63
     6d2:	19 f4       	brne	.+6      	; 0x6da <__vector_18+0x1dc>
    vel = 0;
     6d4:	10 92 05 01 	sts	0x0105, r1
     6d8:	2f c0       	rjmp	.+94     	; 0x738 <__vector_18+0x23a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
     6da:	80 91 46 03 	lds	r24, 0x0346
     6de:	90 91 47 03 	lds	r25, 0x0347
     6e2:	a0 91 48 03 	lds	r26, 0x0348
     6e6:	b0 91 49 03 	lds	r27, 0x0349
     6ea:	8c 3a       	cpi	r24, 0xAC	; 172
     6ec:	9b 40       	sbci	r25, 0x0B	; 11
     6ee:	af 43       	sbci	r26, 0x3F	; 63
     6f0:	bf 43       	sbci	r27, 0x3F	; 63
     6f2:	19 f4       	brne	.+6      	; 0x6fa <__vector_18+0x1fc>
    dop = 0;
     6f4:	10 92 04 01 	sts	0x0104, r1
     6f8:	1f c0       	rjmp	.+62     	; 0x738 <__vector_18+0x23a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
     6fa:	80 91 46 03 	lds	r24, 0x0346
     6fe:	90 91 47 03 	lds	r25, 0x0347
     702:	a0 91 48 03 	lds	r26, 0x0348
     706:	b0 91 49 03 	lds	r27, 0x0349
     70a:	8c 3a       	cpi	r24, 0xAC	; 172
     70c:	9e 40       	sbci	r25, 0x0E	; 14
     70e:	af 43       	sbci	r26, 0x3F	; 63
     710:	bf 43       	sbci	r27, 0x3F	; 63
     712:	19 f4       	brne	.+6      	; 0x71a <__vector_18+0x21c>
    geo = 0;
     714:	10 92 03 01 	sts	0x0103, r1
     718:	0f c0       	rjmp	.+30     	; 0x738 <__vector_18+0x23a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
     71a:	80 91 46 03 	lds	r24, 0x0346
     71e:	90 91 47 03 	lds	r25, 0x0347
     722:	a0 91 48 03 	lds	r26, 0x0348
     726:	b0 91 49 03 	lds	r27, 0x0349
     72a:	8c 3a       	cpi	r24, 0xAC	; 172
     72c:	9f 40       	sbci	r25, 0x0F	; 15
     72e:	af 43       	sbci	r26, 0x3F	; 63
     730:	bf 43       	sbci	r27, 0x3F	; 63
     732:	11 f4       	brne	.+4      	; 0x738 <__vector_18+0x23a>
    time = 0;
     734:	10 92 02 01 	sts	0x0102, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if((pdop < 500) && (pdop!=0) && message_end)
     738:	80 91 00 01 	lds	r24, 0x0100
     73c:	90 91 01 01 	lds	r25, 0x0101
     740:	84 3f       	cpi	r24, 0xF4	; 244
     742:	91 40       	sbci	r25, 0x01	; 1
     744:	f0 f4       	brcc	.+60     	; 0x782 <__vector_18+0x284>
     746:	80 91 00 01 	lds	r24, 0x0100
     74a:	90 91 01 01 	lds	r25, 0x0101
     74e:	89 2b       	or	r24, r25
     750:	c1 f0       	breq	.+48     	; 0x782 <__vector_18+0x284>
     752:	80 91 44 03 	lds	r24, 0x0344
     756:	88 23       	and	r24, r24
     758:	a1 f0       	breq	.+40     	; 0x782 <__vector_18+0x284>
  {
    GPS_done = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 07 01 	sts	0x0107, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
     760:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
    pdop = 0xFFFF;
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	9f ef       	ldi	r25, 0xFF	; 255
     766:	90 93 01 01 	sts	0x0101, r25
     76a:	80 93 00 01 	sts	0x0100, r24
    message_end = 0;
     76e:	10 92 44 03 	sts	0x0344, r1
    buffer = 0;
     772:	10 92 46 03 	sts	0x0346, r1
     776:	10 92 47 03 	sts	0x0347, r1
     77a:	10 92 48 03 	sts	0x0348, r1
     77e:	10 92 49 03 	sts	0x0349, r1
  }
}
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	2f 91       	pop	r18
     790:	0f 90       	pop	r0
     792:	0b be       	out	0x3b, r0	; 59
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <get_HM_data>:
#include "hm.h"
#include "twi.h"
#include "peripherals.h"

void get_HM_data(void)
{
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	c5 e2       	ldi	r28, 0x25	; 37
     7a8:	d4 e0       	ldi	r29, 0x04	; 4
     7aa:	0c e2       	ldi	r16, 0x2C	; 44
     7ac:	14 e0       	ldi	r17, 0x04	; 4
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
     7ae:	be 01       	movw	r22, r28
     7b0:	82 e2       	ldi	r24, 0x22	; 34
     7b2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_rec_byte>
     7b6:	21 96       	adiw	r28, 0x01	; 1
void get_HM_data(void)
{
  ///Counter for the 7 bytes of Health monitoring data
  uint8_t HMCounter;
  
  for(HMCounter = 0; HMCounter < 7; HMCounter++)
     7b8:	c0 17       	cp	r28, r16
     7ba:	d1 07       	cpc	r29, r17
     7bc:	c1 f7       	brne	.-16     	; 0x7ae <get_HM_data+0x10>
    ///* Receive each of the bytes by sending a write request to the power muc.
    ///* data stored in the hm structure with the same ordering as that in the power muc
    TWI_rec_byte(ADDR, ((uint8_t *) &Current_state.hm) + HMCounter);
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <blink>:
//@}


void blink (void)
{
	PORTA = 0xA0;
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	8b bb       	out	0x1b, r24	; 27
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	84 e3       	ldi	r24, 0x34	; 52
     7d0:	9c e0       	ldi	r25, 0x0C	; 12
     7d2:	21 50       	subi	r18, 0x01	; 1
     7d4:	80 40       	sbci	r24, 0x00	; 0
     7d6:	90 40       	sbci	r25, 0x00	; 0
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <blink+0xa>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <blink+0x14>
     7dc:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x50;
     7de:	80 e5       	ldi	r24, 0x50	; 80
     7e0:	8b bb       	out	0x1b, r24	; 27
     7e2:	2f ef       	ldi	r18, 0xFF	; 255
     7e4:	84 e3       	ldi	r24, 0x34	; 52
     7e6:	9c e0       	ldi	r25, 0x0C	; 12
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	80 40       	sbci	r24, 0x00	; 0
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <blink+0x20>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <blink+0x2a>
     7f2:	00 00       	nop
     7f4:	08 95       	ret

000007f6 <main>:

/************************************************************/
/*				Main begins									*/
/************************************************************/
int main(void)
{
     7f6:	2f 92       	push	r2
     7f8:	3f 92       	push	r3
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	c6 50       	subi	r28, 0x06	; 6
     820:	d1 40       	sbci	r29, 0x01	; 1
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
	char array1[40];
	char array2[40];
	char array3[40];
	
	DDRA = 0xF0;
     82c:	80 ef       	ldi	r24, 0xF0	; 240
     82e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xF0;
     830:	8b bb       	out	0x1b, r24	; 27
     832:	2f ef       	ldi	r18, 0xFF	; 255
     834:	89 e6       	ldi	r24, 0x69	; 105
     836:	98 e1       	ldi	r25, 0x18	; 24
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	90 40       	sbci	r25, 0x00	; 0
     83e:	e1 f7       	brne	.-8      	; 0x838 <main+0x42>
     840:	00 c0       	rjmp	.+0      	; 0x842 <main+0x4c>
     842:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     844:	1b ba       	out	0x1b, r1	; 27
     846:	ef ef       	ldi	r30, 0xFF	; 255
     848:	f9 e6       	ldi	r31, 0x69	; 105
     84a:	28 e1       	ldi	r18, 0x18	; 24
     84c:	e1 50       	subi	r30, 0x01	; 1
     84e:	f0 40       	sbci	r31, 0x00	; 0
     850:	20 40       	sbci	r18, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <main+0x56>
     854:	00 c0       	rjmp	.+0      	; 0x856 <main+0x60>
     856:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0xF0;
     858:	80 ef       	ldi	r24, 0xF0	; 240
     85a:	8b bb       	out	0x1b, r24	; 27
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	99 e6       	ldi	r25, 0x69	; 105
     860:	e8 e1       	ldi	r30, 0x18	; 24
     862:	81 50       	subi	r24, 0x01	; 1
     864:	90 40       	sbci	r25, 0x00	; 0
     866:	e0 40       	sbci	r30, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <main+0x6c>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <main+0x76>
     86c:	00 00       	nop
	_delay_ms(1000);
	PORTA = 0x00;
     86e:	1b ba       	out	0x1b, r1	; 27
     870:	ff ef       	ldi	r31, 0xFF	; 255
     872:	29 e6       	ldi	r18, 0x69	; 105
     874:	88 e1       	ldi	r24, 0x18	; 24
     876:	f1 50       	subi	r31, 0x01	; 1
     878:	20 40       	sbci	r18, 0x00	; 0
     87a:	80 40       	sbci	r24, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <main+0x80>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <main+0x8a>
     880:	00 00       	nop
	_delay_ms(1000);
	
	init_UART0();
     882:	0e 94 84 0a 	call	0x1508	; 0x1508 <init_UART0>
  
	transmit_UART0('\r');
     886:	8d e0       	ldi	r24, 0x0D	; 13
     888:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('\r');
     88c:	8d e0       	ldi	r24, 0x0D	; 13
     88e:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('H');
     892:	88 e4       	ldi	r24, 0x48	; 72
     894:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('e');
     898:	85 e6       	ldi	r24, 0x65	; 101
     89a:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('l');
     89e:	8c e6       	ldi	r24, 0x6C	; 108
     8a0:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('l');
     8a4:	8c e6       	ldi	r24, 0x6C	; 108
     8a6:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('o');
     8aa:	8f e6       	ldi	r24, 0x6F	; 111
     8ac:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	
	sprintf(array1,"\t..This is IITB's Student Satellite...\r");
     8b0:	88 e2       	ldi	r24, 0x28	; 40
     8b2:	e6 e1       	ldi	r30, 0x16	; 22
     8b4:	f3 e0       	ldi	r31, 0x03	; 3
     8b6:	de 01       	movw	r26, r28
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	01 90       	ld	r0, Z+
     8bc:	0d 92       	st	X+, r0
     8be:	8a 95       	dec	r24
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <main+0xc4>
	transmit_string_UART0(array1);
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>

	sprintf(array1,"\tThis is HUSSAIN's OBC-Master code...");
     8ca:	86 e2       	ldi	r24, 0x26	; 38
     8cc:	eb e9       	ldi	r30, 0x9B	; 155
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	de 01       	movw	r26, r28
     8d2:	11 96       	adiw	r26, 0x01	; 1
     8d4:	01 90       	ld	r0, Z+
     8d6:	0d 92       	st	X+, r0
     8d8:	8a 95       	dec	r24
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <main+0xde>
	int i;
	unsigned int bb;
	uint8_t frame[100], buf[100], x;
	
	/// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
	init_UART_MM();
     8dc:	0e 94 e7 07 	call	0xfce	; 0xfce <init_UART_MM>
     8e0:	9f ef       	ldi	r25, 0xFF	; 255
     8e2:	e0 e7       	ldi	r30, 0x70	; 112
     8e4:	f2 e0       	ldi	r31, 0x02	; 2
     8e6:	91 50       	subi	r25, 0x01	; 1
     8e8:	e0 40       	sbci	r30, 0x00	; 0
     8ea:	f0 40       	sbci	r31, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <main+0xf0>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <main+0xfa>
     8f0:	00 00       	nop
	_delay_ms(100);
	init_UART_GPS();
     8f2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <init_UART_GPS>
     8f6:	2f ef       	ldi	r18, 0xFF	; 255
     8f8:	80 e7       	ldi	r24, 0x70	; 112
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	21 50       	subi	r18, 0x01	; 1
     8fe:	80 40       	sbci	r24, 0x00	; 0
     900:	90 40       	sbci	r25, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <main+0x106>
     904:	00 c0       	rjmp	.+0      	; 0x906 <main+0x110>
     906:	00 00       	nop
	_delay_ms(100);
	init_SPI();
     908:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <init_SPI>
     90c:	ef ef       	ldi	r30, 0xFF	; 255
     90e:	f0 e7       	ldi	r31, 0x70	; 112
     910:	22 e0       	ldi	r18, 0x02	; 2
     912:	e1 50       	subi	r30, 0x01	; 1
     914:	f0 40       	sbci	r31, 0x00	; 0
     916:	20 40       	sbci	r18, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <main+0x11c>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <main+0x126>
     91c:	00 00       	nop
	_delay_ms(100);
	init_TWI();
     91e:	0e 94 14 0a 	call	0x1428	; 0x1428 <init_TWI>
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	90 e7       	ldi	r25, 0x70	; 112
     926:	e2 e0       	ldi	r30, 0x02	; 2
     928:	81 50       	subi	r24, 0x01	; 1
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e0 40       	sbci	r30, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <main+0x132>
     930:	00 c0       	rjmp	.+0      	; 0x932 <main+0x13c>
     932:	00 00       	nop
	_delay_ms(100);
	
	///Configure the Torquer
	configure_torquer();
     934:	0e 94 4c 08 	call	0x1098	; 0x1098 <configure_torquer>
     938:	ff ef       	ldi	r31, 0xFF	; 255
     93a:	20 e7       	ldi	r18, 0x70	; 112
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	f1 50       	subi	r31, 0x01	; 1
     940:	20 40       	sbci	r18, 0x00	; 0
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <main+0x148>
     946:	00 c0       	rjmp	.+0      	; 0x948 <main+0x152>
     948:	00 00       	nop
  	_delay_ms(100);
   
	///Configure CC1020
	init_CC1020();
     94a:	0e 94 a8 01 	call	0x350	; 0x350 <init_CC1020>
	
	///Set Preflight pin as input
	cbi(DDR_PF, PIN_PF);
     94e:	8e 98       	cbi	0x11, 6	; 17
  
	///* Switch on Global interrupts
	sei();
     950:	78 94       	sei
	
		/************************************************************/
		///* * Magnetometer and Torquer test

		sprintf(array2,"\rCurrent MagnetoMetr state is =\t");
		sprintf(array3,"\rGenerating Torquer Current for :\t");
     952:	7e 01       	movw	r14, r28
     954:	91 e5       	ldi	r25, 0x51	; 81
     956:	e9 0e       	add	r14, r25
     958:	f1 1c       	adc	r15, r1
		///* * Reading with one torquer on at once, in one direction
		transmit_string_UART0(array3);
		transmit_UART0('+');
		transmit_UART0('X');
		transmit_UART0('\r');
		Current_state.pwm.x_dir = 0;
     95a:	0f 2e       	mov	r0, r31
     95c:	f2 e3       	ldi	r31, 0x32	; 50
     95e:	2f 2e       	mov	r2, r31
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	3f 2e       	mov	r3, r31
     964:	f0 2d       	mov	r31, r0
		Current_state.pwm.x = 32768;
     966:	61 2c       	mov	r6, r1
     968:	68 94       	set
     96a:	77 24       	eor	r7, r7
     96c:	77 f8       	bld	r7, 7
		//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
		for(i=0;i<6;i++)
		{
			aa = Current_state.ss.reading[i];
			bb = (aa*3.3*100)/4096;
			sprintf(buffer, "%u\t", bb);
     96e:	0f 2e       	mov	r0, r31
     970:	fd e5       	ldi	r31, 0x5D	; 93
     972:	4f 2e       	mov	r4, r31
     974:	f2 e0       	ldi	r31, 0x02	; 2
     976:	5f 2e       	mov	r5, r31
     978:	f0 2d       	mov	r31, r0
     97a:	8e 01       	movw	r16, r28
     97c:	07 58       	subi	r16, 0x87	; 135
     97e:	1f 4f       	sbci	r17, 0xFF	; 255
     980:	cb 5f       	subi	r28, 0xFB	; 251
     982:	de 4f       	sbci	r29, 0xFE	; 254
     984:	08 83       	st	Y, r16
     986:	c5 50       	subi	r28, 0x05	; 5
     988:	d1 40       	sbci	r29, 0x01	; 1
     98a:	ca 5f       	subi	r28, 0xFA	; 250
     98c:	de 4f       	sbci	r29, 0xFE	; 254
     98e:	18 83       	st	Y, r17
     990:	c6 50       	subi	r28, 0x06	; 6
     992:	d1 40       	sbci	r29, 0x01	; 1
	sei();
  
/************************************************************/
	while(1)
	{
	blink();
     994:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
	
	transmit_UART0('\r');
     998:	8d e0       	ldi	r24, 0x0D	; 13
     99a:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('\r');
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('H');
     9a4:	88 e4       	ldi	r24, 0x48	; 72
     9a6:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	transmit_UART0('i');
     9aa:	89 e6       	ldi	r24, 0x69	; 105
     9ac:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
	
	transmit_string_UART0(array1);
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
	
/************************************************************/
	blink();
     9b8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
    ///* Preflight Checks
    if(PORT_PF & _BV(PIN_PF))
     9bc:	86 9b       	sbis	0x10, 6	; 16
     9be:	ea cf       	rjmp	.-44     	; 0x994 <main+0x19e>
	{	///* * Set the mode as preflight
		Mode = PREFLIGHT;
     9c0:	10 92 35 04 	sts	0x0435, r1
    
		sprintf(array2,"\r...Entering PREFLIGHT Mode...\r");
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	e1 ec       	ldi	r30, 0xC1	; 193
     9c8:	f1 e0       	ldi	r31, 0x01	; 1
     9ca:	de 01       	movw	r26, r28
     9cc:	99 96       	adiw	r26, 0x29	; 41
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	8a 95       	dec	r24
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <main+0x1d8>
		transmit_string_UART0(array2);
     9d6:	ce 01       	movw	r24, r28
     9d8:	89 96       	adiw	r24, 0x29	; 41
     9da:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		
		blink();
     9de:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* * Reading GPS
	    sprintf(array2,"\rCurrent GPS state is =\t");
     9e2:	89 e1       	ldi	r24, 0x19	; 25
     9e4:	e1 ee       	ldi	r30, 0xE1	; 225
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	de 01       	movw	r26, r28
     9ea:	99 96       	adiw	r26, 0x29	; 41
     9ec:	01 90       	ld	r0, Z+
     9ee:	0d 92       	st	X+, r0
     9f0:	8a 95       	dec	r24
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <main+0x1f6>
		transmit_string_UART0(array2);
     9f4:	ce 01       	movw	r24, r28
     9f6:	89 96       	adiw	r24, 0x29	; 41
     9f8:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_GPS();
     9fc:	0e 94 34 08 	call	0x1068	; 0x1068 <read_GPS>
		while(UCSR0B & _BV(RXCIE0));
     a00:	57 99       	sbic	0x0a, 7	; 10
     a02:	fe cf       	rjmp	.-4      	; 0xa00 <main+0x20a>
		send_preflight((char *)&Current_state.gps, sizeof(struct GPS_reading));
     a04:	6d e2       	ldi	r22, 0x2D	; 45
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	80 ee       	ldi	r24, 0xE0	; 224
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>

		blink();
     a10:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
	
		/************************************************************/
		///* * Magnetometer and Torquer test

		sprintf(array2,"\rCurrent MagnetoMetr state is =\t");
     a14:	81 e2       	ldi	r24, 0x21	; 33
     a16:	ea ef       	ldi	r30, 0xFA	; 250
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	de 01       	movw	r26, r28
     a1c:	99 96       	adiw	r26, 0x29	; 41
     a1e:	01 90       	ld	r0, Z+
     a20:	0d 92       	st	X+, r0
     a22:	8a 95       	dec	r24
     a24:	e1 f7       	brne	.-8      	; 0xa1e <main+0x228>
		sprintf(array3,"\rGenerating Torquer Current for :\t");
     a26:	83 e2       	ldi	r24, 0x23	; 35
     a28:	eb e1       	ldi	r30, 0x1B	; 27
     a2a:	f2 e0       	ldi	r31, 0x02	; 2
     a2c:	d7 01       	movw	r26, r14
     a2e:	01 90       	ld	r0, Z+
     a30:	0d 92       	st	X+, r0
     a32:	8a 95       	dec	r24
     a34:	e1 f7       	brne	.-8      	; 0xa2e <main+0x238>
		
		///* * Reading with no torquers on
		transmit_string_UART0(array2);
     a36:	ce 01       	movw	r24, r28
     a38:	89 96       	adiw	r24, 0x29	; 41
     a3a:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     a3e:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     a42:	6c e0       	ldi	r22, 0x0C	; 12
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	89 e1       	ldi	r24, 0x19	; 25
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
		
		blink();
     a4e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* * Reading with one torquer on at once, in one direction
		transmit_string_UART0(array3);
     a52:	c7 01       	movw	r24, r14
     a54:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('+');
     a58:	8b e2       	ldi	r24, 0x2B	; 43
     a5a:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('X');
     a5e:	88 e5       	ldi	r24, 0x58	; 88
     a60:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     a64:	8d e0       	ldi	r24, 0x0D	; 13
     a66:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     a6a:	f1 01       	movw	r30, r2
     a6c:	10 82       	st	Z, r1
		Current_state.pwm.x = 32768;
     a6e:	ec e2       	ldi	r30, 0x2C	; 44
     a70:	f4 e0       	ldi	r31, 0x04	; 4
     a72:	71 82       	std	Z+1, r7	; 0x01
     a74:	60 82       	st	Z, r6
		Current_state.pwm.y_dir = 0;
     a76:	e3 e3       	ldi	r30, 0x33	; 51
     a78:	f4 e0       	ldi	r31, 0x04	; 4
     a7a:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     a7c:	0f 2e       	mov	r0, r31
     a7e:	fe e2       	ldi	r31, 0x2E	; 46
     a80:	8f 2e       	mov	r8, r31
     a82:	f4 e0       	ldi	r31, 0x04	; 4
     a84:	9f 2e       	mov	r9, r31
     a86:	f0 2d       	mov	r31, r0
     a88:	f4 01       	movw	r30, r8
     a8a:	11 82       	std	Z+1, r1	; 0x01
     a8c:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 0;
     a8e:	0f 2e       	mov	r0, r31
     a90:	f4 e3       	ldi	r31, 0x34	; 52
     a92:	af 2e       	mov	r10, r31
     a94:	f4 e0       	ldi	r31, 0x04	; 4
     a96:	bf 2e       	mov	r11, r31
     a98:	f0 2d       	mov	r31, r0
     a9a:	f5 01       	movw	r30, r10
     a9c:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     a9e:	0f 2e       	mov	r0, r31
     aa0:	f0 e3       	ldi	r31, 0x30	; 48
     aa2:	cf 2e       	mov	r12, r31
     aa4:	f4 e0       	ldi	r31, 0x04	; 4
     aa6:	df 2e       	mov	r13, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	f6 01       	movw	r30, r12
     aac:	11 82       	std	Z+1, r1	; 0x01
     aae:	10 82       	st	Z, r1
		set_PWM ();
     ab0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     ab4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     ab8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     abc:	ce 01       	movw	r24, r28
     abe:	89 96       	adiw	r24, 0x29	; 41
     ac0:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     ac4:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     ac8:	6c e0       	ldi	r22, 0x0C	; 12
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	89 e1       	ldi	r24, 0x19	; 25
     ace:	94 e0       	ldi	r25, 0x04	; 4
     ad0:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     ad4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array3);
     ad8:	c7 01       	movw	r24, r14
     ada:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('+');
     ade:	8b e2       	ldi	r24, 0x2B	; 43
     ae0:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Y');
     ae4:	89 e5       	ldi	r24, 0x59	; 89
     ae6:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     aea:	8d e0       	ldi	r24, 0x0D	; 13
     aec:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     af0:	f1 01       	movw	r30, r2
     af2:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     af4:	ec e2       	ldi	r30, 0x2C	; 44
     af6:	f4 e0       	ldi	r31, 0x04	; 4
     af8:	11 82       	std	Z+1, r1	; 0x01
     afa:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 0;
     afc:	e3 e3       	ldi	r30, 0x33	; 51
     afe:	f4 e0       	ldi	r31, 0x04	; 4
     b00:	10 82       	st	Z, r1
		Current_state.pwm.y = 32768;
     b02:	f4 01       	movw	r30, r8
     b04:	71 82       	std	Z+1, r7	; 0x01
     b06:	60 82       	st	Z, r6
		Current_state.pwm.z_dir = 0;
     b08:	f5 01       	movw	r30, r10
     b0a:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     b0c:	f6 01       	movw	r30, r12
     b0e:	11 82       	std	Z+1, r1	; 0x01
     b10:	10 82       	st	Z, r1
		set_PWM ();
     b12:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     b16:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     b1a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     b1e:	ce 01       	movw	r24, r28
     b20:	89 96       	adiw	r24, 0x29	; 41
     b22:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     b26:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     b2a:	6c e0       	ldi	r22, 0x0C	; 12
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	89 e1       	ldi	r24, 0x19	; 25
     b30:	94 e0       	ldi	r25, 0x04	; 4
     b32:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     b36:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array3);
     b3a:	c7 01       	movw	r24, r14
     b3c:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('+');
     b40:	8b e2       	ldi	r24, 0x2B	; 43
     b42:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Z');
     b46:	8a e5       	ldi	r24, 0x5A	; 90
     b48:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     b4c:	8d e0       	ldi	r24, 0x0D	; 13
     b4e:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     b52:	f1 01       	movw	r30, r2
     b54:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     b56:	ec e2       	ldi	r30, 0x2C	; 44
     b58:	f4 e0       	ldi	r31, 0x04	; 4
     b5a:	11 82       	std	Z+1, r1	; 0x01
     b5c:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 0;
     b5e:	e3 e3       	ldi	r30, 0x33	; 51
     b60:	f4 e0       	ldi	r31, 0x04	; 4
     b62:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     b64:	f4 01       	movw	r30, r8
     b66:	11 82       	std	Z+1, r1	; 0x01
     b68:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 0;
     b6a:	f5 01       	movw	r30, r10
     b6c:	10 82       	st	Z, r1
		Current_state.pwm.z = 32768;  
     b6e:	f6 01       	movw	r30, r12
     b70:	71 82       	std	Z+1, r7	; 0x01
     b72:	60 82       	st	Z, r6
		blink();
     b74:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     b78:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     b7c:	ce 01       	movw	r24, r28
     b7e:	89 96       	adiw	r24, 0x29	; 41
     b80:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     b84:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     b88:	6c e0       	ldi	r22, 0x0C	; 12
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	89 e1       	ldi	r24, 0x19	; 25
     b8e:	94 e0       	ldi	r25, 0x04	; 4
     b90:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     b94:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* * Reading with ALL torquer on at once, in one direction
		transmit_string_UART0(array3);
     b98:	c7 01       	movw	r24, r14
     b9a:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('-');
     b9e:	8d e2       	ldi	r24, 0x2D	; 45
     ba0:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('X');
     ba4:	88 e5       	ldi	r24, 0x58	; 88
     ba6:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0(' ');
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Y');
     bb0:	89 e5       	ldi	r24, 0x59	; 89
     bb2:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0(' ');
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Z');
     bbc:	8a e5       	ldi	r24, 0x5A	; 90
     bbe:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     bc2:	8d e0       	ldi	r24, 0x0D	; 13
     bc4:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     bc8:	f1 01       	movw	r30, r2
     bca:	10 82       	st	Z, r1
		Current_state.pwm.x = 32768;
     bcc:	ec e2       	ldi	r30, 0x2C	; 44
     bce:	f4 e0       	ldi	r31, 0x04	; 4
     bd0:	71 82       	std	Z+1, r7	; 0x01
     bd2:	60 82       	st	Z, r6
		Current_state.pwm.y_dir = 0;
     bd4:	e3 e3       	ldi	r30, 0x33	; 51
     bd6:	f4 e0       	ldi	r31, 0x04	; 4
     bd8:	10 82       	st	Z, r1
		Current_state.pwm.y = 32768;
     bda:	f4 01       	movw	r30, r8
     bdc:	71 82       	std	Z+1, r7	; 0x01
     bde:	60 82       	st	Z, r6
		Current_state.pwm.z_dir = 0;
     be0:	f5 01       	movw	r30, r10
     be2:	10 82       	st	Z, r1
		Current_state.pwm.z = 32768;
     be4:	f6 01       	movw	r30, r12
     be6:	71 82       	std	Z+1, r7	; 0x01
     be8:	60 82       	st	Z, r6
		set_PWM ();
     bea:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     bee:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     bf2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     bf6:	ce 01       	movw	r24, r28
     bf8:	89 96       	adiw	r24, 0x29	; 41
     bfa:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     bfe:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     c02:	6c e0       	ldi	r22, 0x0C	; 12
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	89 e1       	ldi	r24, 0x19	; 25
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     c0e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* * Reading with one torquer on at once, in other direction
		transmit_string_UART0(array3);
     c12:	c7 01       	movw	r24, r14
     c14:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('+');
     c18:	8b e2       	ldi	r24, 0x2B	; 43
     c1a:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('X');
     c1e:	88 e5       	ldi	r24, 0x58	; 88
     c20:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     c24:	8d e0       	ldi	r24, 0x0D	; 13
     c26:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 1;
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	f1 01       	movw	r30, r2
     c2e:	20 83       	st	Z, r18
		Current_state.pwm.x = 32768;
     c30:	ec e2       	ldi	r30, 0x2C	; 44
     c32:	f4 e0       	ldi	r31, 0x04	; 4
     c34:	71 82       	std	Z+1, r7	; 0x01
     c36:	60 82       	st	Z, r6
		Current_state.pwm.y_dir = 0;
     c38:	e3 e3       	ldi	r30, 0x33	; 51
     c3a:	f4 e0       	ldi	r31, 0x04	; 4
     c3c:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     c3e:	f4 01       	movw	r30, r8
     c40:	11 82       	std	Z+1, r1	; 0x01
     c42:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 0;
     c44:	f5 01       	movw	r30, r10
     c46:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     c48:	f6 01       	movw	r30, r12
     c4a:	11 82       	std	Z+1, r1	; 0x01
     c4c:	10 82       	st	Z, r1
		set_PWM ();
     c4e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     c52:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     c56:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     c5a:	ce 01       	movw	r24, r28
     c5c:	89 96       	adiw	r24, 0x29	; 41
     c5e:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     c62:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     c66:	6c e0       	ldi	r22, 0x0C	; 12
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	89 e1       	ldi	r24, 0x19	; 25
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     c72:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array3);
     c76:	c7 01       	movw	r24, r14
     c78:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('+');
     c7c:	8b e2       	ldi	r24, 0x2B	; 43
     c7e:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Y');
     c82:	89 e5       	ldi	r24, 0x59	; 89
     c84:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     c88:	8d e0       	ldi	r24, 0x0D	; 13
     c8a:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     c8e:	f1 01       	movw	r30, r2
     c90:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     c92:	ec e2       	ldi	r30, 0x2C	; 44
     c94:	f4 e0       	ldi	r31, 0x04	; 4
     c96:	11 82       	std	Z+1, r1	; 0x01
     c98:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 1;
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	e3 e3       	ldi	r30, 0x33	; 51
     c9e:	f4 e0       	ldi	r31, 0x04	; 4
     ca0:	20 83       	st	Z, r18
		Current_state.pwm.y = 32768;
     ca2:	f4 01       	movw	r30, r8
     ca4:	71 82       	std	Z+1, r7	; 0x01
     ca6:	60 82       	st	Z, r6
		Current_state.pwm.z_dir = 0;
     ca8:	f5 01       	movw	r30, r10
     caa:	10 82       	st	Z, r1
		Current_state.pwm.z = 0;
     cac:	f6 01       	movw	r30, r12
     cae:	11 82       	std	Z+1, r1	; 0x01
     cb0:	10 82       	st	Z, r1
		set_PWM ();
     cb2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     cb6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     cba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     cbe:	ce 01       	movw	r24, r28
     cc0:	89 96       	adiw	r24, 0x29	; 41
     cc2:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     cc6:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     cca:	6c e0       	ldi	r22, 0x0C	; 12
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	89 e1       	ldi	r24, 0x19	; 25
     cd0:	94 e0       	ldi	r25, 0x04	; 4
     cd2:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     cd6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array3);
     cda:	c7 01       	movw	r24, r14
     cdc:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('+');
     ce0:	8b e2       	ldi	r24, 0x2B	; 43
     ce2:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Z');
     ce6:	8a e5       	ldi	r24, 0x5A	; 90
     ce8:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     cec:	8d e0       	ldi	r24, 0x0D	; 13
     cee:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 0;
     cf2:	f1 01       	movw	r30, r2
     cf4:	10 82       	st	Z, r1
		Current_state.pwm.x = 0;
     cf6:	ec e2       	ldi	r30, 0x2C	; 44
     cf8:	f4 e0       	ldi	r31, 0x04	; 4
     cfa:	11 82       	std	Z+1, r1	; 0x01
     cfc:	10 82       	st	Z, r1
		Current_state.pwm.y_dir = 0;
     cfe:	e3 e3       	ldi	r30, 0x33	; 51
     d00:	f4 e0       	ldi	r31, 0x04	; 4
     d02:	10 82       	st	Z, r1
		Current_state.pwm.y = 0;
     d04:	f4 01       	movw	r30, r8
     d06:	11 82       	std	Z+1, r1	; 0x01
     d08:	10 82       	st	Z, r1
		Current_state.pwm.z_dir = 1;
     d0a:	21 e0       	ldi	r18, 0x01	; 1
     d0c:	f5 01       	movw	r30, r10
     d0e:	20 83       	st	Z, r18
		Current_state.pwm.z = 32768;  
     d10:	f6 01       	movw	r30, r12
     d12:	71 82       	std	Z+1, r7	; 0x01
     d14:	60 82       	st	Z, r6
		set_PWM ();
     d16:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     d1a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     d1e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     d22:	ce 01       	movw	r24, r28
     d24:	89 96       	adiw	r24, 0x29	; 41
     d26:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     d2a:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     d2e:	6c e0       	ldi	r22, 0x0C	; 12
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	89 e1       	ldi	r24, 0x19	; 25
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		blink();
     d3a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* * Reading with ALL torquer on at once, in other direction
		transmit_string_UART0(array3);
     d3e:	c7 01       	movw	r24, r14
     d40:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_UART0('-');
     d44:	8d e2       	ldi	r24, 0x2D	; 45
     d46:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('X');
     d4a:	88 e5       	ldi	r24, 0x58	; 88
     d4c:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0(' ');
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Y');
     d56:	89 e5       	ldi	r24, 0x59	; 89
     d58:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0(' ');
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('Z');
     d62:	8a e5       	ldi	r24, 0x5A	; 90
     d64:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		transmit_UART0('\r');
     d68:	8d e0       	ldi	r24, 0x0D	; 13
     d6a:	0e 94 95 0a 	call	0x152a	; 0x152a <transmit_UART0>
		Current_state.pwm.x_dir = 1;
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	f1 01       	movw	r30, r2
     d72:	20 83       	st	Z, r18
		Current_state.pwm.x = 32768;
     d74:	ec e2       	ldi	r30, 0x2C	; 44
     d76:	f4 e0       	ldi	r31, 0x04	; 4
     d78:	71 82       	std	Z+1, r7	; 0x01
     d7a:	60 82       	st	Z, r6
		Current_state.pwm.y_dir = 1;
     d7c:	e3 e3       	ldi	r30, 0x33	; 51
     d7e:	f4 e0       	ldi	r31, 0x04	; 4
     d80:	20 83       	st	Z, r18
		Current_state.pwm.y = 32768;
     d82:	f4 01       	movw	r30, r8
     d84:	71 82       	std	Z+1, r7	; 0x01
     d86:	60 82       	st	Z, r6
		Current_state.pwm.z_dir = 1;
     d88:	f5 01       	movw	r30, r10
     d8a:	20 83       	st	Z, r18
		Current_state.pwm.z = 32768;
     d8c:	f6 01       	movw	r30, r12
     d8e:	71 82       	std	Z+1, r7	; 0x01
     d90:	60 82       	st	Z, r6
		set_PWM ();
     d92:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
		blink();
     d96:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     d9a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		transmit_string_UART0(array2);
     d9e:	ce 01       	movw	r24, r28
     da0:	89 96       	adiw	r24, 0x29	; 41
     da2:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_MM ();
     da6:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MM>
		send_preflight((char *)&Current_state.mm, sizeof(struct MM_reading));
     daa:	6c e0       	ldi	r22, 0x0C	; 12
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	89 e1       	ldi	r24, 0x19	; 25
     db0:	94 e0       	ldi	r25, 0x04	; 4
     db2:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    
		///* * Set Torquer values to zero
		reset_PWM();
     db6:	0e 94 a0 08 	call	0x1140	; 0x1140 <reset_PWM>
  
		blink();
     dba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* * Reading Sunsensor
		sprintf(array2,"\rCurrent SunSensor state is =\t");
     dbe:	8f e1       	ldi	r24, 0x1F	; 31
     dc0:	ee e3       	ldi	r30, 0x3E	; 62
     dc2:	f2 e0       	ldi	r31, 0x02	; 2
     dc4:	de 01       	movw	r26, r28
     dc6:	99 96       	adiw	r26, 0x29	; 41
     dc8:	01 90       	ld	r0, Z+
     dca:	0d 92       	st	X+, r0
     dcc:	8a 95       	dec	r24
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <main+0x5d2>
		transmit_string_UART0(array2);
     dd0:	ce 01       	movw	r24, r28
     dd2:	89 96       	adiw	r24, 0x29	; 41
     dd4:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		read_SS();
     dd8:	0e 94 36 08 	call	0x106c	; 0x106c <read_SS>
		//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
		for(i=0;i<6;i++)
     ddc:	c1 2c       	mov	r12, r1
     dde:	d1 2c       	mov	r13, r1
		{
			aa = Current_state.ss.reading[i];
     de0:	f6 01       	movw	r30, r12
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	e0 52       	subi	r30, 0x20	; 32
     de8:	fc 4f       	sbci	r31, 0xFC	; 252
     dea:	65 a5       	ldd	r22, Z+45	; 0x2d
     dec:	76 a5       	ldd	r23, Z+46	; 0x2e
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__floatunsisf>
			bb = (aa*3.3*100)/4096;
     df6:	23 e3       	ldi	r18, 0x33	; 51
     df8:	33 e3       	ldi	r19, 0x33	; 51
     dfa:	43 e5       	ldi	r20, 0x53	; 83
     dfc:	50 e4       	ldi	r21, 0x40	; 64
     dfe:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	48 ec       	ldi	r20, 0xC8	; 200
     e08:	52 e4       	ldi	r21, 0x42	; 66
     e0a:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	59 e3       	ldi	r21, 0x39	; 57
     e16:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     e1a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fixunssfsi>
			sprintf(buffer, "%u\t", bb);
     e1e:	7f 93       	push	r23
     e20:	6f 93       	push	r22
     e22:	5f 92       	push	r5
     e24:	4f 92       	push	r4
     e26:	1f 93       	push	r17
     e28:	0f 93       	push	r16
     e2a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
			send_preflight( buffer, strlen(buffer));
     e2e:	f8 01       	movw	r30, r16
     e30:	01 90       	ld	r0, Z+
     e32:	00 20       	and	r0, r0
     e34:	e9 f7       	brne	.-6      	; 0xe30 <main+0x63a>
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	bf 01       	movw	r22, r30
     e3a:	60 1b       	sub	r22, r16
     e3c:	71 0b       	sbc	r23, r17
     e3e:	cb 5f       	subi	r28, 0xFB	; 251
     e40:	de 4f       	sbci	r29, 0xFE	; 254
     e42:	88 81       	ld	r24, Y
     e44:	c5 50       	subi	r28, 0x05	; 5
     e46:	d1 40       	sbci	r29, 0x01	; 1
     e48:	ca 5f       	subi	r28, 0xFA	; 250
     e4a:	de 4f       	sbci	r29, 0xFE	; 254
     e4c:	98 81       	ld	r25, Y
     e4e:	c6 50       	subi	r28, 0x06	; 6
     e50:	d1 40       	sbci	r29, 0x01	; 1
     e52:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
		///* * Reading Sunsensor
		sprintf(array2,"\rCurrent SunSensor state is =\t");
		transmit_string_UART0(array2);
		read_SS();
		//send_preflight((char *)&Current_state.ss, sizeof(struct SS_reading));
		for(i=0;i<6;i++)
     e56:	ff ef       	ldi	r31, 0xFF	; 255
     e58:	cf 1a       	sub	r12, r31
     e5a:	df 0a       	sbc	r13, r31
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	26 e0       	ldi	r18, 0x06	; 6
     e6a:	c2 16       	cp	r12, r18
     e6c:	d1 04       	cpc	r13, r1
     e6e:	09 f0       	breq	.+2      	; 0xe72 <main+0x67c>
     e70:	b7 cf       	rjmp	.-146    	; 0xde0 <main+0x5ea>
			bb = (aa*3.3*100)/4096;
			sprintf(buffer, "%u\t", bb);
			send_preflight( buffer, strlen(buffer));
		}
		
		blink();
     e72:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
	
		///* * Reading Slave
		sprintf(array2,"\rCurrent Health state is =\t");
     e76:	8c e1       	ldi	r24, 0x1C	; 28
     e78:	e1 e6       	ldi	r30, 0x61	; 97
     e7a:	f2 e0       	ldi	r31, 0x02	; 2
     e7c:	de 01       	movw	r26, r28
     e7e:	99 96       	adiw	r26, 0x29	; 41
     e80:	01 90       	ld	r0, Z+
     e82:	0d 92       	st	X+, r0
     e84:	8a 95       	dec	r24
     e86:	e1 f7       	brne	.-8      	; 0xe80 <main+0x68a>
		transmit_string_UART0(array2);
     e88:	ce 01       	movw	r24, r28
     e8a:	89 96       	adiw	r24, 0x29	; 41
     e8c:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		get_HM_data();
     e90:	0e 94 cf 03 	call	0x79e	; 0x79e <get_HM_data>
		send_preflight((char *)&Current_state.hm, sizeof(Current_state.hm ));
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	85 e2       	ldi	r24, 0x25	; 37
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
		
		blink();
     ea0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
	
		///* * Communication Task
		sprintf(array2,"\rCC configured and Data send to be transmitted :\t");
     ea4:	82 e3       	ldi	r24, 0x32	; 50
     ea6:	ed e7       	ldi	r30, 0x7D	; 125
     ea8:	f2 e0       	ldi	r31, 0x02	; 2
     eaa:	de 01       	movw	r26, r28
     eac:	99 96       	adiw	r26, 0x29	; 41
     eae:	01 90       	ld	r0, Z+
     eb0:	0d 92       	st	X+, r0
     eb2:	8a 95       	dec	r24
     eb4:	e1 f7       	brne	.-8      	; 0xeae <main+0x6b8>
		sprintf(frame, "Hello World");
     eb6:	8c e0       	ldi	r24, 0x0C	; 12
     eb8:	ef ea       	ldi	r30, 0xAF	; 175
     eba:	f2 e0       	ldi	r31, 0x02	; 2
     ebc:	de 01       	movw	r26, r28
     ebe:	af 55       	subi	r26, 0x5F	; 95
     ec0:	bf 4f       	sbci	r27, 0xFF	; 255
     ec2:	01 90       	ld	r0, Z+
     ec4:	0d 92       	st	X+, r0
     ec6:	8a 95       	dec	r24
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <main+0x6cc>
		x = init_CC1020_TX();
     eca:	0e 94 63 02 	call	0x4c6	; 0x4c6 <init_CC1020_TX>
	
		if(x)
     ece:	88 23       	and	r24, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <main+0x6de>
     ed2:	5d c0       	rjmp	.+186    	; 0xf8e <main+0x798>
		{	sprintf(array3, "Done:%d\tPLL Locked...Transmission Started\r\n", x);
     ed4:	99 27       	eor	r25, r25
     ed6:	9f 93       	push	r25
     ed8:	8f 93       	push	r24
     eda:	8b eb       	ldi	r24, 0xBB	; 187
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	9f 93       	push	r25
     ee0:	8f 93       	push	r24
     ee2:	ff 92       	push	r15
     ee4:	ef 92       	push	r14
     ee6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
			transmit_string_UART0(array3);
     eea:	c7 01       	movw	r24, r14
     eec:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		}
		else
		{	transmit_string_UART0("\tPLL Lock Failed\r\n");
			break;	
		}
		transmit_string_UART0(array2);
     ef0:	ce 01       	movw	r24, r28
     ef2:	89 96       	adiw	r24, 0x29	; 41
     ef4:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		transmit_string_UART0(frame);
     ef8:	ce 01       	movw	r24, r28
     efa:	8f 55       	subi	r24, 0x5F	; 95
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
	
		slave_send (REAL_TIME, frame, FRAME_SIZE);
     f02:	42 e2       	ldi	r20, 0x22	; 34
     f04:	be 01       	movw	r22, r28
     f06:	6f 55       	subi	r22, 0x5F	; 95
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	85 ed       	ldi	r24, 0xD5	; 213
     f0c:	0e 94 b5 08 	call	0x116a	; 0x116a <slave_send>
		blink();
     f10:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* Start transmission
		sprintf(array3,"\rCommand send to Slave :\t%d", BEGIN_TX_COMM);
     f14:	1f 92       	push	r1
     f16:	8a e5       	ldi	r24, 0x5A	; 90
     f18:	8f 93       	push	r24
     f1a:	0f 2e       	mov	r0, r31
     f1c:	f7 ee       	ldi	r31, 0xE7	; 231
     f1e:	cf 2e       	mov	r12, r31
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	df 2e       	mov	r13, r31
     f24:	f0 2d       	mov	r31, r0
     f26:	df 92       	push	r13
     f28:	cf 92       	push	r12
     f2a:	ff 92       	push	r15
     f2c:	ef 92       	push	r14
     f2e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
		transmit_string_UART0(array3);
     f32:	c7 01       	movw	r24, r14
     f34:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		slave_send (BEGIN_TX_COMM, NULL, 0);
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	8a e5       	ldi	r24, 0x5A	; 90
     f40:	0e 94 b5 08 	call	0x116a	; 0x116a <slave_send>
		blink();
     f44:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		blink();
     f48:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* Stop transmission
		sprintf(array3,"\rCommand send to Slave :\t%d", END_TX);
     f4c:	1f 92       	push	r1
     f4e:	83 e3       	ldi	r24, 0x33	; 51
     f50:	8f 93       	push	r24
     f52:	df 92       	push	r13
     f54:	cf 92       	push	r12
     f56:	ff 92       	push	r15
     f58:	ef 92       	push	r14
     f5a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <sprintf>
		transmit_string_UART0(array3);
     f5e:	c7 01       	movw	r24, r14
     f60:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
		slave_send (END_TX, NULL, 0);
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	83 e3       	ldi	r24, 0x33	; 51
     f6c:	0e 94 b5 08 	call	0x116a	; 0x116a <slave_send>
		blink();
     f70:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <blink>
		
		///* Wait for Acknoledgement
		while(SPI_transfer(0xFF) != ACK);
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
     f84:	82 39       	cpi	r24, 0x92	; 146
     f86:	d9 f7       	brne	.-10     	; 0xf7e <main+0x788>
    
		SetupCC1020PD();  // configure in PD and stop Transmission
     f88:	0e 94 9f 00 	call	0x13e	; 0x13e <SetupCC1020PD>
     f8c:	03 cd       	rjmp	.-1530   	; 0x994 <main+0x19e>
		if(x)
		{	sprintf(array3, "Done:%d\tPLL Locked...Transmission Started\r\n", x);
			transmit_string_UART0(array3);
		}
		else
		{	transmit_string_UART0("\tPLL Lock Failed\r\n");
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	0e 94 99 0a 	call	0x1532	; 0x1532 <transmit_string_UART0>
	
	}	
/************************************************************/
	}
	return 0;
}
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	ca 5f       	subi	r28, 0xFA	; 250
     f9c:	de 4f       	sbci	r29, 0xFE	; 254
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	9f 90       	pop	r9
     fbe:	8f 90       	pop	r8
     fc0:	7f 90       	pop	r7
     fc2:	6f 90       	pop	r6
     fc4:	5f 90       	pop	r5
     fc6:	4f 90       	pop	r4
     fc8:	3f 90       	pop	r3
     fca:	2f 90       	pop	r2
     fcc:	08 95       	ret

00000fce <init_UART_MM>:
#include "peripherals.h"
#include "uart.h"


void init_UART_MM(void )
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29

  UCSR1A = 0;
     fd2:	cb e9       	ldi	r28, 0x9B	; 155
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
     fd6:	18 82       	st	Y, r1
  UCSR1B = 0;
     fd8:	aa e9       	ldi	r26, 0x9A	; 154
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	1c 92       	st	X, r1
  UCSR1C = 0;
     fde:	ed e9       	ldi	r30, 0x9D	; 157
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
     fe4:	88 81       	ld	r24, Y
     fe6:	82 60       	ori	r24, 0x02	; 2
     fe8:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
     fea:	8c 91       	ld	r24, X
     fec:	88 61       	ori	r24, 0x18	; 24
     fee:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
     ff0:	80 81       	ld	r24, Z
     ff2:	86 60       	ori	r24, 0x06	; 6
     ff4:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
     ff6:	87 e6       	ldi	r24, 0x67	; 103
     ff8:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = 0;
     ffc:	10 92 98 00 	sts	0x0098, r1
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <receive_MM>:
}

uint8_t receive_MM(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSR1A & _BV(RXC1)));
    1006:	eb e9       	ldi	r30, 0x9B	; 155
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	ec f7       	brge	.-6      	; 0x100a <receive_MM+0x4>
  return UDR1; 
    1010:	80 91 9c 00 	lds	r24, 0x009C
}
    1014:	08 95       	ret

00001016 <send_MM_cmd>:

void send_MM_cmd(char *data)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
  ///Send the char array till stop
  while((*data) != '\0')
    101a:	fc 01       	movw	r30, r24
    101c:	20 81       	ld	r18, Z
    101e:	22 23       	and	r18, r18
    1020:	69 f0       	breq	.+26     	; 0x103c <send_MM_cmd+0x26>
    1022:	dc 01       	movw	r26, r24
    1024:	11 96       	adiw	r26, 0x01	; 1
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    1026:	eb e9       	ldi	r30, 0x9B	; 155
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    ///* Start transmission
    UDR1 = *data;
    102a:	cc e9       	ldi	r28, 0x9C	; 156
    102c:	d0 e0       	ldi	r29, 0x00	; 0
{
  ///Send the char array till stop
  while((*data) != '\0')
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    102e:	80 81       	ld	r24, Z
    1030:	85 ff       	sbrs	r24, 5
    1032:	fd cf       	rjmp	.-6      	; 0x102e <send_MM_cmd+0x18>
    ///* Start transmission
    UDR1 = *data;
    1034:	28 83       	st	Y, r18
}

void send_MM_cmd(char *data)
{
  ///Send the char array till stop
  while((*data) != '\0')
    1036:	2d 91       	ld	r18, X+
    1038:	21 11       	cpse	r18, r1
    103a:	f9 cf       	rjmp	.-14     	; 0x102e <send_MM_cmd+0x18>
    while ( !(UCSR1A & (_BV(UDRE1))) );
    ///* Start transmission
    UDR1 = *data;
    data++;
  }
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <poll_MM>:
}

static volatile uint8_t t;

void poll_MM(void)
{
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
  ///Temporary variables for magnetometer readings
  int16_t x, y, z;
  uint8_t tmp;
  
  ///Send the poll command
  send_MM_cmd("*00P\r");
    104c:	8e e3       	ldi	r24, 0x3E	; 62
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	0e 94 0b 08 	call	0x1016	; 0x1016 <send_MM_cmd>
  while(1) {
    tmp = receive_MM();
    1054:	0e 94 03 08 	call	0x1006	; 0x1006 <receive_MM>
    1058:	89 83       	std	Y+1, r24	; 0x01
    send_preflight(&tmp, 1);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 3e 08 	call	0x107c	; 0x107c <send_preflight>
    1066:	f6 cf       	rjmp	.-20     	; 0x1054 <poll_MM+0x12>

00001068 <read_GPS>:
  send_loads();
}

void read_GPS(void){
  ///* Switch on the GPS interrupt
  UCSR0B |= _BV(RXCIE0);
    1068:	57 9a       	sbi	0x0a, 7	; 10
    106a:	08 95       	ret

0000106c <read_SS>:
  
}
void read_SS(void){
  
  ///Configure the Sunsensor ADC IC
  configure_SS();
    106c:	0e 94 b0 09 	call	0x1360	; 0x1360 <configure_SS>
  
  ///Poll the ADC for readings
  poll_SS();
    1070:	0e 94 b3 09 	call	0x1366	; 0x1366 <poll_SS>
    1074:	08 95       	ret

00001076 <read_MM>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM();
    1076:	0e 94 21 08 	call	0x1042	; 0x1042 <poll_MM>
    107a:	08 95       	ret

0000107c <send_preflight>:
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
    107c:	61 15       	cp	r22, r1
    107e:	71 05       	cpc	r23, r1
    1080:	51 f0       	breq	.+20     	; 0x1096 <send_preflight+0x1a>
    1082:	fc 01       	movw	r30, r24
    1084:	86 0f       	add	r24, r22
    1086:	97 1f       	adc	r25, r23
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR0A & (_BV(UDRE0))) );
    1088:	5d 9b       	sbis	0x0b, 5	; 11
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <send_preflight+0xc>
    ///* Start transmission
    UDR0 = data[i];
    108c:	21 91       	ld	r18, Z+
    108e:	2c b9       	out	0x0c, r18	; 12
void send_preflight(char *data, uint16_t size)
{
  uint16_t i = 0;
  
  ///Loop through the data
  while(i < size)
    1090:	e8 17       	cp	r30, r24
    1092:	f9 07       	cpc	r31, r25
    1094:	c9 f7       	brne	.-14     	; 0x1088 <send_preflight+0xc>
    1096:	08 95       	ret

00001098 <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    1098:	84 b3       	in	r24, 0x14	; 20
    109a:	88 63       	ori	r24, 0x38	; 56
    109c:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    109e:	82 b1       	in	r24, 0x02	; 2
    10a0:	88 63       	ori	r24, 0x38	; 56
    10a2:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    10a4:	ab e8       	ldi	r26, 0x8B	; 139
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	1c 92       	st	X, r1
  TCCR3B = 0;
    10aa:	ea e8       	ldi	r30, 0x8A	; 138
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	10 82       	st	Z, r1
  TCCR3C = 0;
    10b0:	10 92 8c 00 	sts	0x008C, r1
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    10b4:	8c 91       	ld	r24, X
    10b6:	8a 6a       	ori	r24, 0xAA	; 170
    10b8:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    10ba:	80 81       	ld	r24, Z
    10bc:	81 61       	ori	r24, 0x11	; 17
    10be:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	90 93 81 00 	sts	0x0081, r25
    10c8:	80 93 80 00 	sts	0x0080, r24
  OCR3B = 0x0000;
    10cc:	e4 e8       	ldi	r30, 0x84	; 132
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	11 82       	std	Z+1, r1	; 0x01
    10d2:	10 82       	st	Z, r1
  OCR3B = 0x0000;
    10d4:	11 82       	std	Z+1, r1	; 0x01
    10d6:	10 82       	st	Z, r1
  OCR3B = 0x0000;
    10d8:	11 82       	std	Z+1, r1	; 0x01
    10da:	10 82       	st	Z, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    10dc:	85 b3       	in	r24, 0x15	; 21
    10de:	87 7c       	andi	r24, 0xC7	; 199
    10e0:	85 bb       	out	0x15, r24	; 21
    10e2:	08 95       	ret

000010e4 <set_PWM>:

void set_PWM(void)
{
  
  ///If current direction of axis X/Y/Z opposite of default set pin
  if(Current_state.pwm.x_dir)
    10e4:	80 91 32 04 	lds	r24, 0x0432
    10e8:	88 23       	and	r24, r24
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <set_PWM+0xc>
    PORTC |= _BV(PC5);
    10ec:	ad 9a       	sbi	0x15, 5	; 21
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <set_PWM+0xe>
  else
    PORTC &= ~(_BV(PC5));
    10f0:	ad 98       	cbi	0x15, 5	; 21
    
  if(Current_state.pwm.y_dir)
    10f2:	80 91 33 04 	lds	r24, 0x0433
    10f6:	88 23       	and	r24, r24
    10f8:	11 f0       	breq	.+4      	; 0x10fe <set_PWM+0x1a>
    PORTC |= _BV(PC4);
    10fa:	ac 9a       	sbi	0x15, 4	; 21
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <__stack+0x1>
  else
    PORTC &= ~(_BV(PC4));
    10fe:	ac 98       	cbi	0x15, 4	; 21
    
  if(Current_state.pwm.z_dir)
    1100:	80 91 34 04 	lds	r24, 0x0434
    1104:	88 23       	and	r24, r24
    1106:	11 f0       	breq	.+4      	; 0x110c <__stack+0xd>
    PORTC |= _BV(PC3);
    1108:	ab 9a       	sbi	0x15, 3	; 21
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__stack+0xf>
  else
    PORTC &= ~(_BV(PC3));
    110c:	ab 98       	cbi	0x15, 3	; 21
    
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    110e:	80 91 2c 04 	lds	r24, 0x042C
    1112:	90 91 2d 04 	lds	r25, 0x042D
    1116:	90 93 87 00 	sts	0x0087, r25
    111a:	80 93 86 00 	sts	0x0086, r24
  OCR3B = Current_state.pwm.y;
    111e:	80 91 2e 04 	lds	r24, 0x042E
    1122:	90 91 2f 04 	lds	r25, 0x042F
    1126:	90 93 85 00 	sts	0x0085, r25
    112a:	80 93 84 00 	sts	0x0084, r24
  OCR3C = Current_state.pwm.z;
    112e:	80 91 30 04 	lds	r24, 0x0430
    1132:	90 91 31 04 	lds	r25, 0x0431
    1136:	90 93 83 00 	sts	0x0083, r25
    113a:	80 93 82 00 	sts	0x0082, r24
    113e:	08 95       	ret

00001140 <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    1140:	10 92 2d 04 	sts	0x042D, r1
    1144:	10 92 2c 04 	sts	0x042C, r1
  Current_state.pwm.y = 0;
    1148:	10 92 2f 04 	sts	0x042F, r1
    114c:	10 92 2e 04 	sts	0x042E, r1
  Current_state.pwm.z = 0;
    1150:	10 92 31 04 	sts	0x0431, r1
    1154:	10 92 30 04 	sts	0x0430, r1
  Current_state.pwm.x_dir = 0;
    1158:	10 92 32 04 	sts	0x0432, r1
  Current_state.pwm.y_dir = 0;
    115c:	10 92 33 04 	sts	0x0433, r1
  Current_state.pwm.z_dir = 0;
    1160:	10 92 34 04 	sts	0x0434, r1
  set_PWM();
    1164:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_PWM>
    1168:	08 95       	ret

0000116a <slave_send>:

#include "slave_comm.h"
#include "spi.h"
#include "ax25.h"

void slave_send (uint8_t command, char* data, uint8_t size){
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	00 d0       	rcall	.+0      	; 0x117e <slave_send+0x14>
    117e:	00 d0       	rcall	.+0      	; 0x1180 <slave_send+0x16>
    1180:	1f 92       	push	r1
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	d6 2e       	mov	r13, r22
    118a:	e7 2e       	mov	r14, r23
    118c:	f4 2e       	mov	r15, r20

  static uint32_t seq = 0;
  uint16_t crc = 0xFFFF;
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
  uint8_t i, c, tsize = size;
    1196:	4c 83       	std	Y+4, r20	; 0x04
  
  ///Initialize SPI
  init_SPI_trans (SLAVE);
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0e 94 8a 09 	call	0x1314	; 0x1314 <init_SPI_trans>
  
  ///* Start communication
  c = START_SPI;
    119e:	87 ee       	ldi	r24, 0xE7	; 231
    11a0:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_START_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	ce 01       	movw	r24, r28
    11a8:	03 96       	adiw	r24, 0x03	; 3
    11aa:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	ce 01       	movw	r24, r28
    11b4:	03 96       	adiw	r24, 0x03	; 3
    11b6:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
  
  ///* Notify the command
  SPI_send ((char *)&command,sizeof (uint8_t));
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	ce 01       	movw	r24, r28
    11c0:	05 96       	adiw	r24, 0x05	; 5
    11c2:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
  crc = update_crc_16(command, crc);
    11c6:	69 81       	ldd	r22, Y+1	; 0x01
    11c8:	7a 81       	ldd	r23, Y+2	; 0x02
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
  
  ///* Send size of data
  if((command == HM_DATA) ||(command == REAL_TIME))
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	88 23       	and	r24, r24
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <slave_send+0x76>
    11da:	85 3d       	cpi	r24, 0xD5	; 213
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <slave_send+0x76>
    11de:	3f c0       	rjmp	.+126    	; 0x125e <slave_send+0xf4>
  {
    tsize += 4;
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	8c 5f       	subi	r24, 0xFC	; 252
    11e4:	8c 83       	std	Y+4, r24	; 0x04
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	ce 01       	movw	r24, r28
    11ec:	04 96       	adiw	r24, 0x04	; 4
    11ee:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
    crc = update_crc_16(tsize, crc);
    11f2:	69 81       	ldd	r22, Y+1	; 0x01
    11f4:	7a 81       	ldd	r23, Y+2	; 0x02
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    1200:	64 e0       	ldi	r22, 0x04	; 4
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	8a e4       	ldi	r24, 0x4A	; 74
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
    120c:	0a e4       	ldi	r16, 0x4A	; 74
    120e:	13 e0       	ldi	r17, 0x03	; 3
    1210:	0f 2e       	mov	r0, r31
    1212:	fe e4       	ldi	r31, 0x4E	; 78
    1214:	af 2e       	mov	r10, r31
    1216:	f3 e0       	ldi	r31, 0x03	; 3
    1218:	bf 2e       	mov	r11, r31
    121a:	f0 2d       	mov	r31, r0
    for(i = 0; i < sizeof(uint32_t); i++)
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    121c:	69 81       	ldd	r22, Y+1	; 0x01
    121e:	7a 81       	ldd	r23, Y+2	; 0x02
    1220:	f8 01       	movw	r30, r16
    1222:	81 91       	ld	r24, Z+
    1224:	8f 01       	movw	r16, r30
    1226:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
    tsize += 4;
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    crc = update_crc_16(tsize, crc);
    ///* Send Sequence Number
    SPI_send ((char *)&seq,sizeof (uint32_t));
    for(i = 0; i < sizeof(uint32_t); i++)
    122e:	0a 15       	cp	r16, r10
    1230:	1b 05       	cpc	r17, r11
    1232:	a1 f7       	brne	.-24     	; 0x121c <slave_send+0xb2>
      crc = update_crc_16(((uint8_t *)&seq)[i], crc);
    seq++;
    1234:	00 91 4a 03 	lds	r16, 0x034A
    1238:	10 91 4b 03 	lds	r17, 0x034B
    123c:	20 91 4c 03 	lds	r18, 0x034C
    1240:	30 91 4d 03 	lds	r19, 0x034D
    1244:	0f 5f       	subi	r16, 0xFF	; 255
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	2f 4f       	sbci	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	00 93 4a 03 	sts	0x034A, r16
    1250:	10 93 4b 03 	sts	0x034B, r17
    1254:	20 93 4c 03 	sts	0x034C, r18
    1258:	30 93 4d 03 	sts	0x034D, r19
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <slave_send+0x10e>
  }
  else
  {
    SPI_send ((char *)&tsize,sizeof (uint8_t));
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	ce 01       	movw	r24, r28
    1264:	04 96       	adiw	r24, 0x04	; 4
    1266:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
    crc = update_crc_16(tsize, crc);
    126a:	69 81       	ldd	r22, Y+1	; 0x01
    126c:	7a 81       	ldd	r23, Y+2	; 0x02
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
    1278:	6f 2d       	mov	r22, r15
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	8d 2d       	mov	r24, r13
    127e:	9e 2d       	mov	r25, r14
    1280:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
  for(i = 0; i < size; i++)
    1284:	ff 20       	and	r15, r15
    1286:	79 f0       	breq	.+30     	; 0x12a6 <slave_send+0x13c>
    1288:	0d 2d       	mov	r16, r13
    128a:	1e 2d       	mov	r17, r14
    128c:	e1 2c       	mov	r14, r1
    crc = update_crc_16(data[i], crc);
    128e:	69 81       	ldd	r22, Y+1	; 0x01
    1290:	7a 81       	ldd	r23, Y+2	; 0x02
    1292:	f8 01       	movw	r30, r16
    1294:	81 91       	ld	r24, Z+
    1296:	8f 01       	movw	r16, r30
    1298:	0e 94 67 00 	call	0xce	; 0xce <update_crc_16>
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
    crc = update_crc_16(tsize, crc);
  }
    
  ///* Send data corresponding to command
  SPI_send ((char *)data,sizeof(char) * size);
  for(i = 0; i < size; i++)
    12a0:	e3 94       	inc	r14
    12a2:	ef 10       	cpse	r14, r15
    12a4:	f4 cf       	rjmp	.-24     	; 0x128e <slave_send+0x124>
    crc = update_crc_16(data[i], crc);
    
  ///* Send CRC
  crc = ~crc;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
  SPI_send ((char *)&crc, sizeof (uint16_t));
    12b2:	62 e0       	ldi	r22, 0x02	; 2
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
    
  ///* End communication
  c = END_SPI;
    12be:	8a ea       	ldi	r24, 0xAA	; 170
    12c0:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < N_END_SPI; i++)
    SPI_send ((char *)&c, sizeof (uint8_t));
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	ce 01       	movw	r24, r28
    12c8:	03 96       	adiw	r24, 0x03	; 3
    12ca:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	ce 01       	movw	r24, r28
    12d4:	03 96       	adiw	r24, 0x03	; 3
    12d6:	0e 94 99 09 	call	0x1332	; 0x1332 <SPI_send>
      
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	08 95       	ret

000012f8 <init_SPI>:
}

void init_SPI(void)
{
  ///Set MOSI and SCK output, all others input
  DDR_SPI &= 0xF0;
    12f8:	87 b3       	in	r24, 0x17	; 23
    12fa:	80 7f       	andi	r24, 0xF0	; 240
    12fc:	87 bb       	out	0x17, r24	; 23
  DDR_SPI = _BV(SPICLK) | _BV(SPIDO);
    12fe:	86 e0       	ldi	r24, 0x06	; 6
    1300:	87 bb       	out	0x17, r24	; 23
  
  DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);;
    1302:	87 b3       	in	r24, 0x17	; 23
    1304:	81 63       	ori	r24, 0x31	; 49
    1306:	87 bb       	out	0x17, r24	; 23
  ///Switch off all devices
  PORT_CS |=_BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);;
    1308:	88 b3       	in	r24, 0x18	; 24
    130a:	81 63       	ori	r24, 0x31	; 49
    130c:	88 bb       	out	0x18, r24	; 24

  ///Enable SPI, Master, set clock rate
  ///@todo Check frequency 
  SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    130e:	83 e5       	ldi	r24, 0x53	; 83
    1310:	8d b9       	out	0x0d, r24	; 13
    1312:	08 95       	ret

00001314 <init_SPI_trans>:
}

void init_SPI_trans(uint8_t CS_pin){
  
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= _BV(SLAVE) |_BV(CC1020) | _BV(ADC_S);;
    1314:	98 b3       	in	r25, 0x18	; 24
    1316:	91 63       	ori	r25, 0x31	; 49
    1318:	98 bb       	out	0x18, r25	; 24
  cbi (PORT_CS, CS_pin);
    131a:	98 b3       	in	r25, 0x18	; 24
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <init_SPI_trans+0x12>
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <init_SPI_trans+0xe>
    132a:	20 95       	com	r18
    132c:	92 23       	and	r25, r18
    132e:	98 bb       	out	0x18, r25	; 24
    1330:	08 95       	ret

00001332 <SPI_send>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    1332:	61 15       	cp	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	51 f0       	breq	.+20     	; 0x134c <SPI_send+0x1a>
    1338:	fc 01       	movw	r30, r24
    133a:	86 0f       	add	r24, r22
    133c:	97 1f       	adc	r25, r23
  {
	 ///* Send one char
    SPDR = str[i];
    133e:	21 91       	ld	r18, Z+
    1340:	2f b9       	out	0x0f, r18	; 15
	 ///* Wait for SPIF flag to be set (TX complete)
    while(!(SPSR & (1<<SPIF)));
    1342:	77 9b       	sbis	0x0e, 7	; 14
    1344:	fe cf       	rjmp	.-4      	; 0x1342 <SPI_send+0x10>

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    1346:	e8 17       	cp	r30, r24
    1348:	f9 07       	cpc	r31, r25
    134a:	c9 f7       	brne	.-14     	; 0x133e <SPI_send+0xc>
    134c:	08 95       	ret

0000134e <SPI_transfer>:
  return;
}

uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
    134e:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
    1350:	77 9b       	sbis	0x0e, 7	; 14
    1352:	fe cf       	rjmp	.-4      	; 0x1350 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
    1354:	8f b1       	in	r24, 0x0f	; 15
}
    1356:	08 95       	ret

00001358 <end_SPI>:

void end_SPI(void)
{
  ///Pull the CS_pin on the corresponding port low
  PORT_CS |= _BV(SLAVE) |_BV(CC1020) | _BV(ADC_S);;	
    1358:	88 b3       	in	r24, 0x18	; 24
    135a:	81 63       	ori	r24, 0x31	; 49
    135c:	88 bb       	out	0x18, r24	; 24
    135e:	08 95       	ret

00001360 <configure_SS>:
#include "peripherals.h"

void configure_SS(void)
{
  ///Set PD and range pins as output
  sbi(DDRB, PB6);
    1360:	be 9a       	sbi	0x17, 6	; 23
  ///Set PD high: power up the ADC IC
  sbi(PORTB, PB6);
    1362:	c6 9a       	sbi	0x18, 6	; 24
    1364:	08 95       	ret

00001366 <poll_SS>:
  sbi(PORTB, ADC_S);
  _delay_us(1);*/
}

void poll_SS(void)
{
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 e0       	ldi	r16, 0x00	; 0
    1376:	10 e0       	ldi	r17, 0x00	; 0
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    cbi(PORTB, ADC_S);
    1378:	c5 98       	cbi	0x18, 5	; 24
    SPI_transfer(0b00011000 | (channel >> 1));
    137a:	c0 2f       	mov	r28, r16
    137c:	c6 95       	lsr	r28
    137e:	c8 61       	ori	r28, 0x18	; 24
    1380:	8c 2f       	mov	r24, r28
    1382:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    1386:	98 01       	movw	r18, r16
    1388:	36 95       	lsr	r19
    138a:	32 2f       	mov	r19, r18
    138c:	22 27       	eor	r18, r18
    138e:	37 95       	ror	r19
    1390:	27 95       	ror	r18
    1392:	82 2f       	mov	r24, r18
    1394:	80 64       	ori	r24, 0x40	; 64
    1396:	d8 2e       	mov	r13, r24
    1398:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
    sbi(PORTB, ADC_S);
    139c:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	8a 95       	dec	r24
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <poll_SS+0x3a>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <poll_SS+0x40>
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
    13a6:	c5 98       	cbi	0x18, 5	; 24
    SPI_transfer(0b00011000 | (channel >> 1));
    13a8:	8c 2f       	mov	r24, r28
    13aa:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
    SPI_transfer(((channel & 0x01) << 7) | 0x40);
    13ae:	8d 2d       	mov	r24, r13
    13b0:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
    sbi(PORTB, ADC_S);
    13b4:	c5 9a       	sbi	0x18, 5	; 24
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	8a 95       	dec	r24
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <poll_SS+0x52>
    13bc:	00 c0       	rjmp	.+0      	; 0x13be <poll_SS+0x58>
    _delay_us(1);
    
    cbi(PORTB, ADC_S);
    13be:	c5 98       	cbi	0x18, 5	; 24
    Current_state.ss.reading[channel] = SPI_transfer(0b00011000 | (channel >> 1));;
    13c0:	8c 2f       	mov	r24, r28
    13c2:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	e8 01       	movw	r28, r16
    13cc:	cc 0f       	add	r28, r28
    13ce:	dd 1f       	adc	r29, r29
    13d0:	c0 52       	subi	r28, 0x20	; 32
    13d2:	dc 4f       	sbci	r29, 0xFC	; 252
    13d4:	3e a7       	std	Y+46, r19	; 0x2e
    13d6:	2d a7       	std	Y+45, r18	; 0x2d
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    13d8:	2d a5       	ldd	r18, Y+45	; 0x2d
    13da:	3e a5       	ldd	r19, Y+46	; 0x2e
    13dc:	32 2f       	mov	r19, r18
    13de:	22 27       	eor	r18, r18
    13e0:	3e a7       	std	Y+46, r19	; 0x2e
    13e2:	2d a7       	std	Y+45, r18	; 0x2d
    Current_state.ss.reading[channel] &= 0x0F00;
    13e4:	2d a5       	ldd	r18, Y+45	; 0x2d
    13e6:	3e a5       	ldd	r19, Y+46	; 0x2e
    13e8:	22 27       	eor	r18, r18
    13ea:	3f 70       	andi	r19, 0x0F	; 15
    13ec:	3e a7       	std	Y+46, r19	; 0x2e
    13ee:	2d a7       	std	Y+45, r18	; 0x2d
    Current_state.ss.reading[channel] |= SPI_transfer(((channel & 0x01) << 7) | 0x40);
    13f0:	ed a4       	ldd	r14, Y+45	; 0x2d
    13f2:	fe a4       	ldd	r15, Y+46	; 0x2e
    13f4:	8d 2d       	mov	r24, r13
    13f6:	0e 94 a7 09 	call	0x134e	; 0x134e <SPI_transfer>
    13fa:	e8 2a       	or	r14, r24
    13fc:	fe a6       	std	Y+46, r15	; 0x2e
    13fe:	ed a6       	std	Y+45, r14	; 0x2d
    sbi(PORTB, ADC_S);
    1400:	c5 9a       	sbi	0x18, 5	; 24
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	8a 95       	dec	r24
    1406:	f1 f7       	brne	.-4      	; 0x1404 <poll_SS+0x9e>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <poll_SS+0xa4>
    140a:	0f 5f       	subi	r16, 0xFF	; 255
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
///Power Down PD low
  cbi(PORTB, PB6);
  return;*/
  
  ///Loop for reading the 6 sun sensor values
  while(channel <= 5)
    140e:	06 30       	cpi	r16, 0x06	; 6
    1410:	11 05       	cpc	r17, r1
    1412:	09 f0       	breq	.+2      	; 0x1416 <poll_SS+0xb0>
    1414:	b1 cf       	rjmp	.-158    	; 0x1378 <poll_SS+0x12>
    
    channel++;
    
  }
  ///Power Down PD low
  cbi(PORTB, PB6);
    1416:	c6 98       	cbi	0x18, 6	; 24
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	08 95       	ret

00001428 <init_TWI>:
#include <util/twi.h>

void init_TWI(void) {
  /// <b>Execution</b> <br><br>
  ///Initialize TWI clock: 50 kHz clock, TWPS = 0 => prescaler = 1 
  TWSR = 0;
    1428:	10 92 71 00 	sts	0x0071, r1
  TWCR = 0;
    142c:	10 92 74 00 	sts	0x0074, r1
  TWBR = 72;
    1430:	88 e4       	ldi	r24, 0x48	; 72
    1432:	80 93 70 00 	sts	0x0070, r24
    1436:	08 95       	ret

00001438 <TWI_rec_byte>:
int TWI_rec_byte(uint8_t addr, uint8_t *buf){

  ///Transmit Address
  do{						
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1438:	e4 e7       	ldi	r30, 0x74	; 116
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	24 ea       	ldi	r18, 0xA4	; 164
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);
    143e:	a1 e7       	ldi	r26, 0x71	; 113
    1440:	b0 e0       	ldi	r27, 0x00	; 0
int TWI_rec_byte(uint8_t addr, uint8_t *buf){

  ///Transmit Address
  do{						
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1442:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT)));
    1444:	90 81       	ld	r25, Z
    1446:	99 23       	and	r25, r25
    1448:	ec f7       	brge	.-6      	; 0x1444 <TWI_rec_byte+0xc>
  }while(TW_STATUS == TW_MT_ARB_LOST);
    144a:	9c 91       	ld	r25, X
    144c:	98 7f       	andi	r25, 0xF8	; 248
    144e:	98 33       	cpi	r25, 0x38	; 56
    1450:	c1 f3       	breq	.-16     	; 0x1442 <TWI_rec_byte+0xa>

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
    1452:	90 91 71 00 	lds	r25, 0x0071
    1456:	98 7f       	andi	r25, 0xF8	; 248
    1458:	90 31       	cpi	r25, 0x10	; 16
    145a:	31 f0       	breq	.+12     	; 0x1468 <TWI_rec_byte+0x30>
    145c:	90 91 71 00 	lds	r25, 0x0071
    1460:	98 7f       	andi	r25, 0xF8	; 248
    1462:	98 30       	cpi	r25, 0x08	; 8
    1464:	09 f0       	breq	.+2      	; 0x1468 <TWI_rec_byte+0x30>
    1466:	4a c0       	rjmp	.+148    	; 0x14fc <TWI_rec_byte+0xc4>

  TWDR = (addr << 1) + TW_READ;
    1468:	88 0f       	add	r24, r24
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 73 00 	sts	0x0073, r24
  TWCR = (1 << TWINT) | (1 << TWEN);
    1470:	84 e8       	ldi	r24, 0x84	; 132
    1472:	80 93 74 00 	sts	0x0074, r24

  while (!(TWCR & (1 << TWINT)));
    1476:	e4 e7       	ldi	r30, 0x74	; 116
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	ec f7       	brge	.-6      	; 0x147a <TWI_rec_byte+0x42>
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
    1480:	80 91 71 00 	lds	r24, 0x0071
    1484:	88 7f       	andi	r24, 0xF8	; 248
    1486:	88 34       	cpi	r24, 0x48	; 72
    1488:	31 f4       	brne	.+12     	; 0x1496 <TWI_rec_byte+0x5e>
    148a:	84 e9       	ldi	r24, 0x94	; 148
    148c:	80 93 74 00 	sts	0x0074, r24
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	08 95       	ret
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
    1496:	80 91 71 00 	lds	r24, 0x0071
    149a:	88 7f       	andi	r24, 0xF8	; 248
    149c:	88 33       	cpi	r24, 0x38	; 56
    149e:	89 f1       	breq	.+98     	; 0x1502 <TWI_rec_byte+0xca>
  if (TW_STATUS != TW_MR_SLA_ACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
    14a0:	80 91 71 00 	lds	r24, 0x0071
    14a4:	88 7f       	andi	r24, 0xF8	; 248
    14a6:	80 34       	cpi	r24, 0x40	; 64
    14a8:	31 f0       	breq	.+12     	; 0x14b6 <TWI_rec_byte+0x7e>
    14aa:	84 e9       	ldi	r24, 0x94	; 148
    14ac:	80 93 74 00 	sts	0x0074, r24
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	08 95       	ret
    14b6:	85 e8       	ldi	r24, 0x85	; 133
    14b8:	8a 95       	dec	r24
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <TWI_rec_byte+0x80>
    14bc:	00 00       	nop

  _delay_us(50);

  ///Receive Data
  TWCR = (1 << TWINT) | (1 << TWEN);
    14be:	84 e8       	ldi	r24, 0x84	; 132
    14c0:	80 93 74 00 	sts	0x0074, r24
  while (!(TWCR & (1 << TWINT)));
    14c4:	e4 e7       	ldi	r30, 0x74	; 116
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	88 23       	and	r24, r24
    14cc:	ec f7       	brge	.-6      	; 0x14c8 <TWI_rec_byte+0x90>
  switch (TW_STATUS) {
    14ce:	80 91 71 00 	lds	r24, 0x0071
    14d2:	88 7f       	andi	r24, 0xF8	; 248
    14d4:	80 35       	cpi	r24, 0x50	; 80
    14d6:	11 f0       	breq	.+4      	; 0x14dc <TWI_rec_byte+0xa4>
    14d8:	88 35       	cpi	r24, 0x58	; 88
    14da:	51 f4       	brne	.+20     	; 0x14f0 <TWI_rec_byte+0xb8>
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    14dc:	80 91 73 00 	lds	r24, 0x0073
    14e0:	fb 01       	movw	r30, r22
    14e2:	80 83       	st	Z, r24
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
    14e4:	84 e9       	ldi	r24, 0x94	; 148
    14e6:	80 93 74 00 	sts	0x0074, r24
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	08 95       	ret
  case TW_MR_DATA_NACK: // FALLTHROUGH
  case TW_MR_DATA_ACK:
    *buf = TWDR;
    break;
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
    14f0:	84 e9       	ldi	r24, 0x94	; 148
    14f2:	80 93 74 00 	sts	0x0074, r24
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	9f ef       	ldi	r25, 0xFF	; 255
    14fa:	08 95       	ret
    ///* send start cond.
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while (!(TWCR & (1 << TWINT)));
  }while(TW_STATUS == TW_MT_ARB_LOST);

  if ( (TW_STATUS != TW_REP_START) && (TW_STATUS != TW_START)) return -1;
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
    14fe:	9f ef       	ldi	r25, 0xFF	; 255
    1500:	08 95       	ret
  TWDR = (addr << 1) + TW_READ;
  TWCR = (1 << TWINT) | (1 << TWEN);

  while (!(TWCR & (1 << TWINT)));
  if (TW_STATUS == TW_MR_SLA_NACK) {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;}
  if (TW_STATUS == TW_MR_ARB_LOST) return -2;
    1502:	8e ef       	ldi	r24, 0xFE	; 254
    1504:	9f ef       	ldi	r25, 0xFF	; 255
  default:
    {TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return -1;}
  }

  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); return 1;
}
    1506:	08 95       	ret

00001508 <init_UART0>:
#include "uart.h"

void init_UART0(void )
{

  UCSR0A = 0;
    1508:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
    150a:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
    150c:	e5 e9       	ldi	r30, 0x95	; 149
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
    1512:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
    1514:	8a b1       	in	r24, 0x0a	; 10
    1516:	88 61       	ori	r24, 0x18	; 24
    1518:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
    151a:	80 81       	ld	r24, Z
    151c:	8e 60       	ori	r24, 0x0E	; 14
    151e:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
    1520:	87 e6       	ldi	r24, 0x67	; 103
    1522:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
    1524:	10 92 90 00 	sts	0x0090, r1
    1528:	08 95       	ret

0000152a <transmit_UART0>:
}

void transmit_UART0(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
    152a:	5d 9b       	sbis	0x0b, 5	; 11
    152c:	fe cf       	rjmp	.-4      	; 0x152a <transmit_UART0>
  //* Start transmission
  UDR0 = data;
    152e:	8c b9       	out	0x0c, r24	; 12
    1530:	08 95       	ret

00001532 <transmit_string_UART0>:

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    1532:	fc 01       	movw	r30, r24
    1534:	20 81       	ld	r18, Z
    1536:	22 23       	and	r18, r18
    1538:	39 f0       	breq	.+14     	; 0x1548 <transmit_string_UART0+0x16>
    153a:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
    153c:	5d 9b       	sbis	0x0b, 5	; 11
    153e:	fe cf       	rjmp	.-4      	; 0x153c <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
    1540:	2c b9       	out	0x0c, r18	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
    1542:	21 91       	ld	r18, Z+
    1544:	21 11       	cpse	r18, r1
    1546:	fa cf       	rjmp	.-12     	; 0x153c <transmit_string_UART0+0xa>
    1548:	08 95       	ret

0000154a <__fixunssfsi>:
    154a:	70 d0       	rcall	.+224    	; 0x162c <__fp_splitA>
    154c:	88 f0       	brcs	.+34     	; 0x1570 <__fixunssfsi+0x26>
    154e:	9f 57       	subi	r25, 0x7F	; 127
    1550:	90 f0       	brcs	.+36     	; 0x1576 <__fixunssfsi+0x2c>
    1552:	b9 2f       	mov	r27, r25
    1554:	99 27       	eor	r25, r25
    1556:	b7 51       	subi	r27, 0x17	; 23
    1558:	a0 f0       	brcs	.+40     	; 0x1582 <__fixunssfsi+0x38>
    155a:	d1 f0       	breq	.+52     	; 0x1590 <__fixunssfsi+0x46>
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	1a f0       	brmi	.+6      	; 0x156c <__fixunssfsi+0x22>
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__fixunssfsi+0x12>
    156a:	12 c0       	rjmp	.+36     	; 0x1590 <__fixunssfsi+0x46>
    156c:	b1 30       	cpi	r27, 0x01	; 1
    156e:	81 f0       	breq	.+32     	; 0x1590 <__fixunssfsi+0x46>
    1570:	77 d0       	rcall	.+238    	; 0x1660 <__fp_zero>
    1572:	b1 e0       	ldi	r27, 0x01	; 1
    1574:	08 95       	ret
    1576:	74 c0       	rjmp	.+232    	; 0x1660 <__fp_zero>
    1578:	67 2f       	mov	r22, r23
    157a:	78 2f       	mov	r23, r24
    157c:	88 27       	eor	r24, r24
    157e:	b8 5f       	subi	r27, 0xF8	; 248
    1580:	39 f0       	breq	.+14     	; 0x1590 <__fixunssfsi+0x46>
    1582:	b9 3f       	cpi	r27, 0xF9	; 249
    1584:	cc f3       	brlt	.-14     	; 0x1578 <__fixunssfsi+0x2e>
    1586:	86 95       	lsr	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b3 95       	inc	r27
    158e:	d9 f7       	brne	.-10     	; 0x1586 <__fixunssfsi+0x3c>
    1590:	3e f4       	brtc	.+14     	; 0x15a0 <__fixunssfsi+0x56>
    1592:	90 95       	com	r25
    1594:	80 95       	com	r24
    1596:	70 95       	com	r23
    1598:	61 95       	neg	r22
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	08 95       	ret

000015a2 <__floatunsisf>:
    15a2:	e8 94       	clt
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <__floatsisf+0x12>

000015a6 <__floatsisf>:
    15a6:	97 fb       	bst	r25, 7
    15a8:	3e f4       	brtc	.+14     	; 0x15b8 <__floatsisf+0x12>
    15aa:	90 95       	com	r25
    15ac:	80 95       	com	r24
    15ae:	70 95       	com	r23
    15b0:	61 95       	neg	r22
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	99 23       	and	r25, r25
    15ba:	a9 f0       	breq	.+42     	; 0x15e6 <__floatsisf+0x40>
    15bc:	f9 2f       	mov	r31, r25
    15be:	96 e9       	ldi	r25, 0x96	; 150
    15c0:	bb 27       	eor	r27, r27
    15c2:	93 95       	inc	r25
    15c4:	f6 95       	lsr	r31
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	b7 95       	ror	r27
    15ce:	f1 11       	cpse	r31, r1
    15d0:	f8 cf       	rjmp	.-16     	; 0x15c2 <__floatsisf+0x1c>
    15d2:	fa f4       	brpl	.+62     	; 0x1612 <__floatsisf+0x6c>
    15d4:	bb 0f       	add	r27, r27
    15d6:	11 f4       	brne	.+4      	; 0x15dc <__floatsisf+0x36>
    15d8:	60 ff       	sbrs	r22, 0
    15da:	1b c0       	rjmp	.+54     	; 0x1612 <__floatsisf+0x6c>
    15dc:	6f 5f       	subi	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <__floatsisf+0x6c>
    15e6:	88 23       	and	r24, r24
    15e8:	11 f0       	breq	.+4      	; 0x15ee <__floatsisf+0x48>
    15ea:	96 e9       	ldi	r25, 0x96	; 150
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <__floatsisf+0x6a>
    15ee:	77 23       	and	r23, r23
    15f0:	21 f0       	breq	.+8      	; 0x15fa <__floatsisf+0x54>
    15f2:	9e e8       	ldi	r25, 0x8E	; 142
    15f4:	87 2f       	mov	r24, r23
    15f6:	76 2f       	mov	r23, r22
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <__floatsisf+0x5e>
    15fa:	66 23       	and	r22, r22
    15fc:	71 f0       	breq	.+28     	; 0x161a <__floatsisf+0x74>
    15fe:	96 e8       	ldi	r25, 0x86	; 134
    1600:	86 2f       	mov	r24, r22
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	2a f0       	brmi	.+10     	; 0x1612 <__floatsisf+0x6c>
    1608:	9a 95       	dec	r25
    160a:	66 0f       	add	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	da f7       	brpl	.-10     	; 0x1608 <__floatsisf+0x62>
    1612:	88 0f       	add	r24, r24
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	97 f9       	bld	r25, 7
    161a:	08 95       	ret

0000161c <__fp_split3>:
    161c:	57 fd       	sbrc	r21, 7
    161e:	90 58       	subi	r25, 0x80	; 128
    1620:	44 0f       	add	r20, r20
    1622:	55 1f       	adc	r21, r21
    1624:	59 f0       	breq	.+22     	; 0x163c <__fp_splitA+0x10>
    1626:	5f 3f       	cpi	r21, 0xFF	; 255
    1628:	71 f0       	breq	.+28     	; 0x1646 <__fp_splitA+0x1a>
    162a:	47 95       	ror	r20

0000162c <__fp_splitA>:
    162c:	88 0f       	add	r24, r24
    162e:	97 fb       	bst	r25, 7
    1630:	99 1f       	adc	r25, r25
    1632:	61 f0       	breq	.+24     	; 0x164c <__fp_splitA+0x20>
    1634:	9f 3f       	cpi	r25, 0xFF	; 255
    1636:	79 f0       	breq	.+30     	; 0x1656 <__fp_splitA+0x2a>
    1638:	87 95       	ror	r24
    163a:	08 95       	ret
    163c:	12 16       	cp	r1, r18
    163e:	13 06       	cpc	r1, r19
    1640:	14 06       	cpc	r1, r20
    1642:	55 1f       	adc	r21, r21
    1644:	f2 cf       	rjmp	.-28     	; 0x162a <__fp_split3+0xe>
    1646:	46 95       	lsr	r20
    1648:	f1 df       	rcall	.-30     	; 0x162c <__fp_splitA>
    164a:	08 c0       	rjmp	.+16     	; 0x165c <__fp_splitA+0x30>
    164c:	16 16       	cp	r1, r22
    164e:	17 06       	cpc	r1, r23
    1650:	18 06       	cpc	r1, r24
    1652:	99 1f       	adc	r25, r25
    1654:	f1 cf       	rjmp	.-30     	; 0x1638 <__fp_splitA+0xc>
    1656:	86 95       	lsr	r24
    1658:	71 05       	cpc	r23, r1
    165a:	61 05       	cpc	r22, r1
    165c:	08 94       	sec
    165e:	08 95       	ret

00001660 <__fp_zero>:
    1660:	e8 94       	clt

00001662 <__fp_szero>:
    1662:	bb 27       	eor	r27, r27
    1664:	66 27       	eor	r22, r22
    1666:	77 27       	eor	r23, r23
    1668:	cb 01       	movw	r24, r22
    166a:	97 f9       	bld	r25, 7
    166c:	08 95       	ret

0000166e <__mulsf3>:
    166e:	0b d0       	rcall	.+22     	; 0x1686 <__mulsf3x>
    1670:	78 c0       	rjmp	.+240    	; 0x1762 <__fp_round>
    1672:	69 d0       	rcall	.+210    	; 0x1746 <__fp_pscA>
    1674:	28 f0       	brcs	.+10     	; 0x1680 <__mulsf3+0x12>
    1676:	6e d0       	rcall	.+220    	; 0x1754 <__fp_pscB>
    1678:	18 f0       	brcs	.+6      	; 0x1680 <__mulsf3+0x12>
    167a:	95 23       	and	r25, r21
    167c:	09 f0       	breq	.+2      	; 0x1680 <__mulsf3+0x12>
    167e:	5a c0       	rjmp	.+180    	; 0x1734 <__fp_inf>
    1680:	5f c0       	rjmp	.+190    	; 0x1740 <__fp_nan>
    1682:	11 24       	eor	r1, r1
    1684:	ee cf       	rjmp	.-36     	; 0x1662 <__fp_szero>

00001686 <__mulsf3x>:
    1686:	ca df       	rcall	.-108    	; 0x161c <__fp_split3>
    1688:	a0 f3       	brcs	.-24     	; 0x1672 <__mulsf3+0x4>

0000168a <__mulsf3_pse>:
    168a:	95 9f       	mul	r25, r21
    168c:	d1 f3       	breq	.-12     	; 0x1682 <__mulsf3+0x14>
    168e:	95 0f       	add	r25, r21
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	55 1f       	adc	r21, r21
    1694:	62 9f       	mul	r22, r18
    1696:	f0 01       	movw	r30, r0
    1698:	72 9f       	mul	r23, r18
    169a:	bb 27       	eor	r27, r27
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	63 9f       	mul	r22, r19
    16a2:	aa 27       	eor	r26, r26
    16a4:	f0 0d       	add	r31, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	aa 1f       	adc	r26, r26
    16aa:	64 9f       	mul	r22, r20
    16ac:	66 27       	eor	r22, r22
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	66 1f       	adc	r22, r22
    16b4:	82 9f       	mul	r24, r18
    16b6:	22 27       	eor	r18, r18
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	73 9f       	mul	r23, r19
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	62 1f       	adc	r22, r18
    16c6:	83 9f       	mul	r24, r19
    16c8:	a0 0d       	add	r26, r0
    16ca:	61 1d       	adc	r22, r1
    16cc:	22 1f       	adc	r18, r18
    16ce:	74 9f       	mul	r23, r20
    16d0:	33 27       	eor	r19, r19
    16d2:	a0 0d       	add	r26, r0
    16d4:	61 1d       	adc	r22, r1
    16d6:	23 1f       	adc	r18, r19
    16d8:	84 9f       	mul	r24, r20
    16da:	60 0d       	add	r22, r0
    16dc:	21 1d       	adc	r18, r1
    16de:	82 2f       	mov	r24, r18
    16e0:	76 2f       	mov	r23, r22
    16e2:	6a 2f       	mov	r22, r26
    16e4:	11 24       	eor	r1, r1
    16e6:	9f 57       	subi	r25, 0x7F	; 127
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	8a f0       	brmi	.+34     	; 0x170e <__mulsf3_pse+0x84>
    16ec:	e1 f0       	breq	.+56     	; 0x1726 <__mulsf3_pse+0x9c>
    16ee:	88 23       	and	r24, r24
    16f0:	4a f0       	brmi	.+18     	; 0x1704 <__mulsf3_pse+0x7a>
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	bb 1f       	adc	r27, r27
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__mulsf3_pse+0x64>
    1704:	9e 3f       	cpi	r25, 0xFE	; 254
    1706:	51 05       	cpc	r21, r1
    1708:	70 f0       	brcs	.+28     	; 0x1726 <__mulsf3_pse+0x9c>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <__fp_inf>
    170c:	aa cf       	rjmp	.-172    	; 0x1662 <__fp_szero>
    170e:	5f 3f       	cpi	r21, 0xFF	; 255
    1710:	ec f3       	brlt	.-6      	; 0x170c <__mulsf3_pse+0x82>
    1712:	98 3e       	cpi	r25, 0xE8	; 232
    1714:	dc f3       	brlt	.-10     	; 0x170c <__mulsf3_pse+0x82>
    1716:	86 95       	lsr	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	b7 95       	ror	r27
    171e:	f7 95       	ror	r31
    1720:	e7 95       	ror	r30
    1722:	9f 5f       	subi	r25, 0xFF	; 255
    1724:	c1 f7       	brne	.-16     	; 0x1716 <__mulsf3_pse+0x8c>
    1726:	fe 2b       	or	r31, r30
    1728:	88 0f       	add	r24, r24
    172a:	91 1d       	adc	r25, r1
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	97 f9       	bld	r25, 7
    1732:	08 95       	ret

00001734 <__fp_inf>:
    1734:	97 f9       	bld	r25, 7
    1736:	9f 67       	ori	r25, 0x7F	; 127
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	08 95       	ret

00001740 <__fp_nan>:
    1740:	9f ef       	ldi	r25, 0xFF	; 255
    1742:	80 ec       	ldi	r24, 0xC0	; 192
    1744:	08 95       	ret

00001746 <__fp_pscA>:
    1746:	00 24       	eor	r0, r0
    1748:	0a 94       	dec	r0
    174a:	16 16       	cp	r1, r22
    174c:	17 06       	cpc	r1, r23
    174e:	18 06       	cpc	r1, r24
    1750:	09 06       	cpc	r0, r25
    1752:	08 95       	ret

00001754 <__fp_pscB>:
    1754:	00 24       	eor	r0, r0
    1756:	0a 94       	dec	r0
    1758:	12 16       	cp	r1, r18
    175a:	13 06       	cpc	r1, r19
    175c:	14 06       	cpc	r1, r20
    175e:	05 06       	cpc	r0, r21
    1760:	08 95       	ret

00001762 <__fp_round>:
    1762:	09 2e       	mov	r0, r25
    1764:	03 94       	inc	r0
    1766:	00 0c       	add	r0, r0
    1768:	11 f4       	brne	.+4      	; 0x176e <__fp_round+0xc>
    176a:	88 23       	and	r24, r24
    176c:	52 f0       	brmi	.+20     	; 0x1782 <__fp_round+0x20>
    176e:	bb 0f       	add	r27, r27
    1770:	40 f4       	brcc	.+16     	; 0x1782 <__fp_round+0x20>
    1772:	bf 2b       	or	r27, r31
    1774:	11 f4       	brne	.+4      	; 0x177a <__fp_round+0x18>
    1776:	60 ff       	sbrs	r22, 0
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <__fp_round+0x20>
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	08 95       	ret

00001784 <sprintf>:
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	2e 97       	sbiw	r28, 0x0e	; 14
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	0d 89       	ldd	r16, Y+21	; 0x15
    179e:	1e 89       	ldd	r17, Y+22	; 0x16
    17a0:	86 e0       	ldi	r24, 0x06	; 6
    17a2:	8c 83       	std	Y+4, r24	; 0x04
    17a4:	1a 83       	std	Y+2, r17	; 0x02
    17a6:	09 83       	std	Y+1, r16	; 0x01
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f e7       	ldi	r25, 0x7F	; 127
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	ae 01       	movw	r20, r28
    17b2:	47 5e       	subi	r20, 0xE7	; 231
    17b4:	5f 4f       	sbci	r21, 0xFF	; 255
    17b6:	6f 89       	ldd	r22, Y+23	; 0x17
    17b8:	78 8d       	ldd	r23, Y+24	; 0x18
    17ba:	ce 01       	movw	r24, r28
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <vfprintf>
    17c2:	ef 81       	ldd	r30, Y+7	; 0x07
    17c4:	f8 85       	ldd	r31, Y+8	; 0x08
    17c6:	e0 0f       	add	r30, r16
    17c8:	f1 1f       	adc	r31, r17
    17ca:	10 82       	st	Z, r1
    17cc:	2e 96       	adiw	r28, 0x0e	; 14
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <vfprintf>:
    17e2:	2f 92       	push	r2
    17e4:	3f 92       	push	r3
    17e6:	4f 92       	push	r4
    17e8:	5f 92       	push	r5
    17ea:	6f 92       	push	r6
    17ec:	7f 92       	push	r7
    17ee:	8f 92       	push	r8
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	2c 97       	sbiw	r28, 0x0c	; 12
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	7c 01       	movw	r14, r24
    1818:	6b 01       	movw	r12, r22
    181a:	8a 01       	movw	r16, r20
    181c:	fc 01       	movw	r30, r24
    181e:	17 82       	std	Z+7, r1	; 0x07
    1820:	16 82       	std	Z+6, r1	; 0x06
    1822:	83 81       	ldd	r24, Z+3	; 0x03
    1824:	81 ff       	sbrs	r24, 1
    1826:	bd c1       	rjmp	.+890    	; 0x1ba2 <vfprintf+0x3c0>
    1828:	ce 01       	movw	r24, r28
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	4c 01       	movw	r8, r24
    182e:	f7 01       	movw	r30, r14
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	f6 01       	movw	r30, r12
    1834:	93 fd       	sbrc	r25, 3
    1836:	85 91       	lpm	r24, Z+
    1838:	93 ff       	sbrs	r25, 3
    183a:	81 91       	ld	r24, Z+
    183c:	6f 01       	movw	r12, r30
    183e:	88 23       	and	r24, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <vfprintf+0x62>
    1842:	ab c1       	rjmp	.+854    	; 0x1b9a <vfprintf+0x3b8>
    1844:	85 32       	cpi	r24, 0x25	; 37
    1846:	39 f4       	brne	.+14     	; 0x1856 <vfprintf+0x74>
    1848:	93 fd       	sbrc	r25, 3
    184a:	85 91       	lpm	r24, Z+
    184c:	93 ff       	sbrs	r25, 3
    184e:	81 91       	ld	r24, Z+
    1850:	6f 01       	movw	r12, r30
    1852:	85 32       	cpi	r24, 0x25	; 37
    1854:	29 f4       	brne	.+10     	; 0x1860 <vfprintf+0x7e>
    1856:	b7 01       	movw	r22, r14
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    185e:	e7 cf       	rjmp	.-50     	; 0x182e <vfprintf+0x4c>
    1860:	51 2c       	mov	r5, r1
    1862:	31 2c       	mov	r3, r1
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	20 32       	cpi	r18, 0x20	; 32
    1868:	a0 f4       	brcc	.+40     	; 0x1892 <vfprintf+0xb0>
    186a:	8b 32       	cpi	r24, 0x2B	; 43
    186c:	69 f0       	breq	.+26     	; 0x1888 <vfprintf+0xa6>
    186e:	30 f4       	brcc	.+12     	; 0x187c <vfprintf+0x9a>
    1870:	80 32       	cpi	r24, 0x20	; 32
    1872:	59 f0       	breq	.+22     	; 0x188a <vfprintf+0xa8>
    1874:	83 32       	cpi	r24, 0x23	; 35
    1876:	69 f4       	brne	.+26     	; 0x1892 <vfprintf+0xb0>
    1878:	20 61       	ori	r18, 0x10	; 16
    187a:	2c c0       	rjmp	.+88     	; 0x18d4 <vfprintf+0xf2>
    187c:	8d 32       	cpi	r24, 0x2D	; 45
    187e:	39 f0       	breq	.+14     	; 0x188e <vfprintf+0xac>
    1880:	80 33       	cpi	r24, 0x30	; 48
    1882:	39 f4       	brne	.+14     	; 0x1892 <vfprintf+0xb0>
    1884:	21 60       	ori	r18, 0x01	; 1
    1886:	26 c0       	rjmp	.+76     	; 0x18d4 <vfprintf+0xf2>
    1888:	22 60       	ori	r18, 0x02	; 2
    188a:	24 60       	ori	r18, 0x04	; 4
    188c:	23 c0       	rjmp	.+70     	; 0x18d4 <vfprintf+0xf2>
    188e:	28 60       	ori	r18, 0x08	; 8
    1890:	21 c0       	rjmp	.+66     	; 0x18d4 <vfprintf+0xf2>
    1892:	27 fd       	sbrc	r18, 7
    1894:	27 c0       	rjmp	.+78     	; 0x18e4 <vfprintf+0x102>
    1896:	30 ed       	ldi	r19, 0xD0	; 208
    1898:	38 0f       	add	r19, r24
    189a:	3a 30       	cpi	r19, 0x0A	; 10
    189c:	78 f4       	brcc	.+30     	; 0x18bc <vfprintf+0xda>
    189e:	26 ff       	sbrs	r18, 6
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <vfprintf+0xcc>
    18a2:	fa e0       	ldi	r31, 0x0A	; 10
    18a4:	5f 9e       	mul	r5, r31
    18a6:	30 0d       	add	r19, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	53 2e       	mov	r5, r19
    18ac:	13 c0       	rjmp	.+38     	; 0x18d4 <vfprintf+0xf2>
    18ae:	8a e0       	ldi	r24, 0x0A	; 10
    18b0:	38 9e       	mul	r3, r24
    18b2:	30 0d       	add	r19, r0
    18b4:	11 24       	eor	r1, r1
    18b6:	33 2e       	mov	r3, r19
    18b8:	20 62       	ori	r18, 0x20	; 32
    18ba:	0c c0       	rjmp	.+24     	; 0x18d4 <vfprintf+0xf2>
    18bc:	8e 32       	cpi	r24, 0x2E	; 46
    18be:	21 f4       	brne	.+8      	; 0x18c8 <vfprintf+0xe6>
    18c0:	26 fd       	sbrc	r18, 6
    18c2:	6b c1       	rjmp	.+726    	; 0x1b9a <vfprintf+0x3b8>
    18c4:	20 64       	ori	r18, 0x40	; 64
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0xf2>
    18c8:	8c 36       	cpi	r24, 0x6C	; 108
    18ca:	11 f4       	brne	.+4      	; 0x18d0 <vfprintf+0xee>
    18cc:	20 68       	ori	r18, 0x80	; 128
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <vfprintf+0xf2>
    18d0:	88 36       	cpi	r24, 0x68	; 104
    18d2:	41 f4       	brne	.+16     	; 0x18e4 <vfprintf+0x102>
    18d4:	f6 01       	movw	r30, r12
    18d6:	93 fd       	sbrc	r25, 3
    18d8:	85 91       	lpm	r24, Z+
    18da:	93 ff       	sbrs	r25, 3
    18dc:	81 91       	ld	r24, Z+
    18de:	6f 01       	movw	r12, r30
    18e0:	81 11       	cpse	r24, r1
    18e2:	c1 cf       	rjmp	.-126    	; 0x1866 <vfprintf+0x84>
    18e4:	98 2f       	mov	r25, r24
    18e6:	9f 7d       	andi	r25, 0xDF	; 223
    18e8:	95 54       	subi	r25, 0x45	; 69
    18ea:	93 30       	cpi	r25, 0x03	; 3
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <vfprintf+0x116>
    18ee:	0c 5f       	subi	r16, 0xFC	; 252
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	ff e3       	ldi	r31, 0x3F	; 63
    18f4:	f9 83       	std	Y+1, r31	; 0x01
    18f6:	0d c0       	rjmp	.+26     	; 0x1912 <vfprintf+0x130>
    18f8:	83 36       	cpi	r24, 0x63	; 99
    18fa:	31 f0       	breq	.+12     	; 0x1908 <vfprintf+0x126>
    18fc:	83 37       	cpi	r24, 0x73	; 115
    18fe:	71 f0       	breq	.+28     	; 0x191c <vfprintf+0x13a>
    1900:	83 35       	cpi	r24, 0x53	; 83
    1902:	09 f0       	breq	.+2      	; 0x1906 <vfprintf+0x124>
    1904:	5b c0       	rjmp	.+182    	; 0x19bc <vfprintf+0x1da>
    1906:	22 c0       	rjmp	.+68     	; 0x194c <vfprintf+0x16a>
    1908:	f8 01       	movw	r30, r16
    190a:	80 81       	ld	r24, Z
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	0e 5f       	subi	r16, 0xFE	; 254
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	44 24       	eor	r4, r4
    1914:	43 94       	inc	r4
    1916:	51 2c       	mov	r5, r1
    1918:	54 01       	movw	r10, r8
    191a:	15 c0       	rjmp	.+42     	; 0x1946 <vfprintf+0x164>
    191c:	38 01       	movw	r6, r16
    191e:	f2 e0       	ldi	r31, 0x02	; 2
    1920:	6f 0e       	add	r6, r31
    1922:	71 1c       	adc	r7, r1
    1924:	f8 01       	movw	r30, r16
    1926:	a0 80       	ld	r10, Z
    1928:	b1 80       	ldd	r11, Z+1	; 0x01
    192a:	26 ff       	sbrs	r18, 6
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <vfprintf+0x152>
    192e:	65 2d       	mov	r22, r5
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x156>
    1934:	6f ef       	ldi	r22, 0xFF	; 255
    1936:	7f ef       	ldi	r23, 0xFF	; 255
    1938:	c5 01       	movw	r24, r10
    193a:	2c 87       	std	Y+12, r18	; 0x0c
    193c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <strnlen>
    1940:	2c 01       	movw	r4, r24
    1942:	83 01       	movw	r16, r6
    1944:	2c 85       	ldd	r18, Y+12	; 0x0c
    1946:	2f 77       	andi	r18, 0x7F	; 127
    1948:	22 2e       	mov	r2, r18
    194a:	17 c0       	rjmp	.+46     	; 0x197a <vfprintf+0x198>
    194c:	38 01       	movw	r6, r16
    194e:	f2 e0       	ldi	r31, 0x02	; 2
    1950:	6f 0e       	add	r6, r31
    1952:	71 1c       	adc	r7, r1
    1954:	f8 01       	movw	r30, r16
    1956:	a0 80       	ld	r10, Z
    1958:	b1 80       	ldd	r11, Z+1	; 0x01
    195a:	26 ff       	sbrs	r18, 6
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <vfprintf+0x182>
    195e:	65 2d       	mov	r22, r5
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x186>
    1964:	6f ef       	ldi	r22, 0xFF	; 255
    1966:	7f ef       	ldi	r23, 0xFF	; 255
    1968:	c5 01       	movw	r24, r10
    196a:	2c 87       	std	Y+12, r18	; 0x0c
    196c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <strnlen_P>
    1970:	2c 01       	movw	r4, r24
    1972:	2c 85       	ldd	r18, Y+12	; 0x0c
    1974:	20 68       	ori	r18, 0x80	; 128
    1976:	22 2e       	mov	r2, r18
    1978:	83 01       	movw	r16, r6
    197a:	23 fc       	sbrc	r2, 3
    197c:	1b c0       	rjmp	.+54     	; 0x19b4 <vfprintf+0x1d2>
    197e:	83 2d       	mov	r24, r3
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	48 16       	cp	r4, r24
    1984:	59 06       	cpc	r5, r25
    1986:	b0 f4       	brcc	.+44     	; 0x19b4 <vfprintf+0x1d2>
    1988:	b7 01       	movw	r22, r14
    198a:	80 e2       	ldi	r24, 0x20	; 32
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1992:	3a 94       	dec	r3
    1994:	f4 cf       	rjmp	.-24     	; 0x197e <vfprintf+0x19c>
    1996:	f5 01       	movw	r30, r10
    1998:	27 fc       	sbrc	r2, 7
    199a:	85 91       	lpm	r24, Z+
    199c:	27 fe       	sbrs	r2, 7
    199e:	81 91       	ld	r24, Z+
    19a0:	5f 01       	movw	r10, r30
    19a2:	b7 01       	movw	r22, r14
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    19aa:	31 10       	cpse	r3, r1
    19ac:	3a 94       	dec	r3
    19ae:	f1 e0       	ldi	r31, 0x01	; 1
    19b0:	4f 1a       	sub	r4, r31
    19b2:	51 08       	sbc	r5, r1
    19b4:	41 14       	cp	r4, r1
    19b6:	51 04       	cpc	r5, r1
    19b8:	71 f7       	brne	.-36     	; 0x1996 <vfprintf+0x1b4>
    19ba:	e5 c0       	rjmp	.+458    	; 0x1b86 <vfprintf+0x3a4>
    19bc:	84 36       	cpi	r24, 0x64	; 100
    19be:	11 f0       	breq	.+4      	; 0x19c4 <vfprintf+0x1e2>
    19c0:	89 36       	cpi	r24, 0x69	; 105
    19c2:	39 f5       	brne	.+78     	; 0x1a12 <vfprintf+0x230>
    19c4:	f8 01       	movw	r30, r16
    19c6:	27 ff       	sbrs	r18, 7
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <vfprintf+0x1f6>
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	0c 5f       	subi	r16, 0xFC	; 252
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	08 c0       	rjmp	.+16     	; 0x19e8 <vfprintf+0x206>
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	0e 5f       	subi	r16, 0xFE	; 254
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	2f 76       	andi	r18, 0x6F	; 111
    19ea:	b2 2e       	mov	r11, r18
    19ec:	97 ff       	sbrs	r25, 7
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <vfprintf+0x220>
    19f0:	90 95       	com	r25
    19f2:	80 95       	com	r24
    19f4:	70 95       	com	r23
    19f6:	61 95       	neg	r22
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	20 68       	ori	r18, 0x80	; 128
    1a00:	b2 2e       	mov	r11, r18
    1a02:	2a e0       	ldi	r18, 0x0A	; 10
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	a4 01       	movw	r20, r8
    1a08:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__ultoa_invert>
    1a0c:	a8 2e       	mov	r10, r24
    1a0e:	a8 18       	sub	r10, r8
    1a10:	44 c0       	rjmp	.+136    	; 0x1a9a <vfprintf+0x2b8>
    1a12:	85 37       	cpi	r24, 0x75	; 117
    1a14:	29 f4       	brne	.+10     	; 0x1a20 <vfprintf+0x23e>
    1a16:	2f 7e       	andi	r18, 0xEF	; 239
    1a18:	b2 2e       	mov	r11, r18
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	25 c0       	rjmp	.+74     	; 0x1a6a <vfprintf+0x288>
    1a20:	f2 2f       	mov	r31, r18
    1a22:	f9 7f       	andi	r31, 0xF9	; 249
    1a24:	bf 2e       	mov	r11, r31
    1a26:	8f 36       	cpi	r24, 0x6F	; 111
    1a28:	c1 f0       	breq	.+48     	; 0x1a5a <vfprintf+0x278>
    1a2a:	18 f4       	brcc	.+6      	; 0x1a32 <vfprintf+0x250>
    1a2c:	88 35       	cpi	r24, 0x58	; 88
    1a2e:	79 f0       	breq	.+30     	; 0x1a4e <vfprintf+0x26c>
    1a30:	b4 c0       	rjmp	.+360    	; 0x1b9a <vfprintf+0x3b8>
    1a32:	80 37       	cpi	r24, 0x70	; 112
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <vfprintf+0x25a>
    1a36:	88 37       	cpi	r24, 0x78	; 120
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <vfprintf+0x260>
    1a3a:	af c0       	rjmp	.+350    	; 0x1b9a <vfprintf+0x3b8>
    1a3c:	2f 2f       	mov	r18, r31
    1a3e:	20 61       	ori	r18, 0x10	; 16
    1a40:	b2 2e       	mov	r11, r18
    1a42:	b4 fe       	sbrs	r11, 4
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <vfprintf+0x27e>
    1a46:	8b 2d       	mov	r24, r11
    1a48:	84 60       	ori	r24, 0x04	; 4
    1a4a:	b8 2e       	mov	r11, r24
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <vfprintf+0x27e>
    1a4e:	24 ff       	sbrs	r18, 4
    1a50:	0a c0       	rjmp	.+20     	; 0x1a66 <vfprintf+0x284>
    1a52:	9f 2f       	mov	r25, r31
    1a54:	96 60       	ori	r25, 0x06	; 6
    1a56:	b9 2e       	mov	r11, r25
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <vfprintf+0x284>
    1a5a:	28 e0       	ldi	r18, 0x08	; 8
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <vfprintf+0x288>
    1a60:	20 e1       	ldi	r18, 0x10	; 16
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x288>
    1a66:	20 e1       	ldi	r18, 0x10	; 16
    1a68:	32 e0       	ldi	r19, 0x02	; 2
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	b7 fe       	sbrs	r11, 7
    1a6e:	07 c0       	rjmp	.+14     	; 0x1a7e <vfprintf+0x29c>
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	0c 5f       	subi	r16, 0xFC	; 252
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x2a8>
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 5f       	subi	r16, 0xFE	; 254
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	a4 01       	movw	r20, r8
    1a8c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__ultoa_invert>
    1a90:	a8 2e       	mov	r10, r24
    1a92:	a8 18       	sub	r10, r8
    1a94:	fb 2d       	mov	r31, r11
    1a96:	ff 77       	andi	r31, 0x7F	; 127
    1a98:	bf 2e       	mov	r11, r31
    1a9a:	b6 fe       	sbrs	r11, 6
    1a9c:	0b c0       	rjmp	.+22     	; 0x1ab4 <vfprintf+0x2d2>
    1a9e:	2b 2d       	mov	r18, r11
    1aa0:	2e 7f       	andi	r18, 0xFE	; 254
    1aa2:	a5 14       	cp	r10, r5
    1aa4:	50 f4       	brcc	.+20     	; 0x1aba <vfprintf+0x2d8>
    1aa6:	b4 fe       	sbrs	r11, 4
    1aa8:	0a c0       	rjmp	.+20     	; 0x1abe <vfprintf+0x2dc>
    1aaa:	b2 fc       	sbrc	r11, 2
    1aac:	08 c0       	rjmp	.+16     	; 0x1abe <vfprintf+0x2dc>
    1aae:	2b 2d       	mov	r18, r11
    1ab0:	2e 7e       	andi	r18, 0xEE	; 238
    1ab2:	05 c0       	rjmp	.+10     	; 0x1abe <vfprintf+0x2dc>
    1ab4:	7a 2c       	mov	r7, r10
    1ab6:	2b 2d       	mov	r18, r11
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <vfprintf+0x2de>
    1aba:	7a 2c       	mov	r7, r10
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <vfprintf+0x2de>
    1abe:	75 2c       	mov	r7, r5
    1ac0:	24 ff       	sbrs	r18, 4
    1ac2:	0d c0       	rjmp	.+26     	; 0x1ade <vfprintf+0x2fc>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ea 0d       	add	r30, r10
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	80 81       	ld	r24, Z
    1acc:	80 33       	cpi	r24, 0x30	; 48
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <vfprintf+0x2f2>
    1ad0:	29 7e       	andi	r18, 0xE9	; 233
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <vfprintf+0x304>
    1ad4:	22 ff       	sbrs	r18, 2
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <vfprintf+0x302>
    1ad8:	73 94       	inc	r7
    1ada:	73 94       	inc	r7
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <vfprintf+0x304>
    1ade:	82 2f       	mov	r24, r18
    1ae0:	86 78       	andi	r24, 0x86	; 134
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <vfprintf+0x304>
    1ae4:	73 94       	inc	r7
    1ae6:	23 fd       	sbrc	r18, 3
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <vfprintf+0x32e>
    1aea:	20 ff       	sbrs	r18, 0
    1aec:	06 c0       	rjmp	.+12     	; 0x1afa <vfprintf+0x318>
    1aee:	5a 2c       	mov	r5, r10
    1af0:	73 14       	cp	r7, r3
    1af2:	18 f4       	brcc	.+6      	; 0x1afa <vfprintf+0x318>
    1af4:	53 0c       	add	r5, r3
    1af6:	57 18       	sub	r5, r7
    1af8:	73 2c       	mov	r7, r3
    1afa:	73 14       	cp	r7, r3
    1afc:	68 f4       	brcc	.+26     	; 0x1b18 <vfprintf+0x336>
    1afe:	b7 01       	movw	r22, r14
    1b00:	80 e2       	ldi	r24, 0x20	; 32
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	2c 87       	std	Y+12, r18	; 0x0c
    1b06:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1b0a:	73 94       	inc	r7
    1b0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b0e:	f5 cf       	rjmp	.-22     	; 0x1afa <vfprintf+0x318>
    1b10:	73 14       	cp	r7, r3
    1b12:	10 f4       	brcc	.+4      	; 0x1b18 <vfprintf+0x336>
    1b14:	37 18       	sub	r3, r7
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <vfprintf+0x338>
    1b18:	31 2c       	mov	r3, r1
    1b1a:	24 ff       	sbrs	r18, 4
    1b1c:	12 c0       	rjmp	.+36     	; 0x1b42 <vfprintf+0x360>
    1b1e:	b7 01       	movw	r22, r14
    1b20:	80 e3       	ldi	r24, 0x30	; 48
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	2c 87       	std	Y+12, r18	; 0x0c
    1b26:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1b2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b2c:	22 ff       	sbrs	r18, 2
    1b2e:	17 c0       	rjmp	.+46     	; 0x1b5e <vfprintf+0x37c>
    1b30:	21 ff       	sbrs	r18, 1
    1b32:	03 c0       	rjmp	.+6      	; 0x1b3a <vfprintf+0x358>
    1b34:	88 e5       	ldi	r24, 0x58	; 88
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <vfprintf+0x35c>
    1b3a:	88 e7       	ldi	r24, 0x78	; 120
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	b7 01       	movw	r22, r14
    1b40:	0c c0       	rjmp	.+24     	; 0x1b5a <vfprintf+0x378>
    1b42:	82 2f       	mov	r24, r18
    1b44:	86 78       	andi	r24, 0x86	; 134
    1b46:	59 f0       	breq	.+22     	; 0x1b5e <vfprintf+0x37c>
    1b48:	21 fd       	sbrc	r18, 1
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfprintf+0x36e>
    1b4c:	80 e2       	ldi	r24, 0x20	; 32
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <vfprintf+0x370>
    1b50:	8b e2       	ldi	r24, 0x2B	; 43
    1b52:	27 fd       	sbrc	r18, 7
    1b54:	8d e2       	ldi	r24, 0x2D	; 45
    1b56:	b7 01       	movw	r22, r14
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1b5e:	a5 14       	cp	r10, r5
    1b60:	38 f4       	brcc	.+14     	; 0x1b70 <vfprintf+0x38e>
    1b62:	b7 01       	movw	r22, r14
    1b64:	80 e3       	ldi	r24, 0x30	; 48
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1b6c:	5a 94       	dec	r5
    1b6e:	f7 cf       	rjmp	.-18     	; 0x1b5e <vfprintf+0x37c>
    1b70:	aa 94       	dec	r10
    1b72:	f4 01       	movw	r30, r8
    1b74:	ea 0d       	add	r30, r10
    1b76:	f1 1d       	adc	r31, r1
    1b78:	80 81       	ld	r24, Z
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1b82:	a1 10       	cpse	r10, r1
    1b84:	f5 cf       	rjmp	.-22     	; 0x1b70 <vfprintf+0x38e>
    1b86:	33 20       	and	r3, r3
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <vfprintf+0x3aa>
    1b8a:	51 ce       	rjmp	.-862    	; 0x182e <vfprintf+0x4c>
    1b8c:	b7 01       	movw	r22, r14
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <fputc>
    1b96:	3a 94       	dec	r3
    1b98:	f6 cf       	rjmp	.-20     	; 0x1b86 <vfprintf+0x3a4>
    1b9a:	f7 01       	movw	r30, r14
    1b9c:	86 81       	ldd	r24, Z+6	; 0x06
    1b9e:	97 81       	ldd	r25, Z+7	; 0x07
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <vfprintf+0x3c4>
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	9f ef       	ldi	r25, 0xFF	; 255
    1ba6:	2c 96       	adiw	r28, 0x0c	; 12
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	7f 90       	pop	r7
    1bcc:	6f 90       	pop	r6
    1bce:	5f 90       	pop	r5
    1bd0:	4f 90       	pop	r4
    1bd2:	3f 90       	pop	r3
    1bd4:	2f 90       	pop	r2
    1bd6:	08 95       	ret

00001bd8 <strnlen_P>:
    1bd8:	fc 01       	movw	r30, r24
    1bda:	05 90       	lpm	r0, Z+
    1bdc:	61 50       	subi	r22, 0x01	; 1
    1bde:	70 40       	sbci	r23, 0x00	; 0
    1be0:	01 10       	cpse	r0, r1
    1be2:	d8 f7       	brcc	.-10     	; 0x1bda <strnlen_P+0x2>
    1be4:	80 95       	com	r24
    1be6:	90 95       	com	r25
    1be8:	8e 0f       	add	r24, r30
    1bea:	9f 1f       	adc	r25, r31
    1bec:	08 95       	ret

00001bee <strnlen>:
    1bee:	fc 01       	movw	r30, r24
    1bf0:	61 50       	subi	r22, 0x01	; 1
    1bf2:	70 40       	sbci	r23, 0x00	; 0
    1bf4:	01 90       	ld	r0, Z+
    1bf6:	01 10       	cpse	r0, r1
    1bf8:	d8 f7       	brcc	.-10     	; 0x1bf0 <strnlen+0x2>
    1bfa:	80 95       	com	r24
    1bfc:	90 95       	com	r25
    1bfe:	8e 0f       	add	r24, r30
    1c00:	9f 1f       	adc	r25, r31
    1c02:	08 95       	ret

00001c04 <fputc>:
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	18 2f       	mov	r17, r24
    1c0e:	09 2f       	mov	r16, r25
    1c10:	eb 01       	movw	r28, r22
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 fd       	sbrc	r24, 1
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <fputc+0x1a>
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	9f ef       	ldi	r25, 0xFF	; 255
    1c1c:	20 c0       	rjmp	.+64     	; 0x1c5e <fputc+0x5a>
    1c1e:	82 ff       	sbrs	r24, 2
    1c20:	10 c0       	rjmp	.+32     	; 0x1c42 <fputc+0x3e>
    1c22:	4e 81       	ldd	r20, Y+6	; 0x06
    1c24:	5f 81       	ldd	r21, Y+7	; 0x07
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	42 17       	cp	r20, r18
    1c2c:	53 07       	cpc	r21, r19
    1c2e:	7c f4       	brge	.+30     	; 0x1c4e <fputc+0x4a>
    1c30:	e8 81       	ld	r30, Y
    1c32:	f9 81       	ldd	r31, Y+1	; 0x01
    1c34:	9f 01       	movw	r18, r30
    1c36:	2f 5f       	subi	r18, 0xFF	; 255
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	39 83       	std	Y+1, r19	; 0x01
    1c3c:	28 83       	st	Y, r18
    1c3e:	10 83       	st	Z, r17
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <fputc+0x4a>
    1c42:	e8 85       	ldd	r30, Y+8	; 0x08
    1c44:	f9 85       	ldd	r31, Y+9	; 0x09
    1c46:	81 2f       	mov	r24, r17
    1c48:	09 95       	icall
    1c4a:	89 2b       	or	r24, r25
    1c4c:	29 f7       	brne	.-54     	; 0x1c18 <fputc+0x14>
    1c4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c50:	3f 81       	ldd	r19, Y+7	; 0x07
    1c52:	2f 5f       	subi	r18, 0xFF	; 255
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	3f 83       	std	Y+7, r19	; 0x07
    1c58:	2e 83       	std	Y+6, r18	; 0x06
    1c5a:	81 2f       	mov	r24, r17
    1c5c:	90 2f       	mov	r25, r16
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <__ultoa_invert>:
    1c68:	fa 01       	movw	r30, r20
    1c6a:	aa 27       	eor	r26, r26
    1c6c:	28 30       	cpi	r18, 0x08	; 8
    1c6e:	51 f1       	breq	.+84     	; 0x1cc4 <__ultoa_invert+0x5c>
    1c70:	20 31       	cpi	r18, 0x10	; 16
    1c72:	81 f1       	breq	.+96     	; 0x1cd4 <__ultoa_invert+0x6c>
    1c74:	e8 94       	clt
    1c76:	6f 93       	push	r22
    1c78:	6e 7f       	andi	r22, 0xFE	; 254
    1c7a:	6e 5f       	subi	r22, 0xFE	; 254
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	af 4f       	sbci	r26, 0xFF	; 255
    1c84:	b1 e0       	ldi	r27, 0x01	; 1
    1c86:	3e d0       	rcall	.+124    	; 0x1d04 <__ultoa_invert+0x9c>
    1c88:	b4 e0       	ldi	r27, 0x04	; 4
    1c8a:	3c d0       	rcall	.+120    	; 0x1d04 <__ultoa_invert+0x9c>
    1c8c:	67 0f       	add	r22, r23
    1c8e:	78 1f       	adc	r23, r24
    1c90:	89 1f       	adc	r24, r25
    1c92:	9a 1f       	adc	r25, r26
    1c94:	a1 1d       	adc	r26, r1
    1c96:	68 0f       	add	r22, r24
    1c98:	79 1f       	adc	r23, r25
    1c9a:	8a 1f       	adc	r24, r26
    1c9c:	91 1d       	adc	r25, r1
    1c9e:	a1 1d       	adc	r26, r1
    1ca0:	6a 0f       	add	r22, r26
    1ca2:	71 1d       	adc	r23, r1
    1ca4:	81 1d       	adc	r24, r1
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	20 d0       	rcall	.+64     	; 0x1cec <__ultoa_invert+0x84>
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <__ultoa_invert+0x48>
    1cae:	68 94       	set
    1cb0:	3f 91       	pop	r19
    1cb2:	2a e0       	ldi	r18, 0x0A	; 10
    1cb4:	26 9f       	mul	r18, r22
    1cb6:	11 24       	eor	r1, r1
    1cb8:	30 19       	sub	r19, r0
    1cba:	30 5d       	subi	r19, 0xD0	; 208
    1cbc:	31 93       	st	Z+, r19
    1cbe:	de f6       	brtc	.-74     	; 0x1c76 <__ultoa_invert+0xe>
    1cc0:	cf 01       	movw	r24, r30
    1cc2:	08 95       	ret
    1cc4:	46 2f       	mov	r20, r22
    1cc6:	47 70       	andi	r20, 0x07	; 7
    1cc8:	40 5d       	subi	r20, 0xD0	; 208
    1cca:	41 93       	st	Z+, r20
    1ccc:	b3 e0       	ldi	r27, 0x03	; 3
    1cce:	0f d0       	rcall	.+30     	; 0x1cee <__ultoa_invert+0x86>
    1cd0:	c9 f7       	brne	.-14     	; 0x1cc4 <__ultoa_invert+0x5c>
    1cd2:	f6 cf       	rjmp	.-20     	; 0x1cc0 <__ultoa_invert+0x58>
    1cd4:	46 2f       	mov	r20, r22
    1cd6:	4f 70       	andi	r20, 0x0F	; 15
    1cd8:	40 5d       	subi	r20, 0xD0	; 208
    1cda:	4a 33       	cpi	r20, 0x3A	; 58
    1cdc:	18 f0       	brcs	.+6      	; 0x1ce4 <__ultoa_invert+0x7c>
    1cde:	49 5d       	subi	r20, 0xD9	; 217
    1ce0:	31 fd       	sbrc	r19, 1
    1ce2:	40 52       	subi	r20, 0x20	; 32
    1ce4:	41 93       	st	Z+, r20
    1ce6:	02 d0       	rcall	.+4      	; 0x1cec <__ultoa_invert+0x84>
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__ultoa_invert+0x6c>
    1cea:	ea cf       	rjmp	.-44     	; 0x1cc0 <__ultoa_invert+0x58>
    1cec:	b4 e0       	ldi	r27, 0x04	; 4
    1cee:	a6 95       	lsr	r26
    1cf0:	97 95       	ror	r25
    1cf2:	87 95       	ror	r24
    1cf4:	77 95       	ror	r23
    1cf6:	67 95       	ror	r22
    1cf8:	ba 95       	dec	r27
    1cfa:	c9 f7       	brne	.-14     	; 0x1cee <__ultoa_invert+0x86>
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	61 05       	cpc	r22, r1
    1d00:	71 05       	cpc	r23, r1
    1d02:	08 95       	ret
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	0a 2e       	mov	r0, r26
    1d0a:	06 94       	lsr	r0
    1d0c:	57 95       	ror	r21
    1d0e:	47 95       	ror	r20
    1d10:	37 95       	ror	r19
    1d12:	27 95       	ror	r18
    1d14:	ba 95       	dec	r27
    1d16:	c9 f7       	brne	.-14     	; 0x1d0a <__ultoa_invert+0xa2>
    1d18:	62 0f       	add	r22, r18
    1d1a:	73 1f       	adc	r23, r19
    1d1c:	84 1f       	adc	r24, r20
    1d1e:	95 1f       	adc	r25, r21
    1d20:	a0 1d       	adc	r26, r0
    1d22:	08 95       	ret

00001d24 <_exit>:
    1d24:	f8 94       	cli

00001d26 <__stop_program>:
    1d26:	ff cf       	rjmp	.-2      	; 0x1d26 <__stop_program>
