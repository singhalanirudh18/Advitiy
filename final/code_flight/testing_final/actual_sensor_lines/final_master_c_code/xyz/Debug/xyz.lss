
xyz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00006c86  00006d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039a  0080019a  0080019a  00006db4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00006e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066fc  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016e1  00000000  00000000  0000d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d79  00000000  00000000  0000efbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f64  00000000  00000000  00011d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2b  00000000  00000000  00012c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d7d  00000000  00000000  000139c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00018744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c3       	rjmp	.+1994   	; 0x7cc <__ctors_end>
       2:	00 00       	nop
       4:	02 c4       	rjmp	.+2052   	; 0x80a <__bad_interrupt>
       6:	00 00       	nop
       8:	00 c4       	rjmp	.+2048   	; 0x80a <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c3       	rjmp	.+2044   	; 0x80a <__bad_interrupt>
       e:	00 00       	nop
      10:	fc c3       	rjmp	.+2040   	; 0x80a <__bad_interrupt>
      12:	00 00       	nop
      14:	fa c3       	rjmp	.+2036   	; 0x80a <__bad_interrupt>
      16:	00 00       	nop
      18:	f8 c3       	rjmp	.+2032   	; 0x80a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f6 c3       	rjmp	.+2028   	; 0x80a <__bad_interrupt>
      1e:	00 00       	nop
      20:	f4 c3       	rjmp	.+2024   	; 0x80a <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c3       	rjmp	.+2020   	; 0x80a <__bad_interrupt>
      26:	00 00       	nop
      28:	f0 c3       	rjmp	.+2016   	; 0x80a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ee c3       	rjmp	.+2012   	; 0x80a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__bad_interrupt>
      36:	00 00       	nop
      38:	e8 c3       	rjmp	.+2000   	; 0x80a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e6 c3       	rjmp	.+1996   	; 0x80a <__bad_interrupt>
      3e:	00 00       	nop
      40:	e4 c3       	rjmp	.+1992   	; 0x80a <__bad_interrupt>
      42:	00 00       	nop
      44:	e2 c3       	rjmp	.+1988   	; 0x80a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__vector_18>
      4c:	de c3       	rjmp	.+1980   	; 0x80a <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c3       	rjmp	.+1976   	; 0x80a <__bad_interrupt>
      52:	00 00       	nop
      54:	da c3       	rjmp	.+1972   	; 0x80a <__bad_interrupt>
      56:	00 00       	nop
      58:	d8 c3       	rjmp	.+1968   	; 0x80a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c3       	rjmp	.+1964   	; 0x80a <__bad_interrupt>
      5e:	00 00       	nop
      60:	d4 c3       	rjmp	.+1960   	; 0x80a <__bad_interrupt>
      62:	00 00       	nop
      64:	d2 c3       	rjmp	.+1956   	; 0x80a <__bad_interrupt>
      66:	00 00       	nop
      68:	d0 c3       	rjmp	.+1952   	; 0x80a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ce c3       	rjmp	.+1948   	; 0x80a <__bad_interrupt>
      6e:	00 00       	nop
      70:	cc c3       	rjmp	.+1944   	; 0x80a <__bad_interrupt>
      72:	00 00       	nop
      74:	ca c3       	rjmp	.+1940   	; 0x80a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__vector_30>
      7c:	c6 c3       	rjmp	.+1932   	; 0x80a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c4 c3       	rjmp	.+1928   	; 0x80a <__bad_interrupt>
      82:	00 00       	nop
      84:	c2 c3       	rjmp	.+1924   	; 0x80a <__bad_interrupt>
      86:	00 00       	nop
      88:	c0 c3       	rjmp	.+1920   	; 0x80a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	86 0b       	sbc	r24, r22
      8e:	8f 0b       	sbc	r24, r31
      90:	98 0b       	sbc	r25, r24
      92:	a1 0b       	sbc	r26, r17
      94:	aa 0b       	sbc	r26, r26
      96:	b3 0b       	sbc	r27, r19
      98:	bc 0b       	sbc	r27, r28
      9a:	c5 0b       	sbc	r28, r21
      9c:	ce 0b       	sbc	r28, r30
      9e:	d7 0b       	sbc	r29, r23
      a0:	e0 0b       	sbc	r30, r16
      a2:	03 6e       	ori	r16, 0xE3	; 227
      a4:	db 36       	cpi	r29, 0x6B	; 107
      a6:	3d 9a       	sbi	0x07, 5	; 7
      a8:	99 99       	sbic	0x13, 1	; 19
      aa:	99 3d       	cpi	r25, 0xD9	; 217
      ac:	ab aa       	std	Y+51, r10	; 0x33
      ae:	aa 2a       	or	r10, r26
      b0:	3e 00       	.word	0x003e	; ????
      b2:	00 00       	nop
      b4:	80 3f       	cpi	r24, 0xF0	; 240
      b6:	08 4a       	sbci	r16, 0xA8	; 168
      b8:	d7 3b       	cpi	r29, 0xB7	; 183
      ba:	3b ce       	rjmp	.-906    	; 0xfffffd32 <__eeprom_end+0xff7efd32>
      bc:	01 6e       	ori	r16, 0xE1	; 225
      be:	84 bc       	out	0x24, r8	; 36
      c0:	bf fd       	.word	0xfdbf	; ????
      c2:	c1 2f       	mov	r28, r17
      c4:	3d 6c       	ori	r19, 0xCD	; 205
      c6:	74 31       	cpi	r23, 0x14	; 20
      c8:	9a bd       	out	0x2a, r25	; 42
      ca:	56 83       	std	Z+6, r21	; 0x06
      cc:	3d da       	rcall	.-2950   	; 0xfffff548 <__eeprom_end+0xff7ef548>
      ce:	3d 00       	.word	0x003d	; ????
      d0:	c7 7f       	andi	r28, 0xF7	; 247
      d2:	11 be       	out	0x31, r1	; 49
      d4:	d9 e4       	ldi	r29, 0x49	; 73
      d6:	bb 4c       	sbci	r27, 0xCB	; 203
      d8:	3e 91       	ld	r19, -X
      da:	6b aa       	std	Y+51, r6	; 0x33
      dc:	aa be       	out	0x3a, r10	; 58
      de:	00 00       	nop
      e0:	00 80       	ld	r0, Z
      e2:	3f 07       	cpc	r19, r31
      e4:	2c 7a       	andi	r18, 0xAC	; 172
      e6:	a5 ba       	out	0x15, r10	; 21
      e8:	6c c5       	rjmp	.+2776   	; 0xbc2 <nominal+0x1e4>
      ea:	90 da       	rcall	.-2784   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
      ec:	3b 93       	.word	0x933b	; ????
      ee:	65 fc       	sbrc	r6, 5
      f0:	8b bc       	out	0x2b, r8	; 43
      f2:	53 f8       	bld	r5, 3
      f4:	10 fd       	sbrc	r17, 0
      f6:	3c 56       	subi	r19, 0x6C	; 108
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	4d bd       	out	0x2d, r20	; 45
      fc:	87 9d       	mul	r24, r7
      fe:	3a b6       	in	r3, 0x3a	; 58
     100:	3d cb       	rjmp	.-2438   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     102:	c9 bf       	out	0x39, r28	; 57
     104:	5b be       	out	0x3b, r5	; 59
     106:	73 da       	rcall	.-2842   	; 0xfffff5ee <__eeprom_end+0xff7ef5ee>
     108:	0f c9       	rjmp	.-3554   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     10a:	3f 05       	cpc	r19, r15
     10c:	a8 4c       	sbci	r26, 0xC8	; 200
     10e:	cd b2       	in	r12, 0x1d	; 29
     110:	d4 4e       	sbci	r29, 0xE4	; 228
     112:	b9 38       	cpi	r27, 0x89	; 137
     114:	36 a9       	ldd	r19, Z+54	; 0x36
     116:	02 0c       	add	r0, r2
     118:	50 b9       	out	0x00, r21	; 0
     11a:	91 86       	std	Z+9, r9	; 0x09
     11c:	88 08       	sbc	r8, r8
     11e:	3c a6       	std	Y+44, r3	; 0x2c
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	2a be       	out	0x3a, r2	; 58
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 07       	cpc	r19, r31
     12a:	63 42       	sbci	r22, 0x23	; 35
     12c:	36 b7       	in	r19, 0x36	; 54
     12e:	9b d8       	rcall	.-3786   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     130:	a7 1a       	sub	r10, r23
     132:	39 68       	ori	r19, 0x89	; 137
     134:	56 18       	sub	r5, r6
     136:	ae ba       	out	0x1e, r10	; 30
     138:	ab 55       	subi	r26, 0x5B	; 91
     13a:	8c 1d       	adc	r24, r12
     13c:	3c b7       	in	r19, 0x3c	; 60
     13e:	cc 57       	subi	r28, 0x7C	; 124
     140:	63 bd       	out	0x23, r22	; 35
     142:	6d ed       	ldi	r22, 0xDD	; 221
     144:	fd 75       	andi	r31, 0x5D	; 93
     146:	3e f6       	brtc	.-114    	; 0xd6 <__SREG__+0x97>
     148:	17 72       	andi	r17, 0x27	; 39
     14a:	31 bf       	out	0x31, r19	; 49
     14c:	00 00       	nop
     14e:	00 80       	ld	r0, Z
     150:	3f 08       	sbc	r3, r15
     152:	00 00       	nop
     154:	00 be       	out	0x30, r0	; 48
     156:	92 24       	eor	r9, r2
     158:	49 12       	cpse	r4, r25
     15a:	3e ab       	std	Y+54, r19	; 0x36
     15c:	aa aa       	std	Y+50, r10	; 0x32
     15e:	2a be       	out	0x3a, r2	; 58
     160:	cd cc       	rjmp	.-1638   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     162:	cc 4c       	sbci	r28, 0xCC	; 204
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	80 be       	out	0x30, r8	; 48
     16a:	ab aa       	std	Y+51, r10	; 0x33
     16c:	aa aa       	std	Y+50, r10	; 0x32
     16e:	3e 00       	.word	0x003e	; ????
     170:	00 00       	nop
     172:	00 bf       	out	0x30, r16	; 48
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 41       	sbci	r16, 0x18	; 24
     180:	78 d3       	rcall	.+1776   	; 0x872 <detumbling+0x66>
     182:	bb 43       	sbci	r27, 0x3B	; 59
     184:	87 d1       	rcall	.+782    	; 0x494 <__trampolines_end+0x2e8>
     186:	13 3d       	cpi	r17, 0xD3	; 211
     188:	19 0e       	add	r1, r25
     18a:	3c c3       	rjmp	.+1656   	; 0x804 <.do_clear_bss_start+0x8>
     18c:	bd 42       	sbci	r27, 0x2D	; 45
     18e:	82 ad       	ldd	r24, Z+58	; 0x3a
     190:	2b 3e       	cpi	r18, 0xEB	; 235
     192:	68 ec       	ldi	r22, 0xC8	; 200
     194:	82 76       	andi	r24, 0x62	; 98
     196:	be d9       	rcall	.-3204   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     198:	8f e1       	ldi	r24, 0x1F	; 31
     19a:	a9 3e       	cpi	r26, 0xE9	; 233
     19c:	4c 80       	ldd	r4, Y+4	; 0x04
     19e:	ef ff       	.word	0xffef	; ????
     1a0:	be 01       	movw	r22, r28
     1a2:	c4 ff       	sbrs	r28, 4
     1a4:	7f 3f       	cpi	r23, 0xFF	; 255
     1a6:	00 00       	nop
     1a8:	00 00       	nop
	...

000001ac <__trampolines_end>:
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	cd cc       	rjmp	.-1638   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     1b2:	24 41       	sbci	r18, 0x14	; 20
     1b4:	cd cc       	rjmp	.-1638   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
     1b6:	90 41       	sbci	r25, 0x10	; 16
     1b8:	cd cc       	rjmp	.-1638   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     1ba:	d4 c1       	rjmp	.+936    	; 0x564 <agh+0xa8>
     1bc:	33 33       	cpi	r19, 0x33	; 51
     1be:	0b c1       	rjmp	.+534    	; 0x3d6 <__trampolines_end+0x22a>
     1c0:	33 33       	cpi	r19, 0x33	; 51
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <__trampolines_end+0xbe>
     1c4:	33 33       	cpi	r19, 0x33	; 51
     1c6:	db c1       	rjmp	.+950    	; 0x57e <agh+0xc2>
     1c8:	66 66       	ori	r22, 0x66	; 102
     1ca:	06 40       	sbci	r16, 0x06	; 6
     1cc:	9a 99       	sbic	0x13, 2	; 19
     1ce:	61 c1       	rjmp	.+706    	; 0x492 <__trampolines_end+0x2e6>
     1d0:	9a 99       	sbic	0x13, 2	; 19
     1d2:	59 40       	sbci	r21, 0x09	; 9
     1d4:	00 00       	nop
     1d6:	b0 c0       	rjmp	.+352    	; 0x338 <__trampolines_end+0x18c>
     1d8:	33 33       	cpi	r19, 0x33	; 51
     1da:	03 41       	sbci	r16, 0x13	; 19
     1dc:	33 33       	cpi	r19, 0x33	; 51
     1de:	33 bf       	out	0x33, r19	; 51
     1e0:	cd cc       	rjmp	.-1638   	; 0xfffffb7c <__eeprom_end+0xff7efb7c>
     1e2:	cc be       	out	0x3c, r12	; 60
     1e4:	9a 99       	sbic	0x13, 2	; 19
     1e6:	21 c1       	rjmp	.+578    	; 0x42a <__trampolines_end+0x27e>
     1e8:	66 66       	ori	r22, 0x66	; 102
     1ea:	e6 3f       	cpi	r30, 0xF6	; 246
     1ec:	33 33       	cpi	r19, 0x33	; 51
     1ee:	33 bf       	out	0x33, r19	; 51
     1f0:	cd cc       	rjmp	.-1638   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     1f2:	4c 3e       	cpi	r20, 0xEC	; 236
     1f4:	66 66       	ori	r22, 0x66	; 102
     1f6:	a6 bf       	out	0x36, r26	; 54
     1f8:	9a 99       	sbic	0x13, 2	; 19
     1fa:	11 c1       	rjmp	.+546    	; 0x41e <__trampolines_end+0x272>
     1fc:	9a 99       	sbic	0x13, 2	; 19
     1fe:	a9 40       	sbci	r26, 0x09	; 9
     200:	33 33       	cpi	r19, 0x33	; 51
     202:	83 40       	sbci	r24, 0x03	; 3
     204:	9a 99       	sbic	0x13, 2	; 19
     206:	39 40       	sbci	r19, 0x09	; 9
     208:	9a 99       	sbic	0x13, 2	; 19
     20a:	89 c0       	rjmp	.+274    	; 0x31e <__trampolines_end+0x172>
     20c:	66 66       	ori	r22, 0x66	; 102
     20e:	a6 c0       	rjmp	.+332    	; 0x35c <__trampolines_end+0x1b0>
     210:	cd cc       	rjmp	.-1638   	; 0xfffffbac <__eeprom_end+0xff7efbac>
     212:	4c be       	out	0x3c, r4	; 60
     214:	00 00       	nop
     216:	00 3f       	cpi	r16, 0xF0	; 240
     218:	9a 99       	sbic	0x13, 2	; 19
     21a:	19 3f       	cpi	r17, 0xF9	; 249
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	a6 bf       	out	0x36, r26	; 54
     220:	9a 99       	sbic	0x13, 2	; 19
     222:	d9 3f       	cpi	r29, 0xF9	; 249
     224:	cd cc       	rjmp	.-1638   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
     226:	cc bd       	out	0x2c, r28	; 44
     228:	9a 99       	sbic	0x13, 2	; 19
     22a:	99 bf       	out	0x39, r25	; 57
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	b3 3f       	cpi	r27, 0xF3	; 243
     230:	9a 99       	sbic	0x13, 2	; 19
     232:	59 40       	sbci	r21, 0x09	; 9
     234:	9a 99       	sbic	0x13, 2	; 19
     236:	79 40       	sbci	r23, 0x09	; 9
     238:	00 00       	nop
     23a:	00 00       	nop
     23c:	9a 99       	sbic	0x13, 2	; 19
     23e:	99 be       	out	0x39, r9	; 57
     240:	cd cc       	rjmp	.-1638   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     242:	cc bd       	out	0x2c, r28	; 44
     244:	00 00       	nop
     246:	00 00       	nop
     248:	33 33       	cpi	r19, 0x33	; 51
     24a:	33 bf       	out	0x33, r19	; 51
     24c:	66 66       	ori	r22, 0x66	; 102
     24e:	06 c0       	rjmp	.+12     	; 0x25c <__trampolines_end+0xb0>
     250:	66 66       	ori	r22, 0x66	; 102
     252:	06 40       	sbci	r16, 0x06	; 6
     254:	33 33       	cpi	r19, 0x33	; 51
     256:	33 bf       	out	0x33, r19	; 51
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	99 bf       	out	0x39, r25	; 57
     25c:	cd cc       	rjmp	.-1638   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>
     25e:	4c 3e       	cpi	r20, 0xEC	; 236
     260:	9a 99       	sbic	0x13, 2	; 19
     262:	99 3e       	cpi	r25, 0xE9	; 233
     264:	66 66       	ori	r22, 0x66	; 102
     266:	66 3f       	cpi	r22, 0xF6	; 246
     268:	cd cc       	rjmp	.-1638   	; 0xfffffc04 <__eeprom_end+0xff7efc04>
     26a:	cc 3f       	cpi	r28, 0xFC	; 252
     26c:	00 00       	nop
     26e:	80 3f       	cpi	r24, 0xF0	; 240
     270:	9a 99       	sbic	0x13, 2	; 19
     272:	99 3e       	cpi	r25, 0xE9	; 233
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	4c be       	out	0x3c, r4	; 60
     278:	cd cc       	rjmp	.-1638   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27a:	4c 3f       	cpi	r20, 0xFC	; 252
     27c:	00 00       	nop
     27e:	00 bf       	out	0x30, r16	; 48
     280:	cd cc       	rjmp	.-1638   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
     282:	cc 3e       	cpi	r28, 0xEC	; 236
     284:	66 66       	ori	r22, 0x66	; 102
     286:	a6 3f       	cpi	r26, 0xF6	; 246
     288:	cd cc       	rjmp	.-1638   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28a:	4c be       	out	0x3c, r4	; 60
     28c:	cd cc       	rjmp	.-1638   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
     28e:	cc 3d       	cpi	r28, 0xDC	; 220
     290:	9a 99       	sbic	0x13, 2	; 19
     292:	99 be       	out	0x39, r9	; 57
     294:	9a 99       	sbic	0x13, 2	; 19
     296:	19 bf       	out	0x39, r17	; 57
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	19 bf       	out	0x39, r17	; 57
     29c:	cd cc       	rjmp	.-1638   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
     29e:	4c bf       	out	0x3c, r20	; 60
     2a0:	cd cc       	rjmp	.-1638   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     2a2:	cc 3d       	cpi	r28, 0xDC	; 220
     2a4:	cd cc       	rjmp	.-1638   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
     2a6:	4c 3e       	cpi	r20, 0xEC	; 236
     2a8:	cd cc       	rjmp	.-1638   	; 0xfffffc44 <__eeprom_end+0xff7efc44>
     2aa:	4c be       	out	0x3c, r4	; 60
     2ac:	cd cc       	rjmp	.-1638   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     2ae:	4c 3e       	cpi	r20, 0xEC	; 236
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	9a 99       	sbic	0x13, 2	; 19
     2b6:	99 be       	out	0x39, r9	; 57
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	19 bf       	out	0x39, r17	; 57
     2bc:	9a 99       	sbic	0x13, 2	; 19
     2be:	99 3e       	cpi	r25, 0xE9	; 233
     2c0:	00 00       	nop
     2c2:	00 3f       	cpi	r16, 0xF0	; 240
     2c4:	cd cc       	rjmp	.-1638   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2c6:	cc 3d       	cpi	r28, 0xDC	; 220
     2c8:	cd cc       	rjmp	.-1638   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2ca:	4c be       	out	0x3c, r4	; 60
     2cc:	00 00       	nop
     2ce:	00 3f       	cpi	r16, 0xF0	; 240
     2d0:	cd cc       	rjmp	.-1638   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
     2d2:	cc 3e       	cpi	r28, 0xEC	; 236
     2d4:	cd cc       	rjmp	.-1638   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     2d6:	4c be       	out	0x3c, r4	; 60
     2d8:	cd cc       	rjmp	.-1638   	; 0xfffffc74 <__eeprom_end+0xff7efc74>
     2da:	cc 3d       	cpi	r28, 0xDC	; 220
     2dc:	9a 99       	sbic	0x13, 2	; 19
     2de:	99 be       	out	0x39, r9	; 57
     2e0:	cd cc       	rjmp	.-1638   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     2e2:	cc be       	out	0x3c, r12	; 60
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	99 3e       	cpi	r25, 0xE9	; 233
     2e8:	9a 99       	sbic	0x13, 2	; 19
     2ea:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004bc <agh>:
     4bc:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4cc:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4dc:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4ec:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4fc:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     50c:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     51c:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     52c:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     53c:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     54c:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     55c:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     56c:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     57c:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     58c:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     59c:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     5ac:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5bc:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5cc:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5dc:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5ec:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5fc:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     60c:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     61c:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     62c:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     63c:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     64c:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     65c:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     66c:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     67c:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     68c:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     69c:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     6ac:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6bc:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6cc:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6dc:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6ec:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6fc:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     70c:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     71c:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     72c:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     73c:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     74c:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     75c:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     76c:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     77c:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     78c:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     79c:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     7ac:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7bc:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007cc <__ctors_end>:
     7cc:	11 24       	eor	r1, r1
     7ce:	1f be       	out	0x3f, r1	; 63
     7d0:	cf ef       	ldi	r28, 0xFF	; 255
     7d2:	d0 e1       	ldi	r29, 0x10	; 16
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	cd bf       	out	0x3d, r28	; 61

000007d8 <__do_copy_data>:
     7d8:	11 e0       	ldi	r17, 0x01	; 1
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b1 e0       	ldi	r27, 0x01	; 1
     7de:	e6 e8       	ldi	r30, 0x86	; 134
     7e0:	fc e6       	ldi	r31, 0x6C	; 108
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	0b bf       	out	0x3b, r16	; 59
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__do_copy_data+0x14>
     7e8:	07 90       	elpm	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	aa 39       	cpi	r26, 0x9A	; 154
     7ee:	b1 07       	cpc	r27, r17
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__do_copy_data+0x10>

000007f2 <__do_clear_bss>:
     7f2:	25 e0       	ldi	r18, 0x05	; 5
     7f4:	aa e9       	ldi	r26, 0x9A	; 154
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <.do_clear_bss_start>

000007fa <.do_clear_bss_loop>:
     7fa:	1d 92       	st	X+, r1

000007fc <.do_clear_bss_start>:
     7fc:	a4 33       	cpi	r26, 0x34	; 52
     7fe:	b2 07       	cpc	r27, r18
     800:	e1 f7       	brne	.-8      	; 0x7fa <.do_clear_bss_loop>
     802:	0e 94 a9 2c 	call	0x5952	; 0x5952 <main>
     806:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <_exit>

0000080a <__bad_interrupt>:
     80a:	fa cb       	rjmp	.-2060   	; 0x0 <__vectors>

0000080c <detumbling>:
static matrix m_Kd = { { 0.000475908639758953, -2.75953740726193E-06, -1.45908374051095E-06 },
                       { -2.75953740726193E-06, 0.000489370418150681, -6.34295672515486E-06 },
                       { -1.45908374051095E-06, -6.34295672515486E-06, 0.000470577029621382 } };

void detumbling(vector v_m_D)
{
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	6a 97       	sbiw	r28, 0x1a	; 26
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	9a 8f       	std	Y+26, r25	; 0x1a
     842:	89 8f       	std	Y+25, r24	; 0x19
	static vector v_B_old;
	  v_B[2] = Current_state.mm.B_x;
     844:	80 91 08 05 	lds	r24, 0x0508
     848:	90 91 09 05 	lds	r25, 0x0509
     84c:	a0 91 0a 05 	lds	r26, 0x050A
     850:	b0 91 0b 05 	lds	r27, 0x050B
     854:	e3 ef       	ldi	r30, 0xF3	; 243
     856:	f1 e0       	ldi	r31, 0x01	; 1
     858:	80 87       	std	Z+8, r24	; 0x08
     85a:	91 87       	std	Z+9, r25	; 0x09
     85c:	a2 87       	std	Z+10, r26	; 0x0a
     85e:	b3 87       	std	Z+11, r27	; 0x0b
	  v_B[1] = -1*Current_state.mm.B_y;
     860:	80 91 0c 05 	lds	r24, 0x050C
     864:	90 91 0d 05 	lds	r25, 0x050D
     868:	a0 91 0e 05 	lds	r26, 0x050E
     86c:	b0 91 0f 05 	lds	r27, 0x050F
     870:	b0 58       	subi	r27, 0x80	; 128
     872:	84 83       	std	Z+4, r24	; 0x04
     874:	95 83       	std	Z+5, r25	; 0x05
     876:	a6 83       	std	Z+6, r26	; 0x06
     878:	b7 83       	std	Z+7, r27	; 0x07
	  v_B[0] = Current_state.mm.B_z;
     87a:	80 91 10 05 	lds	r24, 0x0510
     87e:	90 91 11 05 	lds	r25, 0x0511
     882:	a0 91 12 05 	lds	r26, 0x0512
     886:	b0 91 13 05 	lds	r27, 0x0513
     88a:	80 83       	st	Z, r24
     88c:	91 83       	std	Z+1, r25	; 0x01
     88e:	a2 83       	std	Z+2, r26	; 0x02
     890:	b3 83       	std	Z+3, r27	; 0x03
	  
	if(first_B)
     892:	80 91 0c 01 	lds	r24, 0x010C
     896:	88 23       	and	r24, r24
     898:	41 f0       	breq	.+16     	; 0x8aa <detumbling+0x9e>
	{
		
		copy_vector(v_B, v_B_old);
     89a:	6a e9       	ldi	r22, 0x9A	; 154
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	cf 01       	movw	r24, r30
     8a0:	0e 94 82 1c 	call	0x3904	; 0x3904 <copy_vector>
		first_B = 0;
     8a4:	10 92 0c 01 	sts	0x010C, r1
     8a8:	81 c0       	rjmp	.+258    	; 0x9ac <detumbling+0x1a0>
     8aa:	03 ef       	ldi	r16, 0xF3	; 243
     8ac:	11 e0       	ldi	r17, 0x01	; 1
     8ae:	0f 2e       	mov	r0, r31
     8b0:	fa e9       	ldi	r31, 0x9A	; 154
     8b2:	8f 2e       	mov	r8, r31
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	9f 2e       	mov	r9, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	5e 01       	movw	r10, r28
     8bc:	8d e0       	ldi	r24, 0x0D	; 13
     8be:	a8 0e       	add	r10, r24
     8c0:	b1 1c       	adc	r11, r1
     8c2:	fe 01       	movw	r30, r28
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	1f 01       	movw	r2, r30
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8c8:	f8 01       	movw	r30, r16
     8ca:	c1 90       	ld	r12, Z+
     8cc:	d1 90       	ld	r13, Z+
     8ce:	e1 90       	ld	r14, Z+
     8d0:	f1 90       	ld	r15, Z+
     8d2:	8f 01       	movw	r16, r30
     8d4:	f4 01       	movw	r30, r8
     8d6:	41 90       	ld	r4, Z+
     8d8:	51 90       	ld	r5, Z+
     8da:	61 90       	ld	r6, Z+
     8dc:	71 90       	ld	r7, Z+
     8de:	4f 01       	movw	r8, r30
     8e0:	a3 01       	movw	r20, r6
     8e2:	92 01       	movw	r18, r4
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     8f8:	f5 01       	movw	r30, r10
     8fa:	61 93       	st	Z+, r22
     8fc:	71 93       	st	Z+, r23
     8fe:	81 93       	st	Z+, r24
     900:	91 93       	st	Z+, r25
     902:	5f 01       	movw	r10, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     904:	a3 01       	movw	r20, r6
     906:	92 01       	movw	r18, r4
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     91c:	f1 01       	movw	r30, r2
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	1f 01       	movw	r2, r30
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	0f 3f       	cpi	r16, 0xFF	; 255
     92c:	1f 07       	cpc	r17, r31
     92e:	61 f6       	brne	.-104    	; 0x8c8 <detumbling+0xbc>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vector_norm>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	9f eb       	ldi	r25, 0xBF	; 191
     944:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	6d 85       	ldd	r22, Y+13	; 0x0d
     952:	7e 85       	ldd	r23, Y+14	; 0x0e
     954:	8f 85       	ldd	r24, Y+15	; 0x0f
     956:	98 89       	ldd	r25, Y+16	; 0x10
     958:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     95c:	e9 8d       	ldd	r30, Y+25	; 0x19
     95e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     960:	60 83       	st	Z, r22
     962:	71 83       	std	Z+1, r23	; 0x01
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	69 89       	ldd	r22, Y+17	; 0x11
     96e:	7a 89       	ldd	r23, Y+18	; 0x12
     970:	8b 89       	ldd	r24, Y+19	; 0x13
     972:	9c 89       	ldd	r25, Y+20	; 0x14
     974:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     978:	e9 8d       	ldd	r30, Y+25	; 0x19
     97a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     97c:	64 83       	std	Z+4, r22	; 0x04
     97e:	75 83       	std	Z+5, r23	; 0x05
     980:	86 83       	std	Z+6, r24	; 0x06
     982:	97 83       	std	Z+7, r25	; 0x07
     984:	a7 01       	movw	r20, r14
     986:	96 01       	movw	r18, r12
     988:	6d 89       	ldd	r22, Y+21	; 0x15
     98a:	7e 89       	ldd	r23, Y+22	; 0x16
     98c:	8f 89       	ldd	r24, Y+23	; 0x17
     98e:	98 8d       	ldd	r25, Y+24	; 0x18
     990:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     994:	e9 8d       	ldd	r30, Y+25	; 0x19
     996:	fa 8d       	ldd	r31, Y+26	; 0x1a
     998:	60 87       	std	Z+8, r22	; 0x08
     99a:	71 87       	std	Z+9, r23	; 0x09
     99c:	82 87       	std	Z+10, r24	; 0x0a
     99e:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     9a0:	6a e9       	ldi	r22, 0x9A	; 154
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	83 ef       	ldi	r24, 0xF3	; 243
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 82 1c 	call	0x3904	; 0x3904 <copy_vector>
	
}
     9ac:	6a 96       	adiw	r28, 0x1a	; 26
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	5f 90       	pop	r5
     9d6:	4f 90       	pop	r4
     9d8:	3f 90       	pop	r3
     9da:	2f 90       	pop	r2
     9dc:	08 95       	ret

000009de <nominal>:
 

void nominal(vector v_m_N)
{
     9de:	2f 92       	push	r2
     9e0:	3f 92       	push	r3
     9e2:	4f 92       	push	r4
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	e9 97       	sbiw	r28, 0x39	; 57
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	9d ab       	std	Y+53, r25	; 0x35
     a14:	8c ab       	std	Y+52, r24	; 0x34
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	     v_B[2] = Current_state.mm.B_x/10000;
     a16:	60 91 08 05 	lds	r22, 0x0508
     a1a:	70 91 09 05 	lds	r23, 0x0509
     a1e:	80 91 0a 05 	lds	r24, 0x050A
     a22:	90 91 0b 05 	lds	r25, 0x050B
     a26:	03 ef       	ldi	r16, 0xF3	; 243
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e4       	ldi	r19, 0x40	; 64
     a2e:	4c e1       	ldi	r20, 0x1C	; 28
     a30:	56 e4       	ldi	r21, 0x46	; 70
     a32:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     a36:	f8 01       	movw	r30, r16
     a38:	60 87       	std	Z+8, r22	; 0x08
     a3a:	71 87       	std	Z+9, r23	; 0x09
     a3c:	82 87       	std	Z+10, r24	; 0x0a
     a3e:	93 87       	std	Z+11, r25	; 0x0b
	     v_B[1] = -1*(Current_state.mm.B_y/10000);
     a40:	60 91 0c 05 	lds	r22, 0x050C
     a44:	70 91 0d 05 	lds	r23, 0x050D
     a48:	80 91 0e 05 	lds	r24, 0x050E
     a4c:	90 91 0f 05 	lds	r25, 0x050F
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e4       	ldi	r19, 0x40	; 64
     a54:	4c e1       	ldi	r20, 0x1C	; 28
     a56:	56 e4       	ldi	r21, 0x46	; 70
     a58:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	b0 58       	subi	r27, 0x80	; 128
     a62:	f8 01       	movw	r30, r16
     a64:	84 83       	std	Z+4, r24	; 0x04
     a66:	95 83       	std	Z+5, r25	; 0x05
     a68:	a6 83       	std	Z+6, r26	; 0x06
     a6a:	b7 83       	std	Z+7, r27	; 0x07
	     v_B[0] = Current_state.mm.B_z/10000;
     a6c:	60 91 10 05 	lds	r22, 0x0510
     a70:	70 91 11 05 	lds	r23, 0x0511
     a74:	80 91 12 05 	lds	r24, 0x0512
     a78:	90 91 13 05 	lds	r25, 0x0513
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e4       	ldi	r19, 0x40	; 64
     a80:	4c e1       	ldi	r20, 0x1C	; 28
     a82:	56 e4       	ldi	r21, 0x46	; 70
     a84:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     a88:	f8 01       	movw	r30, r16
     a8a:	60 83       	st	Z, r22
     a8c:	71 83       	std	Z+1, r23	; 0x01
     a8e:	82 83       	std	Z+2, r24	; 0x02
     a90:	93 83       	std	Z+3, r25	; 0x03
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     a92:	c8 01       	movw	r24, r16
     a94:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vector_norm>
     a98:	6f 87       	std	Y+15, r22	; 0x0f
     a9a:	78 8b       	std	Y+16, r23	; 0x10
     a9c:	89 8b       	std	Y+17, r24	; 0x11
     a9e:	9a 8b       	std	Y+18, r25	; 0x12
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     aa0:	40 90 0b 02 	lds	r4, 0x020B
     aa4:	50 90 0c 02 	lds	r5, 0x020C
     aa8:	60 90 0d 02 	lds	r6, 0x020D
     aac:	70 90 0e 02 	lds	r7, 0x020E
     ab0:	0f 2e       	mov	r0, r31
     ab2:	ff ef       	ldi	r31, 0xFF	; 255
     ab4:	ef 2e       	mov	r14, r31
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
     ab8:	ff 2e       	mov	r15, r31
     aba:	f0 2d       	mov	r31, r0
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	4c 01       	movw	r8, r24
     ac2:	0f 2e       	mov	r0, r31
     ac4:	fb ed       	ldi	r31, 0xDB	; 219
     ac6:	2f 2e       	mov	r2, r31
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	3f 2e       	mov	r3, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	0f 2e       	mov	r0, r31
     ad0:	fb e0       	ldi	r31, 0x0B	; 11
     ad2:	af 2e       	mov	r10, r31
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	bf 2e       	mov	r11, r31
     ad8:	f0 2d       	mov	r31, r0
     ada:	81 01       	movw	r16, r2
     adc:	6c 01       	movw	r12, r24
     ade:	f7 01       	movw	r30, r14
     ae0:	61 91       	ld	r22, Z+
     ae2:	71 91       	ld	r23, Z+
     ae4:	81 91       	ld	r24, Z+
     ae6:	91 91       	ld	r25, Z+
     ae8:	7f 01       	movw	r14, r30
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     af2:	a3 01       	movw	r20, r6
     af4:	92 01       	movw	r18, r4
     af6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     afa:	f6 01       	movw	r30, r12
     afc:	61 93       	st	Z+, r22
     afe:	71 93       	st	Z+, r23
     b00:	81 93       	st	Z+, r24
     b02:	91 93       	st	Z+, r25
     b04:	6f 01       	movw	r12, r30
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	f8 01       	movw	r30, r16
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     b20:	f8 01       	movw	r30, r16
     b22:	61 93       	st	Z+, r22
     b24:	71 93       	st	Z+, r23
     b26:	81 93       	st	Z+, r24
     b28:	91 93       	st	Z+, r25
     b2a:	8f 01       	movw	r16, r30
	     
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b2c:	ea 14       	cp	r14, r10
     b2e:	fb 04       	cpc	r15, r11
     b30:	b1 f6       	brne	.-84     	; 0xade <nominal+0x100>
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     b32:	2f 85       	ldd	r18, Y+15	; 0x0f
     b34:	38 89       	ldd	r19, Y+16	; 0x10
     b36:	49 89       	ldd	r20, Y+17	; 0x11
     b38:	5a 89       	ldd	r21, Y+18	; 0x12
     b3a:	ca 01       	movw	r24, r20
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     b42:	6c a7       	std	Y+44, r22	; 0x2c
     b44:	7d a7       	std	Y+45, r23	; 0x2d
     b46:	8e a7       	std	Y+46, r24	; 0x2e
     b48:	9f a7       	std	Y+47, r25	; 0x2f
     b4a:	86 ea       	ldi	r24, 0xA6	; 166
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9f a3       	std	Y+39, r25	; 0x27
     b50:	8e a3       	std	Y+38, r24	; 0x26
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	fe 01       	movw	r30, r28
     b58:	3d 96       	adiw	r30, 0x0d	; 13
     b5a:	fe 87       	std	Y+14, r31	; 0x0e
     b5c:	ed 87       	std	Y+13, r30	; 0x0d
     b5e:	28 aa       	std	Y+48, r2	; 0x30
     b60:	39 aa       	std	Y+49, r3	; 0x31
     b62:	8a aa       	std	Y+50, r8	; 0x32
     b64:	9b aa       	std	Y+51, r9	; 0x33
     b66:	86 01       	movw	r16, r12
     b68:	ce a0       	ldd	r12, Y+38	; 0x26
     b6a:	df a0       	ldd	r13, Y+39	; 0x27
     b6c:	d9 a6       	std	Y+41, r13	; 0x29
     b6e:	c8 a6       	std	Y+40, r12	; 0x28
     b70:	c8 01       	movw	r24, r16
     b72:	80 59       	subi	r24, 0x90	; 144
     b74:	9e 4f       	sbci	r25, 0xFE	; 254
     b76:	9d 8b       	std	Y+21, r25	; 0x15
     b78:	8c 8b       	std	Y+20, r24	; 0x14
     b7a:	f8 01       	movw	r30, r16
     b7c:	e4 5b       	subi	r30, 0xB4	; 180
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	ff 8b       	std	Y+23, r31	; 0x17
     b82:	ee 8b       	std	Y+22, r30	; 0x16
     b84:	87 ee       	ldi	r24, 0xE7	; 231
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	99 8f       	std	Y+25, r25	; 0x19
     b8a:	88 8f       	std	Y+24, r24	; 0x18
     b8c:	f8 01       	movw	r30, r16
     b8e:	e8 5d       	subi	r30, 0xD8	; 216
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	fb 8f       	std	Y+27, r31	; 0x1b
     b94:	ea 8f       	std	Y+26, r30	; 0x1a
     b96:	c8 a8       	ldd	r12, Y+48	; 0x30
     b98:	d9 a8       	ldd	r13, Y+49	; 0x31
     b9a:	ea a8       	ldd	r14, Y+50	; 0x32
     b9c:	fb a8       	ldd	r15, Y+51	; 0x33
     b9e:	1f 86       	std	Y+15, r1	; 0x0f
     ba0:	1b 8a       	std	Y+19, r1	; 0x13
     ba2:	31 2c       	mov	r3, r1
     ba4:	21 2c       	mov	r2, r1
     ba6:	1b a7       	std	Y+43, r17	; 0x2b
     ba8:	0a a7       	std	Y+42, r16	; 0x2a
     baa:	87 01       	movw	r16, r14
     bac:	dd 8e       	std	Y+29, r13	; 0x1d
     bae:	cc 8e       	std	Y+28, r12	; 0x1c
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     bb0:	f8 01       	movw	r30, r16
     bb2:	61 91       	ld	r22, Z+
     bb4:	71 91       	ld	r23, Z+
     bb6:	81 91       	ld	r24, Z+
     bb8:	91 91       	ld	r25, Z+
     bba:	8f 01       	movw	r16, r30
     bbc:	ec 89       	ldd	r30, Y+20	; 0x14
     bbe:	fd 89       	ldd	r31, Y+21	; 0x15
     bc0:	21 91       	ld	r18, Z+
     bc2:	31 91       	ld	r19, Z+
     bc4:	41 91       	ld	r20, Z+
     bc6:	51 91       	ld	r21, Z+
     bc8:	fd 8b       	std	Y+21, r31	; 0x15
     bca:	ec 8b       	std	Y+20, r30	; 0x14
     bcc:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bce:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bd0:	81 90       	ld	r8, Z+
     bd2:	91 90       	ld	r9, Z+
     bd4:	a1 90       	ld	r10, Z+
     bd6:	b1 90       	ld	r11, Z+
     bd8:	fd 8f       	std	Y+29, r31	; 0x1d
     bda:	ec 8f       	std	Y+28, r30	; 0x1c
     bdc:	ee 89       	ldd	r30, Y+22	; 0x16
     bde:	ff 89       	ldd	r31, Y+23	; 0x17
     be0:	41 90       	ld	r4, Z+
     be2:	51 90       	ld	r5, Z+
     be4:	61 90       	ld	r6, Z+
     be6:	71 90       	ld	r7, Z+
     be8:	ff 8b       	std	Y+23, r31	; 0x17
     bea:	ee 8b       	std	Y+22, r30	; 0x16
     bec:	e8 8d       	ldd	r30, Y+24	; 0x18
     bee:	f9 8d       	ldd	r31, Y+25	; 0x19
     bf0:	c1 90       	ld	r12, Z+
     bf2:	d1 90       	ld	r13, Z+
     bf4:	e1 90       	ld	r14, Z+
     bf6:	f1 90       	ld	r15, Z+
     bf8:	f9 8f       	std	Y+25, r31	; 0x19
     bfa:	e8 8f       	std	Y+24, r30	; 0x18
     bfc:	ce aa       	std	Y+54, r12	; 0x36
     bfe:	df aa       	std	Y+55, r13	; 0x37
     c00:	e8 ae       	std	Y+56, r14	; 0x38
     c02:	f9 ae       	std	Y+57, r15	; 0x39
     c04:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c06:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c08:	c1 90       	ld	r12, Z+
     c0a:	d1 90       	ld	r13, Z+
     c0c:	e1 90       	ld	r14, Z+
     c0e:	f1 90       	ld	r15, Z+
     c10:	fb 8f       	std	Y+27, r31	; 0x1b
     c12:	ea 8f       	std	Y+26, r30	; 0x1a
     c14:	ce 8e       	std	Y+30, r12	; 0x1e
     c16:	df 8e       	std	Y+31, r13	; 0x1f
     c18:	e8 a2       	std	Y+32, r14	; 0x20
     c1a:	f9 a2       	std	Y+33, r15	; 0x21
     c1c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     c20:	6b 01       	movw	r12, r22
     c22:	7c 01       	movw	r14, r24
     c24:	a3 01       	movw	r20, r6
     c26:	92 01       	movw	r18, r4
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     c3c:	4b 01       	movw	r8, r22
     c3e:	5c 01       	movw	r10, r24
     c40:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c42:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c44:	48 a1       	ldd	r20, Y+32	; 0x20
     c46:	59 a1       	ldd	r21, Y+33	; 0x21
     c48:	6e a9       	ldd	r22, Y+54	; 0x36
     c4a:	7f a9       	ldd	r23, Y+55	; 0x37
     c4c:	88 ad       	ldd	r24, Y+56	; 0x38
     c4e:	99 ad       	ldd	r25, Y+57	; 0x39
     c50:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	c5 01       	movw	r24, r10
     c5a:	b4 01       	movw	r22, r8
     c5c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	6f 85       	ldd	r22, Y+15	; 0x0f
     c66:	7b 89       	ldd	r23, Y+19	; 0x13
     c68:	83 2d       	mov	r24, r3
     c6a:	92 2d       	mov	r25, r2
     c6c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
     c70:	6f 87       	std	Y+15, r22	; 0x0f
     c72:	7b 8b       	std	Y+19, r23	; 0x13
     c74:	38 2e       	mov	r3, r24
     c76:	29 2e       	mov	r2, r25
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     c78:	cd 84       	ldd	r12, Y+13	; 0x0d
     c7a:	de 84       	ldd	r13, Y+14	; 0x0e
     c7c:	0c 15       	cp	r16, r12
     c7e:	1d 05       	cpc	r17, r13
     c80:	09 f0       	breq	.+2      	; 0xc84 <nominal+0x2a6>
     c82:	96 cf       	rjmp	.-212    	; 0xbb0 <nominal+0x1d2>
     c84:	0a a5       	ldd	r16, Y+42	; 0x2a
     c86:	1b a5       	ldd	r17, Y+43	; 0x2b
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     c88:	2c a5       	ldd	r18, Y+44	; 0x2c
     c8a:	3d a5       	ldd	r19, Y+45	; 0x2d
     c8c:	4e a5       	ldd	r20, Y+46	; 0x2e
     c8e:	5f a5       	ldd	r21, Y+47	; 0x2f
     c90:	92 2d       	mov	r25, r2
     c92:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     c96:	e8 a5       	ldd	r30, Y+40	; 0x28
     c98:	f9 a5       	ldd	r31, Y+41	; 0x29
     c9a:	60 83       	st	Z, r22
     c9c:	71 83       	std	Z+1, r23	; 0x01
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	93 83       	std	Z+3, r25	; 0x03
     ca2:	8e a1       	ldd	r24, Y+38	; 0x26
     ca4:	9f a1       	ldd	r25, Y+39	; 0x27
     ca6:	04 96       	adiw	r24, 0x04	; 4
     ca8:	9f a3       	std	Y+39, r25	; 0x27
     caa:	8e a3       	std	Y+38, r24	; 0x26
     cac:	04 5f       	subi	r16, 0xF4	; 244
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     cb0:	04 32       	cpi	r16, 0x24	; 36
     cb2:	11 05       	cpc	r17, r1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <nominal+0x2da>
     cb6:	58 cf       	rjmp	.-336    	; 0xb68 <nominal+0x18a>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     cb8:	4c a9       	ldd	r20, Y+52	; 0x34
     cba:	5d a9       	ldd	r21, Y+53	; 0x35
     cbc:	63 ef       	ldi	r22, 0xF3	; 243
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	86 ea       	ldi	r24, 0xA6	; 166
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cc8:	60 91 da 01 	lds	r22, 0x01DA
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 4f 32 	call	0x649e	; 0x649e <__floatunsisf>
     cd6:	ab 01       	movw	r20, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	8c a9       	ldd	r24, Y+52	; 0x34
     cdc:	9d a9       	ldd	r25, Y+53	; 0x35
     cde:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <scalar_into_vector>
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     ce2:	e9 96       	adiw	r28, 0x39	; 57
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	3f 90       	pop	r3
     d10:	2f 90       	pop	r2
     d12:	08 95       	ret

00000d14 <apply_torque>:

void apply_torque(vector v_m)
{
     d14:	2f 92       	push	r2
     d16:	3f 92       	push	r3
     d18:	4f 92       	push	r4
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	6c 01       	movw	r12, r24
     d3a:	8c 01       	movw	r16, r24
     d3c:	7c 01       	movw	r14, r24
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	e8 0e       	add	r14, r24
     d42:	f1 1c       	adc	r15, r1
     d44:	e6 01       	movw	r28, r12
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d46:	48 80       	ld	r4, Y
     d48:	59 80       	ldd	r5, Y+1	; 0x01
     d4a:	6a 80       	ldd	r6, Y+2	; 0x02
     d4c:	7b 80       	ldd	r7, Y+3	; 0x03
     d4e:	53 01       	movw	r10, r6
     d50:	42 01       	movw	r8, r4
     d52:	e8 94       	clt
     d54:	b7 f8       	bld	r11, 7
     d56:	23 e3       	ldi	r18, 0x33	; 51
     d58:	33 e3       	ldi	r19, 0x33	; 51
     d5a:	43 e7       	ldi	r20, 0x73	; 115
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	c5 01       	movw	r24, r10
     d60:	b4 01       	movw	r22, r8
     d62:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
     d66:	18 16       	cp	r1, r24
     d68:	fc f4       	brge	.+62     	; 0xda8 <apply_torque+0x94>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d6a:	a3 01       	movw	r20, r6
     d6c:	92 01       	movw	r18, r4
     d6e:	c5 01       	movw	r24, r10
     d70:	b4 01       	movw	r22, r8
     d72:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f eb       	ldi	r21, 0xBF	; 191
     d7e:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
     d82:	81 11       	cpse	r24, r1
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <apply_torque+0x84>
			v_m[i] = -1*M_MAX;
     d86:	83 e3       	ldi	r24, 0x33	; 51
     d88:	93 e3       	ldi	r25, 0x33	; 51
     d8a:	a3 e7       	ldi	r26, 0x73	; 115
     d8c:	bf eb       	ldi	r27, 0xBF	; 191
     d8e:	88 83       	st	Y, r24
     d90:	99 83       	std	Y+1, r25	; 0x01
     d92:	aa 83       	std	Y+2, r26	; 0x02
     d94:	bb 83       	std	Y+3, r27	; 0x03
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <apply_torque+0x94>
			else
			v_m[i] = M_MAX;
     d98:	83 e3       	ldi	r24, 0x33	; 51
     d9a:	93 e3       	ldi	r25, 0x33	; 51
     d9c:	a3 e7       	ldi	r26, 0x73	; 115
     d9e:	bf e3       	ldi	r27, 0x3F	; 63
     da0:	88 83       	st	Y, r24
     da2:	99 83       	std	Y+1, r25	; 0x01
     da4:	aa 83       	std	Y+2, r26	; 0x02
     da6:	bb 83       	std	Y+3, r27	; 0x03
     da8:	24 96       	adiw	r28, 0x04	; 4
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     daa:	ce 15       	cp	r28, r14
     dac:	df 05       	cpc	r29, r15
     dae:	59 f6       	brne	.-106    	; 0xd46 <apply_torque+0x32>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     db0:	45 ed       	ldi	r20, 0xD5	; 213
     db2:	5f e0       	ldi	r21, 0x0F	; 15
     db4:	61 ec       	ldi	r22, 0xC1	; 193
     db6:	7e e3       	ldi	r23, 0x3E	; 62
     db8:	c6 01       	movw	r24, r12
     dba:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <scalar_into_vector>
     dbe:	e6 01       	movw	r28, r12
	
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > I_MAX)
     dc0:	48 80       	ld	r4, Y
     dc2:	59 80       	ldd	r5, Y+1	; 0x01
     dc4:	6a 80       	ldd	r6, Y+2	; 0x02
     dc6:	7b 80       	ldd	r7, Y+3	; 0x03
     dc8:	53 01       	movw	r10, r6
     dca:	42 01       	movw	r8, r4
     dcc:	e8 94       	clt
     dce:	b7 f8       	bld	r11, 7
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e8       	ldi	r20, 0x80	; 128
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	c5 01       	movw	r24, r10
     dda:	b4 01       	movw	r22, r8
     ddc:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
     de0:	18 16       	cp	r1, r24
     de2:	fc f4       	brge	.+62     	; 0xe22 <apply_torque+0x10e>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     de4:	a3 01       	movw	r20, r6
     de6:	92 01       	movw	r18, r4
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f eb       	ldi	r21, 0xBF	; 191
     df8:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
     dfc:	81 11       	cpse	r24, r1
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <apply_torque+0xfe>
			v_m[i] = -1*I_MAX;
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 e8       	ldi	r26, 0x80	; 128
     e06:	bf eb       	ldi	r27, 0xBF	; 191
     e08:	88 83       	st	Y, r24
     e0a:	99 83       	std	Y+1, r25	; 0x01
     e0c:	aa 83       	std	Y+2, r26	; 0x02
     e0e:	bb 83       	std	Y+3, r27	; 0x03
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <apply_torque+0x10e>
			else
			v_m[i] = I_MAX;
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e8       	ldi	r26, 0x80	; 128
     e18:	bf e3       	ldi	r27, 0x3F	; 63
     e1a:	88 83       	st	Y, r24
     e1c:	99 83       	std	Y+1, r25	; 0x01
     e1e:	aa 83       	std	Y+2, r26	; 0x02
     e20:	bb 83       	std	Y+3, r27	; 0x03
     e22:	24 96       	adiw	r28, 0x04	; 4
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	
	for(i = 0; i < 3; i++)
     e24:	ec 16       	cp	r14, r28
     e26:	fd 06       	cpc	r15, r29
     e28:	59 f6       	brne	.-106    	; 0xdc0 <apply_torque+0xac>
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
	{
		//sen = ((int8_t)((lambda))/2);
		st =(int32_t)(v_m[i]*65535000);
     e2a:	d8 01       	movw	r26, r16
     e2c:	6d 91       	ld	r22, X+
     e2e:	7d 91       	ld	r23, X+
     e30:	8d 91       	ld	r24, X+
     e32:	9d 91       	ld	r25, X+
     e34:	8d 01       	movw	r16, r26
     e36:	26 e0       	ldi	r18, 0x06	; 6
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	49 e7       	ldi	r20, 0x79	; 121
     e3c:	5c e4       	ldi	r21, 0x4C	; 76
     e3e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     e42:	0e 94 1e 32 	call	0x643c	; 0x643c <__fixsfsi>
     e46:	b7 2e       	mov	r11, r23
     e48:	d8 2f       	mov	r29, r24
     e4a:	c9 2f       	mov	r28, r25
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		sen2 = (int8_t)(st>>16);
		sen3 = (int8_t)(st>>24);
		transmit_UART0(sen);
     e4c:	86 2f       	mov	r24, r22
     e4e:	66 0f       	add	r22, r22
     e50:	99 0b       	sbc	r25, r25
     e52:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
		transmit_UART0(sen1);
     e56:	8b 2d       	mov	r24, r11
     e58:	bb 0c       	add	r11, r11
     e5a:	99 0b       	sbc	r25, r25
     e5c:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
		transmit_UART0(sen2);
     e60:	8d 2f       	mov	r24, r29
     e62:	dd 0f       	add	r29, r29
     e64:	99 0b       	sbc	r25, r25
     e66:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
		transmit_UART0(sen3);
     e6a:	8c 2f       	mov	r24, r28
     e6c:	cc 0f       	add	r28, r28
     e6e:	99 0b       	sbc	r25, r25
     e70:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
	int8_t sen,sen1,sen2,sen3;
	int32_t st;
	// x.f=3.145689123;
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
     e74:	0e 15       	cp	r16, r14
     e76:	1f 05       	cpc	r17, r15
     e78:	c1 f6       	brne	.-80     	; 0xe2a <apply_torque+0x116>
	transmit_UART0(buf3);*/	
	}
	
	
	sen = Mode;
	transmit_UART0(sen);
     e7a:	80 91 26 01 	lds	r24, 0x0126
     e7e:	08 2e       	mov	r0, r24
     e80:	00 0c       	add	r0, r0
     e82:	99 0b       	sbc	r25, r25
     e84:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
	sen = gps_power;
	transmit_UART0(sen);
     e88:	80 91 b6 01 	lds	r24, 0x01B6
     e8c:	08 2e       	mov	r0, r24
     e8e:	00 0c       	add	r0, r0
     e90:	99 0b       	sbc	r25, r25
     e92:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
	Current_state.pwm.y_dir = 0;
	
	Current_state.pwm.z = 30000;
	Current_state.pwm.z_dir = 1;
	*/
v_m[0] = -0.5; v_m[1] = -0.4; v_m[2] = -0.3;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	bf eb       	ldi	r27, 0xBF	; 191
     e9e:	f6 01       	movw	r30, r12
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	a2 83       	std	Z+2, r26	; 0x02
     ea6:	b3 83       	std	Z+3, r27	; 0x03
     ea8:	8d ec       	ldi	r24, 0xCD	; 205
     eaa:	9c ec       	ldi	r25, 0xCC	; 204
     eac:	ac ec       	ldi	r26, 0xCC	; 204
     eae:	be eb       	ldi	r27, 0xBE	; 190
     eb0:	84 83       	std	Z+4, r24	; 0x04
     eb2:	95 83       	std	Z+5, r25	; 0x05
     eb4:	a6 83       	std	Z+6, r26	; 0x06
     eb6:	b7 83       	std	Z+7, r27	; 0x07
     eb8:	8a e9       	ldi	r24, 0x9A	; 154
     eba:	99 e9       	ldi	r25, 0x99	; 153
     ebc:	a9 e9       	ldi	r26, 0x99	; 153
     ebe:	be eb       	ldi	r27, 0xBE	; 190
     ec0:	80 87       	std	Z+8, r24	; 0x08
     ec2:	91 87       	std	Z+9, r25	; 0x09
     ec4:	a2 87       	std	Z+10, r26	; 0x0a
     ec6:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.pwm.x = fabs((v_m[0] * PWM_RES) / I_MAX);
		Current_state.pwm.x_dir = 0;
	}
	else
	{
	Current_state.pwm.x = fabs(((1-fabs(v_m[0])) * PWM_RES) / I_MAX);
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f e7       	ldi	r25, 0x7F	; 127
     ecc:	90 93 1c 05 	sts	0x051C, r25
     ed0:	80 93 1b 05 	sts	0x051B, r24
	Current_state.pwm.x_dir = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 21 05 	sts	0x0521, r24
	}
	if (v_m[1] > 0)
     eda:	84 80       	ldd	r8, Z+4	; 0x04
     edc:	95 80       	ldd	r9, Z+5	; 0x05
     ede:	a6 80       	ldd	r10, Z+6	; 0x06
     ee0:	b7 80       	ldd	r11, Z+7	; 0x07
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	a9 01       	movw	r20, r18
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
     eec:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	94 f4       	brge	.+36     	; 0xf18 <apply_torque+0x204>
	{
		Current_state.pwm.y = fabs((v_m[1] * PWM_RES) / I_MAX);
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	4f e7       	ldi	r20, 0x7F	; 127
     efa:	57 e4       	ldi	r21, 0x47	; 71
     efc:	c5 01       	movw	r24, r10
     efe:	b4 01       	movw	r22, r8
     f00:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     f04:	9f 77       	andi	r25, 0x7F	; 127
     f06:	0e 94 23 32 	call	0x6446	; 0x6446 <__fixunssfsi>
     f0a:	70 93 1e 05 	sts	0x051E, r23
     f0e:	60 93 1d 05 	sts	0x051D, r22
		Current_state.pwm.y_dir = 0;
     f12:	10 92 22 05 	sts	0x0522, r1
     f16:	19 c0       	rjmp	.+50     	; 0xf4a <apply_torque+0x236>
	}
	else
	{
		Current_state.pwm.y = fabs(((1-fabs(v_m[1])) * PWM_RES) / I_MAX);
     f18:	a5 01       	movw	r20, r10
     f1a:	94 01       	movw	r18, r8
     f1c:	5f 77       	andi	r21, 0x7F	; 127
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	9f e3       	ldi	r25, 0x3F	; 63
     f26:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     f36:	9f 77       	andi	r25, 0x7F	; 127
     f38:	0e 94 23 32 	call	0x6446	; 0x6446 <__fixunssfsi>
     f3c:	70 93 1e 05 	sts	0x051E, r23
     f40:	60 93 1d 05 	sts	0x051D, r22
		Current_state.pwm.y_dir = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 22 05 	sts	0x0522, r24
	}
	if (v_m[2] > 0)
     f4a:	d6 01       	movw	r26, r12
     f4c:	18 96       	adiw	r26, 0x08	; 8
     f4e:	cd 90       	ld	r12, X+
     f50:	dd 90       	ld	r13, X+
     f52:	ed 90       	ld	r14, X+
     f54:	fc 90       	ld	r15, X
     f56:	1b 97       	sbiw	r26, 0x0b	; 11
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	a9 01       	movw	r20, r18
     f5e:	c7 01       	movw	r24, r14
     f60:	b6 01       	movw	r22, r12
     f62:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
     f66:	18 16       	cp	r1, r24
     f68:	94 f4       	brge	.+36     	; 0xf8e <apply_torque+0x27a>
	{
		Current_state.pwm.z = fabs((v_m[2] * PWM_RES) / I_MAX);
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	c7 01       	movw	r24, r14
     f74:	b6 01       	movw	r22, r12
     f76:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     f7a:	9f 77       	andi	r25, 0x7F	; 127
     f7c:	0e 94 23 32 	call	0x6446	; 0x6446 <__fixunssfsi>
     f80:	70 93 20 05 	sts	0x0520, r23
     f84:	60 93 1f 05 	sts	0x051F, r22
		Current_state.pwm.z_dir = 0;
     f88:	10 92 23 05 	sts	0x0523, r1
     f8c:	19 c0       	rjmp	.+50     	; 0xfc0 <apply_torque+0x2ac>
	}
	else
	{
		Current_state.pwm.z = fabs(((1-fabs(v_m[2])) * PWM_RES) / I_MAX);
     f8e:	a7 01       	movw	r20, r14
     f90:	96 01       	movw	r18, r12
     f92:	5f 77       	andi	r21, 0x7F	; 127
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	80 e8       	ldi	r24, 0x80	; 128
     f9a:	9f e3       	ldi	r25, 0x3F	; 63
     f9c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
     fac:	9f 77       	andi	r25, 0x7F	; 127
     fae:	0e 94 23 32 	call	0x6446	; 0x6446 <__fixunssfsi>
     fb2:	70 93 20 05 	sts	0x0520, r23
     fb6:	60 93 1f 05 	sts	0x051F, r22
		Current_state.pwm.z_dir = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 23 05 	sts	0x0523, r24
	}
 

PORTA=0xA0;
     fc0:	80 ea       	ldi	r24, 0xA0	; 160
     fc2:	8b bb       	out	0x1b, r24	; 27
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	9f 90       	pop	r9
     fda:	8f 90       	pop	r8
     fdc:	7f 90       	pop	r7
     fde:	6f 90       	pop	r6
     fe0:	5f 90       	pop	r5
     fe2:	4f 90       	pop	r4
     fe4:	3f 90       	pop	r3
     fe6:	2f 90       	pop	r2
     fe8:	08 95       	ret

00000fea <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	e0 97       	sbiw	r28, 0x30	; 48
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1016:	87 ec       	ldi	r24, 0xC7	; 199
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <control+0x30>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <control+0x36>
    1020:	00 00       	nop
  /// Take B readings from Magnetometer, clear torquer first
  //reset_PWM();//see that current are not setting becoz of this
  
  _delay_us(100);
  
  read_MM();
    1022:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <read_MM>
  // write apply torquer function here
   //if(Mode == DETUMBLING)
   apply_torque(v_m_D);
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	74 de       	rcall	.-792    	; 0xd14 <apply_torque>
   //else if(Mode == NOMINAL)
   apply_torque(v_m_N);
    102c:	ce 01       	movw	r24, r28
    102e:	0d 96       	adiw	r24, 0x0d	; 13
    1030:	71 de       	rcall	.-798    	; 0xd14 <apply_torque>
   
  set_PWM();
    1032:	0e 94 08 20 	call	0x4010	; 0x4010 <set_PWM>
  
 // _delay_ms(10);
  detumbling(v_m_D);
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	e8 db       	rcall	.-2096   	; 0x80c <detumbling>
  d= Current_state.pwm.z_dir;
  transmit_UART0(c1);
  transmit_UART0(c2);
  transmit_UART0(d);
  */
  v_B[2] = Current_state.mm.B_x;
    103c:	80 91 08 05 	lds	r24, 0x0508
    1040:	90 91 09 05 	lds	r25, 0x0509
    1044:	a0 91 0a 05 	lds	r26, 0x050A
    1048:	b0 91 0b 05 	lds	r27, 0x050B
    104c:	e3 ef       	ldi	r30, 0xF3	; 243
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	80 87       	std	Z+8, r24	; 0x08
    1052:	91 87       	std	Z+9, r25	; 0x09
    1054:	a2 87       	std	Z+10, r26	; 0x0a
    1056:	b3 87       	std	Z+11, r27	; 0x0b
  v_B[1] = -1*Current_state.mm.B_y;
    1058:	80 91 0c 05 	lds	r24, 0x050C
    105c:	90 91 0d 05 	lds	r25, 0x050D
    1060:	a0 91 0e 05 	lds	r26, 0x050E
    1064:	b0 91 0f 05 	lds	r27, 0x050F
    1068:	b0 58       	subi	r27, 0x80	; 128
    106a:	84 83       	std	Z+4, r24	; 0x04
    106c:	95 83       	std	Z+5, r25	; 0x05
    106e:	a6 83       	std	Z+6, r26	; 0x06
    1070:	b7 83       	std	Z+7, r27	; 0x07
  v_B[0] = Current_state.mm.B_z;
    1072:	80 91 10 05 	lds	r24, 0x0510
    1076:	90 91 11 05 	lds	r25, 0x0511
    107a:	a0 91 12 05 	lds	r26, 0x0512
    107e:	b0 91 13 05 	lds	r27, 0x0513
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	a2 83       	std	Z+2, r26	; 0x02
    1088:	b3 83       	std	Z+3, r27	; 0x03
	//{
		
	//	if ((gps_power==2))
		//{
   uint8_t q= 90;
   transmit_UART0(q);
    108a:	8a e5       	ldi	r24, 0x5A	; 90
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 2a 2c 	call	0x5854	; 0x5854 <transmit_UART0>
    read_GPS();
    1092:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <read_GPS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	eb e4       	ldi	r30, 0x4B	; 75
    109a:	1d e1       	ldi	r17, 0x1D	; 29
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	e0 40       	sbci	r30, 0x00	; 0
    10a0:	10 40       	sbci	r17, 0x00	; 0
    10a2:	e1 f7       	brne	.-8      	; 0x109c <control+0xb2>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <control+0xbc>
    10a6:	00 00       	nop
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   //_delay_ms(700);
    if(GPS_done == 1)
    10a8:	80 91 27 01 	lds	r24, 0x0127
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <control+0xcc>
      copy_gps_reading();  //check if gps is on but pdop data
    10b0:	0e 94 4d 20 	call	0x409a	; 0x409a <copy_gps_reading>
    10b4:	45 c0       	rjmp	.+138    	; 0x1140 <__stack+0x41>
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    10b6:	20 91 98 04 	lds	r18, 0x0498
    10ba:	30 91 99 04 	lds	r19, 0x0499
    10be:	40 91 9a 04 	lds	r20, 0x049A
    10c2:	50 91 9b 04 	lds	r21, 0x049B
    10c6:	60 91 9c 04 	lds	r22, 0x049C
    10ca:	70 91 9d 04 	lds	r23, 0x049D
    10ce:	80 91 9e 04 	lds	r24, 0x049E
    10d2:	90 91 9f 04 	lds	r25, 0x049F
    10d6:	a2 e0       	ldi	r26, 0x02	; 2
    10d8:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <__adddi3_s8>
    10dc:	20 93 98 04 	sts	0x0498, r18
    10e0:	30 93 99 04 	sts	0x0499, r19
    10e4:	40 93 9a 04 	sts	0x049A, r20
    10e8:	50 93 9b 04 	sts	0x049B, r21
    10ec:	60 93 9c 04 	sts	0x049C, r22
    10f0:	70 93 9d 04 	sts	0x049D, r23
    10f4:	80 93 9e 04 	sts	0x049E, r24
    10f8:	90 93 9f 04 	sts	0x049F, r25
	  seconds_since_pivot += FRAME_TIME;
    10fc:	20 91 90 04 	lds	r18, 0x0490
    1100:	30 91 91 04 	lds	r19, 0x0491
    1104:	40 91 92 04 	lds	r20, 0x0492
    1108:	50 91 93 04 	lds	r21, 0x0493
    110c:	60 91 94 04 	lds	r22, 0x0494
    1110:	70 91 95 04 	lds	r23, 0x0495
    1114:	80 91 96 04 	lds	r24, 0x0496
    1118:	90 91 97 04 	lds	r25, 0x0497
    111c:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <__adddi3_s8>
    1120:	20 93 90 04 	sts	0x0490, r18
    1124:	30 93 91 04 	sts	0x0491, r19
    1128:	40 93 92 04 	sts	0x0492, r20
    112c:	50 93 93 04 	sts	0x0493, r21
    1130:	60 93 94 04 	sts	0x0494, r22
    1134:	70 93 95 04 	sts	0x0495, r23
    1138:	80 93 96 04 	sts	0x0496, r24
    113c:	90 93 97 04 	sts	0x0497, r25
	 // Current_state.gps.time_since_reading += FRAME_TIME;
	  }
	  
   // uint8_t e=100;
    //transmit_UART0(e);
    read_SS();
    1140:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    1144:	0e 94 0b 24 	call	0x4816	; 0x4816 <light_cal>
    1148:	80 93 da 01 	sts	0x01DA, r24
	if(GPS_done != 255)
    114c:	80 91 27 01 	lds	r24, 0x0127
    1150:	8f 3f       	cpi	r24, 0xFF	; 255
    1152:	09 f4       	brne	.+2      	; 0x1156 <__stack+0x57>
    1154:	43 c0       	rjmp	.+134    	; 0x11dc <__stack+0xdd>
	{
		
    sgp_orbit_propagator();
    1156:	0e 94 24 22 	call	0x4448	; 0x4448 <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    115a:	ce 01       	movw	r24, r28
    115c:	49 96       	adiw	r24, 0x19	; 25
    115e:	0e 94 c1 22 	call	0x4582	; 0x4582 <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    1162:	ce 01       	movw	r24, r28
    1164:	85 96       	adiw	r24, 0x25	; 37
    1166:	0e 94 90 23 	call	0x4720	; 0x4720 <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    116a:	29 ed       	ldi	r18, 0xD9	; 217
    116c:	31 e0       	ldi	r19, 0x01	; 1
    116e:	4f ef       	ldi	r20, 0xFF	; 255
    1170:	51 e0       	ldi	r21, 0x01	; 1
    1172:	be 01       	movw	r22, r28
    1174:	67 5e       	subi	r22, 0xE7	; 231
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	ce 01       	movw	r24, r28
    117a:	85 96       	adiw	r24, 0x25	; 37
    117c:	0e 94 33 24 	call	0x4866	; 0x4866 <quest>
    1180:	80 93 da 01 	sts	0x01DA, r24
    
    omega_estimation(q_o, v_w);
    1184:	67 ee       	ldi	r22, 0xE7	; 231
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	0e 94 34 28 	call	0x5068	; 0x5068 <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    1190:	80 91 da 01 	lds	r24, 0x01DA
    1194:	60 91 d9 01 	lds	r22, 0x01D9
    1198:	86 9f       	mul	r24, r22
    119a:	b0 01       	movw	r22, r0
    119c:	11 24       	eor	r1, r1
    119e:	07 2e       	mov	r0, r23
    11a0:	00 0c       	add	r0, r0
    11a2:	88 0b       	sbc	r24, r24
    11a4:	99 0b       	sbc	r25, r25
    11a6:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    11aa:	ab 01       	movw	r20, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	87 ee       	ldi	r24, 0xE7	; 231
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    11b6:	87 ee       	ldi	r24, 0xE7	; 231
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vector_norm>
    11be:	60 93 8c 04 	sts	0x048C, r22
    11c2:	70 93 8d 04 	sts	0x048D, r23
    11c6:	80 93 8e 04 	sts	0x048E, r24
    11ca:	90 93 8f 04 	sts	0x048F, r25
    convert_unit_quaternion(q_o);
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    11d6:	ce 01       	movw	r24, r28
    11d8:	0d 96       	adiw	r24, 0x0d	; 13
    11da:	01 dc       	rcall	.-2046   	; 0x9de <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if((star_flag >= 120) || (Time > 500000))   // 90
    11dc:	80 91 cc 01 	lds	r24, 0x01CC
    11e0:	88 37       	cpi	r24, 0x78	; 120
    11e2:	dc f4       	brge	.+54     	; 0x121a <__stack+0x11b>
    11e4:	20 91 25 05 	lds	r18, 0x0525
    11e8:	30 91 26 05 	lds	r19, 0x0526
    11ec:	40 91 27 05 	lds	r20, 0x0527
    11f0:	50 91 28 05 	lds	r21, 0x0528
    11f4:	60 91 29 05 	lds	r22, 0x0529
    11f8:	70 91 2a 05 	lds	r23, 0x052A
    11fc:	80 91 2b 05 	lds	r24, 0x052B
    1200:	90 91 2c 05 	lds	r25, 0x052C
    1204:	20 32       	cpi	r18, 0x20	; 32
    1206:	31 4a       	sbci	r19, 0xA1	; 161
    1208:	47 40       	sbci	r20, 0x07	; 7
    120a:	51 05       	cpc	r21, r1
    120c:	61 05       	cpc	r22, r1
    120e:	71 05       	cpc	r23, r1
    1210:	81 05       	cpc	r24, r1
    1212:	91 05       	cpc	r25, r1
    1214:	09 f0       	breq	.+2      	; 0x1218 <__stack+0x119>
    1216:	08 f4       	brcc	.+2      	; 0x121a <__stack+0x11b>
    1218:	6b c0       	rjmp	.+214    	; 0x12f0 <__stack+0x1f1>
		{    avg_md_new = 0;
    121a:	10 92 ba 01 	sts	0x01BA, r1
    121e:	10 92 bb 01 	sts	0x01BB, r1
    1222:	10 92 bc 01 	sts	0x01BC, r1
    1226:	10 92 bd 01 	sts	0x01BD, r1
			star_flag = 121;                 // 91
    122a:	89 e7       	ldi	r24, 0x79	; 121
    122c:	80 93 cc 01 	sts	0x01CC, r24
			if (light ==1)
    1230:	80 91 da 01 	lds	r24, 0x01DA
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	21 f5       	brne	.+72     	; 0x1280 <__stack+0x181>
			{
				time_l = time_l +2;
    1238:	80 91 b2 01 	lds	r24, 0x01B2
    123c:	90 91 b3 01 	lds	r25, 0x01B3
    1240:	02 96       	adiw	r24, 0x02	; 2
    1242:	90 93 b3 01 	sts	0x01B3, r25
    1246:	80 93 b2 01 	sts	0x01B2, r24
				time_e =0;
    124a:	10 92 b5 01 	sts	0x01B5, r1
    124e:	10 92 b4 01 	sts	0x01B4, r1
				start_time = time_l % 720;   //690
    1252:	60 ed       	ldi	r22, 0xD0	; 208
    1254:	72 e0       	ldi	r23, 0x02	; 2
    1256:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divmodhi4>
    125a:	90 93 cb 01 	sts	0x01CB, r25
    125e:	80 93 ca 01 	sts	0x01CA, r24
				if (start_time <600)       //600
    1262:	88 35       	cpi	r24, 0x58	; 88
    1264:	92 40       	sbci	r25, 0x02	; 2
    1266:	2c f4       	brge	.+10     	; 0x1272 <__stack+0x173>
				{
					gps_power =0;          // 0 
    1268:	10 92 b7 01 	sts	0x01B7, r1
    126c:	10 92 b6 01 	sts	0x01B6, r1
    1270:	2c c1       	rjmp	.+600    	; 0x14ca <__stack+0x3cb>
				}
				else
				{
					gps_power =2;
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	90 93 b7 01 	sts	0x01B7, r25
    127a:	80 93 b6 01 	sts	0x01B6, r24
    127e:	25 c1       	rjmp	.+586    	; 0x14ca <__stack+0x3cb>
				}
			}
			else
			{
				start_time =0;
    1280:	10 92 cb 01 	sts	0x01CB, r1
    1284:	10 92 ca 01 	sts	0x01CA, r1
				time_e = time_e +2;
    1288:	60 91 b4 01 	lds	r22, 0x01B4
    128c:	70 91 b5 01 	lds	r23, 0x01B5
    1290:	6e 5f       	subi	r22, 0xFE	; 254
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	70 93 b5 01 	sts	0x01B5, r23
    1298:	60 93 b4 01 	sts	0x01B4, r22
				if (time_e > (eclipse_time-150))
    129c:	07 2e       	mov	r0, r23
    129e:	00 0c       	add	r0, r0
    12a0:	88 0b       	sbc	r24, r24
    12a2:	99 0b       	sbc	r25, r25
    12a4:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    12a8:	6b 01       	movw	r12, r22
    12aa:	7c 01       	movw	r14, r24
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	46 e1       	ldi	r20, 0x16	; 22
    12b2:	53 e4       	ldi	r21, 0x43	; 67
    12b4:	60 91 04 01 	lds	r22, 0x0104
    12b8:	70 91 05 01 	lds	r23, 0x0105
    12bc:	80 91 06 01 	lds	r24, 0x0106
    12c0:	90 91 07 01 	lds	r25, 0x0107
    12c4:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    12c8:	9b 01       	movw	r18, r22
    12ca:	ac 01       	movw	r20, r24
    12cc:	c7 01       	movw	r24, r14
    12ce:	b6 01       	movw	r22, r12
    12d0:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    12d4:	18 16       	cp	r1, r24
    12d6:	3c f4       	brge	.+14     	; 0x12e6 <__stack+0x1e7>
				{
					gps_power =2;
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	90 93 b7 01 	sts	0x01B7, r25
    12e0:	80 93 b6 01 	sts	0x01B6, r24
    12e4:	f2 c0       	rjmp	.+484    	; 0x14ca <__stack+0x3cb>
				}
				else
				{
					gps_power =0;
    12e6:	10 92 b7 01 	sts	0x01B7, r1
    12ea:	10 92 b6 01 	sts	0x01B6, r1
    12ee:	ed c0       	rjmp	.+474    	; 0x14ca <__stack+0x3cb>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vector_norm>
    12f8:	6b 01       	movw	r12, r22
    12fa:	7c 01       	movw	r14, r24
    12fc:	60 93 c6 01 	sts	0x01C6, r22
    1300:	70 93 c7 01 	sts	0x01C7, r23
    1304:	80 93 c8 01 	sts	0x01C8, r24
    1308:	90 93 c9 01 	sts	0x01C9, r25
			md_start = norm_m_d * light;
    130c:	80 91 da 01 	lds	r24, 0x01DA
    1310:	68 2f       	mov	r22, r24
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
    1320:	c7 01       	movw	r24, r14
    1322:	b6 01       	movw	r22, r12
    1324:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1328:	6b 01       	movw	r12, r22
    132a:	7c 01       	movw	r14, r24
    132c:	60 93 c2 01 	sts	0x01C2, r22
    1330:	70 93 c3 01 	sts	0x01C3, r23
    1334:	80 93 c4 01 	sts	0x01C4, r24
    1338:	90 93 c5 01 	sts	0x01C5, r25
			if (md_start != 0)
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	a9 01       	movw	r20, r18
    1342:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <__stack+0x24d>
    134a:	62 c0       	rjmp	.+196    	; 0x1410 <__stack+0x311>
			{
				if (num==2)
    134c:	80 90 08 01 	lds	r8, 0x0108
    1350:	90 90 09 01 	lds	r9, 0x0109
    1354:	22 e0       	ldi	r18, 0x02	; 2
    1356:	82 16       	cp	r8, r18
    1358:	91 04       	cpc	r9, r1
    135a:	a9 f4       	brne	.+42     	; 0x1386 <__stack+0x287>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    135c:	a7 01       	movw	r20, r14
    135e:	96 01       	movw	r18, r12
    1360:	c7 01       	movw	r24, r14
    1362:	b6 01       	movw	r22, r12
    1364:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1374:	60 93 ba 01 	sts	0x01BA, r22
    1378:	70 93 bb 01 	sts	0x01BB, r23
    137c:	80 93 bc 01 	sts	0x01BC, r24
    1380:	90 93 bd 01 	sts	0x01BD, r25
    1384:	2c c0       	rjmp	.+88     	; 0x13de <__stack+0x2df>
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    1386:	b4 01       	movw	r22, r8
    1388:	61 50       	subi	r22, 0x01	; 1
    138a:	71 09       	sbc	r23, r1
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 4f 32 	call	0x649e	; 0x649e <__floatunsisf>
    1394:	20 91 be 01 	lds	r18, 0x01BE
    1398:	30 91 bf 01 	lds	r19, 0x01BF
    139c:	40 91 c0 01 	lds	r20, 0x01C0
    13a0:	50 91 c1 01 	lds	r21, 0x01C1
    13a4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	c7 01       	movw	r24, r14
    13ae:	b6 01       	movw	r22, r12
    13b0:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    13b4:	6b 01       	movw	r12, r22
    13b6:	7c 01       	movw	r14, r24
    13b8:	b4 01       	movw	r22, r8
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 4f 32 	call	0x649e	; 0x649e <__floatunsisf>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	c7 01       	movw	r24, r14
    13c8:	b6 01       	movw	r22, r12
    13ca:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    13ce:	60 93 ba 01 	sts	0x01BA, r22
    13d2:	70 93 bb 01 	sts	0x01BB, r23
    13d6:	80 93 bc 01 	sts	0x01BC, r24
    13da:	90 93 bd 01 	sts	0x01BD, r25
				}
				num = num +1;
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	88 1a       	sub	r8, r24
    13e2:	98 0a       	sbc	r9, r24
    13e4:	90 92 09 01 	sts	0x0109, r9
    13e8:	80 92 08 01 	sts	0x0108, r8
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    13ec:	c0 90 ba 01 	lds	r12, 0x01BA
    13f0:	d0 90 bb 01 	lds	r13, 0x01BB
    13f4:	e0 90 bc 01 	lds	r14, 0x01BC
    13f8:	f0 90 bd 01 	lds	r15, 0x01BD
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	a9 01       	movw	r20, r18
    1402:	c7 01       	movw	r24, r14
    1404:	b6 01       	movw	r22, r12
    1406:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    140a:	81 11       	cpse	r24, r1
    140c:	10 c0       	rjmp	.+32     	; 0x142e <__stack+0x32f>
    140e:	1a c0       	rjmp	.+52     	; 0x1444 <__stack+0x345>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	90 93 09 01 	sts	0x0109, r25
    1418:	80 93 08 01 	sts	0x0108, r24
				avg_md_new = 0;
    141c:	10 92 ba 01 	sts	0x01BA, r1
    1420:	10 92 bb 01 	sts	0x01BB, r1
    1424:	10 92 bc 01 	sts	0x01BC, r1
    1428:	10 92 bd 01 	sts	0x01BD, r1
    142c:	0b c0       	rjmp	.+22     	; 0x1444 <__stack+0x345>
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    142e:	2a e0       	ldi	r18, 0x0A	; 10
    1430:	37 ed       	ldi	r19, 0xD7	; 215
    1432:	43 e2       	ldi	r20, 0x23	; 35
    1434:	5d e3       	ldi	r21, 0x3D	; 61
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    143e:	88 23       	and	r24, r24
    1440:	84 f0       	brlt	.+32     	; 0x1462 <__stack+0x363>
    1442:	19 c0       	rjmp	.+50     	; 0x1476 <__stack+0x377>
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	60 91 be 01 	lds	r22, 0x01BE
    144e:	70 91 bf 01 	lds	r23, 0x01BF
    1452:	80 91 c0 01 	lds	r24, 0x01C0
    1456:	90 91 c1 01 	lds	r25, 0x01C1
    145a:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    145e:	88 23       	and	r24, r24
    1460:	51 f0       	breq	.+20     	; 0x1476 <__stack+0x377>
			{
				flag_on = flag_on +2;
    1462:	80 91 b8 01 	lds	r24, 0x01B8
    1466:	90 91 b9 01 	lds	r25, 0x01B9
    146a:	02 96       	adiw	r24, 0x02	; 2
    146c:	90 93 b9 01 	sts	0x01B9, r25
    1470:	80 93 b8 01 	sts	0x01B8, r24
    1474:	04 c0       	rjmp	.+8      	; 0x147e <__stack+0x37f>
			}
			else
			{
				flag_on = 0;
    1476:	10 92 b9 01 	sts	0x01B9, r1
    147a:	10 92 b8 01 	sts	0x01B8, r1
			}
			if (flag_on > gps_start)
    147e:	60 91 b8 01 	lds	r22, 0x01B8
    1482:	70 91 b9 01 	lds	r23, 0x01B9
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 4f 32 	call	0x649e	; 0x649e <__floatunsisf>
    148e:	20 91 00 01 	lds	r18, 0x0100
    1492:	30 91 01 01 	lds	r19, 0x0101
    1496:	40 91 02 01 	lds	r20, 0x0102
    149a:	50 91 03 01 	lds	r21, 0x0103
    149e:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	64 f4       	brge	.+24     	; 0x14be <__stack+0x3bf>
			{
				gps_power = 2;
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	90 93 b7 01 	sts	0x01B7, r25
    14ae:	80 93 b6 01 	sts	0x01B6, r24
				star_flag = star_flag +2;
    14b2:	80 91 cc 01 	lds	r24, 0x01CC
    14b6:	8e 5f       	subi	r24, 0xFE	; 254
    14b8:	80 93 cc 01 	sts	0x01CC, r24
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <__stack+0x3cb>
			}
			else
			{
				gps_power=0;
    14be:	10 92 b7 01 	sts	0x01B7, r1
    14c2:	10 92 b6 01 	sts	0x01B6, r1
				star_flag = 0;                        
    14c6:	10 92 cc 01 	sts	0x01CC, r1
			}
			
		}
  avg_md = avg_md_new;
    14ca:	80 91 ba 01 	lds	r24, 0x01BA
    14ce:	90 91 bb 01 	lds	r25, 0x01BB
    14d2:	a0 91 bc 01 	lds	r26, 0x01BC
    14d6:	b0 91 bd 01 	lds	r27, 0x01BD
    14da:	80 93 be 01 	sts	0x01BE, r24
    14de:	90 93 bf 01 	sts	0x01BF, r25
    14e2:	a0 93 c0 01 	sts	0x01C0, r26
    14e6:	b0 93 c1 01 	sts	0x01C1, r27
	transmit_UART0(buf1);
	transmit_UART0(buf2);
	transmit_UART0(buf3);*/	
	//}
	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    14ea:	c0 90 8c 04 	lds	r12, 0x048C
    14ee:	d0 90 8d 04 	lds	r13, 0x048D
    14f2:	e0 90 8e 04 	lds	r14, 0x048E
    14f6:	f0 90 8f 04 	lds	r15, 0x048F
    14fa:	2f e6       	ldi	r18, 0x6F	; 111
    14fc:	32 e1       	ldi	r19, 0x12	; 18
    14fe:	43 e8       	ldi	r20, 0x83	; 131
    1500:	5b e3       	ldi	r21, 0x3B	; 59
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    150a:	88 23       	and	r24, r24
    150c:	bc f4       	brge	.+46     	; 0x153c <__stack+0x43d>
    150e:	80 91 da 01 	lds	r24, 0x01DA
    1512:	90 91 d9 01 	lds	r25, 0x01D9
    1516:	89 9f       	mul	r24, r25
    1518:	c0 01       	movw	r24, r0
    151a:	11 24       	eor	r1, r1
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	71 f4       	brne	.+28     	; 0x153c <__stack+0x43d>
   {
	   flag_N = flag_N+1;
    1520:	80 91 d7 01 	lds	r24, 0x01D7
    1524:	90 91 d8 01 	lds	r25, 0x01D8
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	90 93 d8 01 	sts	0x01D8, r25
    152e:	80 93 d7 01 	sts	0x01D7, r24
	   flag_D = 0;
    1532:	10 92 d6 01 	sts	0x01D6, r1
    1536:	10 92 d5 01 	sts	0x01D5, r1
    153a:	17 c0       	rjmp	.+46     	; 0x156a <__stack+0x46b>
   }
   else if (mod_w > TOLW_N2D)
    153c:	2f e6       	ldi	r18, 0x6F	; 111
    153e:	32 e1       	ldi	r19, 0x12	; 18
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	5c e3       	ldi	r21, 0x3C	; 60
    1544:	c7 01       	movw	r24, r14
    1546:	b6 01       	movw	r22, r12
    1548:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    154c:	18 16       	cp	r1, r24
    154e:	6c f4       	brge	.+26     	; 0x156a <__stack+0x46b>
   {
	   flag_D = flag_D +1;
    1550:	80 91 d5 01 	lds	r24, 0x01D5
    1554:	90 91 d6 01 	lds	r25, 0x01D6
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	90 93 d6 01 	sts	0x01D6, r25
    155e:	80 93 d5 01 	sts	0x01D5, r24
	   flag_N = 0;
    1562:	10 92 d8 01 	sts	0x01D8, r1
    1566:	10 92 d7 01 	sts	0x01D7, r1
   }
   
   
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<500)
    156a:	60 90 25 05 	lds	r6, 0x0525
    156e:	70 90 26 05 	lds	r7, 0x0526
    1572:	80 90 27 05 	lds	r8, 0x0527
    1576:	90 90 28 05 	lds	r9, 0x0528
    157a:	b0 91 29 05 	lds	r27, 0x0529
    157e:	a0 91 2a 05 	lds	r26, 0x052A
    1582:	f0 91 2b 05 	lds	r31, 0x052B
    1586:	e0 91 2c 05 	lds	r30, 0x052C
    158a:	26 2d       	mov	r18, r6
    158c:	37 2d       	mov	r19, r7
    158e:	48 2d       	mov	r20, r8
    1590:	59 2d       	mov	r21, r9
    1592:	6b 2f       	mov	r22, r27
    1594:	7a 2f       	mov	r23, r26
    1596:	8f 2f       	mov	r24, r31
    1598:	9e 2f       	mov	r25, r30
    159a:	23 3f       	cpi	r18, 0xF3	; 243
    159c:	31 40       	sbci	r19, 0x01	; 1
    159e:	41 05       	cpc	r20, r1
    15a0:	51 05       	cpc	r21, r1
    15a2:	61 05       	cpc	r22, r1
    15a4:	71 05       	cpc	r23, r1
    15a6:	81 05       	cpc	r24, r1
    15a8:	91 05       	cpc	r25, r1
    15aa:	09 f0       	breq	.+2      	; 0x15ae <__stack+0x4af>
    15ac:	a0 f4       	brcc	.+40     	; 0x15d6 <__stack+0x4d7>
	{
		Mode = DETUMBLING;
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	80 93 26 01 	sts	0x0126, r24
		t_now = 0;
    15b4:	10 92 cd 01 	sts	0x01CD, r1
    15b8:	10 92 ce 01 	sts	0x01CE, r1
    15bc:	10 92 cf 01 	sts	0x01CF, r1
    15c0:	10 92 d0 01 	sts	0x01D0, r1
    15c4:	10 92 d1 01 	sts	0x01D1, r1
    15c8:	10 92 d2 01 	sts	0x01D2, r1
    15cc:	10 92 d3 01 	sts	0x01D3, r1
    15d0:	10 92 d4 01 	sts	0x01D4, r1
    15d4:	77 c0       	rjmp	.+238    	; 0x16c4 <__stack+0x5c5>
	}
	else
	{
		if (star_flag >0)
    15d6:	80 91 cc 01 	lds	r24, 0x01CC
    15da:	18 16       	cp	r1, r24
    15dc:	5c f5       	brge	.+86     	; 0x1634 <__stack+0x535>
		{
			if (Mode == DETUMBLING)
    15de:	80 91 26 01 	lds	r24, 0x0126
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	39 f5       	brne	.+78     	; 0x1634 <__stack+0x535>
			{
				if (flag_N > tol_time)
    15e6:	20 91 d7 01 	lds	r18, 0x01D7
    15ea:	30 91 d8 01 	lds	r19, 0x01D8
    15ee:	80 91 0a 01 	lds	r24, 0x010A
    15f2:	90 91 0b 01 	lds	r25, 0x010B
    15f6:	82 17       	cp	r24, r18
    15f8:	93 07       	cpc	r25, r19
    15fa:	c4 f4       	brge	.+48     	; 0x162c <__stack+0x52d>
				{
					Mode = NOMINAL;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	80 93 26 01 	sts	0x0126, r24
					t_now = Time;
    1602:	60 92 cd 01 	sts	0x01CD, r6
    1606:	70 92 ce 01 	sts	0x01CE, r7
    160a:	80 92 cf 01 	sts	0x01CF, r8
    160e:	90 92 d0 01 	sts	0x01D0, r9
    1612:	b0 93 d1 01 	sts	0x01D1, r27
    1616:	a0 93 d2 01 	sts	0x01D2, r26
    161a:	f0 93 d3 01 	sts	0x01D3, r31
    161e:	e0 93 d4 01 	sts	0x01D4, r30
					flag_N = 0;
    1622:	10 92 d8 01 	sts	0x01D8, r1
    1626:	10 92 d7 01 	sts	0x01D7, r1
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <__stack+0x535>
				}
				else
				{flag_D = 0;}	
    162c:	10 92 d6 01 	sts	0x01D6, r1
    1630:	10 92 d5 01 	sts	0x01D5, r1
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    1634:	80 91 26 01 	lds	r24, 0x0126
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	09 f0       	breq	.+2      	; 0x163e <__stack+0x53f>
    163c:	43 c0       	rjmp	.+134    	; 0x16c4 <__stack+0x5c5>
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    163e:	20 91 d5 01 	lds	r18, 0x01D5
    1642:	30 91 d6 01 	lds	r19, 0x01D6
    1646:	80 91 0a 01 	lds	r24, 0x010A
    164a:	90 91 0b 01 	lds	r25, 0x010B
    164e:	82 17       	cp	r24, r18
    1650:	93 07       	cpc	r25, r19
    1652:	a4 f5       	brge	.+104    	; 0x16bc <__stack+0x5bd>
    1654:	20 91 cd 01 	lds	r18, 0x01CD
    1658:	30 91 ce 01 	lds	r19, 0x01CE
    165c:	40 91 cf 01 	lds	r20, 0x01CF
    1660:	50 91 d0 01 	lds	r21, 0x01D0
    1664:	60 91 d1 01 	lds	r22, 0x01D1
    1668:	70 91 d2 01 	lds	r23, 0x01D2
    166c:	80 91 d3 01 	lds	r24, 0x01D3
    1670:	90 91 d4 01 	lds	r25, 0x01D4
    1674:	20 5f       	subi	r18, 0xF0	; 240
    1676:	38 4d       	sbci	r19, 0xD8	; 216
    1678:	4f 4f       	sbci	r20, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	6f 4f       	sbci	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	a2 2e       	mov	r10, r18
    1686:	b3 2e       	mov	r11, r19
    1688:	c4 2e       	mov	r12, r20
    168a:	d5 2e       	mov	r13, r21
    168c:	e6 2e       	mov	r14, r22
    168e:	f7 2e       	mov	r15, r23
    1690:	08 2f       	mov	r16, r24
    1692:	19 2f       	mov	r17, r25
    1694:	26 2d       	mov	r18, r6
    1696:	37 2d       	mov	r19, r7
    1698:	48 2d       	mov	r20, r8
    169a:	59 2d       	mov	r21, r9
    169c:	6b 2f       	mov	r22, r27
    169e:	7a 2f       	mov	r23, r26
    16a0:	8f 2f       	mov	r24, r31
    16a2:	9e 2f       	mov	r25, r30
    16a4:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__cmpdi2>
    16a8:	49 f0       	breq	.+18     	; 0x16bc <__stack+0x5bd>
    16aa:	40 f0       	brcs	.+16     	; 0x16bc <__stack+0x5bd>
		 {
			 Mode = DETUMBLING;
    16ac:	84 e0       	ldi	r24, 0x04	; 4
    16ae:	80 93 26 01 	sts	0x0126, r24
			 flag_D = 0;
    16b2:	10 92 d6 01 	sts	0x01D6, r1
    16b6:	10 92 d5 01 	sts	0x01D5, r1
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__stack+0x5c5>
		 }
		 else
		 {
			 flag_N = 0;
    16bc:	10 92 d8 01 	sts	0x01D8, r1
    16c0:	10 92 d7 01 	sts	0x01D7, r1
  else if(Mode == NOMINAL)*/
	//change here
   
	
	//Mode_prev = Mode;
    Current_state.gps.gps_power_main = gps_power;
    16c4:	80 91 b6 01 	lds	r24, 0x01B6
    16c8:	80 93 e1 04 	sts	0x04E1, r24
}
    16cc:	e0 96       	adiw	r28, 0x30	; 48
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	08 95       	ret

000016f6 <days_in_months>:

uint64_t seconds_since_equinox, seconds_since_pivot;

uint64_t days_in_months(uint8_t month)
{
  switch (month)
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	fc 01       	movw	r30, r24
    16fa:	32 97       	sbiw	r30, 0x02	; 2
    16fc:	eb 30       	cpi	r30, 0x0B	; 11
    16fe:	f1 05       	cpc	r31, r1
    1700:	08 f0       	brcs	.+2      	; 0x1704 <days_in_months+0xe>
    1702:	67 c0       	rjmp	.+206    	; 0x17d2 <days_in_months+0xdc>
    1704:	ea 5b       	subi	r30, 0xBA	; 186
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	0c 94 d5 35 	jmp	0x6baa	; 0x6baa <__tablejump2__>
  {
    case 1:
      return 0;
      break;
    case 2:
      return 31;
    170c:	2f e1       	ldi	r18, 0x1F	; 31
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	08 95       	ret
      break;
    case 3:
      return 59;
    171e:	2b e3       	ldi	r18, 0x3B	; 59
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	08 95       	ret
      break;
    case 4:
      return 90;
    1730:	2a e5       	ldi	r18, 0x5A	; 90
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	08 95       	ret
      break;
    case 5:
      return 120;
    1742:	28 e7       	ldi	r18, 0x78	; 120
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	08 95       	ret
      break;
    case 6:
      return 151;
    1754:	27 e9       	ldi	r18, 0x97	; 151
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	08 95       	ret
      break;
    case 7:
      return 181;
    1766:	25 eb       	ldi	r18, 0xB5	; 181
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	08 95       	ret
      break;
    case 8:
      return 212;
    1778:	24 ed       	ldi	r18, 0xD4	; 212
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	08 95       	ret
      break;
    case 9:
      return 243;
    178a:	23 ef       	ldi	r18, 0xF3	; 243
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	08 95       	ret
      break;
    case 10:
      return 273;
    179c:	21 e1       	ldi	r18, 0x11	; 17
    179e:	31 e0       	ldi	r19, 0x01	; 1
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	08 95       	ret
      break;
    case 11:
      return 304;
    17ae:	20 e3       	ldi	r18, 0x30	; 48
    17b0:	31 e0       	ldi	r19, 0x01	; 1
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	08 95       	ret
      break;
    case 12:
      return 334;
    17c0:	2e e4       	ldi	r18, 0x4E	; 78
    17c2:	31 e0       	ldi	r19, 0x01	; 1
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	08 95       	ret
uint64_t days_in_months(uint8_t month)
{
  switch (month)
  {
    case 1:
      return 0;
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    case 12:
      return 334;
      break;
  }
  return 0;
}
    17e2:	08 95       	ret

000017e4 <get_seconds_since_pivot>:
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
    17e4:	2f 92       	push	r2
    17e6:	3f 92       	push	r3
    17e8:	4f 92       	push	r4
    17ea:	5f 92       	push	r5
    17ec:	6f 92       	push	r6
    17ee:	7f 92       	push	r7
    17f0:	8f 92       	push	r8
    17f2:	9f 92       	push	r9
    17f4:	af 92       	push	r10
    17f6:	bf 92       	push	r11
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	65 97       	sbiw	r28, 0x15	; 21
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	2c 01       	movw	r4, r24
    181a:	86 2f       	mov	r24, r22
    181c:	49 87       	std	Y+9, r20	; 0x09
    181e:	62 2e       	mov	r6, r18
    1820:	a0 2e       	mov	r10, r16
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1822:	69 df       	rcall	.-302    	; 0x16f6 <days_in_months>
    1824:	2a 87       	std	Y+10, r18	; 0x0a
    1826:	3b 87       	std	Y+11, r19	; 0x0b
    1828:	4c 87       	std	Y+12, r20	; 0x0c
    182a:	5d 87       	std	Y+13, r21	; 0x0d
    182c:	6e 87       	std	Y+14, r22	; 0x0e
    182e:	7f 87       	std	Y+15, r23	; 0x0f
    1830:	88 8b       	std	Y+16, r24	; 0x10
    1832:	99 8b       	std	Y+17, r25	; 0x11
    1834:	2e 2d       	mov	r18, r14
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	20 58       	subi	r18, 0x80	; 128
    1846:	3c 45       	sbci	r19, 0x5C	; 92
    1848:	44 49       	sbci	r20, 0x94	; 148
    184a:	5b 4c       	sbci	r21, 0xCB	; 203
    184c:	6e 40       	sbci	r22, 0x0E	; 14
    184e:	71 09       	sbc	r23, r1
    1850:	81 09       	sbc	r24, r1
    1852:	91 09       	sbc	r25, r1
    1854:	82 2e       	mov	r8, r18
    1856:	93 2e       	mov	r9, r19
    1858:	34 2e       	mov	r3, r20
    185a:	75 2e       	mov	r7, r21
    185c:	b6 2f       	mov	r27, r22
    185e:	a7 2f       	mov	r26, r23
    1860:	f8 2f       	mov	r31, r24
    1862:	e9 2f       	mov	r30, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
    1864:	20 2f       	mov	r18, r16
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	04 e0       	ldi	r16, 0x04	; 4
    1876:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    187a:	b1 2c       	mov	r11, r1
    187c:	c1 2c       	mov	r12, r1
    187e:	d1 2c       	mov	r13, r1
    1880:	e1 2c       	mov	r14, r1
    1882:	f1 2c       	mov	r15, r1
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    188c:	02 e0       	ldi	r16, 0x02	; 2
    188e:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1892:	a2 2e       	mov	r10, r18
    1894:	b3 2e       	mov	r11, r19
    1896:	c4 2e       	mov	r12, r20
    1898:	d5 2e       	mov	r13, r21
    189a:	e6 2e       	mov	r14, r22
    189c:	f7 2e       	mov	r15, r23
    189e:	08 2f       	mov	r16, r24
    18a0:	19 2f       	mov	r17, r25
    18a2:	28 2d       	mov	r18, r8
    18a4:	39 2d       	mov	r19, r9
    18a6:	43 2d       	mov	r20, r3
    18a8:	57 2d       	mov	r21, r7
    18aa:	6b 2f       	mov	r22, r27
    18ac:	7a 2f       	mov	r23, r26
    18ae:	8f 2f       	mov	r24, r31
    18b0:	9e 2f       	mov	r25, r30
    18b2:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
    18b6:	72 2e       	mov	r7, r18
    18b8:	83 2e       	mov	r8, r19
    18ba:	94 2e       	mov	r9, r20
    18bc:	25 2e       	mov	r2, r21
    18be:	36 2e       	mov	r3, r22
    18c0:	b7 2f       	mov	r27, r23
    18c2:	a8 2f       	mov	r26, r24
    18c4:	f9 2f       	mov	r31, r25
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
  now += ((uint64_t)hours) * 60 * 60;
    18c6:	26 2d       	mov	r18, r6
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	04 e0       	ldi	r16, 0x04	; 4
    18d8:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    18dc:	a6 2c       	mov	r10, r6
    18de:	b1 2c       	mov	r11, r1
    18e0:	c1 2c       	mov	r12, r1
    18e2:	d1 2c       	mov	r13, r1
    18e4:	e1 2c       	mov	r14, r1
    18e6:	f1 2c       	mov	r15, r1
    18e8:	00 e0       	ldi	r16, 0x00	; 0
    18ea:	10 e0       	ldi	r17, 0x00	; 0
    18ec:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    18f0:	a2 2e       	mov	r10, r18
    18f2:	b3 2e       	mov	r11, r19
    18f4:	c4 2e       	mov	r12, r20
    18f6:	d5 2e       	mov	r13, r21
    18f8:	e6 2e       	mov	r14, r22
    18fa:	f7 2e       	mov	r15, r23
    18fc:	e8 2f       	mov	r30, r24
    18fe:	19 2f       	mov	r17, r25
    1900:	04 e0       	ldi	r16, 0x04	; 4
    1902:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1906:	0e 2f       	mov	r16, r30
    1908:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    190c:	04 e0       	ldi	r16, 0x04	; 4
    190e:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1912:	a2 2e       	mov	r10, r18
    1914:	b3 2e       	mov	r11, r19
    1916:	c4 2e       	mov	r12, r20
    1918:	d5 2e       	mov	r13, r21
    191a:	e6 2e       	mov	r14, r22
    191c:	f7 2e       	mov	r15, r23
    191e:	08 2f       	mov	r16, r24
    1920:	19 2f       	mov	r17, r25
    1922:	27 2d       	mov	r18, r7
    1924:	38 2d       	mov	r19, r8
    1926:	49 2d       	mov	r20, r9
    1928:	52 2d       	mov	r21, r2
    192a:	63 2d       	mov	r22, r3
    192c:	7b 2f       	mov	r23, r27
    192e:	8a 2f       	mov	r24, r26
    1930:	9f 2f       	mov	r25, r31
    1932:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
    1936:	22 2e       	mov	r2, r18
    1938:	33 2e       	mov	r3, r19
    193a:	4a 8b       	std	Y+18, r20	; 0x12
    193c:	5b 8b       	std	Y+19, r21	; 0x13
    193e:	66 2e       	mov	r6, r22
    1940:	77 2e       	mov	r7, r23
    1942:	8c 8b       	std	Y+20, r24	; 0x14
    1944:	9d 8b       	std	Y+21, r25	; 0x15
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1946:	92 01       	movw	r18, r4
    1948:	49 82       	std	Y+1, r4	; 0x01
    194a:	3a 83       	std	Y+2, r19	; 0x02
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	03 e0       	ldi	r16, 0x03	; 3
    195a:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    195e:	82 2e       	mov	r8, r18
    1960:	93 2e       	mov	r9, r19
    1962:	44 2e       	mov	r4, r20
    1964:	55 2e       	mov	r5, r21
    1966:	b6 2f       	mov	r27, r22
    1968:	a7 2f       	mov	r26, r23
    196a:	f8 2f       	mov	r31, r24
    196c:	e9 2f       	mov	r30, r25
    196e:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1972:	a2 2e       	mov	r10, r18
    1974:	b3 2e       	mov	r11, r19
    1976:	c4 2e       	mov	r12, r20
    1978:	d5 2e       	mov	r13, r21
    197a:	e6 2e       	mov	r14, r22
    197c:	f7 2e       	mov	r15, r23
    197e:	08 2f       	mov	r16, r24
    1980:	19 2f       	mov	r17, r25
    1982:	28 2d       	mov	r18, r8
    1984:	39 2d       	mov	r19, r9
    1986:	44 2d       	mov	r20, r4
    1988:	55 2d       	mov	r21, r5
    198a:	6b 2f       	mov	r22, r27
    198c:	7a 2f       	mov	r23, r26
    198e:	8f 2f       	mov	r24, r31
    1990:	9e 2f       	mov	r25, r30
    1992:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
    1996:	a9 80       	ldd	r10, Y+1	; 0x01
    1998:	ba 80       	ldd	r11, Y+2	; 0x02
    199a:	c1 2c       	mov	r12, r1
    199c:	d1 2c       	mov	r13, r1
    199e:	e1 2c       	mov	r14, r1
    19a0:	f1 2c       	mov	r15, r1
    19a2:	00 e0       	ldi	r16, 0x00	; 0
    19a4:	10 e0       	ldi	r17, 0x00	; 0
    19a6:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
    19aa:	a2 2e       	mov	r10, r18
    19ac:	b3 2e       	mov	r11, r19
    19ae:	c4 2e       	mov	r12, r20
    19b0:	d5 2e       	mov	r13, r21
    19b2:	e6 2e       	mov	r14, r22
    19b4:	f7 2e       	mov	r15, r23
    19b6:	e8 2f       	mov	r30, r24
    19b8:	19 2f       	mov	r17, r25
    19ba:	04 e0       	ldi	r16, 0x04	; 4
    19bc:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    19c0:	0e 2f       	mov	r16, r30
    19c2:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    19c6:	a2 2e       	mov	r10, r18
    19c8:	b3 2e       	mov	r11, r19
    19ca:	c4 2e       	mov	r12, r20
    19cc:	d5 2e       	mov	r13, r21
    19ce:	e6 2e       	mov	r14, r22
    19d0:	f7 2e       	mov	r15, r23
    19d2:	e8 2f       	mov	r30, r24
    19d4:	19 2f       	mov	r17, r25
    19d6:	04 e0       	ldi	r16, 0x04	; 4
    19d8:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    19dc:	0e 2f       	mov	r16, r30
    19de:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    19e2:	a2 2e       	mov	r10, r18
    19e4:	b3 2e       	mov	r11, r19
    19e6:	c4 2e       	mov	r12, r20
    19e8:	d5 2e       	mov	r13, r21
    19ea:	e6 2e       	mov	r14, r22
    19ec:	f7 2e       	mov	r15, r23
    19ee:	e8 2f       	mov	r30, r24
    19f0:	19 2f       	mov	r17, r25
    19f2:	04 e0       	ldi	r16, 0x04	; 4
    19f4:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    19f8:	0e 2f       	mov	r16, r30
    19fa:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    19fe:	07 e0       	ldi	r16, 0x07	; 7
    1a00:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1a04:	a2 2e       	mov	r10, r18
    1a06:	b3 2e       	mov	r11, r19
    1a08:	c4 2e       	mov	r12, r20
    1a0a:	d5 2e       	mov	r13, r21
    1a0c:	e6 2e       	mov	r14, r22
    1a0e:	f7 2e       	mov	r15, r23
    1a10:	08 2f       	mov	r16, r24
    1a12:	19 2f       	mov	r17, r25
    1a14:	22 2d       	mov	r18, r2
    1a16:	33 2d       	mov	r19, r3
    1a18:	4a 89       	ldd	r20, Y+18	; 0x12
    1a1a:	5b 89       	ldd	r21, Y+19	; 0x13
    1a1c:	66 2d       	mov	r22, r6
    1a1e:	77 2d       	mov	r23, r7
    1a20:	8c 89       	ldd	r24, Y+20	; 0x14
    1a22:	9d 89       	ldd	r25, Y+21	; 0x15
    1a24:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
    1a28:	72 2e       	mov	r7, r18
    1a2a:	83 2e       	mov	r8, r19
    1a2c:	94 2e       	mov	r9, r20
    1a2e:	b5 2f       	mov	r27, r21
    1a30:	66 2e       	mov	r6, r22
    1a32:	57 2e       	mov	r5, r23
    1a34:	f8 2f       	mov	r31, r24
    1a36:	e9 2f       	mov	r30, r25
    1a38:	29 85       	ldd	r18, Y+9	; 0x09
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	af ef       	ldi	r26, 0xFF	; 255
    1a4a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <__adddi3_s8>
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a50:	bb 84       	ldd	r11, Y+11	; 0x0b
    1a52:	cc 84       	ldd	r12, Y+12	; 0x0c
    1a54:	dd 84       	ldd	r13, Y+13	; 0x0d
    1a56:	ee 84       	ldd	r14, Y+14	; 0x0e
    1a58:	ff 84       	ldd	r15, Y+15	; 0x0f
    1a5a:	08 89       	ldd	r16, Y+16	; 0x10
    1a5c:	19 89       	ldd	r17, Y+17	; 0x11
    1a5e:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
    1a62:	a2 2e       	mov	r10, r18
    1a64:	b3 2e       	mov	r11, r19
    1a66:	c4 2e       	mov	r12, r20
    1a68:	d5 2e       	mov	r13, r21
    1a6a:	e6 2e       	mov	r14, r22
    1a6c:	f7 2e       	mov	r15, r23
    1a6e:	a8 2f       	mov	r26, r24
    1a70:	19 2f       	mov	r17, r25
    1a72:	02 e0       	ldi	r16, 0x02	; 2
    1a74:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1a78:	0a 2f       	mov	r16, r26
    1a7a:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    1a7e:	a2 2e       	mov	r10, r18
    1a80:	b3 2e       	mov	r11, r19
    1a82:	c4 2e       	mov	r12, r20
    1a84:	d5 2e       	mov	r13, r21
    1a86:	e6 2e       	mov	r14, r22
    1a88:	f7 2e       	mov	r15, r23
    1a8a:	a8 2f       	mov	r26, r24
    1a8c:	19 2f       	mov	r17, r25
    1a8e:	04 e0       	ldi	r16, 0x04	; 4
    1a90:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1a94:	0a 2f       	mov	r16, r26
    1a96:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    1a9a:	a2 2e       	mov	r10, r18
    1a9c:	b3 2e       	mov	r11, r19
    1a9e:	c4 2e       	mov	r12, r20
    1aa0:	d5 2e       	mov	r13, r21
    1aa2:	e6 2e       	mov	r14, r22
    1aa4:	f7 2e       	mov	r15, r23
    1aa6:	a8 2f       	mov	r26, r24
    1aa8:	19 2f       	mov	r17, r25
    1aaa:	04 e0       	ldi	r16, 0x04	; 4
    1aac:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1ab0:	0a 2f       	mov	r16, r26
    1ab2:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    1ab6:	07 e0       	ldi	r16, 0x07	; 7
    1ab8:	0e 94 ed 35 	call	0x6bda	; 0x6bda <__ashldi3>
    1abc:	a2 2e       	mov	r10, r18
    1abe:	b3 2e       	mov	r11, r19
    1ac0:	c4 2e       	mov	r12, r20
    1ac2:	d5 2e       	mov	r13, r21
    1ac4:	e6 2e       	mov	r14, r22
    1ac6:	f7 2e       	mov	r15, r23
    1ac8:	08 2f       	mov	r16, r24
    1aca:	19 2f       	mov	r17, r25
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1acc:	27 2d       	mov	r18, r7
    1ace:	38 2d       	mov	r19, r8
    1ad0:	49 2d       	mov	r20, r9
    1ad2:	5b 2f       	mov	r21, r27
    1ad4:	66 2d       	mov	r22, r6
    1ad6:	75 2d       	mov	r23, r5
    1ad8:	8f 2f       	mov	r24, r31
    1ada:	9e 2f       	mov	r25, r30
    1adc:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__adddi3>
  return now;
}
    1ae0:	65 96       	adiw	r28, 0x15	; 21
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	7f 90       	pop	r7
    1b06:	6f 90       	pop	r6
    1b08:	5f 90       	pop	r5
    1b0a:	4f 90       	pop	r4
    1b0c:	3f 90       	pop	r3
    1b0e:	2f 90       	pop	r2
    1b10:	08 95       	ret

00001b12 <get_seconds_since_equinox>:

void get_seconds_since_equinox(void)
{
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2016, 3, 20, 04, 30, 0);
    1b26:	e1 2c       	mov	r14, r1
    1b28:	0e e1       	ldi	r16, 0x1E	; 30
    1b2a:	24 e0       	ldi	r18, 0x04	; 4
    1b2c:	44 e1       	ldi	r20, 0x14	; 20
    1b2e:	63 e0       	ldi	r22, 0x03	; 3
    1b30:	80 ee       	ldi	r24, 0xE0	; 224
    1b32:	97 e0       	ldi	r25, 0x07	; 7
    1b34:	57 de       	rcall	.-850    	; 0x17e4 <get_seconds_since_pivot>
    1b36:	a2 2e       	mov	r10, r18
    1b38:	b3 2e       	mov	r11, r19
    1b3a:	c4 2e       	mov	r12, r20
    1b3c:	d5 2e       	mov	r13, r21
    1b3e:	d6 2f       	mov	r29, r22
    1b40:	f7 2e       	mov	r15, r23
    1b42:	c8 2f       	mov	r28, r24
    1b44:	19 2f       	mov	r17, r25
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1b46:	e3 eb       	ldi	r30, 0xB3	; 179
    1b48:	f4 e0       	ldi	r31, 0x04	; 4
    1b4a:	81 a5       	ldd	r24, Z+41	; 0x29
    1b4c:	92 a5       	ldd	r25, Z+42	; 0x2a
    1b4e:	e6 a0       	ldd	r14, Z+38	; 0x26
    1b50:	05 a1       	ldd	r16, Z+37	; 0x25
    1b52:	24 a1       	ldd	r18, Z+36	; 0x24
    1b54:	47 a1       	ldd	r20, Z+39	; 0x27
    1b56:	60 a5       	ldd	r22, Z+40	; 0x28
    1b58:	45 de       	rcall	.-886    	; 0x17e4 <get_seconds_since_pivot>
    1b5a:	20 93 90 04 	sts	0x0490, r18
    1b5e:	30 93 91 04 	sts	0x0491, r19
    1b62:	40 93 92 04 	sts	0x0492, r20
    1b66:	50 93 93 04 	sts	0x0493, r21
    1b6a:	60 93 94 04 	sts	0x0494, r22
    1b6e:	70 93 95 04 	sts	0x0495, r23
    1b72:	80 93 96 04 	sts	0x0496, r24
    1b76:	90 93 97 04 	sts	0x0497, r25
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    1b7a:	ed 2e       	mov	r14, r29
    1b7c:	0c 2f       	mov	r16, r28
    1b7e:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__subdi3>
    1b82:	20 93 98 04 	sts	0x0498, r18
    1b86:	30 93 99 04 	sts	0x0499, r19
    1b8a:	40 93 9a 04 	sts	0x049A, r20
    1b8e:	50 93 9b 04 	sts	0x049B, r21
    1b92:	60 93 9c 04 	sts	0x049C, r22
    1b96:	70 93 9d 04 	sts	0x049D, r23
    1b9a:	80 93 9e 04 	sts	0x049E, r24
    1b9e:	90 93 9f 04 	sts	0x049F, r25
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	08 95       	ret

00001bb8 <ecef2eci>:

void ecef2eci(vector v_ecef, vector v_eci)
{
    1bb8:	4f 92       	push	r4
    1bba:	5f 92       	push	r5
    1bbc:	6f 92       	push	r6
    1bbe:	7f 92       	push	r7
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	a4 97       	sbiw	r28, 0x24	; 36
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	7c 01       	movw	r14, r24
    1bea:	6b 01       	movw	r12, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1bec:	20 91 98 04 	lds	r18, 0x0498
    1bf0:	30 91 99 04 	lds	r19, 0x0499
    1bf4:	40 91 9a 04 	lds	r20, 0x049A
    1bf8:	50 91 9b 04 	lds	r21, 0x049B
    1bfc:	60 91 9c 04 	lds	r22, 0x049C
    1c00:	70 91 9d 04 	lds	r23, 0x049D
    1c04:	80 91 9e 04 	lds	r24, 0x049E
    1c08:	90 91 9f 04 	lds	r25, 0x049F
    1c0c:	0e 94 8c 32 	call	0x6518	; 0x6518 <__floatundisf>
    1c10:	27 eb       	ldi	r18, 0xB7	; 183
    1c12:	39 e5       	ldi	r19, 0x59	; 89
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1c1c:	2e eb       	ldi	r18, 0xBE	; 190
    1c1e:	37 ef       	ldi	r19, 0xF7	; 247
    1c20:	48 e9       	ldi	r20, 0x98	; 152
    1c22:	58 e3       	ldi	r21, 0x38	; 56
    1c24:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1c28:	2b 01       	movw	r4, r22
    1c2a:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1c2c:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    1c30:	4b 01       	movw	r8, r22
    1c32:	5c 01       	movw	r10, r24
    1c34:	69 83       	std	Y+1, r22	; 0x01
    1c36:	7a 83       	std	Y+2, r23	; 0x02
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	c3 01       	movw	r24, r6
    1c3e:	b2 01       	movw	r22, r4
    1c40:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    1c44:	6d 83       	std	Y+5, r22	; 0x05
    1c46:	7e 83       	std	Y+6, r23	; 0x06
    1c48:	8f 83       	std	Y+7, r24	; 0x07
    1c4a:	98 87       	std	Y+8, r25	; 0x08
    1c4c:	19 86       	std	Y+9, r1	; 0x09
    1c4e:	1a 86       	std	Y+10, r1	; 0x0a
    1c50:	1b 86       	std	Y+11, r1	; 0x0b
    1c52:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1c54:	8b 01       	movw	r16, r22
    1c56:	9c 01       	movw	r18, r24
    1c58:	30 58       	subi	r19, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
  double phi = W_EARTH_ROT * sidereal_time;// floatch
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1c5a:	0d 87       	std	Y+13, r16	; 0x0d
    1c5c:	1e 87       	std	Y+14, r17	; 0x0e
    1c5e:	2f 87       	std	Y+15, r18	; 0x0f
    1c60:	38 8b       	std	Y+16, r19	; 0x10
    1c62:	89 8a       	std	Y+17, r8	; 0x11
    1c64:	9a 8a       	std	Y+18, r9	; 0x12
    1c66:	ab 8a       	std	Y+19, r10	; 0x13
    1c68:	bc 8a       	std	Y+20, r11	; 0x14
    1c6a:	1d 8a       	std	Y+21, r1	; 0x15
    1c6c:	1e 8a       	std	Y+22, r1	; 0x16
    1c6e:	1f 8a       	std	Y+23, r1	; 0x17
    1c70:	18 8e       	std	Y+24, r1	; 0x18
    1c72:	19 8e       	std	Y+25, r1	; 0x19
    1c74:	1a 8e       	std	Y+26, r1	; 0x1a
    1c76:	1b 8e       	std	Y+27, r1	; 0x1b
    1c78:	1c 8e       	std	Y+28, r1	; 0x1c
    1c7a:	1d 8e       	std	Y+29, r1	; 0x1d
    1c7c:	1e 8e       	std	Y+30, r1	; 0x1e
    1c7e:	1f 8e       	std	Y+31, r1	; 0x1f
    1c80:	18 a2       	std	Y+32, r1	; 0x20
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	89 a3       	std	Y+33, r24	; 0x21
    1c8c:	9a a3       	std	Y+34, r25	; 0x22
    1c8e:	ab a3       	std	Y+35, r26	; 0x23
    1c90:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1c92:	a6 01       	movw	r20, r12
    1c94:	be 01       	movw	r22, r28
    1c96:	6f 5f       	subi	r22, 0xFF	; 255
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1ca0:	a4 96       	adiw	r28, 0x24	; 36
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	bf 90       	pop	r11
    1cbe:	af 90       	pop	r10
    1cc0:	9f 90       	pop	r9
    1cc2:	8f 90       	pop	r8
    1cc4:	7f 90       	pop	r7
    1cc6:	6f 90       	pop	r6
    1cc8:	5f 90       	pop	r5
    1cca:	4f 90       	pop	r4
    1ccc:	08 95       	ret

00001cce <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1cce:	4f 92       	push	r4
    1cd0:	5f 92       	push	r5
    1cd2:	6f 92       	push	r6
    1cd4:	7f 92       	push	r7
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	a4 97       	sbiw	r28, 0x24	; 36
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	8c 01       	movw	r16, r24
    1cfc:	5b 01       	movw	r10, r22
  double sidereal_time = STPERUT * seconds_since_equinox; // floatch
    1cfe:	20 91 98 04 	lds	r18, 0x0498
    1d02:	30 91 99 04 	lds	r19, 0x0499
    1d06:	40 91 9a 04 	lds	r20, 0x049A
    1d0a:	50 91 9b 04 	lds	r21, 0x049B
    1d0e:	60 91 9c 04 	lds	r22, 0x049C
    1d12:	70 91 9d 04 	lds	r23, 0x049D
    1d16:	80 91 9e 04 	lds	r24, 0x049E
    1d1a:	90 91 9f 04 	lds	r25, 0x049F
    1d1e:	0e 94 8c 32 	call	0x6518	; 0x6518 <__floatundisf>
    1d22:	27 eb       	ldi	r18, 0xB7	; 183
    1d24:	39 e5       	ldi	r19, 0x59	; 89
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
  double phi = W_EARTH_ROT * sidereal_time;// floatch
    1d2e:	2e eb       	ldi	r18, 0xBE	; 190
    1d30:	37 ef       	ldi	r19, 0xF7	; 247
    1d32:	48 e9       	ldi	r20, 0x98	; 152
    1d34:	58 e3       	ldi	r21, 0x38	; 56
    1d36:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1d3a:	2b 01       	movw	r4, r22
    1d3c:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1d3e:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    1d42:	6b 01       	movw	r12, r22
    1d44:	7c 01       	movw	r14, r24
    1d46:	69 83       	std	Y+1, r22	; 0x01
    1d48:	7a 83       	std	Y+2, r23	; 0x02
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	c3 01       	movw	r24, r6
    1d50:	b2 01       	movw	r22, r4
    1d52:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    1d56:	2b 01       	movw	r4, r22
    1d58:	3c 01       	movw	r6, r24
    1d5a:	77 fa       	bst	r7, 7
    1d5c:	70 94       	com	r7
    1d5e:	77 f8       	bld	r7, 7
    1d60:	70 94       	com	r7
    1d62:	4d 82       	std	Y+5, r4	; 0x05
    1d64:	5e 82       	std	Y+6, r5	; 0x06
    1d66:	6f 82       	std	Y+7, r6	; 0x07
    1d68:	78 86       	std	Y+8, r7	; 0x08
    1d6a:	19 86       	std	Y+9, r1	; 0x09
    1d6c:	1a 86       	std	Y+10, r1	; 0x0a
    1d6e:	1b 86       	std	Y+11, r1	; 0x0b
    1d70:	1c 86       	std	Y+12, r1	; 0x0c
    1d72:	6d 87       	std	Y+13, r22	; 0x0d
    1d74:	7e 87       	std	Y+14, r23	; 0x0e
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
    1d78:	98 8b       	std	Y+16, r25	; 0x10
    1d7a:	c9 8a       	std	Y+17, r12	; 0x11
    1d7c:	da 8a       	std	Y+18, r13	; 0x12
    1d7e:	eb 8a       	std	Y+19, r14	; 0x13
    1d80:	fc 8a       	std	Y+20, r15	; 0x14
    1d82:	1d 8a       	std	Y+21, r1	; 0x15
    1d84:	1e 8a       	std	Y+22, r1	; 0x16
    1d86:	1f 8a       	std	Y+23, r1	; 0x17
    1d88:	18 8e       	std	Y+24, r1	; 0x18
    1d8a:	19 8e       	std	Y+25, r1	; 0x19
    1d8c:	1a 8e       	std	Y+26, r1	; 0x1a
    1d8e:	1b 8e       	std	Y+27, r1	; 0x1b
    1d90:	1c 8e       	std	Y+28, r1	; 0x1c
    1d92:	1d 8e       	std	Y+29, r1	; 0x1d
    1d94:	1e 8e       	std	Y+30, r1	; 0x1e
    1d96:	1f 8e       	std	Y+31, r1	; 0x1f
    1d98:	18 a2       	std	Y+32, r1	; 0x20
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a0 e8       	ldi	r26, 0x80	; 128
    1da0:	bf e3       	ldi	r27, 0x3F	; 63
    1da2:	89 a3       	std	Y+33, r24	; 0x21
    1da4:	9a a3       	std	Y+34, r25	; 0x22
    1da6:	ab a3       	std	Y+35, r26	; 0x23
    1da8:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1daa:	a5 01       	movw	r20, r10
    1dac:	be 01       	movw	r22, r28
    1dae:	6f 5f       	subi	r22, 0xFF	; 255
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	c8 01       	movw	r24, r16
    1db4:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vector_into_matrix>
}
    1db8:	a4 96       	adiw	r28, 0x24	; 36
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
    1dd4:	bf 90       	pop	r11
    1dd6:	af 90       	pop	r10
    1dd8:	7f 90       	pop	r7
    1dda:	6f 90       	pop	r6
    1ddc:	5f 90       	pop	r5
    1dde:	4f 90       	pop	r4
    1de0:	08 95       	ret

00001de2 <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	c8 54       	subi	r28, 0x48	; 72
    1df8:	d1 09       	sbc	r29, r1
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	8c 01       	movw	r16, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	6a 01       	movw	r12, r20
    1e0a:	79 01       	movw	r14, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1e0c:	ae 01       	movw	r20, r28
    1e0e:	43 5f       	subi	r20, 0xF3	; 243
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	b8 01       	movw	r22, r16
    1e14:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <vector_cross_product>
  convert_unit_vector(v_o_y);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	0d 96       	adiw	r24, 0x0d	; 13
    1e1c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	a2 81       	ldd	r26, Z+2	; 0x02
    1e28:	b3 81       	ldd	r27, Z+3	; 0x03
    1e2a:	b0 58       	subi	r27, 0x80	; 128
    1e2c:	89 8f       	std	Y+25, r24	; 0x19
    1e2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e30:	ab 8f       	std	Y+27, r26	; 0x1b
    1e32:	bc 8f       	std	Y+28, r27	; 0x1c
    1e34:	84 81       	ldd	r24, Z+4	; 0x04
    1e36:	95 81       	ldd	r25, Z+5	; 0x05
    1e38:	a6 81       	ldd	r26, Z+6	; 0x06
    1e3a:	b7 81       	ldd	r27, Z+7	; 0x07
    1e3c:	b0 58       	subi	r27, 0x80	; 128
    1e3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e40:	9e 8f       	std	Y+30, r25	; 0x1e
    1e42:	af 8f       	std	Y+31, r26	; 0x1f
    1e44:	b8 a3       	std	Y+32, r27	; 0x20
    1e46:	00 85       	ldd	r16, Z+8	; 0x08
    1e48:	11 85       	ldd	r17, Z+9	; 0x09
    1e4a:	22 85       	ldd	r18, Z+10	; 0x0a
    1e4c:	33 85       	ldd	r19, Z+11	; 0x0b
    1e4e:	30 58       	subi	r19, 0x80	; 128
    1e50:	09 a3       	std	Y+33, r16	; 0x21
    1e52:	1a a3       	std	Y+34, r17	; 0x22
    1e54:	2b a3       	std	Y+35, r18	; 0x23
    1e56:	3c a3       	std	Y+36, r19	; 0x24
  convert_unit_vector(v_o_z);
    1e58:	ce 01       	movw	r24, r28
    1e5a:	49 96       	adiw	r24, 0x19	; 25
    1e5c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1e60:	ae 01       	movw	r20, r28
    1e62:	4f 5f       	subi	r20, 0xFF	; 255
    1e64:	5f 4f       	sbci	r21, 0xFF	; 255
    1e66:	be 01       	movw	r22, r28
    1e68:	67 5e       	subi	r22, 0xE7	; 231
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	0d 96       	adiw	r24, 0x0d	; 13
    1e70:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <vector_cross_product>
  convert_unit_vector(v_o_x);
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	ab 81       	ldd	r26, Y+3	; 0x03
    1e82:	bc 81       	ldd	r27, Y+4	; 0x04
    1e84:	8d a3       	std	Y+37, r24	; 0x25
    1e86:	9e a3       	std	Y+38, r25	; 0x26
    1e88:	af a3       	std	Y+39, r26	; 0x27
    1e8a:	b8 a7       	std	Y+40, r27	; 0x28
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	af 85       	ldd	r26, Y+15	; 0x0f
    1e92:	b8 89       	ldd	r27, Y+16	; 0x10
    1e94:	89 a7       	std	Y+41, r24	; 0x29
    1e96:	9a a7       	std	Y+42, r25	; 0x2a
    1e98:	ab a7       	std	Y+43, r26	; 0x2b
    1e9a:	bc a7       	std	Y+44, r27	; 0x2c
    1e9c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ea0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1ea2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1ea4:	8d a7       	std	Y+45, r24	; 0x2d
    1ea6:	9e a7       	std	Y+46, r25	; 0x2e
    1ea8:	af a7       	std	Y+47, r26	; 0x2f
    1eaa:	b8 ab       	std	Y+48, r27	; 0x30
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	af 81       	ldd	r26, Y+7	; 0x07
    1eb2:	b8 85       	ldd	r27, Y+8	; 0x08
    1eb4:	89 ab       	std	Y+49, r24	; 0x31
    1eb6:	9a ab       	std	Y+50, r25	; 0x32
    1eb8:	ab ab       	std	Y+51, r26	; 0x33
    1eba:	bc ab       	std	Y+52, r27	; 0x34
    1ebc:	89 89       	ldd	r24, Y+17	; 0x11
    1ebe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec0:	ab 89       	ldd	r26, Y+19	; 0x13
    1ec2:	bc 89       	ldd	r27, Y+20	; 0x14
    1ec4:	8d ab       	std	Y+53, r24	; 0x35
    1ec6:	9e ab       	std	Y+54, r25	; 0x36
    1ec8:	af ab       	std	Y+55, r26	; 0x37
    1eca:	b8 af       	std	Y+56, r27	; 0x38
    1ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ece:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed0:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ed2:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ed4:	89 af       	std	Y+57, r24	; 0x39
    1ed6:	9a af       	std	Y+58, r25	; 0x3a
    1ed8:	ab af       	std	Y+59, r26	; 0x3b
    1eda:	bc af       	std	Y+60, r27	; 0x3c
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ee2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ee4:	21 96       	adiw	r28, 0x01	; 1
    1ee6:	8c af       	std	Y+60, r24	; 0x3c
    1ee8:	9d af       	std	Y+61, r25	; 0x3d
    1eea:	ae af       	std	Y+62, r26	; 0x3e
    1eec:	bf af       	std	Y+63, r27	; 0x3f
    1eee:	21 97       	sbiw	r28, 0x01	; 1
    1ef0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef4:	af 89       	ldd	r26, Y+23	; 0x17
    1ef6:	b8 8d       	ldd	r27, Y+24	; 0x18
    1ef8:	25 96       	adiw	r28, 0x05	; 5
    1efa:	8c af       	std	Y+60, r24	; 0x3c
    1efc:	9d af       	std	Y+61, r25	; 0x3d
    1efe:	ae af       	std	Y+62, r26	; 0x3e
    1f00:	bf af       	std	Y+63, r27	; 0x3f
    1f02:	25 97       	sbiw	r28, 0x05	; 5
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	ab a1       	ldd	r26, Y+35	; 0x23
    1f0a:	bc a1       	ldd	r27, Y+36	; 0x24
    1f0c:	29 96       	adiw	r28, 0x09	; 9
    1f0e:	8c af       	std	Y+60, r24	; 0x3c
    1f10:	9d af       	std	Y+61, r25	; 0x3d
    1f12:	ae af       	std	Y+62, r26	; 0x3e
    1f14:	bf af       	std	Y+63, r27	; 0x3f
    1f16:	29 97       	sbiw	r28, 0x09	; 9
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    1f18:	a7 01       	movw	r20, r14
    1f1a:	be 01       	movw	r22, r28
    1f1c:	6b 5d       	subi	r22, 0xDB	; 219
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	c6 01       	movw	r24, r12
    1f22:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vector_into_matrix>
}
    1f26:	c8 5b       	subi	r28, 0xB8	; 184
    1f28:	df 4f       	sbci	r29, 0xFF	; 255
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	08 95       	ret

00001f46 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    1f46:	2f 92       	push	r2
    1f48:	3f 92       	push	r3
    1f4a:	4f 92       	push	r4
    1f4c:	5f 92       	push	r5
    1f4e:	6f 92       	push	r6
    1f50:	7f 92       	push	r7
    1f52:	8f 92       	push	r8
    1f54:	9f 92       	push	r9
    1f56:	af 92       	push	r10
    1f58:	bf 92       	push	r11
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	1b 01       	movw	r2, r22
  double x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];// floatch
    1f7e:	80 80       	ld	r8, Z
    1f80:	91 80       	ldd	r9, Z+1	; 0x01
    1f82:	a2 80       	ldd	r10, Z+2	; 0x02
    1f84:	b3 80       	ldd	r11, Z+3	; 0x03
    1f86:	c4 80       	ldd	r12, Z+4	; 0x04
    1f88:	d5 80       	ldd	r13, Z+5	; 0x05
    1f8a:	e6 80       	ldd	r14, Z+6	; 0x06
    1f8c:	f7 80       	ldd	r15, Z+7	; 0x07
    1f8e:	40 84       	ldd	r4, Z+8	; 0x08
    1f90:	51 84       	ldd	r5, Z+9	; 0x09
    1f92:	62 84       	ldd	r6, Z+10	; 0x0a
    1f94:	73 84       	ldd	r7, Z+11	; 0x0b
  double lambda, phi, h, rho, beta, n, sinphi;// floatch
  uint8_t i;
  
  lambda = atan2(y, x);
    1f96:	a5 01       	movw	r20, r10
    1f98:	94 01       	movw	r18, r8
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	b6 01       	movw	r22, r12
    1f9e:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atan2>
    1fa2:	69 87       	std	Y+9, r22	; 0x09
    1fa4:	7a 87       	std	Y+10, r23	; 0x0a
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
  rho = sqrt(x * x + y * y);
    1faa:	a5 01       	movw	r20, r10
    1fac:	94 01       	movw	r18, r8
    1fae:	c5 01       	movw	r24, r10
    1fb0:	b4 01       	movw	r22, r8
    1fb2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1fb6:	69 83       	std	Y+1, r22	; 0x01
    1fb8:	7a 83       	std	Y+2, r23	; 0x02
    1fba:	8b 83       	std	Y+3, r24	; 0x03
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	a5 01       	movw	r20, r10
    1fc0:	94 01       	movw	r18, r8
    1fc2:	c5 01       	movw	r24, r10
    1fc4:	b4 01       	movw	r22, r8
    1fc6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1fca:	4b 01       	movw	r8, r22
    1fcc:	5c 01       	movw	r10, r24
    1fce:	a7 01       	movw	r20, r14
    1fd0:	96 01       	movw	r18, r12
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	c5 01       	movw	r24, r10
    1fe0:	b4 01       	movw	r22, r8
    1fe2:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    1fe6:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    1fea:	69 83       	std	Y+1, r22	; 0x01
    1fec:	7a 83       	std	Y+2, r23	; 0x02
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
  
  beta = atan2(z, (1 - F) * rho);
    1ff2:	25 e4       	ldi	r18, 0x45	; 69
    1ff4:	34 e2       	ldi	r19, 0x24	; 36
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    1ffe:	9b 01       	movw	r18, r22
    2000:	ac 01       	movw	r20, r24
    2002:	c3 01       	movw	r24, r6
    2004:	b2 01       	movw	r22, r4
    2006:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atan2>
    200a:	4b 01       	movw	r8, r22
    200c:	5c 01       	movw	r10, r24
    200e:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    2010:	c5 01       	movw	r24, r10
    2012:	b4 01       	movw	r22, r8
    2014:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e4       	ldi	r20, 0x40	; 64
    201e:	50 e4       	ldi	r21, 0x40	; 64
    2020:	0e 94 37 34 	call	0x686e	; 0x686e <pow>
    2024:	6b 01       	movw	r12, r22
    2026:	7c 01       	movw	r14, r24
    2028:	c5 01       	movw	r24, r10
    202a:	b4 01       	movw	r22, r8
    202c:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e4       	ldi	r20, 0x40	; 64
    2036:	50 e4       	ldi	r21, 0x40	; 64
    2038:	0e 94 37 34 	call	0x686e	; 0x686e <pow>
    203c:	4b 01       	movw	r8, r22
    203e:	5c 01       	movw	r10, r24
    2040:	2e ea       	ldi	r18, 0xAE	; 174
    2042:	39 ec       	ldi	r19, 0xC9	; 201
    2044:	46 e2       	ldi	r20, 0x26	; 38
    2046:	57 e4       	ldi	r21, 0x47	; 71
    2048:	c7 01       	movw	r24, r14
    204a:	b6 01       	movw	r22, r12
    204c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	69 81       	ldd	r22, Y+1	; 0x01
    2056:	7a 81       	ldd	r23, Y+2	; 0x02
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    2060:	6b 01       	movw	r12, r22
    2062:	7c 01       	movw	r14, r24
    2064:	22 e5       	ldi	r18, 0x52	; 82
    2066:	39 e5       	ldi	r19, 0x59	; 89
    2068:	47 e2       	ldi	r20, 0x27	; 39
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	c5 01       	movw	r24, r10
    206e:	b4 01       	movw	r22, r8
    2070:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2074:	a3 01       	movw	r20, r6
    2076:	92 01       	movw	r18, r4
    2078:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    207c:	a7 01       	movw	r20, r14
    207e:	96 01       	movw	r18, r12
    2080:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atan2>
    2084:	6b 01       	movw	r12, r22
    2086:	7c 01       	movw	r14, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    2088:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    208c:	4b 01       	movw	r8, r22
    208e:	5c 01       	movw	r10, r24
    2090:	c7 01       	movw	r24, r14
    2092:	b6 01       	movw	r22, r12
    2094:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    2098:	25 e4       	ldi	r18, 0x45	; 69
    209a:	34 e2       	ldi	r19, 0x24	; 36
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    20a4:	a5 01       	movw	r20, r10
    20a6:	94 01       	movw	r18, r8
    20a8:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atan2>
    20ac:	4b 01       	movw	r8, r22
    20ae:	5c 01       	movw	r10, r24
    20b0:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <ecef2lla+0x170>
    20b4:	ad cf       	rjmp	.-166    	; 0x2010 <ecef2lla+0xca>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
    20b6:	c7 01       	movw	r24, r14
    20b8:	b6 01       	movw	r22, r12
    20ba:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    20be:	4b 01       	movw	r8, r22
    20c0:	5c 01       	movw	r10, r24
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    20c2:	2a e8       	ldi	r18, 0x8A	; 138
    20c4:	3c e5       	ldi	r19, 0x5C	; 92
    20c6:	4b ed       	ldi	r20, 0xDB	; 219
    20c8:	5b e3       	ldi	r21, 0x3B	; 59
    20ca:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    20ce:	6d 83       	std	Y+5, r22	; 0x05
    20d0:	7e 83       	std	Y+6, r23	; 0x06
    20d2:	8f 83       	std	Y+7, r24	; 0x07
    20d4:	98 87       	std	Y+8, r25	; 0x08
    20d6:	a5 01       	movw	r20, r10
    20d8:	94 01       	movw	r18, r8
    20da:	6d 81       	ldd	r22, Y+5	; 0x05
    20dc:	7e 81       	ldd	r23, Y+6	; 0x06
    20de:	8f 81       	ldd	r24, Y+7	; 0x07
    20e0:	98 85       	ldd	r25, Y+8	; 0x08
    20e2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    20e6:	9b 01       	movw	r18, r22
    20e8:	ac 01       	movw	r20, r24
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	80 e8       	ldi	r24, 0x80	; 128
    20f0:	9f e3       	ldi	r25, 0x3F	; 63
    20f2:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    20f6:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    20fa:	9b 01       	movw	r18, r22
    20fc:	ac 01       	movw	r20, r24
    20fe:	62 e3       	ldi	r22, 0x32	; 50
    2100:	75 ea       	ldi	r23, 0xA5	; 165
    2102:	82 ec       	ldi	r24, 0xC2	; 194
    2104:	9a e4       	ldi	r25, 0x4A	; 74
    2106:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    210a:	6d 83       	std	Y+5, r22	; 0x05
    210c:	7e 83       	std	Y+6, r23	; 0x06
    210e:	8f 83       	std	Y+7, r24	; 0x07
    2110:	98 87       	std	Y+8, r25	; 0x08
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2112:	c7 01       	movw	r24, r14
    2114:	b6 01       	movw	r22, r12
    2116:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
  
  v_lla[0] = phi;
    211a:	f1 01       	movw	r30, r2
    211c:	c0 82       	st	Z, r12
    211e:	d1 82       	std	Z+1, r13	; 0x01
    2120:	e2 82       	std	Z+2, r14	; 0x02
    2122:	f3 82       	std	Z+3, r15	; 0x03
  v_lla[1] = lambda;
    2124:	29 85       	ldd	r18, Y+9	; 0x09
    2126:	3a 85       	ldd	r19, Y+10	; 0x0a
    2128:	4b 85       	ldd	r20, Y+11	; 0x0b
    212a:	5c 85       	ldd	r21, Y+12	; 0x0c
    212c:	24 83       	std	Z+4, r18	; 0x04
    212e:	35 83       	std	Z+5, r19	; 0x05
    2130:	46 83       	std	Z+6, r20	; 0x06
    2132:	57 83       	std	Z+7, r21	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    2134:	29 81       	ldd	r18, Y+1	; 0x01
    2136:	3a 81       	ldd	r19, Y+2	; 0x02
    2138:	4b 81       	ldd	r20, Y+3	; 0x03
    213a:	5c 81       	ldd	r21, Y+4	; 0x04
    213c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2140:	69 83       	std	Y+1, r22	; 0x01
    2142:	7a 83       	std	Y+2, r23	; 0x02
    2144:	8b 83       	std	Y+3, r24	; 0x03
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	2a e8       	ldi	r18, 0x8A	; 138
    214a:	3c e5       	ldi	r19, 0x5C	; 92
    214c:	4b ed       	ldi	r20, 0xDB	; 219
    214e:	5b e3       	ldi	r21, 0x3B	; 59
    2150:	6d 81       	ldd	r22, Y+5	; 0x05
    2152:	7e 81       	ldd	r23, Y+6	; 0x06
    2154:	8f 81       	ldd	r24, Y+7	; 0x07
    2156:	98 85       	ldd	r25, Y+8	; 0x08
    2158:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    215c:	a5 01       	movw	r20, r10
    215e:	94 01       	movw	r18, r8
    2160:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2164:	a3 01       	movw	r20, r6
    2166:	92 01       	movw	r18, r4
    2168:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    216c:	a5 01       	movw	r20, r10
    216e:	94 01       	movw	r18, r8
    2170:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
    2178:	69 81       	ldd	r22, Y+1	; 0x01
    217a:	7a 81       	ldd	r23, Y+2	; 0x02
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2184:	2d 81       	ldd	r18, Y+5	; 0x05
    2186:	3e 81       	ldd	r19, Y+6	; 0x06
    2188:	4f 81       	ldd	r20, Y+7	; 0x07
    218a:	58 85       	ldd	r21, Y+8	; 0x08
    218c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    2190:	f1 01       	movw	r30, r2
    2192:	60 87       	std	Z+8, r22	; 0x08
    2194:	71 87       	std	Z+9, r23	; 0x09
    2196:	82 87       	std	Z+10, r24	; 0x0a
    2198:	93 87       	std	Z+11, r25	; 0x0b
  Current_state.gps.lat=v_lla[0]*180/3.141592;
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	44 e3       	ldi	r20, 0x34	; 52
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	c7 01       	movw	r24, r14
    21a4:	b6 01       	movw	r22, r12
    21a6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    21aa:	28 ed       	ldi	r18, 0xD8	; 216
    21ac:	3f e0       	ldi	r19, 0x0F	; 15
    21ae:	49 e4       	ldi	r20, 0x49	; 73
    21b0:	50 e4       	ldi	r21, 0x40	; 64
    21b2:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    21b6:	0e 94 1e 32 	call	0x643c	; 0x643c <__fixsfsi>
    21ba:	03 eb       	ldi	r16, 0xB3	; 179
    21bc:	14 e0       	ldi	r17, 0x04	; 4
    21be:	f8 01       	movw	r30, r16
    21c0:	60 8f       	std	Z+24, r22	; 0x18
    21c2:	71 8f       	std	Z+25, r23	; 0x19
    21c4:	82 8f       	std	Z+26, r24	; 0x1a
    21c6:	93 8f       	std	Z+27, r25	; 0x1b
  Current_state.gps.lon=v_lla[1]*180/3.141592;
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	44 e3       	ldi	r20, 0x34	; 52
    21ce:	53 e4       	ldi	r21, 0x43	; 67
    21d0:	f1 01       	movw	r30, r2
    21d2:	64 81       	ldd	r22, Z+4	; 0x04
    21d4:	75 81       	ldd	r23, Z+5	; 0x05
    21d6:	86 81       	ldd	r24, Z+6	; 0x06
    21d8:	97 81       	ldd	r25, Z+7	; 0x07
    21da:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    21de:	28 ed       	ldi	r18, 0xD8	; 216
    21e0:	3f e0       	ldi	r19, 0x0F	; 15
    21e2:	49 e4       	ldi	r20, 0x49	; 73
    21e4:	50 e4       	ldi	r21, 0x40	; 64
    21e6:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    21ea:	0e 94 1e 32 	call	0x643c	; 0x643c <__fixsfsi>
    21ee:	f8 01       	movw	r30, r16
    21f0:	64 8f       	std	Z+28, r22	; 0x1c
    21f2:	75 8f       	std	Z+29, r23	; 0x1d
    21f4:	86 8f       	std	Z+30, r24	; 0x1e
    21f6:	97 8f       	std	Z+31, r25	; 0x1f
  Current_state.gps.alt=v_lla[2];  
    21f8:	f1 01       	movw	r30, r2
    21fa:	60 85       	ldd	r22, Z+8	; 0x08
    21fc:	71 85       	ldd	r23, Z+9	; 0x09
    21fe:	82 85       	ldd	r24, Z+10	; 0x0a
    2200:	93 85       	ldd	r25, Z+11	; 0x0b
    2202:	0e 94 1e 32 	call	0x643c	; 0x643c <__fixsfsi>
    2206:	f8 01       	movw	r30, r16
    2208:	60 a3       	std	Z+32, r22	; 0x20
    220a:	71 a3       	std	Z+33, r23	; 0x21
    220c:	82 a3       	std	Z+34, r24	; 0x22
    220e:	93 a3       	std	Z+35, r25	; 0x23
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    2210:	2c 96       	adiw	r28, 0x0c	; 12
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	df 90       	pop	r13
    222a:	cf 90       	pop	r12
    222c:	bf 90       	pop	r11
    222e:	af 90       	pop	r10
    2230:	9f 90       	pop	r9
    2232:	8f 90       	pop	r8
    2234:	7f 90       	pop	r7
    2236:	6f 90       	pop	r6
    2238:	5f 90       	pop	r5
    223a:	4f 90       	pop	r4
    223c:	3f 90       	pop	r3
    223e:	2f 90       	pop	r2
    2240:	08 95       	ret

00002242 <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    2242:	2f 92       	push	r2
    2244:	3f 92       	push	r3
    2246:	4f 92       	push	r4
    2248:	5f 92       	push	r5
    224a:	6f 92       	push	r6
    224c:	7f 92       	push	r7
    224e:	8f 92       	push	r8
    2250:	9f 92       	push	r9
    2252:	af 92       	push	r10
    2254:	bf 92       	push	r11
    2256:	cf 92       	push	r12
    2258:	df 92       	push	r13
    225a:	ef 92       	push	r14
    225c:	ff 92       	push	r15
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	ac 97       	sbiw	r28, 0x2c	; 44
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	1c 01       	movw	r2, r24
    2278:	7b 01       	movw	r14, r22
    227a:	8a 01       	movw	r16, r20
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
    227c:	db 01       	movw	r26, r22
    227e:	4d 90       	ld	r4, X+
    2280:	5d 90       	ld	r5, X+
    2282:	6d 90       	ld	r6, X+
    2284:	7c 90       	ld	r7, X
    2286:	c3 01       	movw	r24, r6
    2288:	b2 01       	movw	r22, r4
    228a:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    228e:	4b 01       	movw	r8, r22
    2290:	5c 01       	movw	r10, r24
    2292:	f7 01       	movw	r30, r14
    2294:	c4 80       	ldd	r12, Z+4	; 0x04
    2296:	d5 80       	ldd	r13, Z+5	; 0x05
    2298:	e6 80       	ldd	r14, Z+6	; 0x06
    229a:	f7 80       	ldd	r15, Z+7	; 0x07
    229c:	c7 01       	movw	r24, r14
    229e:	b6 01       	movw	r22, r12
    22a0:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    22a4:	6d a3       	std	Y+37, r22	; 0x25
    22a6:	7e a3       	std	Y+38, r23	; 0x26
    22a8:	8f a3       	std	Y+39, r24	; 0x27
    22aa:	98 a7       	std	Y+40, r25	; 0x28
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
    22ac:	c3 01       	movw	r24, r6
    22ae:	b2 01       	movw	r22, r4
    22b0:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    22b4:	2b 01       	movw	r4, r22
    22b6:	3c 01       	movw	r6, r24
    22b8:	c7 01       	movw	r24, r14
    22ba:	b6 01       	movw	r22, r12
    22bc:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    22c0:	6b 01       	movw	r12, r22
    22c2:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    22c4:	77 fa       	bst	r7, 7
    22c6:	70 94       	com	r7
    22c8:	77 f8       	bld	r7, 7
    22ca:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    22cc:	d5 01       	movw	r26, r10
    22ce:	c4 01       	movw	r24, r8
    22d0:	b0 58       	subi	r27, 0x80	; 128
    22d2:	89 a7       	std	Y+41, r24	; 0x29
    22d4:	9a a7       	std	Y+42, r25	; 0x2a
    22d6:	ab a7       	std	Y+43, r26	; 0x2b
    22d8:	bc a7       	std	Y+44, r27	; 0x2c
{
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    22da:	2d a1       	ldd	r18, Y+37	; 0x25
    22dc:	3e a1       	ldd	r19, Y+38	; 0x26
    22de:	4f a1       	ldd	r20, Y+39	; 0x27
    22e0:	58 a5       	ldd	r21, Y+40	; 0x28
    22e2:	c3 01       	movw	r24, r6
    22e4:	b2 01       	movw	r22, r4
    22e6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    22ea:	69 83       	std	Y+1, r22	; 0x01
    22ec:	7a 83       	std	Y+2, r23	; 0x02
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	9c 83       	std	Y+4, r25	; 0x04
  double clat = cos(v_lla[0]), clon = cos(v_lla[1]);// floatch
  double slat = sin(v_lla[0]), slon = sin(v_lla[1]);// floatch
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    22f2:	a3 01       	movw	r20, r6
    22f4:	92 01       	movw	r18, r4
    22f6:	c7 01       	movw	r24, r14
    22f8:	b6 01       	movw	r22, r12
    22fa:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    22fe:	6d 83       	std	Y+5, r22	; 0x05
    2300:	7e 83       	std	Y+6, r23	; 0x06
    2302:	8f 83       	std	Y+7, r24	; 0x07
    2304:	98 87       	std	Y+8, r25	; 0x08
    2306:	89 86       	std	Y+9, r8	; 0x09
    2308:	9a 86       	std	Y+10, r9	; 0x0a
    230a:	ab 86       	std	Y+11, r10	; 0x0b
    230c:	bc 86       	std	Y+12, r11	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    230e:	d7 01       	movw	r26, r14
    2310:	c6 01       	movw	r24, r12
    2312:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2314:	8d 87       	std	Y+13, r24	; 0x0d
    2316:	9e 87       	std	Y+14, r25	; 0x0e
    2318:	af 87       	std	Y+15, r26	; 0x0f
    231a:	b8 8b       	std	Y+16, r27	; 0x10
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	af a1       	ldd	r26, Y+39	; 0x27
    2322:	b8 a5       	ldd	r27, Y+40	; 0x28
    2324:	89 8b       	std	Y+17, r24	; 0x11
    2326:	9a 8b       	std	Y+18, r25	; 0x12
    2328:	ab 8b       	std	Y+19, r26	; 0x13
    232a:	bc 8b       	std	Y+20, r27	; 0x14
    232c:	1d 8a       	std	Y+21, r1	; 0x15
    232e:	1e 8a       	std	Y+22, r1	; 0x16
    2330:	1f 8a       	std	Y+23, r1	; 0x17
    2332:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    2334:	9c 01       	movw	r18, r24
    2336:	ad 01       	movw	r20, r26
    2338:	69 a5       	ldd	r22, Y+41	; 0x29
    233a:	7a a5       	ldd	r23, Y+42	; 0x2a
    233c:	8b a5       	ldd	r24, Y+43	; 0x2b
    233e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2340:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2344:	69 8f       	std	Y+25, r22	; 0x19
    2346:	7a 8f       	std	Y+26, r23	; 0x1a
    2348:	8b 8f       	std	Y+27, r24	; 0x1b
    234a:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    234c:	29 a5       	ldd	r18, Y+41	; 0x29
    234e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2350:	4b a5       	ldd	r20, Y+43	; 0x2b
    2352:	5c a5       	ldd	r21, Y+44	; 0x2c
    2354:	c7 01       	movw	r24, r14
    2356:	b6 01       	movw	r22, r12
    2358:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    235c:	6d 8f       	std	Y+29, r22	; 0x1d
    235e:	7e 8f       	std	Y+30, r23	; 0x1e
    2360:	8f 8f       	std	Y+31, r24	; 0x1f
    2362:	98 a3       	std	Y+32, r25	; 0x20
    2364:	49 a2       	std	Y+33, r4	; 0x21
    2366:	5a a2       	std	Y+34, r5	; 0x22
    2368:	6b a2       	std	Y+35, r6	; 0x23
    236a:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    236c:	a8 01       	movw	r20, r16
    236e:	be 01       	movw	r22, r28
    2370:	6f 5f       	subi	r22, 0xFF	; 255
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	c1 01       	movw	r24, r2
    2376:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vector_into_matrix>
}
    237a:	ac 96       	adiw	r28, 0x2c	; 44
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	cf 90       	pop	r12
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	7f 90       	pop	r7
    23a0:	6f 90       	pop	r6
    23a2:	5f 90       	pop	r5
    23a4:	4f 90       	pop	r4
    23a6:	3f 90       	pop	r3
    23a8:	2f 90       	pop	r2
    23aa:	08 95       	ret

000023ac <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    23ac:	1f 92       	push	r1
    23ae:	0f 92       	push	r0
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	0f 92       	push	r0
    23b4:	11 24       	eor	r1, r1
    23b6:	0b b6       	in	r0, 0x3b	; 59
    23b8:	0f 92       	push	r0
    23ba:	2f 93       	push	r18
    23bc:	8f 93       	push	r24
    23be:	9f 93       	push	r25
    23c0:	af 93       	push	r26
    23c2:	bf 93       	push	r27
    23c4:	ef 93       	push	r30
    23c6:	ff 93       	push	r31
  PORTA ^= 0xf0;
    23c8:	9b b3       	in	r25, 0x1b	; 27
    23ca:	80 ef       	ldi	r24, 0xF0	; 240
    23cc:	89 27       	eor	r24, r25
    23ce:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    23d0:	8c b1       	in	r24, 0x0c	; 12
    23d2:	80 93 10 02 	sts	0x0210, r24
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    23d6:	80 91 11 02 	lds	r24, 0x0211
    23da:	90 91 12 02 	lds	r25, 0x0212
    23de:	a0 91 13 02 	lds	r26, 0x0213
    23e2:	b0 91 14 02 	lds	r27, 0x0214
    23e6:	ba 2f       	mov	r27, r26
    23e8:	a9 2f       	mov	r26, r25
    23ea:	98 2f       	mov	r25, r24
    23ec:	88 27       	eor	r24, r24
    23ee:	80 93 11 02 	sts	0x0211, r24
    23f2:	90 93 12 02 	sts	0x0212, r25
    23f6:	a0 93 13 02 	sts	0x0213, r26
    23fa:	b0 93 14 02 	sts	0x0214, r27
  buffer &= 0xFFFFFF00;
    23fe:	80 91 11 02 	lds	r24, 0x0211
    2402:	90 91 12 02 	lds	r25, 0x0212
    2406:	a0 91 13 02 	lds	r26, 0x0213
    240a:	b0 91 14 02 	lds	r27, 0x0214
    240e:	88 27       	eor	r24, r24
    2410:	80 93 11 02 	sts	0x0211, r24
    2414:	90 93 12 02 	sts	0x0212, r25
    2418:	a0 93 13 02 	sts	0x0213, r26
    241c:	b0 93 14 02 	sts	0x0214, r27
  buffer |= (uint32_t) last_byte;
    2420:	20 91 10 02 	lds	r18, 0x0210
    2424:	80 91 11 02 	lds	r24, 0x0211
    2428:	90 91 12 02 	lds	r25, 0x0212
    242c:	a0 91 13 02 	lds	r26, 0x0213
    2430:	b0 91 14 02 	lds	r27, 0x0214
    2434:	82 2b       	or	r24, r18
    2436:	80 93 11 02 	sts	0x0211, r24
    243a:	90 93 12 02 	sts	0x0212, r25
    243e:	a0 93 13 02 	sts	0x0213, r26
    2442:	b0 93 14 02 	sts	0x0214, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
    2446:	80 91 11 01 	lds	r24, 0x0111
    244a:	8c 30       	cpi	r24, 0x0C	; 12
    244c:	08 f0       	brcs	.+2      	; 0x2450 <__vector_18+0xa4>
    244e:	86 c0       	rjmp	.+268    	; 0x255c <__vector_18+0x1b0>
  {
    
    if(pos<4)
    2450:	80 91 11 01 	lds	r24, 0x0111
    2454:	84 30       	cpi	r24, 0x04	; 4
    2456:	28 f5       	brcc	.+74     	; 0x24a2 <__vector_18+0xf6>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    2458:	e3 eb       	ldi	r30, 0xB3	; 179
    245a:	f4 e0       	ldi	r31, 0x04	; 4
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	a2 81       	ldd	r26, Z+2	; 0x02
    2462:	b3 81       	ldd	r27, Z+3	; 0x03
    2464:	89 2f       	mov	r24, r25
    2466:	9a 2f       	mov	r25, r26
    2468:	ab 2f       	mov	r26, r27
    246a:	bb 27       	eor	r27, r27
    246c:	a7 fd       	sbrc	r26, 7
    246e:	ba 95       	dec	r27
    2470:	80 83       	st	Z, r24
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	a2 83       	std	Z+2, r26	; 0x02
    2476:	b3 83       	std	Z+3, r27	; 0x03
		Current_state.gps.x &= 0x00FFFFFF;
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	a2 81       	ldd	r26, Z+2	; 0x02
    247e:	b3 81       	ldd	r27, Z+3	; 0x03
    2480:	bb 27       	eor	r27, r27
    2482:	80 83       	st	Z, r24
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	a2 83       	std	Z+2, r26	; 0x02
    2488:	b3 83       	std	Z+3, r27	; 0x03
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    248a:	20 91 10 02 	lds	r18, 0x0210
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	a2 81       	ldd	r26, Z+2	; 0x02
    2494:	b3 81       	ldd	r27, Z+3	; 0x03
    2496:	b2 2b       	or	r27, r18
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
    24a0:	51 c0       	rjmp	.+162    	; 0x2544 <__vector_18+0x198>
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    24a2:	80 91 11 01 	lds	r24, 0x0111
    24a6:	88 30       	cpi	r24, 0x08	; 8
    24a8:	28 f5       	brcc	.+74     	; 0x24f4 <__vector_18+0x148>
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    24aa:	e3 eb       	ldi	r30, 0xB3	; 179
    24ac:	f4 e0       	ldi	r31, 0x04	; 4
    24ae:	84 81       	ldd	r24, Z+4	; 0x04
    24b0:	95 81       	ldd	r25, Z+5	; 0x05
    24b2:	a6 81       	ldd	r26, Z+6	; 0x06
    24b4:	b7 81       	ldd	r27, Z+7	; 0x07
    24b6:	89 2f       	mov	r24, r25
    24b8:	9a 2f       	mov	r25, r26
    24ba:	ab 2f       	mov	r26, r27
    24bc:	bb 27       	eor	r27, r27
    24be:	a7 fd       	sbrc	r26, 7
    24c0:	ba 95       	dec	r27
    24c2:	84 83       	std	Z+4, r24	; 0x04
    24c4:	95 83       	std	Z+5, r25	; 0x05
    24c6:	a6 83       	std	Z+6, r26	; 0x06
    24c8:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y &= 0x00FFFFFF;
    24ca:	84 81       	ldd	r24, Z+4	; 0x04
    24cc:	95 81       	ldd	r25, Z+5	; 0x05
    24ce:	a6 81       	ldd	r26, Z+6	; 0x06
    24d0:	b7 81       	ldd	r27, Z+7	; 0x07
    24d2:	bb 27       	eor	r27, r27
    24d4:	84 83       	std	Z+4, r24	; 0x04
    24d6:	95 83       	std	Z+5, r25	; 0x05
    24d8:	a6 83       	std	Z+6, r26	; 0x06
    24da:	b7 83       	std	Z+7, r27	; 0x07
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    24dc:	20 91 10 02 	lds	r18, 0x0210
    24e0:	84 81       	ldd	r24, Z+4	; 0x04
    24e2:	95 81       	ldd	r25, Z+5	; 0x05
    24e4:	a6 81       	ldd	r26, Z+6	; 0x06
    24e6:	b7 81       	ldd	r27, Z+7	; 0x07
    24e8:	b2 2b       	or	r27, r18
    24ea:	84 83       	std	Z+4, r24	; 0x04
    24ec:	95 83       	std	Z+5, r25	; 0x05
    24ee:	a6 83       	std	Z+6, r26	; 0x06
    24f0:	b7 83       	std	Z+7, r27	; 0x07
    24f2:	28 c0       	rjmp	.+80     	; 0x2544 <__vector_18+0x198>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    24f4:	80 91 11 01 	lds	r24, 0x0111
    24f8:	8c 30       	cpi	r24, 0x0C	; 12
    24fa:	20 f5       	brcc	.+72     	; 0x2544 <__vector_18+0x198>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    24fc:	e3 eb       	ldi	r30, 0xB3	; 179
    24fe:	f4 e0       	ldi	r31, 0x04	; 4
    2500:	80 85       	ldd	r24, Z+8	; 0x08
    2502:	91 85       	ldd	r25, Z+9	; 0x09
    2504:	a2 85       	ldd	r26, Z+10	; 0x0a
    2506:	b3 85       	ldd	r27, Z+11	; 0x0b
    2508:	89 2f       	mov	r24, r25
    250a:	9a 2f       	mov	r25, r26
    250c:	ab 2f       	mov	r26, r27
    250e:	bb 27       	eor	r27, r27
    2510:	a7 fd       	sbrc	r26, 7
    2512:	ba 95       	dec	r27
    2514:	80 87       	std	Z+8, r24	; 0x08
    2516:	91 87       	std	Z+9, r25	; 0x09
    2518:	a2 87       	std	Z+10, r26	; 0x0a
    251a:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z &= 0x00FFFFFF;
    251c:	80 85       	ldd	r24, Z+8	; 0x08
    251e:	91 85       	ldd	r25, Z+9	; 0x09
    2520:	a2 85       	ldd	r26, Z+10	; 0x0a
    2522:	b3 85       	ldd	r27, Z+11	; 0x0b
    2524:	bb 27       	eor	r27, r27
    2526:	80 87       	std	Z+8, r24	; 0x08
    2528:	91 87       	std	Z+9, r25	; 0x09
    252a:	a2 87       	std	Z+10, r26	; 0x0a
    252c:	b3 87       	std	Z+11, r27	; 0x0b
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    252e:	20 91 10 02 	lds	r18, 0x0210
    2532:	80 85       	ldd	r24, Z+8	; 0x08
    2534:	91 85       	ldd	r25, Z+9	; 0x09
    2536:	a2 85       	ldd	r26, Z+10	; 0x0a
    2538:	b3 85       	ldd	r27, Z+11	; 0x0b
    253a:	b2 2b       	or	r27, r18
    253c:	80 87       	std	Z+8, r24	; 0x08
    253e:	91 87       	std	Z+9, r25	; 0x09
    2540:	a2 87       	std	Z+10, r26	; 0x0a
    2542:	b3 87       	std	Z+11, r27	; 0x0b
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    2544:	80 91 11 01 	lds	r24, 0x0111
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	80 93 11 01 	sts	0x0111, r24
    if(pos == 12)
    254e:	80 91 11 01 	lds	r24, 0x0111
    2552:	8c 30       	cpi	r24, 0x0C	; 12
    2554:	19 f4       	brne	.+6      	; 0x255c <__vector_18+0x1b0>
	{
      pos = 0xFF;
    2556:	8f ef       	ldi	r24, 0xFF	; 255
    2558:	80 93 11 01 	sts	0x0111, r24
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    255c:	80 91 10 01 	lds	r24, 0x0110
    2560:	8c 30       	cpi	r24, 0x0C	; 12
    2562:	08 f0       	brcs	.+2      	; 0x2566 <__vector_18+0x1ba>
    2564:	86 c0       	rjmp	.+268    	; 0x2672 <__vector_18+0x2c6>
  {
	  
    if(vel < 4)
    2566:	80 91 10 01 	lds	r24, 0x0110
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	28 f5       	brcc	.+74     	; 0x25b8 <__vector_18+0x20c>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    256e:	e3 eb       	ldi	r30, 0xB3	; 179
    2570:	f4 e0       	ldi	r31, 0x04	; 4
    2572:	84 85       	ldd	r24, Z+12	; 0x0c
    2574:	95 85       	ldd	r25, Z+13	; 0x0d
    2576:	a6 85       	ldd	r26, Z+14	; 0x0e
    2578:	b7 85       	ldd	r27, Z+15	; 0x0f
    257a:	89 2f       	mov	r24, r25
    257c:	9a 2f       	mov	r25, r26
    257e:	ab 2f       	mov	r26, r27
    2580:	bb 27       	eor	r27, r27
    2582:	a7 fd       	sbrc	r26, 7
    2584:	ba 95       	dec	r27
    2586:	84 87       	std	Z+12, r24	; 0x0c
    2588:	95 87       	std	Z+13, r25	; 0x0d
    258a:	a6 87       	std	Z+14, r26	; 0x0e
    258c:	b7 87       	std	Z+15, r27	; 0x0f
		Current_state.gps.v_x &= 0x00FFFFFF;
    258e:	84 85       	ldd	r24, Z+12	; 0x0c
    2590:	95 85       	ldd	r25, Z+13	; 0x0d
    2592:	a6 85       	ldd	r26, Z+14	; 0x0e
    2594:	b7 85       	ldd	r27, Z+15	; 0x0f
    2596:	bb 27       	eor	r27, r27
    2598:	84 87       	std	Z+12, r24	; 0x0c
    259a:	95 87       	std	Z+13, r25	; 0x0d
    259c:	a6 87       	std	Z+14, r26	; 0x0e
    259e:	b7 87       	std	Z+15, r27	; 0x0f
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    25a0:	20 91 10 02 	lds	r18, 0x0210
    25a4:	84 85       	ldd	r24, Z+12	; 0x0c
    25a6:	95 85       	ldd	r25, Z+13	; 0x0d
    25a8:	a6 85       	ldd	r26, Z+14	; 0x0e
    25aa:	b7 85       	ldd	r27, Z+15	; 0x0f
    25ac:	b2 2b       	or	r27, r18
    25ae:	84 87       	std	Z+12, r24	; 0x0c
    25b0:	95 87       	std	Z+13, r25	; 0x0d
    25b2:	a6 87       	std	Z+14, r26	; 0x0e
    25b4:	b7 87       	std	Z+15, r27	; 0x0f
    25b6:	51 c0       	rjmp	.+162    	; 0x265a <__vector_18+0x2ae>
		
	}
	else if(vel < 8)
    25b8:	80 91 10 01 	lds	r24, 0x0110
    25bc:	88 30       	cpi	r24, 0x08	; 8
    25be:	28 f5       	brcc	.+74     	; 0x260a <__vector_18+0x25e>
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    25c0:	e3 eb       	ldi	r30, 0xB3	; 179
    25c2:	f4 e0       	ldi	r31, 0x04	; 4
    25c4:	80 89       	ldd	r24, Z+16	; 0x10
    25c6:	91 89       	ldd	r25, Z+17	; 0x11
    25c8:	a2 89       	ldd	r26, Z+18	; 0x12
    25ca:	b3 89       	ldd	r27, Z+19	; 0x13
    25cc:	89 2f       	mov	r24, r25
    25ce:	9a 2f       	mov	r25, r26
    25d0:	ab 2f       	mov	r26, r27
    25d2:	bb 27       	eor	r27, r27
    25d4:	a7 fd       	sbrc	r26, 7
    25d6:	ba 95       	dec	r27
    25d8:	80 8b       	std	Z+16, r24	; 0x10
    25da:	91 8b       	std	Z+17, r25	; 0x11
    25dc:	a2 8b       	std	Z+18, r26	; 0x12
    25de:	b3 8b       	std	Z+19, r27	; 0x13
		Current_state.gps.v_y &= 0x00FFFFFF;
    25e0:	80 89       	ldd	r24, Z+16	; 0x10
    25e2:	91 89       	ldd	r25, Z+17	; 0x11
    25e4:	a2 89       	ldd	r26, Z+18	; 0x12
    25e6:	b3 89       	ldd	r27, Z+19	; 0x13
    25e8:	bb 27       	eor	r27, r27
    25ea:	80 8b       	std	Z+16, r24	; 0x10
    25ec:	91 8b       	std	Z+17, r25	; 0x11
    25ee:	a2 8b       	std	Z+18, r26	; 0x12
    25f0:	b3 8b       	std	Z+19, r27	; 0x13
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    25f2:	20 91 10 02 	lds	r18, 0x0210
    25f6:	80 89       	ldd	r24, Z+16	; 0x10
    25f8:	91 89       	ldd	r25, Z+17	; 0x11
    25fa:	a2 89       	ldd	r26, Z+18	; 0x12
    25fc:	b3 89       	ldd	r27, Z+19	; 0x13
    25fe:	b2 2b       	or	r27, r18
    2600:	80 8b       	std	Z+16, r24	; 0x10
    2602:	91 8b       	std	Z+17, r25	; 0x11
    2604:	a2 8b       	std	Z+18, r26	; 0x12
    2606:	b3 8b       	std	Z+19, r27	; 0x13
    2608:	28 c0       	rjmp	.+80     	; 0x265a <__vector_18+0x2ae>
	}
	else if(vel < 12)
    260a:	80 91 10 01 	lds	r24, 0x0110
    260e:	8c 30       	cpi	r24, 0x0C	; 12
    2610:	20 f5       	brcc	.+72     	; 0x265a <__vector_18+0x2ae>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    2612:	e3 eb       	ldi	r30, 0xB3	; 179
    2614:	f4 e0       	ldi	r31, 0x04	; 4
    2616:	84 89       	ldd	r24, Z+20	; 0x14
    2618:	95 89       	ldd	r25, Z+21	; 0x15
    261a:	a6 89       	ldd	r26, Z+22	; 0x16
    261c:	b7 89       	ldd	r27, Z+23	; 0x17
    261e:	89 2f       	mov	r24, r25
    2620:	9a 2f       	mov	r25, r26
    2622:	ab 2f       	mov	r26, r27
    2624:	bb 27       	eor	r27, r27
    2626:	a7 fd       	sbrc	r26, 7
    2628:	ba 95       	dec	r27
    262a:	84 8b       	std	Z+20, r24	; 0x14
    262c:	95 8b       	std	Z+21, r25	; 0x15
    262e:	a6 8b       	std	Z+22, r26	; 0x16
    2630:	b7 8b       	std	Z+23, r27	; 0x17
		Current_state.gps.v_z &= 0x00FFFFFF;
    2632:	84 89       	ldd	r24, Z+20	; 0x14
    2634:	95 89       	ldd	r25, Z+21	; 0x15
    2636:	a6 89       	ldd	r26, Z+22	; 0x16
    2638:	b7 89       	ldd	r27, Z+23	; 0x17
    263a:	bb 27       	eor	r27, r27
    263c:	84 8b       	std	Z+20, r24	; 0x14
    263e:	95 8b       	std	Z+21, r25	; 0x15
    2640:	a6 8b       	std	Z+22, r26	; 0x16
    2642:	b7 8b       	std	Z+23, r27	; 0x17
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    2644:	20 91 10 02 	lds	r18, 0x0210
    2648:	84 89       	ldd	r24, Z+20	; 0x14
    264a:	95 89       	ldd	r25, Z+21	; 0x15
    264c:	a6 89       	ldd	r26, Z+22	; 0x16
    264e:	b7 89       	ldd	r27, Z+23	; 0x17
    2650:	b2 2b       	or	r27, r18
    2652:	84 8b       	std	Z+20, r24	; 0x14
    2654:	95 8b       	std	Z+21, r25	; 0x15
    2656:	a6 8b       	std	Z+22, r26	; 0x16
    2658:	b7 8b       	std	Z+23, r27	; 0x17
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    265a:	80 91 10 01 	lds	r24, 0x0110
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	80 93 10 01 	sts	0x0110, r24
    if(vel == 12)
    2664:	80 91 10 01 	lds	r24, 0x0110
    2668:	8c 30       	cpi	r24, 0x0C	; 12
    266a:	19 f4       	brne	.+6      	; 0x2672 <__vector_18+0x2c6>
     {
		  vel = 0xFF;
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	80 93 10 01 	sts	0x0110, r24

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    2672:	80 91 0f 01 	lds	r24, 0x010F
    2676:	84 30       	cpi	r24, 0x04	; 4
    2678:	20 f5       	brcc	.+72     	; 0x26c2 <__vector_18+0x316>
  {
    if(dop >= 2)
    267a:	80 91 0f 01 	lds	r24, 0x010F
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	a0 f0       	brcs	.+40     	; 0x26aa <__vector_18+0x2fe>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    2682:	e3 eb       	ldi	r30, 0xB3	; 179
    2684:	f4 e0       	ldi	r31, 0x04	; 4
    2686:	83 a5       	ldd	r24, Z+43	; 0x2b
    2688:	94 a5       	ldd	r25, Z+44	; 0x2c
    268a:	89 2f       	mov	r24, r25
    268c:	99 27       	eor	r25, r25
    268e:	94 a7       	std	Z+44, r25	; 0x2c
    2690:	83 a7       	std	Z+43, r24	; 0x2b
		 Current_state.gps.pdop &= 0x00FF;
    2692:	83 a5       	ldd	r24, Z+43	; 0x2b
    2694:	94 a5       	ldd	r25, Z+44	; 0x2c
    2696:	99 27       	eor	r25, r25
    2698:	94 a7       	std	Z+44, r25	; 0x2c
    269a:	83 a7       	std	Z+43, r24	; 0x2b
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    269c:	20 91 10 02 	lds	r18, 0x0210
    26a0:	83 a5       	ldd	r24, Z+43	; 0x2b
    26a2:	94 a5       	ldd	r25, Z+44	; 0x2c
    26a4:	92 2b       	or	r25, r18
    26a6:	94 a7       	std	Z+44, r25	; 0x2c
    26a8:	83 a7       	std	Z+43, r24	; 0x2b
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    26aa:	80 91 0f 01 	lds	r24, 0x010F
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	80 93 0f 01 	sts	0x010F, r24
    if(dop == 4)
    26b4:	80 91 0f 01 	lds	r24, 0x010F
    26b8:	84 30       	cpi	r24, 0x04	; 4
    26ba:	19 f4       	brne	.+6      	; 0x26c2 <__vector_18+0x316>
      dop = 0xFF;
    26bc:	8f ef       	ldi	r24, 0xFF	; 255
    26be:	80 93 0f 01 	sts	0x010F, r24
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    26c2:	80 91 0e 01 	lds	r24, 0x010E
    26c6:	80 31       	cpi	r24, 0x10	; 16
    26c8:	08 f0       	brcs	.+2      	; 0x26cc <__vector_18+0x320>
    26ca:	8b c0       	rjmp	.+278    	; 0x27e2 <__vector_18+0x436>
  {
	if(geo < 4);  
    26cc:	80 91 0e 01 	lds	r24, 0x010E
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <__vector_18+0x32a>
    26d4:	7a c0       	rjmp	.+244    	; 0x27ca <__vector_18+0x41e>
    else if(geo < 8)
    26d6:	80 91 0e 01 	lds	r24, 0x010E
    26da:	88 30       	cpi	r24, 0x08	; 8
    26dc:	28 f5       	brcc	.+74     	; 0x2728 <__vector_18+0x37c>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    26de:	e3 eb       	ldi	r30, 0xB3	; 179
    26e0:	f4 e0       	ldi	r31, 0x04	; 4
    26e2:	80 8d       	ldd	r24, Z+24	; 0x18
    26e4:	91 8d       	ldd	r25, Z+25	; 0x19
    26e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26e8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    26ea:	89 2f       	mov	r24, r25
    26ec:	9a 2f       	mov	r25, r26
    26ee:	ab 2f       	mov	r26, r27
    26f0:	bb 27       	eor	r27, r27
    26f2:	a7 fd       	sbrc	r26, 7
    26f4:	ba 95       	dec	r27
    26f6:	80 8f       	std	Z+24, r24	; 0x18
    26f8:	91 8f       	std	Z+25, r25	; 0x19
    26fa:	a2 8f       	std	Z+26, r26	; 0x1a
    26fc:	b3 8f       	std	Z+27, r27	; 0x1b
		Current_state.gps.lat &= 0x00FFFFFF;
    26fe:	80 8d       	ldd	r24, Z+24	; 0x18
    2700:	91 8d       	ldd	r25, Z+25	; 0x19
    2702:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2704:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2706:	bb 27       	eor	r27, r27
    2708:	80 8f       	std	Z+24, r24	; 0x18
    270a:	91 8f       	std	Z+25, r25	; 0x19
    270c:	a2 8f       	std	Z+26, r26	; 0x1a
    270e:	b3 8f       	std	Z+27, r27	; 0x1b
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    2710:	20 91 10 02 	lds	r18, 0x0210
    2714:	80 8d       	ldd	r24, Z+24	; 0x18
    2716:	91 8d       	ldd	r25, Z+25	; 0x19
    2718:	a2 8d       	ldd	r26, Z+26	; 0x1a
    271a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    271c:	b2 2b       	or	r27, r18
    271e:	80 8f       	std	Z+24, r24	; 0x18
    2720:	91 8f       	std	Z+25, r25	; 0x19
    2722:	a2 8f       	std	Z+26, r26	; 0x1a
    2724:	b3 8f       	std	Z+27, r27	; 0x1b
    2726:	51 c0       	rjmp	.+162    	; 0x27ca <__vector_18+0x41e>
	}
	else if(geo < 12)
    2728:	80 91 0e 01 	lds	r24, 0x010E
    272c:	8c 30       	cpi	r24, 0x0C	; 12
    272e:	28 f5       	brcc	.+74     	; 0x277a <__vector_18+0x3ce>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    2730:	e3 eb       	ldi	r30, 0xB3	; 179
    2732:	f4 e0       	ldi	r31, 0x04	; 4
    2734:	84 8d       	ldd	r24, Z+28	; 0x1c
    2736:	95 8d       	ldd	r25, Z+29	; 0x1d
    2738:	a6 8d       	ldd	r26, Z+30	; 0x1e
    273a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    273c:	89 2f       	mov	r24, r25
    273e:	9a 2f       	mov	r25, r26
    2740:	ab 2f       	mov	r26, r27
    2742:	bb 27       	eor	r27, r27
    2744:	a7 fd       	sbrc	r26, 7
    2746:	ba 95       	dec	r27
    2748:	84 8f       	std	Z+28, r24	; 0x1c
    274a:	95 8f       	std	Z+29, r25	; 0x1d
    274c:	a6 8f       	std	Z+30, r26	; 0x1e
    274e:	b7 8f       	std	Z+31, r27	; 0x1f
		Current_state.gps.lon &= 0x00FFFFFF;
    2750:	84 8d       	ldd	r24, Z+28	; 0x1c
    2752:	95 8d       	ldd	r25, Z+29	; 0x1d
    2754:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2756:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2758:	bb 27       	eor	r27, r27
    275a:	84 8f       	std	Z+28, r24	; 0x1c
    275c:	95 8f       	std	Z+29, r25	; 0x1d
    275e:	a6 8f       	std	Z+30, r26	; 0x1e
    2760:	b7 8f       	std	Z+31, r27	; 0x1f
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    2762:	20 91 10 02 	lds	r18, 0x0210
    2766:	84 8d       	ldd	r24, Z+28	; 0x1c
    2768:	95 8d       	ldd	r25, Z+29	; 0x1d
    276a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    276c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    276e:	b2 2b       	or	r27, r18
    2770:	84 8f       	std	Z+28, r24	; 0x1c
    2772:	95 8f       	std	Z+29, r25	; 0x1d
    2774:	a6 8f       	std	Z+30, r26	; 0x1e
    2776:	b7 8f       	std	Z+31, r27	; 0x1f
    2778:	28 c0       	rjmp	.+80     	; 0x27ca <__vector_18+0x41e>
	}
	else if(geo < 16 )
    277a:	80 91 0e 01 	lds	r24, 0x010E
    277e:	80 31       	cpi	r24, 0x10	; 16
    2780:	20 f5       	brcc	.+72     	; 0x27ca <__vector_18+0x41e>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    2782:	e3 eb       	ldi	r30, 0xB3	; 179
    2784:	f4 e0       	ldi	r31, 0x04	; 4
    2786:	80 a1       	ldd	r24, Z+32	; 0x20
    2788:	91 a1       	ldd	r25, Z+33	; 0x21
    278a:	a2 a1       	ldd	r26, Z+34	; 0x22
    278c:	b3 a1       	ldd	r27, Z+35	; 0x23
    278e:	89 2f       	mov	r24, r25
    2790:	9a 2f       	mov	r25, r26
    2792:	ab 2f       	mov	r26, r27
    2794:	bb 27       	eor	r27, r27
    2796:	a7 fd       	sbrc	r26, 7
    2798:	ba 95       	dec	r27
    279a:	80 a3       	std	Z+32, r24	; 0x20
    279c:	91 a3       	std	Z+33, r25	; 0x21
    279e:	a2 a3       	std	Z+34, r26	; 0x22
    27a0:	b3 a3       	std	Z+35, r27	; 0x23
		Current_state.gps.alt &= 0x00FFFFFF;
    27a2:	80 a1       	ldd	r24, Z+32	; 0x20
    27a4:	91 a1       	ldd	r25, Z+33	; 0x21
    27a6:	a2 a1       	ldd	r26, Z+34	; 0x22
    27a8:	b3 a1       	ldd	r27, Z+35	; 0x23
    27aa:	bb 27       	eor	r27, r27
    27ac:	80 a3       	std	Z+32, r24	; 0x20
    27ae:	91 a3       	std	Z+33, r25	; 0x21
    27b0:	a2 a3       	std	Z+34, r26	; 0x22
    27b2:	b3 a3       	std	Z+35, r27	; 0x23
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    27b4:	20 91 10 02 	lds	r18, 0x0210
    27b8:	80 a1       	ldd	r24, Z+32	; 0x20
    27ba:	91 a1       	ldd	r25, Z+33	; 0x21
    27bc:	a2 a1       	ldd	r26, Z+34	; 0x22
    27be:	b3 a1       	ldd	r27, Z+35	; 0x23
    27c0:	b2 2b       	or	r27, r18
    27c2:	80 a3       	std	Z+32, r24	; 0x20
    27c4:	91 a3       	std	Z+33, r25	; 0x21
    27c6:	a2 a3       	std	Z+34, r26	; 0x22
    27c8:	b3 a3       	std	Z+35, r27	; 0x23
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    27ca:	80 91 0e 01 	lds	r24, 0x010E
    27ce:	8f 5f       	subi	r24, 0xFF	; 255
    27d0:	80 93 0e 01 	sts	0x010E, r24
    if(geo == 16)
    27d4:	80 91 0e 01 	lds	r24, 0x010E
    27d8:	80 31       	cpi	r24, 0x10	; 16
    27da:	19 f4       	brne	.+6      	; 0x27e2 <__vector_18+0x436>
	{
      geo = 0xFF;
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	80 93 0e 01 	sts	0x010E, r24

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    27e2:	80 91 0d 01 	lds	r24, 0x010D
    27e6:	87 30       	cpi	r24, 0x07	; 7
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <__vector_18+0x440>
    27ea:	54 c0       	rjmp	.+168    	; 0x2894 <__vector_18+0x4e8>
  {
	  
	  if(time == 0)
    27ec:	80 91 0d 01 	lds	r24, 0x010D
    27f0:	81 11       	cpse	r24, r1
    27f2:	05 c0       	rjmp	.+10     	; 0x27fe <__vector_18+0x452>
	  {
		  Current_state.gps.hours = last_byte;
    27f4:	80 91 10 02 	lds	r24, 0x0210
    27f8:	80 93 d7 04 	sts	0x04D7, r24
    27fc:	3c c0       	rjmp	.+120    	; 0x2876 <__vector_18+0x4ca>
	  }
	  else if(time == 1)
    27fe:	80 91 0d 01 	lds	r24, 0x010D
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	29 f4       	brne	.+10     	; 0x2810 <__vector_18+0x464>
	  {
		  Current_state.gps.minutes = last_byte;
    2806:	80 91 10 02 	lds	r24, 0x0210
    280a:	80 93 d8 04 	sts	0x04D8, r24
    280e:	33 c0       	rjmp	.+102    	; 0x2876 <__vector_18+0x4ca>
	  }
	  else if(time == 2)
    2810:	80 91 0d 01 	lds	r24, 0x010D
    2814:	82 30       	cpi	r24, 0x02	; 2
    2816:	29 f4       	brne	.+10     	; 0x2822 <__vector_18+0x476>
	  {
		  Current_state.gps.seconds = last_byte;
    2818:	80 91 10 02 	lds	r24, 0x0210
    281c:	80 93 d9 04 	sts	0x04D9, r24
    2820:	2a c0       	rjmp	.+84     	; 0x2876 <__vector_18+0x4ca>
	  }
	  else if(time == 3)
    2822:	80 91 0d 01 	lds	r24, 0x010D
    2826:	83 30       	cpi	r24, 0x03	; 3
    2828:	29 f4       	brne	.+10     	; 0x2834 <__vector_18+0x488>
	  {
		  Current_state.gps.date = last_byte;
    282a:	80 91 10 02 	lds	r24, 0x0210
    282e:	80 93 da 04 	sts	0x04DA, r24
    2832:	21 c0       	rjmp	.+66     	; 0x2876 <__vector_18+0x4ca>
	  }else if(time == 4)
    2834:	80 91 0d 01 	lds	r24, 0x010D
    2838:	84 30       	cpi	r24, 0x04	; 4
    283a:	29 f4       	brne	.+10     	; 0x2846 <__vector_18+0x49a>
	  {
		  Current_state.gps.month = last_byte;
    283c:	80 91 10 02 	lds	r24, 0x0210
    2840:	80 93 db 04 	sts	0x04DB, r24
    2844:	18 c0       	rjmp	.+48     	; 0x2876 <__vector_18+0x4ca>
	  }else if(time > 4)
    2846:	80 91 0d 01 	lds	r24, 0x010D
    284a:	85 30       	cpi	r24, 0x05	; 5
    284c:	a0 f0       	brcs	.+40     	; 0x2876 <__vector_18+0x4ca>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    284e:	e3 eb       	ldi	r30, 0xB3	; 179
    2850:	f4 e0       	ldi	r31, 0x04	; 4
    2852:	81 a5       	ldd	r24, Z+41	; 0x29
    2854:	92 a5       	ldd	r25, Z+42	; 0x2a
    2856:	89 2f       	mov	r24, r25
    2858:	99 27       	eor	r25, r25
    285a:	92 a7       	std	Z+42, r25	; 0x2a
    285c:	81 a7       	std	Z+41, r24	; 0x29
		  Current_state.gps.year &= 0x00FF;
    285e:	81 a5       	ldd	r24, Z+41	; 0x29
    2860:	92 a5       	ldd	r25, Z+42	; 0x2a
    2862:	99 27       	eor	r25, r25
    2864:	92 a7       	std	Z+42, r25	; 0x2a
    2866:	81 a7       	std	Z+41, r24	; 0x29
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    2868:	20 91 10 02 	lds	r18, 0x0210
    286c:	81 a5       	ldd	r24, Z+41	; 0x29
    286e:	92 a5       	ldd	r25, Z+42	; 0x2a
    2870:	92 2b       	or	r25, r18
    2872:	92 a7       	std	Z+42, r25	; 0x2a
    2874:	81 a7       	std	Z+41, r24	; 0x29

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    2876:	80 91 0d 01 	lds	r24, 0x010D
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	80 93 0d 01 	sts	0x010D, r24
    if(time == 7)
    2880:	80 91 0d 01 	lds	r24, 0x010D
    2884:	87 30       	cpi	r24, 0x07	; 7
    2886:	31 f4       	brne	.+12     	; 0x2894 <__vector_18+0x4e8>
    {
      time = 0xFF;
    2888:	8f ef       	ldi	r24, 0xFF	; 255
    288a:	80 93 0d 01 	sts	0x010D, r24
      ///* * The Entire message has been read
      message_end = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	80 93 0f 02 	sts	0x020F, r24
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    2894:	80 91 11 02 	lds	r24, 0x0211
    2898:	90 91 12 02 	lds	r25, 0x0212
    289c:	a0 91 13 02 	lds	r26, 0x0213
    28a0:	b0 91 14 02 	lds	r27, 0x0214
    28a4:	8c 3a       	cpi	r24, 0xAC	; 172
    28a6:	94 40       	sbci	r25, 0x04	; 4
    28a8:	af 43       	sbci	r26, 0x3F	; 63
    28aa:	bf 43       	sbci	r27, 0x3F	; 63
    28ac:	29 f4       	brne	.+10     	; 0x28b8 <__vector_18+0x50c>
  {
    message_end = 0;
    28ae:	10 92 0f 02 	sts	0x020F, r1
    pos = 0;
    28b2:	10 92 11 01 	sts	0x0111, r1
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <__vector_18+0x58a>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    28b8:	80 91 11 02 	lds	r24, 0x0211
    28bc:	90 91 12 02 	lds	r25, 0x0212
    28c0:	a0 91 13 02 	lds	r26, 0x0213
    28c4:	b0 91 14 02 	lds	r27, 0x0214
    28c8:	8c 3a       	cpi	r24, 0xAC	; 172
    28ca:	95 40       	sbci	r25, 0x05	; 5
    28cc:	af 43       	sbci	r26, 0x3F	; 63
    28ce:	bf 43       	sbci	r27, 0x3F	; 63
    28d0:	19 f4       	brne	.+6      	; 0x28d8 <__vector_18+0x52c>
    vel = 0;
    28d2:	10 92 10 01 	sts	0x0110, r1
    28d6:	2f c0       	rjmp	.+94     	; 0x2936 <__vector_18+0x58a>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    28d8:	80 91 11 02 	lds	r24, 0x0211
    28dc:	90 91 12 02 	lds	r25, 0x0212
    28e0:	a0 91 13 02 	lds	r26, 0x0213
    28e4:	b0 91 14 02 	lds	r27, 0x0214
    28e8:	8c 3a       	cpi	r24, 0xAC	; 172
    28ea:	9b 40       	sbci	r25, 0x0B	; 11
    28ec:	af 43       	sbci	r26, 0x3F	; 63
    28ee:	bf 43       	sbci	r27, 0x3F	; 63
    28f0:	19 f4       	brne	.+6      	; 0x28f8 <__vector_18+0x54c>
    dop = 0;
    28f2:	10 92 0f 01 	sts	0x010F, r1
    28f6:	1f c0       	rjmp	.+62     	; 0x2936 <__vector_18+0x58a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    28f8:	80 91 11 02 	lds	r24, 0x0211
    28fc:	90 91 12 02 	lds	r25, 0x0212
    2900:	a0 91 13 02 	lds	r26, 0x0213
    2904:	b0 91 14 02 	lds	r27, 0x0214
    2908:	8c 3a       	cpi	r24, 0xAC	; 172
    290a:	9e 40       	sbci	r25, 0x0E	; 14
    290c:	af 43       	sbci	r26, 0x3F	; 63
    290e:	bf 43       	sbci	r27, 0x3F	; 63
    2910:	19 f4       	brne	.+6      	; 0x2918 <__vector_18+0x56c>
    geo = 0;
    2912:	10 92 0e 01 	sts	0x010E, r1
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <__vector_18+0x58a>
  ///Time
  else if(buffer == 0x3F3F0FAC)
    2918:	80 91 11 02 	lds	r24, 0x0211
    291c:	90 91 12 02 	lds	r25, 0x0212
    2920:	a0 91 13 02 	lds	r26, 0x0213
    2924:	b0 91 14 02 	lds	r27, 0x0214
    2928:	8c 3a       	cpi	r24, 0xAC	; 172
    292a:	9f 40       	sbci	r25, 0x0F	; 15
    292c:	af 43       	sbci	r26, 0x3F	; 63
    292e:	bf 43       	sbci	r27, 0x3F	; 63
    2930:	11 f4       	brne	.+4      	; 0x2936 <__vector_18+0x58a>
    time = 0;
    2932:	10 92 0d 01 	sts	0x010D, r1
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500000)  && message_end )//&& (Current_state.gps.pdop!=0))
    2936:	80 91 de 04 	lds	r24, 0x04DE
    293a:	90 91 df 04 	lds	r25, 0x04DF
    293e:	80 91 0f 02 	lds	r24, 0x020F
    2942:	88 23       	and	r24, r24
    2944:	a1 f0       	breq	.+40     	; 0x296e <__vector_18+0x5c2>
  {
    GPS_done = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	80 93 27 01 	sts	0x0127, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    294c:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    294e:	8f ef       	ldi	r24, 0xFF	; 255
    2950:	9f ef       	ldi	r25, 0xFF	; 255
    2952:	90 93 df 04 	sts	0x04DF, r25
    2956:	80 93 de 04 	sts	0x04DE, r24
    message_end = 0;
    295a:	10 92 0f 02 	sts	0x020F, r1
    buffer = 0;
    295e:	10 92 11 02 	sts	0x0211, r1
    2962:	10 92 12 02 	sts	0x0212, r1
    2966:	10 92 13 02 	sts	0x0213, r1
    296a:	10 92 14 02 	sts	0x0214, r1
  }
}
    296e:	ff 91       	pop	r31
    2970:	ef 91       	pop	r30
    2972:	bf 91       	pop	r27
    2974:	af 91       	pop	r26
    2976:	9f 91       	pop	r25
    2978:	8f 91       	pop	r24
    297a:	2f 91       	pop	r18
    297c:	0f 90       	pop	r0
    297e:	0b be       	out	0x3b, r0	; 59
    2980:	0f 90       	pop	r0
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	0f 90       	pop	r0
    2986:	1f 90       	pop	r1
    2988:	18 95       	reti

0000298a <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    298a:	2f 92       	push	r2
    298c:	3f 92       	push	r3
    298e:	4f 92       	push	r4
    2990:	5f 92       	push	r5
    2992:	6f 92       	push	r6
    2994:	7f 92       	push	r7
    2996:	8f 92       	push	r8
    2998:	9f 92       	push	r9
    299a:	af 92       	push	r10
    299c:	bf 92       	push	r11
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	c8 54       	subi	r28, 0x48	; 72
    29b4:	d1 09       	sbc	r29, r1
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	fc 01       	movw	r30, r24
    29c2:	2a 01       	movw	r4, r20
    29c4:	3b 01       	movw	r6, r22
    29c6:	32 2e       	mov	r3, r18
    29c8:	29 96       	adiw	r28, 0x09	; 9
    29ca:	1f af       	std	Y+63, r17	; 0x3f
    29cc:	0e af       	std	Y+62, r16	; 0x3e
    29ce:	29 97       	sbiw	r28, 0x09	; 9
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
    29d0:	80 80       	ld	r8, Z
    29d2:	91 80       	ldd	r9, Z+1	; 0x01
    29d4:	a2 80       	ldd	r10, Z+2	; 0x02
    29d6:	b3 80       	ldd	r11, Z+3	; 0x03
    29d8:	c4 80       	ldd	r12, Z+4	; 0x04
    29da:	d5 80       	ldd	r13, Z+5	; 0x05
    29dc:	e6 80       	ldd	r14, Z+6	; 0x06
    29de:	f7 80       	ldd	r15, Z+7	; 0x07
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	4a e7       	ldi	r20, 0x7A	; 122
    29e6:	54 e4       	ldi	r21, 0x44	; 68
    29e8:	60 85       	ldd	r22, Z+8	; 0x08
    29ea:	71 85       	ldd	r23, Z+9	; 0x09
    29ec:	82 85       	ldd	r24, Z+10	; 0x0a
    29ee:	93 85       	ldd	r25, Z+11	; 0x0b
    29f0:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    29f4:	6d 83       	std	Y+5, r22	; 0x05
    29f6:	7e 83       	std	Y+6, r23	; 0x06
    29f8:	8f 83       	std	Y+7, r24	; 0x07
    29fa:	98 87       	std	Y+8, r25	; 0x08
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
  double slat = sin(lat), clat = cos(lat), cd, sd;// floatch
    29fc:	c5 01       	movw	r24, r10
    29fe:	b4 01       	movw	r22, r8
    2a00:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    2a04:	69 83       	std	Y+1, r22	; 0x01
    2a06:	7a 83       	std	Y+2, r23	; 0x02
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	9c 83       	std	Y+4, r25	; 0x04
    2a0c:	c5 01       	movw	r24, r10
    2a0e:	b4 01       	movw	r22, r8
    2a10:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    2a14:	69 87       	std	Y+9, r22	; 0x09
    2a16:	7a 87       	std	Y+10, r23	; 0x0a
    2a18:	8b 87       	std	Y+11, r24	; 0x0b
    2a1a:	9c 87       	std	Y+12, r25	; 0x0c
  double ratio, r, rr = 0.0, t = years - IGRF_YEAR;// floatch
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 ee       	ldi	r19, 0xE0	; 224
    2a20:	4b ef       	ldi	r20, 0xFB	; 251
    2a22:	54 e4       	ldi	r21, 0x44	; 68
    2a24:	c3 01       	movw	r24, r6
    2a26:	b2 01       	movw	r22, r4
    2a28:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    2a2c:	6e a7       	std	Y+46, r22	; 0x2e
    2a2e:	7f a7       	std	Y+47, r23	; 0x2f
    2a30:	88 ab       	std	Y+48, r24	; 0x30
    2a32:	99 ab       	std	Y+49, r25	; 0x31
  double agh_p, dgh_p;// floatch
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2a34:	c7 01       	movw	r24, r14
    2a36:	b6 01       	movw	r22, r12
    2a38:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    2a3c:	60 93 55 02 	sts	0x0255, r22
    2a40:	70 93 56 02 	sts	0x0256, r23
    2a44:	80 93 57 02 	sts	0x0257, r24
    2a48:	90 93 58 02 	sts	0x0258, r25
  sl[1] = sin(lon);
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    2a54:	60 93 19 02 	sts	0x0219, r22
    2a58:	70 93 1a 02 	sts	0x021A, r23
    2a5c:	80 93 1b 02 	sts	0x021B, r24
    2a60:	90 93 1c 02 	sts	0x021C, r25
  one = A2 * clat * clat;
    2a64:	2e e2       	ldi	r18, 0x2E	; 46
    2a66:	3f e2       	ldi	r19, 0x2F	; 47
    2a68:	4b e1       	ldi	r20, 0x1B	; 27
    2a6a:	5c e4       	ldi	r21, 0x4C	; 76
    2a6c:	69 85       	ldd	r22, Y+9	; 0x09
    2a6e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a74:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2a78:	29 85       	ldd	r18, Y+9	; 0x09
    2a7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a80:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2a84:	4b 01       	movw	r8, r22
    2a86:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2a88:	2b e3       	ldi	r18, 0x3B	; 59
    2a8a:	35 e2       	ldi	r19, 0x25	; 37
    2a8c:	4a e1       	ldi	r20, 0x1A	; 26
    2a8e:	5c e4       	ldi	r21, 0x4C	; 76
    2a90:	69 81       	ldd	r22, Y+1	; 0x01
    2a92:	7a 81       	ldd	r23, Y+2	; 0x02
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2a9c:	29 81       	ldd	r18, Y+1	; 0x01
    2a9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa0:	4b 81       	ldd	r20, Y+3	; 0x03
    2aa2:	5c 81       	ldd	r21, Y+4	; 0x04
    2aa4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2aa8:	69 8b       	std	Y+17, r22	; 0x11
    2aaa:	7a 8b       	std	Y+18, r23	; 0x12
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
  three = one + two;
    2ab0:	9b 01       	movw	r18, r22
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	c5 01       	movw	r24, r10
    2ab6:	b4 01       	movw	r22, r8
    2ab8:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2abc:	6d 8b       	std	Y+21, r22	; 0x15
    2abe:	7e 8b       	std	Y+22, r23	; 0x16
    2ac0:	8f 8b       	std	Y+23, r24	; 0x17
    2ac2:	98 8f       	std	Y+24, r25	; 0x18
  four = sqrt(three);
    2ac4:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    2ac8:	2b 01       	movw	r4, r22
    2aca:	3c 01       	movw	r6, r24
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2ad4:	6b 01       	movw	r12, r22
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	2d 81       	ldd	r18, Y+5	; 0x05
    2ada:	3e 81       	ldd	r19, Y+6	; 0x06
    2adc:	4f 81       	ldd	r20, Y+7	; 0x07
    2ade:	58 85       	ldd	r21, Y+8	; 0x08
    2ae0:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2ae4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ae8:	4f 81       	ldd	r20, Y+7	; 0x07
    2aea:	58 85       	ldd	r21, Y+8	; 0x08
    2aec:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2af0:	69 8f       	std	Y+25, r22	; 0x19
    2af2:	7a 8f       	std	Y+26, r23	; 0x1a
    2af4:	8b 8f       	std	Y+27, r24	; 0x1b
    2af6:	9c 8f       	std	Y+28, r25	; 0x1c
    2af8:	2e e2       	ldi	r18, 0x2E	; 46
    2afa:	3f e2       	ldi	r19, 0x2F	; 47
    2afc:	4b e1       	ldi	r20, 0x1B	; 27
    2afe:	5c e4       	ldi	r21, 0x4C	; 76
    2b00:	c5 01       	movw	r24, r10
    2b02:	b4 01       	movw	r22, r8
    2b04:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2b08:	69 a3       	std	Y+33, r22	; 0x21
    2b0a:	7a a3       	std	Y+34, r23	; 0x22
    2b0c:	8b a3       	std	Y+35, r24	; 0x23
    2b0e:	9c a3       	std	Y+36, r25	; 0x24
    2b10:	2d 81       	ldd	r18, Y+5	; 0x05
    2b12:	3e 81       	ldd	r19, Y+6	; 0x06
    2b14:	4f 81       	ldd	r20, Y+7	; 0x07
    2b16:	58 85       	ldd	r21, Y+8	; 0x08
    2b18:	c7 01       	movw	r24, r14
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2b20:	2d 81       	ldd	r18, Y+5	; 0x05
    2b22:	3e 81       	ldd	r19, Y+6	; 0x06
    2b24:	4f 81       	ldd	r20, Y+7	; 0x07
    2b26:	58 85       	ldd	r21, Y+8	; 0x08
    2b28:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2b2c:	6b 01       	movw	r12, r22
    2b2e:	7c 01       	movw	r14, r24
    2b30:	2e e2       	ldi	r18, 0x2E	; 46
    2b32:	3f e2       	ldi	r19, 0x2F	; 47
    2b34:	4b e1       	ldi	r20, 0x1B	; 27
    2b36:	5c e4       	ldi	r21, 0x4C	; 76
    2b38:	c5 01       	movw	r24, r10
    2b3a:	b4 01       	movw	r22, r8
    2b3c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2b40:	4b 01       	movw	r8, r22
    2b42:	5c 01       	movw	r10, r24
    2b44:	2b e3       	ldi	r18, 0x3B	; 59
    2b46:	35 e2       	ldi	r19, 0x25	; 37
    2b48:	4a e1       	ldi	r20, 0x1A	; 26
    2b4a:	5c e4       	ldi	r21, 0x4C	; 76
    2b4c:	69 89       	ldd	r22, Y+17	; 0x11
    2b4e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2b58:	9b 01       	movw	r18, r22
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	c5 01       	movw	r24, r10
    2b5e:	b4 01       	movw	r22, r8
    2b60:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2b64:	2d 89       	ldd	r18, Y+21	; 0x15
    2b66:	3e 89       	ldd	r19, Y+22	; 0x16
    2b68:	4f 89       	ldd	r20, Y+23	; 0x17
    2b6a:	58 8d       	ldd	r21, Y+24	; 0x18
    2b6c:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2b70:	9b 01       	movw	r18, r22
    2b72:	ac 01       	movw	r20, r24
    2b74:	c7 01       	movw	r24, r14
    2b76:	b6 01       	movw	r22, r12
    2b78:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2b7c:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    2b80:	4b 01       	movw	r8, r22
    2b82:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2b84:	a3 01       	movw	r20, r6
    2b86:	92 01       	movw	r18, r4
    2b88:	6d 81       	ldd	r22, Y+5	; 0x05
    2b8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8e:	98 85       	ldd	r25, Y+8	; 0x08
    2b90:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2b94:	a5 01       	movw	r20, r10
    2b96:	94 01       	movw	r18, r8
    2b98:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2b9c:	23 96       	adiw	r28, 0x03	; 3
    2b9e:	6c af       	std	Y+60, r22	; 0x3c
    2ba0:	7d af       	std	Y+61, r23	; 0x3d
    2ba2:	8e af       	std	Y+62, r24	; 0x3e
    2ba4:	9f af       	std	Y+63, r25	; 0x3f
    2ba6:	23 97       	sbiw	r28, 0x03	; 3
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2ba8:	20 e8       	ldi	r18, 0x80	; 128
    2baa:	39 ef       	ldi	r19, 0xF9	; 249
    2bac:	44 e8       	ldi	r20, 0x84	; 132
    2bae:	58 e4       	ldi	r21, 0x48	; 72
    2bb0:	69 81       	ldd	r22, Y+1	; 0x01
    2bb2:	7a 81       	ldd	r23, Y+2	; 0x02
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2bbc:	29 85       	ldd	r18, Y+9	; 0x09
    2bbe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bc0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bc2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bc4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2bc8:	6b 01       	movw	r12, r22
    2bca:	7c 01       	movw	r14, r24
    2bcc:	a5 01       	movw	r20, r10
    2bce:	94 01       	movw	r18, r8
    2bd0:	c3 01       	movw	r24, r6
    2bd2:	b2 01       	movw	r22, r4
    2bd4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2bd8:	9b 01       	movw	r18, r22
    2bda:	ac 01       	movw	r20, r24
    2bdc:	c7 01       	movw	r24, r14
    2bde:	b6 01       	movw	r22, r12
    2be0:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2be4:	27 96       	adiw	r28, 0x07	; 7
    2be6:	6c af       	std	Y+60, r22	; 0x3c
    2be8:	7d af       	std	Y+61, r23	; 0x3d
    2bea:	8e af       	std	Y+62, r24	; 0x3e
    2bec:	9f af       	std	Y+63, r25	; 0x3f
    2bee:	27 97       	sbiw	r28, 0x07	; 7
  slat = slat * cd - clat * sd;
    2bf0:	23 96       	adiw	r28, 0x03	; 3
    2bf2:	2c ad       	ldd	r18, Y+60	; 0x3c
    2bf4:	3d ad       	ldd	r19, Y+61	; 0x3d
    2bf6:	4e ad       	ldd	r20, Y+62	; 0x3e
    2bf8:	5f ad       	ldd	r21, Y+63	; 0x3f
    2bfa:	23 97       	sbiw	r28, 0x03	; 3
    2bfc:	69 81       	ldd	r22, Y+1	; 0x01
    2bfe:	7a 81       	ldd	r23, Y+2	; 0x02
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	9c 81       	ldd	r25, Y+4	; 0x04
    2c04:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2c08:	6b 01       	movw	r12, r22
    2c0a:	7c 01       	movw	r14, r24
    2c0c:	27 96       	adiw	r28, 0x07	; 7
    2c0e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c10:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c12:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c14:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c16:	27 97       	sbiw	r28, 0x07	; 7
    2c18:	69 85       	ldd	r22, Y+9	; 0x09
    2c1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c20:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2c24:	9b 01       	movw	r18, r22
    2c26:	ac 01       	movw	r20, r24
    2c28:	c7 01       	movw	r24, r14
    2c2a:	b6 01       	movw	r22, r12
    2c2c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    2c30:	69 8f       	std	Y+25, r22	; 0x19
    2c32:	7a 8f       	std	Y+26, r23	; 0x1a
    2c34:	8b 8f       	std	Y+27, r24	; 0x1b
    2c36:	9c 8f       	std	Y+28, r25	; 0x1c
  clat = clat * cd + one * sd;
    2c38:	23 96       	adiw	r28, 0x03	; 3
    2c3a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c3c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c3e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c40:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c42:	23 97       	sbiw	r28, 0x03	; 3
    2c44:	69 85       	ldd	r22, Y+9	; 0x09
    2c46:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c4c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2c50:	6b 01       	movw	r12, r22
    2c52:	7c 01       	movw	r14, r24
    2c54:	27 96       	adiw	r28, 0x07	; 7
    2c56:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c58:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c5a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c5c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c5e:	27 97       	sbiw	r28, 0x07	; 7
    2c60:	69 81       	ldd	r22, Y+1	; 0x01
    2c62:	7a 81       	ldd	r23, Y+2	; 0x02
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2c6c:	9b 01       	movw	r18, r22
    2c6e:	ac 01       	movw	r20, r24
    2c70:	c7 01       	movw	r24, r14
    2c72:	b6 01       	movw	r22, r12
    2c74:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2c78:	6d 8b       	std	Y+21, r22	; 0x15
    2c7a:	7e 8b       	std	Y+22, r23	; 0x16
    2c7c:	8f 8b       	std	Y+23, r24	; 0x17
    2c7e:	98 8f       	std	Y+24, r25	; 0x18
  
  p[1] = 2.0 * slat;
    2c80:	05 e5       	ldi	r16, 0x55	; 85
    2c82:	13 e0       	ldi	r17, 0x03	; 3
    2c84:	29 8d       	ldd	r18, Y+25	; 0x19
    2c86:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c88:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2c8a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2c8c:	ca 01       	movw	r24, r20
    2c8e:	b9 01       	movw	r22, r18
    2c90:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2c94:	d8 01       	movw	r26, r16
    2c96:	14 96       	adiw	r26, 0x04	; 4
    2c98:	6d 93       	st	X+, r22
    2c9a:	7d 93       	st	X+, r23
    2c9c:	8d 93       	st	X+, r24
    2c9e:	9c 93       	st	X, r25
    2ca0:	17 97       	sbiw	r26, 0x07	; 7
  p[2] = 2.0 * clat;
    2ca2:	2d 89       	ldd	r18, Y+21	; 0x15
    2ca4:	3e 89       	ldd	r19, Y+22	; 0x16
    2ca6:	4f 89       	ldd	r20, Y+23	; 0x17
    2ca8:	58 8d       	ldd	r21, Y+24	; 0x18
    2caa:	ca 01       	movw	r24, r20
    2cac:	b9 01       	movw	r22, r18
    2cae:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	60 87       	std	Z+8, r22	; 0x08
    2cb6:	71 87       	std	Z+9, r23	; 0x09
    2cb8:	82 87       	std	Z+10, r24	; 0x0a
    2cba:	93 87       	std	Z+11, r25	; 0x0b
  p[3] = 4.5 * slat * slat - 1.5;
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e9       	ldi	r20, 0x90	; 144
    2cc2:	50 e4       	ldi	r21, 0x40	; 64
    2cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ccc:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2cd0:	29 8d       	ldd	r18, Y+25	; 0x19
    2cd2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2cd4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2cd6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2cd8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 ec       	ldi	r20, 0xC0	; 192
    2ce2:	5f e3       	ldi	r21, 0x3F	; 63
    2ce4:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    2ce8:	d8 01       	movw	r26, r16
    2cea:	1c 96       	adiw	r26, 0x0c	; 12
    2cec:	6d 93       	st	X+, r22
    2cee:	7d 93       	st	X+, r23
    2cf0:	8d 93       	st	X+, r24
    2cf2:	9c 93       	st	X, r25
    2cf4:	1f 97       	sbiw	r26, 0x0f	; 15
  p[4] = sqrt(27) * clat * slat;
    2cf6:	21 ee       	ldi	r18, 0xE1	; 225
    2cf8:	36 e4       	ldi	r19, 0x46	; 70
    2cfa:	46 ea       	ldi	r20, 0xA6	; 166
    2cfc:	50 e4       	ldi	r21, 0x40	; 64
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2d0a:	29 8d       	ldd	r18, Y+25	; 0x19
    2d0c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2d0e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2d10:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2d12:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2d16:	f8 01       	movw	r30, r16
    2d18:	60 8b       	std	Z+16, r22	; 0x10
    2d1a:	71 8b       	std	Z+17, r23	; 0x11
    2d1c:	82 8b       	std	Z+18, r24	; 0x12
    2d1e:	93 8b       	std	Z+19, r25	; 0x13
  q[1] = -1 * clat;
    2d20:	0d e8       	ldi	r16, 0x8D	; 141
    2d22:	12 e0       	ldi	r17, 0x02	; 2
    2d24:	8d 89       	ldd	r24, Y+21	; 0x15
    2d26:	9e 89       	ldd	r25, Y+22	; 0x16
    2d28:	af 89       	ldd	r26, Y+23	; 0x17
    2d2a:	b8 8d       	ldd	r27, Y+24	; 0x18
    2d2c:	b0 58       	subi	r27, 0x80	; 128
    2d2e:	f8 01       	movw	r30, r16
    2d30:	84 83       	std	Z+4, r24	; 0x04
    2d32:	95 83       	std	Z+5, r25	; 0x05
    2d34:	a6 83       	std	Z+6, r26	; 0x06
    2d36:	b7 83       	std	Z+7, r27	; 0x07
  q[2] = slat;
    2d38:	89 8d       	ldd	r24, Y+25	; 0x19
    2d3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d3c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2d3e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2d40:	80 87       	std	Z+8, r24	; 0x08
    2d42:	91 87       	std	Z+9, r25	; 0x09
    2d44:	a2 87       	std	Z+10, r26	; 0x0a
    2d46:	b3 87       	std	Z+11, r27	; 0x0b
  q[3] = -3.0 * clat * slat;
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e4       	ldi	r20, 0x40	; 64
    2d4e:	50 ec       	ldi	r21, 0xC0	; 192
    2d50:	6d 89       	ldd	r22, Y+21	; 0x15
    2d52:	7e 89       	ldd	r23, Y+22	; 0x16
    2d54:	8f 89       	ldd	r24, Y+23	; 0x17
    2d56:	98 8d       	ldd	r25, Y+24	; 0x18
    2d58:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2d5c:	29 8d       	ldd	r18, Y+25	; 0x19
    2d5e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2d60:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2d62:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2d64:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2d68:	d8 01       	movw	r26, r16
    2d6a:	1c 96       	adiw	r26, 0x0c	; 12
    2d6c:	6d 93       	st	X+, r22
    2d6e:	7d 93       	st	X+, r23
    2d70:	8d 93       	st	X+, r24
    2d72:	9c 93       	st	X, r25
    2d74:	1f 97       	sbiw	r26, 0x0f	; 15
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2d76:	29 8d       	ldd	r18, Y+25	; 0x19
    2d78:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2d7a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2d7c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2d7e:	ca 01       	movw	r24, r20
    2d80:	b9 01       	movw	r22, r18
    2d82:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2d86:	6b 01       	movw	r12, r22
    2d88:	7c 01       	movw	r14, r24
    2d8a:	2d 89       	ldd	r18, Y+21	; 0x15
    2d8c:	3e 89       	ldd	r19, Y+22	; 0x16
    2d8e:	4f 89       	ldd	r20, Y+23	; 0x17
    2d90:	58 8d       	ldd	r21, Y+24	; 0x18
    2d92:	ca 01       	movw	r24, r20
    2d94:	b9 01       	movw	r22, r18
    2d96:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2d9a:	9b 01       	movw	r18, r22
    2d9c:	ac 01       	movw	r20, r24
    2d9e:	c7 01       	movw	r24, r14
    2da0:	b6 01       	movw	r22, r12
    2da2:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    2da6:	27 ed       	ldi	r18, 0xD7	; 215
    2da8:	33 eb       	ldi	r19, 0xB3	; 179
    2daa:	4d ed       	ldi	r20, 0xDD	; 221
    2dac:	5f e3       	ldi	r21, 0x3F	; 63
    2dae:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2db2:	f8 01       	movw	r30, r16
    2db4:	60 8b       	std	Z+16, r22	; 0x10
    2db6:	71 8b       	std	Z+17, r23	; 0x11
    2db8:	82 8b       	std	Z+18, r24	; 0x12
    2dba:	93 8b       	std	Z+19, r25	; 0x13
  
  ratio = RE / r;
    2dbc:	a5 01       	movw	r20, r10
    2dbe:	94 01       	movw	r18, r8
    2dc0:	6a e9       	ldi	r22, 0x9A	; 154
    2dc2:	79 e1       	ldi	r23, 0x19	; 25
    2dc4:	87 ec       	ldi	r24, 0xC7	; 199
    2dc6:	95 e4       	ldi	r25, 0x45	; 69
    2dc8:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2dcc:	6b af       	std	Y+59, r22	; 0x3b
    2dce:	7c af       	std	Y+60, r23	; 0x3c
    2dd0:	8d af       	std	Y+61, r24	; 0x3d
    2dd2:	9e af       	std	Y+62, r25	; 0x3e
  
  max = (order * (order + 3)) / 2;
    2dd4:	23 2d       	mov	r18, r3
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	a9 01       	movw	r20, r18
    2dda:	4d 5f       	subi	r20, 0xFD	; 253
    2ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dde:	24 9f       	mul	r18, r20
    2de0:	c0 01       	movw	r24, r0
    2de2:	25 9f       	mul	r18, r21
    2de4:	90 0d       	add	r25, r0
    2de6:	34 9f       	mul	r19, r20
    2de8:	90 0d       	add	r25, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	99 23       	and	r25, r25
    2dee:	0c f4       	brge	.+2      	; 0x2df2 <igrf+0x468>
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	95 95       	asr	r25
    2df4:	87 95       	ror	r24
    2df6:	8e ab       	std	Y+54, r24	; 0x36
  for(k = 1; k <= max; k++)
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <igrf+0x474>
    2dfc:	f6 c3       	rjmp	.+2028   	; 0x35ea <igrf+0xc60>
    2dfe:	41 2c       	mov	r4, r1
    2e00:	21 2c       	mov	r2, r1
    2e02:	33 24       	eor	r3, r3
    2e04:	33 94       	inc	r3
    2e06:	f1 e0       	ldi	r31, 0x01	; 1
    2e08:	f9 8b       	std	Y+17, r31	; 0x11
    2e0a:	19 a6       	std	Y+41, r1	; 0x29
    2e0c:	1a a6       	std	Y+42, r1	; 0x2a
    2e0e:	1b a6       	std	Y+43, r1	; 0x2b
    2e10:	1c a6       	std	Y+44, r1	; 0x2c
    2e12:	1d a2       	std	Y+37, r1	; 0x25
    2e14:	1e a2       	std	Y+38, r1	; 0x26
    2e16:	1f a2       	std	Y+39, r1	; 0x27
    2e18:	18 a6       	std	Y+40, r1	; 0x28
    2e1a:	1f aa       	std	Y+55, r1	; 0x37
    2e1c:	18 ae       	std	Y+56, r1	; 0x38
    2e1e:	19 ae       	std	Y+57, r1	; 0x39
    2e20:	1a ae       	std	Y+58, r1	; 0x3a
    2e22:	19 a2       	std	Y+33, r1	; 0x21
    2e24:	1a a2       	std	Y+34, r1	; 0x22
    2e26:	1b a2       	std	Y+35, r1	; 0x23
    2e28:	1c a2       	std	Y+36, r1	; 0x24
      if(m == n)
      {
        one = sqrt(1 - (0.5 / fm));
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    2e2a:	29 86       	std	Y+9, r2	; 0x09
    2e2c:	4d a6       	std	Y+45, r4	; 0x2d
    2e2e:	23 2c       	mov	r2, r3
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2e30:	29 85       	ldd	r18, Y+9	; 0x09
    2e32:	22 15       	cp	r18, r2
    2e34:	d8 f4       	brcc	.+54     	; 0x2e6c <igrf+0x4e2>
    {
      m = 0;
      n++;
    2e36:	2f 5f       	subi	r18, 0xFF	; 255
    2e38:	29 87       	std	Y+9, r18	; 0x09
      rr = pow(ratio, n + 2);
    2e3a:	62 2f       	mov	r22, r18
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	6e 5f       	subi	r22, 0xFE	; 254
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	07 2e       	mov	r0, r23
    2e44:	00 0c       	add	r0, r0
    2e46:	88 0b       	sbc	r24, r24
    2e48:	99 0b       	sbc	r25, r25
    2e4a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    2e4e:	9b 01       	movw	r18, r22
    2e50:	ac 01       	movw	r20, r24
    2e52:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e54:	7c ad       	ldd	r23, Y+60	; 0x3c
    2e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e5a:	0e 94 37 34 	call	0x686e	; 0x686e <pow>
    2e5e:	69 a7       	std	Y+41, r22	; 0x29
    2e60:	7a a7       	std	Y+42, r23	; 0x2a
    2e62:	8b a7       	std	Y+43, r24	; 0x2b
    2e64:	9c a7       	std	Y+44, r25	; 0x2c
      fn = n;
    2e66:	39 85       	ldd	r19, Y+9	; 0x09
    2e68:	3d a7       	std	Y+45, r19	; 0x2d
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    2e6a:	21 2c       	mov	r2, r1
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2e6c:	44 e0       	ldi	r20, 0x04	; 4
    2e6e:	43 15       	cp	r20, r3
    2e70:	08 f0       	brcs	.+2      	; 0x2e74 <igrf+0x4ea>
    2e72:	1c c2       	rjmp	.+1080   	; 0x32ac <igrf+0x922>
    {
      if(m == n)
    2e74:	89 85       	ldd	r24, Y+9	; 0x09
    2e76:	28 12       	cpse	r2, r24
    2e78:	01 c1       	rjmp	.+514    	; 0x307c <igrf+0x6f2>
      {
        one = sqrt(1 - (0.5 / fm));
    2e7a:	42 2c       	mov	r4, r2
    2e7c:	51 2c       	mov	r5, r1
    2e7e:	b2 01       	movw	r22, r4
    2e80:	05 2c       	mov	r0, r5
    2e82:	00 0c       	add	r0, r0
    2e84:	88 0b       	sbc	r24, r24
    2e86:	99 0b       	sbc	r25, r25
    2e88:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    2e8c:	6b 01       	movw	r12, r22
    2e8e:	7c 01       	movw	r14, r24
    2e90:	9b 01       	movw	r18, r22
    2e92:	ac 01       	movw	r20, r24
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	9f e3       	ldi	r25, 0x3F	; 63
    2e9c:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2ea0:	4b 01       	movw	r8, r22
    2ea2:	5c 01       	movw	r10, r24
    2ea4:	a5 01       	movw	r20, r10
    2ea6:	94 01       	movw	r18, r8
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	80 e8       	ldi	r24, 0x80	; 128
    2eae:	9f e3       	ldi	r25, 0x3F	; 63
    2eb0:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    2eb4:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    2eb8:	69 83       	std	Y+1, r22	; 0x01
    2eba:	7a 83       	std	Y+2, r23	; 0x02
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    2ec0:	63 2c       	mov	r6, r3
    2ec2:	71 2c       	mov	r7, r1
    2ec4:	43 01       	movw	r8, r6
    2ec6:	84 18       	sub	r8, r4
    2ec8:	95 08       	sbc	r9, r5
    2eca:	91 e0       	ldi	r25, 0x01	; 1
    2ecc:	89 1a       	sub	r8, r25
    2ece:	91 08       	sbc	r9, r1
    2ed0:	66 0c       	add	r6, r6
    2ed2:	77 1c       	adc	r7, r7
    2ed4:	66 0c       	add	r6, r6
    2ed6:	77 1c       	adc	r7, r7
    2ed8:	d3 01       	movw	r26, r6
    2eda:	ab 5a       	subi	r26, 0xAB	; 171
    2edc:	bc 4f       	sbci	r27, 0xFC	; 252
    2ede:	5d 01       	movw	r10, r26
    2ee0:	a7 01       	movw	r20, r14
    2ee2:	96 01       	movw	r18, r12
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	80 e8       	ldi	r24, 0x80	; 128
    2eea:	9f e3       	ldi	r25, 0x3F	; 63
    2eec:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e8       	ldi	r20, 0x80	; 128
    2ef6:	5f e3       	ldi	r21, 0x3F	; 63
    2ef8:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2efc:	29 81       	ldd	r18, Y+1	; 0x01
    2efe:	3a 81       	ldd	r19, Y+2	; 0x02
    2f00:	4b 81       	ldd	r20, Y+3	; 0x03
    2f02:	5c 81       	ldd	r21, Y+4	; 0x04
    2f04:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2f08:	2d 89       	ldd	r18, Y+21	; 0x15
    2f0a:	3e 89       	ldd	r19, Y+22	; 0x16
    2f0c:	4f 89       	ldd	r20, Y+23	; 0x17
    2f0e:	58 8d       	ldd	r21, Y+24	; 0x18
    2f10:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2f14:	88 0c       	add	r8, r8
    2f16:	99 1c       	adc	r9, r9
    2f18:	88 0c       	add	r8, r8
    2f1a:	99 1c       	adc	r9, r9
    2f1c:	84 01       	movw	r16, r8
    2f1e:	0b 5a       	subi	r16, 0xAB	; 171
    2f20:	1c 4f       	sbci	r17, 0xFC	; 252
    2f22:	f8 01       	movw	r30, r16
    2f24:	20 81       	ld	r18, Z
    2f26:	31 81       	ldd	r19, Z+1	; 0x01
    2f28:	42 81       	ldd	r20, Z+2	; 0x02
    2f2a:	53 81       	ldd	r21, Z+3	; 0x03
    2f2c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2f30:	d5 01       	movw	r26, r10
    2f32:	6d 93       	st	X+, r22
    2f34:	7d 93       	st	X+, r23
    2f36:	8d 93       	st	X+, r24
    2f38:	9c 93       	st	X, r25
    2f3a:	13 97       	sbiw	r26, 0x03	; 3
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    2f3c:	f3 01       	movw	r30, r6
    2f3e:	e3 57       	subi	r30, 0x73	; 115
    2f40:	fd 4f       	sbci	r31, 0xFD	; 253
    2f42:	5f 01       	movw	r10, r30
    2f44:	f4 01       	movw	r30, r8
    2f46:	e3 57       	subi	r30, 0x73	; 115
    2f48:	fd 4f       	sbci	r31, 0xFD	; 253
    2f4a:	20 81       	ld	r18, Z
    2f4c:	31 81       	ldd	r19, Z+1	; 0x01
    2f4e:	42 81       	ldd	r20, Z+2	; 0x02
    2f50:	53 81       	ldd	r21, Z+3	; 0x03
    2f52:	6d 89       	ldd	r22, Y+21	; 0x15
    2f54:	7e 89       	ldd	r23, Y+22	; 0x16
    2f56:	8f 89       	ldd	r24, Y+23	; 0x17
    2f58:	98 8d       	ldd	r25, Y+24	; 0x18
    2f5a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2f5e:	3b 01       	movw	r6, r22
    2f60:	4c 01       	movw	r8, r24
    2f62:	d8 01       	movw	r26, r16
    2f64:	2d 91       	ld	r18, X+
    2f66:	3d 91       	ld	r19, X+
    2f68:	4d 91       	ld	r20, X+
    2f6a:	5c 91       	ld	r21, X
    2f6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f74:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2f78:	a7 01       	movw	r20, r14
    2f7a:	96 01       	movw	r18, r12
    2f7c:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    2f80:	9b 01       	movw	r18, r22
    2f82:	ac 01       	movw	r20, r24
    2f84:	c4 01       	movw	r24, r8
    2f86:	b3 01       	movw	r22, r6
    2f88:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2f8c:	29 81       	ldd	r18, Y+1	; 0x01
    2f8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f90:	4b 81       	ldd	r20, Y+3	; 0x03
    2f92:	5c 81       	ldd	r21, Y+4	; 0x04
    2f94:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2f98:	f5 01       	movw	r30, r10
    2f9a:	60 83       	st	Z, r22
    2f9c:	71 83       	std	Z+1, r23	; 0x01
    2f9e:	82 83       	std	Z+2, r24	; 0x02
    2fa0:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    2fa2:	82 01       	movw	r16, r4
    2fa4:	01 50       	subi	r16, 0x01	; 1
    2fa6:	11 09       	sbc	r17, r1
    2fa8:	c0 90 55 02 	lds	r12, 0x0255
    2fac:	d0 90 56 02 	lds	r13, 0x0256
    2fb0:	e0 90 57 02 	lds	r14, 0x0257
    2fb4:	f0 90 58 02 	lds	r15, 0x0258
    2fb8:	00 0f       	add	r16, r16
    2fba:	11 1f       	adc	r17, r17
    2fbc:	00 0f       	add	r16, r16
    2fbe:	11 1f       	adc	r17, r17
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	ef 5a       	subi	r30, 0xAF	; 175
    2fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    2fc6:	80 80       	ld	r8, Z
    2fc8:	91 80       	ldd	r9, Z+1	; 0x01
    2fca:	a2 80       	ldd	r10, Z+2	; 0x02
    2fcc:	b3 80       	ldd	r11, Z+3	; 0x03
    2fce:	44 0c       	add	r4, r4
    2fd0:	55 1c       	adc	r5, r5
    2fd2:	44 0c       	add	r4, r4
    2fd4:	55 1c       	adc	r5, r5
    2fd6:	92 01       	movw	r18, r4
    2fd8:	2b 5e       	subi	r18, 0xEB	; 235
    2fda:	3d 4f       	sbci	r19, 0xFD	; 253
    2fdc:	39 01       	movw	r6, r18
    2fde:	0b 5e       	subi	r16, 0xEB	; 235
    2fe0:	1d 4f       	sbci	r17, 0xFD	; 253
    2fe2:	d8 01       	movw	r26, r16
    2fe4:	2d 91       	ld	r18, X+
    2fe6:	3d 91       	ld	r19, X+
    2fe8:	4d 91       	ld	r20, X+
    2fea:	5c 91       	ld	r21, X
    2fec:	c7 01       	movw	r24, r14
    2fee:	b6 01       	movw	r22, r12
    2ff0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    2ff4:	69 83       	std	Y+1, r22	; 0x01
    2ff6:	7a 83       	std	Y+2, r23	; 0x02
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	20 91 19 02 	lds	r18, 0x0219
    3000:	30 91 1a 02 	lds	r19, 0x021A
    3004:	40 91 1b 02 	lds	r20, 0x021B
    3008:	50 91 1c 02 	lds	r21, 0x021C
    300c:	c5 01       	movw	r24, r10
    300e:	b4 01       	movw	r22, r8
    3010:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3014:	9b 01       	movw	r18, r22
    3016:	ac 01       	movw	r20, r24
    3018:	69 81       	ldd	r22, Y+1	; 0x01
    301a:	7a 81       	ldd	r23, Y+2	; 0x02
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3024:	f3 01       	movw	r30, r6
    3026:	60 83       	st	Z, r22
    3028:	71 83       	std	Z+1, r23	; 0x01
    302a:	82 83       	std	Z+2, r24	; 0x02
    302c:	93 83       	std	Z+3, r25	; 0x03
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    302e:	92 01       	movw	r18, r4
    3030:	2f 5a       	subi	r18, 0xAF	; 175
    3032:	3d 4f       	sbci	r19, 0xFD	; 253
    3034:	29 01       	movw	r4, r18
    3036:	a5 01       	movw	r20, r10
    3038:	94 01       	movw	r18, r8
    303a:	c7 01       	movw	r24, r14
    303c:	b6 01       	movw	r22, r12
    303e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3042:	6b 01       	movw	r12, r22
    3044:	7c 01       	movw	r14, r24
    3046:	20 91 19 02 	lds	r18, 0x0219
    304a:	30 91 1a 02 	lds	r19, 0x021A
    304e:	40 91 1b 02 	lds	r20, 0x021B
    3052:	50 91 1c 02 	lds	r21, 0x021C
    3056:	d8 01       	movw	r26, r16
    3058:	6d 91       	ld	r22, X+
    305a:	7d 91       	ld	r23, X+
    305c:	8d 91       	ld	r24, X+
    305e:	9c 91       	ld	r25, X
    3060:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3064:	9b 01       	movw	r18, r22
    3066:	ac 01       	movw	r20, r24
    3068:	c7 01       	movw	r24, r14
    306a:	b6 01       	movw	r22, r12
    306c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3070:	f2 01       	movw	r30, r4
    3072:	60 83       	st	Z, r22
    3074:	71 83       	std	Z+1, r23	; 0x01
    3076:	82 83       	std	Z+2, r24	; 0x02
    3078:	93 83       	std	Z+3, r25	; 0x03
    307a:	18 c1       	rjmp	.+560    	; 0x32ac <igrf+0x922>
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    307c:	fd a5       	ldd	r31, Y+45	; 0x2d
    307e:	0f 2f       	mov	r16, r31
    3080:	10 e0       	ldi	r17, 0x00	; 0
    3082:	22 9c       	mul	r2, r2
    3084:	60 01       	movw	r12, r0
    3086:	11 24       	eor	r1, r1
    3088:	00 9f       	mul	r16, r16
    308a:	40 01       	movw	r8, r0
    308c:	01 9f       	mul	r16, r17
    308e:	90 0c       	add	r9, r0
    3090:	90 0c       	add	r9, r0
    3092:	11 24       	eor	r1, r1
    3094:	8c 18       	sub	r8, r12
    3096:	9d 08       	sbc	r9, r13
    3098:	09 2c       	mov	r0, r9
    309a:	00 0c       	add	r0, r0
    309c:	aa 08       	sbc	r10, r10
    309e:	bb 08       	sbc	r11, r11
    30a0:	c5 01       	movw	r24, r10
    30a2:	b4 01       	movw	r22, r8
    30a4:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    30a8:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    30ac:	4b 01       	movw	r8, r22
    30ae:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    30b0:	b8 01       	movw	r22, r16
    30b2:	11 0f       	add	r17, r17
    30b4:	88 0b       	sbc	r24, r24
    30b6:	99 0b       	sbc	r25, r25
    30b8:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    30bc:	69 83       	std	Y+1, r22	; 0x01
    30be:	7a 83       	std	Y+2, r23	; 0x02
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    30c2:	9c 83       	std	Y+4, r25	; 0x04
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    30d0:	6d 83       	std	Y+5, r22	; 0x05
    30d2:	7e 83       	std	Y+6, r23	; 0x06
    30d4:	8f 83       	std	Y+7, r24	; 0x07
    30d6:	98 87       	std	Y+8, r25	; 0x08
    30d8:	9b 01       	movw	r18, r22
    30da:	ac 01       	movw	r20, r24
    30dc:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    30e0:	2b 01       	movw	r4, r22
    30e2:	3c 01       	movw	r6, r24
    30e4:	0d 2c       	mov	r0, r13
    30e6:	00 0c       	add	r0, r0
    30e8:	ee 08       	sbc	r14, r14
    30ea:	ff 08       	sbc	r15, r15
    30ec:	c7 01       	movw	r24, r14
    30ee:	b6 01       	movw	r22, r12
    30f0:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    30f4:	9b 01       	movw	r18, r22
    30f6:	ac 01       	movw	r20, r24
    30f8:	c3 01       	movw	r24, r6
    30fa:	b2 01       	movw	r22, r4
    30fc:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3100:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    3104:	a5 01       	movw	r20, r10
    3106:	94 01       	movw	r18, r8
    3108:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    310c:	6b 01       	movw	r12, r22
    310e:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    3110:	29 81       	ldd	r18, Y+1	; 0x01
    3112:	3a 81       	ldd	r19, Y+2	; 0x02
    3114:	4b 81       	ldd	r20, Y+3	; 0x03
    3116:	5c 81       	ldd	r21, Y+4	; 0x04
    3118:	ca 01       	movw	r24, r20
    311a:	b9 01       	movw	r22, r18
    311c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    312c:	a5 01       	movw	r20, r10
    312e:	94 01       	movw	r18, r8
    3130:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3134:	6d 87       	std	Y+13, r22	; 0x0d
    3136:	7e 87       	std	Y+14, r23	; 0x0e
    3138:	8f 87       	std	Y+15, r24	; 0x0f
    313a:	98 8b       	std	Y+16, r25	; 0x10
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    313c:	83 2d       	mov	r24, r3
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	49 85       	ldd	r20, Y+9	; 0x09
    3142:	24 2f       	mov	r18, r20
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	4c 01       	movw	r8, r24
    3148:	82 1a       	sub	r8, r18
    314a:	93 0a       	sbc	r9, r19
    314c:	84 01       	movw	r16, r8
    314e:	02 1b       	sub	r16, r18
    3150:	13 0b       	sbc	r17, r19
    3152:	0f 5f       	subi	r16, 0xFF	; 255
    3154:	1f 4f       	sbci	r17, 0xFF	; 255
    3156:	3c 01       	movw	r6, r24
    3158:	66 0c       	add	r6, r6
    315a:	77 1c       	adc	r7, r7
    315c:	66 0c       	add	r6, r6
    315e:	77 1c       	adc	r7, r7
    3160:	c3 01       	movw	r24, r6
    3162:	8b 5a       	subi	r24, 0xAB	; 171
    3164:	9c 4f       	sbci	r25, 0xFC	; 252
    3166:	5c 01       	movw	r10, r24
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	69 81       	ldd	r22, Y+1	; 0x01
    3172:	7a 81       	ldd	r23, Y+2	; 0x02
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    317c:	6d 8f       	std	Y+29, r22	; 0x1d
    317e:	7e 8f       	std	Y+30, r23	; 0x1e
    3180:	8f 8f       	std	Y+31, r24	; 0x1f
    3182:	98 a3       	std	Y+32, r25	; 0x20
    3184:	29 8d       	ldd	r18, Y+25	; 0x19
    3186:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3188:	4b 8d       	ldd	r20, Y+27	; 0x1b
    318a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    318c:	6d 85       	ldd	r22, Y+13	; 0x0d
    318e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3190:	8f 85       	ldd	r24, Y+15	; 0x0f
    3192:	98 89       	ldd	r25, Y+16	; 0x10
    3194:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3198:	88 0c       	add	r8, r8
    319a:	99 1c       	adc	r9, r9
    319c:	88 0c       	add	r8, r8
    319e:	99 1c       	adc	r9, r9
    31a0:	d4 01       	movw	r26, r8
    31a2:	ab 5a       	subi	r26, 0xAB	; 171
    31a4:	bc 4f       	sbci	r27, 0xFC	; 252
    31a6:	2d 01       	movw	r4, r26
    31a8:	2d 91       	ld	r18, X+
    31aa:	3d 91       	ld	r19, X+
    31ac:	4d 91       	ld	r20, X+
    31ae:	5c 91       	ld	r21, X
    31b0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    31b4:	29 81       	ldd	r18, Y+1	; 0x01
    31b6:	3a 81       	ldd	r19, Y+2	; 0x02
    31b8:	4b 81       	ldd	r20, Y+3	; 0x03
    31ba:	5c 81       	ldd	r21, Y+4	; 0x04
    31bc:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    31c0:	6a ab       	std	Y+50, r22	; 0x32
    31c2:	7b ab       	std	Y+51, r23	; 0x33
    31c4:	8c ab       	std	Y+52, r24	; 0x34
    31c6:	9d ab       	std	Y+53, r25	; 0x35
    31c8:	00 0f       	add	r16, r16
    31ca:	11 1f       	adc	r17, r17
    31cc:	00 0f       	add	r16, r16
    31ce:	11 1f       	adc	r17, r17
    31d0:	f8 01       	movw	r30, r16
    31d2:	eb 5a       	subi	r30, 0xAB	; 171
    31d4:	fc 4f       	sbci	r31, 0xFC	; 252
    31d6:	20 81       	ld	r18, Z
    31d8:	31 81       	ldd	r19, Z+1	; 0x01
    31da:	42 81       	ldd	r20, Z+2	; 0x02
    31dc:	53 81       	ldd	r21, Z+3	; 0x03
    31de:	c7 01       	movw	r24, r14
    31e0:	b6 01       	movw	r22, r12
    31e2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    31e6:	2d 81       	ldd	r18, Y+5	; 0x05
    31e8:	3e 81       	ldd	r19, Y+6	; 0x06
    31ea:	4f 81       	ldd	r20, Y+7	; 0x07
    31ec:	58 85       	ldd	r21, Y+8	; 0x08
    31ee:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    31f2:	9b 01       	movw	r18, r22
    31f4:	ac 01       	movw	r20, r24
    31f6:	6a a9       	ldd	r22, Y+50	; 0x32
    31f8:	7b a9       	ldd	r23, Y+51	; 0x33
    31fa:	8c a9       	ldd	r24, Y+52	; 0x34
    31fc:	9d a9       	ldd	r25, Y+53	; 0x35
    31fe:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3202:	9b 01       	movw	r18, r22
    3204:	ac 01       	movw	r20, r24
    3206:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3208:	7e 8d       	ldd	r23, Y+30	; 0x1e
    320a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    320c:	98 a1       	ldd	r25, Y+32	; 0x20
    320e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3212:	f5 01       	movw	r30, r10
    3214:	60 83       	st	Z, r22
    3216:	71 83       	std	Z+1, r23	; 0x01
    3218:	82 83       	std	Z+2, r24	; 0x02
    321a:	93 83       	std	Z+3, r25	; 0x03
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    321c:	93 01       	movw	r18, r6
    321e:	23 57       	subi	r18, 0x73	; 115
    3220:	3d 4f       	sbci	r19, 0xFD	; 253
    3222:	39 01       	movw	r6, r18
    3224:	f4 01       	movw	r30, r8
    3226:	e3 57       	subi	r30, 0x73	; 115
    3228:	fd 4f       	sbci	r31, 0xFD	; 253
    322a:	20 81       	ld	r18, Z
    322c:	31 81       	ldd	r19, Z+1	; 0x01
    322e:	42 81       	ldd	r20, Z+2	; 0x02
    3230:	53 81       	ldd	r21, Z+3	; 0x03
    3232:	69 8d       	ldd	r22, Y+25	; 0x19
    3234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    323e:	4b 01       	movw	r8, r22
    3240:	5c 01       	movw	r10, r24
    3242:	d2 01       	movw	r26, r4
    3244:	2d 91       	ld	r18, X+
    3246:	3d 91       	ld	r19, X+
    3248:	4d 91       	ld	r20, X+
    324a:	5c 91       	ld	r21, X
    324c:	6d 89       	ldd	r22, Y+21	; 0x15
    324e:	7e 89       	ldd	r23, Y+22	; 0x16
    3250:	8f 89       	ldd	r24, Y+23	; 0x17
    3252:	98 8d       	ldd	r25, Y+24	; 0x18
    3254:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3258:	29 81       	ldd	r18, Y+1	; 0x01
    325a:	3a 81       	ldd	r19, Y+2	; 0x02
    325c:	4b 81       	ldd	r20, Y+3	; 0x03
    325e:	5c 81       	ldd	r21, Y+4	; 0x04
    3260:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3264:	9b 01       	movw	r18, r22
    3266:	ac 01       	movw	r20, r24
    3268:	c5 01       	movw	r24, r10
    326a:	b4 01       	movw	r22, r8
    326c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3270:	2d 85       	ldd	r18, Y+13	; 0x0d
    3272:	3e 85       	ldd	r19, Y+14	; 0x0e
    3274:	4f 85       	ldd	r20, Y+15	; 0x0f
    3276:	58 89       	ldd	r21, Y+16	; 0x10
    3278:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    327c:	4b 01       	movw	r8, r22
    327e:	5c 01       	movw	r10, r24
    3280:	f8 01       	movw	r30, r16
    3282:	e3 57       	subi	r30, 0x73	; 115
    3284:	fd 4f       	sbci	r31, 0xFD	; 253
    3286:	20 81       	ld	r18, Z
    3288:	31 81       	ldd	r19, Z+1	; 0x01
    328a:	42 81       	ldd	r20, Z+2	; 0x02
    328c:	53 81       	ldd	r21, Z+3	; 0x03
    328e:	c7 01       	movw	r24, r14
    3290:	b6 01       	movw	r22, r12
    3292:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3296:	9b 01       	movw	r18, r22
    3298:	ac 01       	movw	r20, r24
    329a:	c5 01       	movw	r24, r10
    329c:	b4 01       	movw	r22, r8
    329e:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    32a2:	f3 01       	movw	r30, r6
    32a4:	60 83       	st	Z, r22
    32a6:	71 83       	std	Z+1, r23	; 0x01
    32a8:	82 83       	std	Z+2, r24	; 0x02
    32aa:	93 83       	std	Z+3, r25	; 0x03
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    32ac:	f9 89       	ldd	r31, Y+17	; 0x11
    32ae:	0f 2f       	mov	r16, r31
    32b0:	10 e0       	ldi	r17, 0x00	; 0
    32b2:	c8 01       	movw	r24, r16
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	fc 01       	movw	r30, r24
    32be:	e4 54       	subi	r30, 0x44	; 68
    32c0:	fb 4f       	sbci	r31, 0xFB	; 251
    32c2:	c5 90       	lpm	r12, Z+
    32c4:	d5 90       	lpm	r13, Z+
    32c6:	e5 90       	lpm	r14, Z+
    32c8:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    32ca:	fc 01       	movw	r30, r24
    32cc:	e4 55       	subi	r30, 0x54	; 84
    32ce:	fe 4f       	sbci	r31, 0xFE	; 254
    32d0:	25 91       	lpm	r18, Z+
    32d2:	35 91       	lpm	r19, Z+
    32d4:	45 91       	lpm	r20, Z+
    32d6:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    32d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    32da:	7f a5       	ldd	r23, Y+47	; 0x2f
    32dc:	88 a9       	ldd	r24, Y+48	; 0x30
    32de:	99 a9       	ldd	r25, Y+49	; 0x31
    32e0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    32e4:	9b 01       	movw	r18, r22
    32e6:	ac 01       	movw	r20, r24
    32e8:	c7 01       	movw	r24, r14
    32ea:	b6 01       	movw	r22, r12
    32ec:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    32f0:	29 a5       	ldd	r18, Y+41	; 0x29
    32f2:	3a a5       	ldd	r19, Y+42	; 0x2a
    32f4:	4b a5       	ldd	r20, Y+43	; 0x2b
    32f6:	5c a5       	ldd	r21, Y+44	; 0x2c
    32f8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    32fc:	69 83       	std	Y+1, r22	; 0x01
    32fe:	7a 83       	std	Y+2, r23	; 0x02
    3300:	8b 83       	std	Y+3, r24	; 0x03
    3302:	9c 83       	std	Y+4, r25	; 0x04
    
    
    if(m == 0)
    3304:	21 10       	cpse	r2, r1
    3306:	38 c0       	rjmp	.+112    	; 0x3378 <igrf+0x9ee>
    {
      x += one * q[k];
    3308:	03 2d       	mov	r16, r3
    330a:	10 e0       	ldi	r17, 0x00	; 0
    330c:	00 0f       	add	r16, r16
    330e:	11 1f       	adc	r17, r17
    3310:	00 0f       	add	r16, r16
    3312:	11 1f       	adc	r17, r17
    3314:	f8 01       	movw	r30, r16
    3316:	e3 57       	subi	r30, 0x73	; 115
    3318:	fd 4f       	sbci	r31, 0xFD	; 253
    331a:	20 81       	ld	r18, Z
    331c:	31 81       	ldd	r19, Z+1	; 0x01
    331e:	42 81       	ldd	r20, Z+2	; 0x02
    3320:	53 81       	ldd	r21, Z+3	; 0x03
    3322:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3326:	9b 01       	movw	r18, r22
    3328:	ac 01       	movw	r20, r24
    332a:	69 a1       	ldd	r22, Y+33	; 0x21
    332c:	7a a1       	ldd	r23, Y+34	; 0x22
    332e:	8b a1       	ldd	r24, Y+35	; 0x23
    3330:	9c a1       	ldd	r25, Y+36	; 0x24
    3332:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3336:	69 a3       	std	Y+33, r22	; 0x21
    3338:	7a a3       	std	Y+34, r23	; 0x22
    333a:	8b a3       	std	Y+35, r24	; 0x23
    333c:	9c a3       	std	Y+36, r25	; 0x24
      z -= one * p[k];
    333e:	f8 01       	movw	r30, r16
    3340:	eb 5a       	subi	r30, 0xAB	; 171
    3342:	fc 4f       	sbci	r31, 0xFC	; 252
    3344:	20 81       	ld	r18, Z
    3346:	31 81       	ldd	r19, Z+1	; 0x01
    3348:	42 81       	ldd	r20, Z+2	; 0x02
    334a:	53 81       	ldd	r21, Z+3	; 0x03
    334c:	69 81       	ldd	r22, Y+1	; 0x01
    334e:	7a 81       	ldd	r23, Y+2	; 0x02
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	9c 81       	ldd	r25, Y+4	; 0x04
    3354:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3358:	9b 01       	movw	r18, r22
    335a:	ac 01       	movw	r20, r24
    335c:	6d a1       	ldd	r22, Y+37	; 0x25
    335e:	7e a1       	ldd	r23, Y+38	; 0x26
    3360:	8f a1       	ldd	r24, Y+39	; 0x27
    3362:	98 a5       	ldd	r25, Y+40	; 0x28
    3364:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3368:	6d a3       	std	Y+37, r22	; 0x25
    336a:	7e a3       	std	Y+38, r23	; 0x26
    336c:	8f a3       	std	Y+39, r24	; 0x27
    336e:	98 a7       	std	Y+40, r25	; 0x28
      l++;
    3370:	29 89       	ldd	r18, Y+17	; 0x11
    3372:	2f 5f       	subi	r18, 0xFF	; 255
    3374:	29 8b       	std	Y+17, r18	; 0x11
    3376:	32 c1       	rjmp	.+612    	; 0x35dc <igrf+0xc52>
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    3378:	c8 01       	movw	r24, r16
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	fc 01       	movw	r30, r24
    3386:	e4 54       	subi	r30, 0x44	; 68
    3388:	fb 4f       	sbci	r31, 0xFB	; 251
    338a:	85 90       	lpm	r8, Z+
    338c:	95 90       	lpm	r9, Z+
    338e:	a5 90       	lpm	r10, Z+
    3390:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    3392:	84 55       	subi	r24, 0x54	; 84
    3394:	9e 4f       	sbci	r25, 0xFE	; 254
    3396:	fc 01       	movw	r30, r24
    3398:	25 91       	lpm	r18, Z+
    339a:	35 91       	lpm	r19, Z+
    339c:	45 91       	lpm	r20, Z+
    339e:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    33a0:	6e a5       	ldd	r22, Y+46	; 0x2e
    33a2:	7f a5       	ldd	r23, Y+47	; 0x2f
    33a4:	88 a9       	ldd	r24, Y+48	; 0x30
    33a6:	99 a9       	ldd	r25, Y+49	; 0x31
    33a8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    33ac:	9b 01       	movw	r18, r22
    33ae:	ac 01       	movw	r20, r24
    33b0:	c5 01       	movw	r24, r10
    33b2:	b4 01       	movw	r22, r8
    33b4:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    33b8:	29 a5       	ldd	r18, Y+41	; 0x29
    33ba:	3a a5       	ldd	r19, Y+42	; 0x2a
    33bc:	4b a5       	ldd	r20, Y+43	; 0x2b
    33be:	5c a5       	ldd	r21, Y+44	; 0x2c
    33c0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    33c4:	6d 87       	std	Y+13, r22	; 0x0d
    33c6:	7e 87       	std	Y+14, r23	; 0x0e
    33c8:	8f 87       	std	Y+15, r24	; 0x0f
    33ca:	98 8b       	std	Y+16, r25	; 0x10
      three = one * cl[m] + two * sl[m];
    33cc:	02 2d       	mov	r16, r2
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	c8 01       	movw	r24, r16
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	fc 01       	movw	r30, r24
    33dc:	ef 5a       	subi	r30, 0xAF	; 175
    33de:	fd 4f       	sbci	r31, 0xFD	; 253
    33e0:	c0 80       	ld	r12, Z
    33e2:	d1 80       	ldd	r13, Z+1	; 0x01
    33e4:	e2 80       	ldd	r14, Z+2	; 0x02
    33e6:	f3 80       	ldd	r15, Z+3	; 0x03
    33e8:	fc 01       	movw	r30, r24
    33ea:	eb 5e       	subi	r30, 0xEB	; 235
    33ec:	fd 4f       	sbci	r31, 0xFD	; 253
    33ee:	40 80       	ld	r4, Z
    33f0:	51 80       	ldd	r5, Z+1	; 0x01
    33f2:	62 80       	ldd	r6, Z+2	; 0x02
    33f4:	73 80       	ldd	r7, Z+3	; 0x03
    33f6:	29 81       	ldd	r18, Y+1	; 0x01
    33f8:	3a 81       	ldd	r19, Y+2	; 0x02
    33fa:	4b 81       	ldd	r20, Y+3	; 0x03
    33fc:	5c 81       	ldd	r21, Y+4	; 0x04
    33fe:	c7 01       	movw	r24, r14
    3400:	b6 01       	movw	r22, r12
    3402:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3406:	4b 01       	movw	r8, r22
    3408:	5c 01       	movw	r10, r24
    340a:	2d 85       	ldd	r18, Y+13	; 0x0d
    340c:	3e 85       	ldd	r19, Y+14	; 0x0e
    340e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3410:	58 89       	ldd	r21, Y+16	; 0x10
    3412:	c3 01       	movw	r24, r6
    3414:	b2 01       	movw	r22, r4
    3416:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    341a:	9b 01       	movw	r18, r22
    341c:	ac 01       	movw	r20, r24
    341e:	c5 01       	movw	r24, r10
    3420:	b4 01       	movw	r22, r8
    3422:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3426:	6d 83       	std	Y+5, r22	; 0x05
    3428:	7e 83       	std	Y+6, r23	; 0x06
    342a:	8f 83       	std	Y+7, r24	; 0x07
    342c:	98 87       	std	Y+8, r25	; 0x08
      x += three * q[k];
    342e:	a3 2c       	mov	r10, r3
    3430:	b1 2c       	mov	r11, r1
    3432:	aa 0c       	add	r10, r10
    3434:	bb 1c       	adc	r11, r11
    3436:	aa 0c       	add	r10, r10
    3438:	bb 1c       	adc	r11, r11
    343a:	95 01       	movw	r18, r10
    343c:	23 57       	subi	r18, 0x73	; 115
    343e:	3d 4f       	sbci	r19, 0xFD	; 253
    3440:	d9 01       	movw	r26, r18
    3442:	8d 91       	ld	r24, X+
    3444:	9d 91       	ld	r25, X+
    3446:	0d 90       	ld	r0, X+
    3448:	bc 91       	ld	r27, X
    344a:	a0 2d       	mov	r26, r0
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
    344e:	9e 8f       	std	Y+30, r25	; 0x1e
    3450:	af 8f       	std	Y+31, r26	; 0x1f
    3452:	b8 a3       	std	Y+32, r27	; 0x20
    3454:	2d 81       	ldd	r18, Y+5	; 0x05
    3456:	3e 81       	ldd	r19, Y+6	; 0x06
    3458:	4f 81       	ldd	r20, Y+7	; 0x07
    345a:	58 85       	ldd	r21, Y+8	; 0x08
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3464:	9b 01       	movw	r18, r22
    3466:	ac 01       	movw	r20, r24
    3468:	69 a1       	ldd	r22, Y+33	; 0x21
    346a:	7a a1       	ldd	r23, Y+34	; 0x22
    346c:	8b a1       	ldd	r24, Y+35	; 0x23
    346e:	9c a1       	ldd	r25, Y+36	; 0x24
    3470:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3474:	69 a3       	std	Y+33, r22	; 0x21
    3476:	7a a3       	std	Y+34, r23	; 0x22
    3478:	8b a3       	std	Y+35, r24	; 0x23
    347a:	9c a3       	std	Y+36, r25	; 0x24
      z -= three * p[k];
    347c:	f5 01       	movw	r30, r10
    347e:	eb 5a       	subi	r30, 0xAB	; 171
    3480:	fc 4f       	sbci	r31, 0xFC	; 252
    3482:	80 80       	ld	r8, Z
    3484:	91 80       	ldd	r9, Z+1	; 0x01
    3486:	a2 80       	ldd	r10, Z+2	; 0x02
    3488:	b3 80       	ldd	r11, Z+3	; 0x03
    348a:	2d 81       	ldd	r18, Y+5	; 0x05
    348c:	3e 81       	ldd	r19, Y+6	; 0x06
    348e:	4f 81       	ldd	r20, Y+7	; 0x07
    3490:	58 85       	ldd	r21, Y+8	; 0x08
    3492:	c5 01       	movw	r24, r10
    3494:	b4 01       	movw	r22, r8
    3496:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    349a:	9b 01       	movw	r18, r22
    349c:	ac 01       	movw	r20, r24
    349e:	6d a1       	ldd	r22, Y+37	; 0x25
    34a0:	7e a1       	ldd	r23, Y+38	; 0x26
    34a2:	8f a1       	ldd	r24, Y+39	; 0x27
    34a4:	98 a5       	ldd	r25, Y+40	; 0x28
    34a6:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    34aa:	6d a3       	std	Y+37, r22	; 0x25
    34ac:	7e a3       	std	Y+38, r23	; 0x26
    34ae:	8f a3       	std	Y+39, r24	; 0x27
    34b0:	98 a7       	std	Y+40, r25	; 0x28
      
      if(clat > 0)
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	a9 01       	movw	r20, r18
    34b8:	6d 89       	ldd	r22, Y+21	; 0x15
    34ba:	7e 89       	ldd	r23, Y+22	; 0x16
    34bc:	8f 89       	ldd	r24, Y+23	; 0x17
    34be:	98 8d       	ldd	r25, Y+24	; 0x18
    34c0:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	0c f0       	brlt	.+2      	; 0x34ca <igrf+0xb40>
    34c8:	54 c0       	rjmp	.+168    	; 0x3572 <igrf+0xbe8>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    34ca:	a3 01       	movw	r20, r6
    34cc:	92 01       	movw	r18, r4
    34ce:	69 81       	ldd	r22, Y+1	; 0x01
    34d0:	7a 81       	ldd	r23, Y+2	; 0x02
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    34da:	2b 01       	movw	r4, r22
    34dc:	3c 01       	movw	r6, r24
    34de:	a7 01       	movw	r20, r14
    34e0:	96 01       	movw	r18, r12
    34e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    34e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    34e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e8:	98 89       	ldd	r25, Y+16	; 0x10
    34ea:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	c3 01       	movw	r24, r6
    34f4:	b2 01       	movw	r22, r4
    34f6:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    34fa:	6b 01       	movw	r12, r22
    34fc:	7c 01       	movw	r14, r24
    34fe:	b8 01       	movw	r22, r16
    3500:	11 0f       	add	r17, r17
    3502:	88 0b       	sbc	r24, r24
    3504:	99 0b       	sbc	r25, r25
    3506:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    350a:	9b 01       	movw	r18, r22
    350c:	ac 01       	movw	r20, r24
    350e:	c7 01       	movw	r24, r14
    3510:	b6 01       	movw	r22, r12
    3512:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
    351a:	c5 01       	movw	r24, r10
    351c:	b4 01       	movw	r22, r8
    351e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3522:	6b 01       	movw	r12, r22
    3524:	7c 01       	movw	r14, r24
    3526:	bd a5       	ldd	r27, Y+45	; 0x2d
    3528:	6b 2f       	mov	r22, r27
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e8       	ldi	r20, 0x80	; 128
    353a:	5f e3       	ldi	r21, 0x3F	; 63
    353c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3540:	2d 89       	ldd	r18, Y+21	; 0x15
    3542:	3e 89       	ldd	r19, Y+22	; 0x16
    3544:	4f 89       	ldd	r20, Y+23	; 0x17
    3546:	58 8d       	ldd	r21, Y+24	; 0x18
    3548:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    354c:	9b 01       	movw	r18, r22
    354e:	ac 01       	movw	r20, r24
    3550:	c7 01       	movw	r24, r14
    3552:	b6 01       	movw	r22, r12
    3554:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3558:	9b 01       	movw	r18, r22
    355a:	ac 01       	movw	r20, r24
    355c:	6f a9       	ldd	r22, Y+55	; 0x37
    355e:	78 ad       	ldd	r23, Y+56	; 0x38
    3560:	89 ad       	ldd	r24, Y+57	; 0x39
    3562:	9a ad       	ldd	r25, Y+58	; 0x3a
    3564:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3568:	6f ab       	std	Y+55, r22	; 0x37
    356a:	78 af       	std	Y+56, r23	; 0x38
    356c:	89 af       	std	Y+57, r24	; 0x39
    356e:	9a af       	std	Y+58, r25	; 0x3a
    3570:	32 c0       	rjmp	.+100    	; 0x35d6 <igrf+0xc4c>
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    3572:	a3 01       	movw	r20, r6
    3574:	92 01       	movw	r18, r4
    3576:	69 81       	ldd	r22, Y+1	; 0x01
    3578:	7a 81       	ldd	r23, Y+2	; 0x02
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	9c 81       	ldd	r25, Y+4	; 0x04
    357e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3582:	4b 01       	movw	r8, r22
    3584:	5c 01       	movw	r10, r24
    3586:	a7 01       	movw	r20, r14
    3588:	96 01       	movw	r18, r12
    358a:	6d 85       	ldd	r22, Y+13	; 0x0d
    358c:	7e 85       	ldd	r23, Y+14	; 0x0e
    358e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3590:	98 89       	ldd	r25, Y+16	; 0x10
    3592:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3596:	9b 01       	movw	r18, r22
    3598:	ac 01       	movw	r20, r24
    359a:	c5 01       	movw	r24, r10
    359c:	b4 01       	movw	r22, r8
    359e:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    35a2:	9b 01       	movw	r18, r22
    35a4:	ac 01       	movw	r20, r24
    35a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    35a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    35aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35ac:	98 a1       	ldd	r25, Y+32	; 0x20
    35ae:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    35b2:	29 8d       	ldd	r18, Y+25	; 0x19
    35b4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35b6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    35b8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    35ba:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    35be:	9b 01       	movw	r18, r22
    35c0:	ac 01       	movw	r20, r24
    35c2:	6f a9       	ldd	r22, Y+55	; 0x37
    35c4:	78 ad       	ldd	r23, Y+56	; 0x38
    35c6:	89 ad       	ldd	r24, Y+57	; 0x39
    35c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    35ca:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    35ce:	6f ab       	std	Y+55, r22	; 0x37
    35d0:	78 af       	std	Y+56, r23	; 0x38
    35d2:	89 af       	std	Y+57, r24	; 0x39
    35d4:	9a af       	std	Y+58, r25	; 0x3a
        
      l += 2;
    35d6:	e9 89       	ldd	r30, Y+17	; 0x11
    35d8:	ee 5f       	subi	r30, 0xFE	; 254
    35da:	e9 8b       	std	Y+17, r30	; 0x11
    }
    m++;
    35dc:	23 94       	inc	r2
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    35de:	33 94       	inc	r3
    35e0:	fe a9       	ldd	r31, Y+54	; 0x36
    35e2:	f3 15       	cp	r31, r3
    35e4:	08 f0       	brcs	.+2      	; 0x35e8 <igrf+0xc5e>
    35e6:	24 cc       	rjmp	.-1976   	; 0x2e30 <igrf+0x4a6>
    35e8:	0c c0       	rjmp	.+24     	; 0x3602 <igrf+0xc78>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  double lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;// floatch
  double x = 0.0, y = 0.0, z = 0.0, one, two, three, four;// floatch
    35ea:	1d a2       	std	Y+37, r1	; 0x25
    35ec:	1e a2       	std	Y+38, r1	; 0x26
    35ee:	1f a2       	std	Y+39, r1	; 0x27
    35f0:	18 a6       	std	Y+40, r1	; 0x28
    35f2:	1f aa       	std	Y+55, r1	; 0x37
    35f4:	18 ae       	std	Y+56, r1	; 0x38
    35f6:	19 ae       	std	Y+57, r1	; 0x39
    35f8:	1a ae       	std	Y+58, r1	; 0x3a
    35fa:	19 a2       	std	Y+33, r1	; 0x21
    35fc:	1a a2       	std	Y+34, r1	; 0x22
    35fe:	1b a2       	std	Y+35, r1	; 0x23
    3600:	1c a2       	std	Y+36, r1	; 0x24
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3602:	23 96       	adiw	r28, 0x03	; 3
    3604:	2c ad       	ldd	r18, Y+60	; 0x3c
    3606:	3d ad       	ldd	r19, Y+61	; 0x3d
    3608:	4e ad       	ldd	r20, Y+62	; 0x3e
    360a:	5f ad       	ldd	r21, Y+63	; 0x3f
    360c:	23 97       	sbiw	r28, 0x03	; 3
    360e:	6d a1       	ldd	r22, Y+37	; 0x25
    3610:	7e a1       	ldd	r23, Y+38	; 0x26
    3612:	8f a1       	ldd	r24, Y+39	; 0x27
    3614:	98 a5       	ldd	r25, Y+40	; 0x28
    3616:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    361a:	6b 01       	movw	r12, r22
    361c:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    361e:	23 96       	adiw	r28, 0x03	; 3
    3620:	2c ad       	ldd	r18, Y+60	; 0x3c
    3622:	3d ad       	ldd	r19, Y+61	; 0x3d
    3624:	4e ad       	ldd	r20, Y+62	; 0x3e
    3626:	5f ad       	ldd	r21, Y+63	; 0x3f
    3628:	23 97       	sbiw	r28, 0x03	; 3
    362a:	69 a1       	ldd	r22, Y+33	; 0x21
    362c:	7a a1       	ldd	r23, Y+34	; 0x22
    362e:	8b a1       	ldd	r24, Y+35	; 0x23
    3630:	9c a1       	ldd	r25, Y+36	; 0x24
    3632:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3636:	4b 01       	movw	r8, r22
    3638:	5c 01       	movw	r10, r24
    363a:	27 96       	adiw	r28, 0x07	; 7
    363c:	2c ad       	ldd	r18, Y+60	; 0x3c
    363e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3640:	4e ad       	ldd	r20, Y+62	; 0x3e
    3642:	5f ad       	ldd	r21, Y+63	; 0x3f
    3644:	27 97       	sbiw	r28, 0x07	; 7
    3646:	6d a1       	ldd	r22, Y+37	; 0x25
    3648:	7e a1       	ldd	r23, Y+38	; 0x26
    364a:	8f a1       	ldd	r24, Y+39	; 0x27
    364c:	98 a5       	ldd	r25, Y+40	; 0x28
    364e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3652:	9b 01       	movw	r18, r22
    3654:	ac 01       	movw	r20, r24
    3656:	c5 01       	movw	r24, r10
    3658:	b4 01       	movw	r22, r8
    365a:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    365e:	29 96       	adiw	r28, 0x09	; 9
    3660:	ae ad       	ldd	r26, Y+62	; 0x3e
    3662:	bf ad       	ldd	r27, Y+63	; 0x3f
    3664:	29 97       	sbiw	r28, 0x09	; 9
    3666:	6d 93       	st	X+, r22
    3668:	7d 93       	st	X+, r23
    366a:	8d 93       	st	X+, r24
    366c:	9c 93       	st	X, r25
    366e:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    3670:	8f a9       	ldd	r24, Y+55	; 0x37
    3672:	98 ad       	ldd	r25, Y+56	; 0x38
    3674:	a9 ad       	ldd	r26, Y+57	; 0x39
    3676:	ba ad       	ldd	r27, Y+58	; 0x3a
    3678:	29 96       	adiw	r28, 0x09	; 9
    367a:	ee ad       	ldd	r30, Y+62	; 0x3e
    367c:	ff ad       	ldd	r31, Y+63	; 0x3f
    367e:	29 97       	sbiw	r28, 0x09	; 9
    3680:	84 83       	std	Z+4, r24	; 0x04
    3682:	95 83       	std	Z+5, r25	; 0x05
    3684:	a6 83       	std	Z+6, r26	; 0x06
    3686:	b7 83       	std	Z+7, r27	; 0x07
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3688:	29 a1       	ldd	r18, Y+33	; 0x21
    368a:	3a a1       	ldd	r19, Y+34	; 0x22
    368c:	4b a1       	ldd	r20, Y+35	; 0x23
    368e:	5c a1       	ldd	r21, Y+36	; 0x24
    3690:	27 96       	adiw	r28, 0x07	; 7
    3692:	6c ad       	ldd	r22, Y+60	; 0x3c
    3694:	7d ad       	ldd	r23, Y+61	; 0x3d
    3696:	8e ad       	ldd	r24, Y+62	; 0x3e
    3698:	9f ad       	ldd	r25, Y+63	; 0x3f
    369a:	27 97       	sbiw	r28, 0x07	; 7
    369c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	c7 01       	movw	r24, r14
    36a6:	b6 01       	movw	r22, r12
    36a8:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    36ac:	29 96       	adiw	r28, 0x09	; 9
    36ae:	ae ad       	ldd	r26, Y+62	; 0x3e
    36b0:	bf ad       	ldd	r27, Y+63	; 0x3f
    36b2:	29 97       	sbiw	r28, 0x09	; 9
    36b4:	18 96       	adiw	r26, 0x08	; 8
    36b6:	6d 93       	st	X+, r22
    36b8:	7d 93       	st	X+, r23
    36ba:	8d 93       	st	X+, r24
    36bc:	9c 93       	st	X, r25
    36be:	1b 97       	sbiw	r26, 0x0b	; 11
     
}
    36c0:	c8 5b       	subi	r28, 0xB8	; 184
    36c2:	df 4f       	sbci	r29, 0xFF	; 255
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	1f 91       	pop	r17
    36d4:	0f 91       	pop	r16
    36d6:	ff 90       	pop	r15
    36d8:	ef 90       	pop	r14
    36da:	df 90       	pop	r13
    36dc:	cf 90       	pop	r12
    36de:	bf 90       	pop	r11
    36e0:	af 90       	pop	r10
    36e2:	9f 90       	pop	r9
    36e4:	8f 90       	pop	r8
    36e6:	7f 90       	pop	r7
    36e8:	6f 90       	pop	r6
    36ea:	5f 90       	pop	r5
    36ec:	4f 90       	pop	r4
    36ee:	3f 90       	pop	r3
    36f0:	2f 90       	pop	r2
    36f2:	08 95       	ret

000036f4 <init_UART_MM>:
uint8_t receive_MM(void)
{
  ///Wait for a Byte to arrive
  while (!(UCSR1A & _BV(RXC1)));
  return UDR1; 
}
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	cb e9       	ldi	r28, 0x9B	; 155
    36fa:	d0 e0       	ldi	r29, 0x00	; 0
    36fc:	18 82       	st	Y, r1
    36fe:	aa e9       	ldi	r26, 0x9A	; 154
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	1c 92       	st	X, r1
    3704:	ed e9       	ldi	r30, 0x9D	; 157
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	10 82       	st	Z, r1
    370a:	88 81       	ld	r24, Y
    370c:	82 60       	ori	r24, 0x02	; 2
    370e:	88 83       	st	Y, r24
    3710:	8c 91       	ld	r24, X
    3712:	88 69       	ori	r24, 0x98	; 152
    3714:	8c 93       	st	X, r24
    3716:	80 81       	ld	r24, Z
    3718:	8e 60       	ori	r24, 0x0E	; 14
    371a:	80 83       	st	Z, r24
    371c:	87 e6       	ldi	r24, 0x67	; 103
    371e:	80 93 99 00 	sts	0x0099, r24
    3722:	10 92 98 00 	sts	0x0098, r1
    3726:	df 91       	pop	r29
    3728:	cf 91       	pop	r28
    372a:	08 95       	ret

0000372c <__vector_30>:
    372c:	1f 92       	push	r1
    372e:	0f 92       	push	r0
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	0f 92       	push	r0
    3734:	11 24       	eor	r1, r1
    3736:	0b b6       	in	r0, 0x3b	; 59
    3738:	0f 92       	push	r0
    373a:	2f 93       	push	r18
    373c:	3f 93       	push	r19
    373e:	4f 93       	push	r20
    3740:	5f 93       	push	r21
    3742:	6f 93       	push	r22
    3744:	7f 93       	push	r23
    3746:	8f 93       	push	r24
    3748:	9f 93       	push	r25
    374a:	af 93       	push	r26
    374c:	bf 93       	push	r27
    374e:	ef 93       	push	r30
    3750:	ff 93       	push	r31
    3752:	80 91 23 04 	lds	r24, 0x0423
    3756:	90 91 9c 00 	lds	r25, 0x009C
    375a:	e8 2f       	mov	r30, r24
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	e0 56       	subi	r30, 0x60	; 96
    3760:	fb 4f       	sbci	r31, 0xFB	; 251
    3762:	90 83       	st	Z, r25
    3764:	8f 5f       	subi	r24, 0xFF	; 255
    3766:	87 30       	cpi	r24, 0x07	; 7
    3768:	19 f0       	breq	.+6      	; 0x3770 <__vector_30+0x44>
    376a:	80 93 23 04 	sts	0x0423, r24
    376e:	9d c0       	rjmp	.+314    	; 0x38aa <__vector_30+0x17e>
    3770:	10 92 23 04 	sts	0x0423, r1
    3774:	e0 ea       	ldi	r30, 0xA0	; 160
    3776:	f4 e0       	ldi	r31, 0x04	; 4
    3778:	80 81       	ld	r24, Z
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	98 2f       	mov	r25, r24
    377e:	88 27       	eor	r24, r24
    3780:	90 93 22 04 	sts	0x0422, r25
    3784:	80 93 21 04 	sts	0x0421, r24
    3788:	80 91 21 04 	lds	r24, 0x0421
    378c:	90 91 22 04 	lds	r25, 0x0422
    3790:	88 27       	eor	r24, r24
    3792:	90 93 22 04 	sts	0x0422, r25
    3796:	80 93 21 04 	sts	0x0421, r24
    379a:	80 91 21 04 	lds	r24, 0x0421
    379e:	90 91 22 04 	lds	r25, 0x0422
    37a2:	21 81       	ldd	r18, Z+1	; 0x01
    37a4:	82 2b       	or	r24, r18
    37a6:	90 93 22 04 	sts	0x0422, r25
    37aa:	80 93 21 04 	sts	0x0421, r24
    37ae:	82 81       	ldd	r24, Z+2	; 0x02
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	98 2f       	mov	r25, r24
    37b4:	88 27       	eor	r24, r24
    37b6:	90 93 20 04 	sts	0x0420, r25
    37ba:	80 93 1f 04 	sts	0x041F, r24
    37be:	80 91 1f 04 	lds	r24, 0x041F
    37c2:	90 91 20 04 	lds	r25, 0x0420
    37c6:	88 27       	eor	r24, r24
    37c8:	90 93 20 04 	sts	0x0420, r25
    37cc:	80 93 1f 04 	sts	0x041F, r24
    37d0:	80 91 1f 04 	lds	r24, 0x041F
    37d4:	90 91 20 04 	lds	r25, 0x0420
    37d8:	23 81       	ldd	r18, Z+3	; 0x03
    37da:	82 2b       	or	r24, r18
    37dc:	90 93 20 04 	sts	0x0420, r25
    37e0:	80 93 1f 04 	sts	0x041F, r24
    37e4:	84 81       	ldd	r24, Z+4	; 0x04
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	98 2f       	mov	r25, r24
    37ea:	88 27       	eor	r24, r24
    37ec:	90 93 1e 04 	sts	0x041E, r25
    37f0:	80 93 1d 04 	sts	0x041D, r24
    37f4:	80 91 1d 04 	lds	r24, 0x041D
    37f8:	90 91 1e 04 	lds	r25, 0x041E
    37fc:	88 27       	eor	r24, r24
    37fe:	90 93 1e 04 	sts	0x041E, r25
    3802:	80 93 1d 04 	sts	0x041D, r24
    3806:	80 91 1d 04 	lds	r24, 0x041D
    380a:	90 91 1e 04 	lds	r25, 0x041E
    380e:	25 81       	ldd	r18, Z+5	; 0x05
    3810:	82 2b       	or	r24, r18
    3812:	90 93 1e 04 	sts	0x041E, r25
    3816:	80 93 1d 04 	sts	0x041D, r24
    381a:	60 91 21 04 	lds	r22, 0x0421
    381e:	70 91 22 04 	lds	r23, 0x0422
    3822:	07 2e       	mov	r0, r23
    3824:	00 0c       	add	r0, r0
    3826:	88 0b       	sbc	r24, r24
    3828:	99 0b       	sbc	r25, r25
    382a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e6       	ldi	r19, 0x60	; 96
    3832:	4a e6       	ldi	r20, 0x6A	; 106
    3834:	56 e4       	ldi	r21, 0x46	; 70
    3836:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    383a:	60 93 08 05 	sts	0x0508, r22
    383e:	70 93 09 05 	sts	0x0509, r23
    3842:	80 93 0a 05 	sts	0x050A, r24
    3846:	90 93 0b 05 	sts	0x050B, r25
    384a:	60 91 1f 04 	lds	r22, 0x041F
    384e:	70 91 20 04 	lds	r23, 0x0420
    3852:	07 2e       	mov	r0, r23
    3854:	00 0c       	add	r0, r0
    3856:	88 0b       	sbc	r24, r24
    3858:	99 0b       	sbc	r25, r25
    385a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e6       	ldi	r19, 0x60	; 96
    3862:	4a e6       	ldi	r20, 0x6A	; 106
    3864:	56 e4       	ldi	r21, 0x46	; 70
    3866:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    386a:	60 93 0c 05 	sts	0x050C, r22
    386e:	70 93 0d 05 	sts	0x050D, r23
    3872:	80 93 0e 05 	sts	0x050E, r24
    3876:	90 93 0f 05 	sts	0x050F, r25
    387a:	60 91 1d 04 	lds	r22, 0x041D
    387e:	70 91 1e 04 	lds	r23, 0x041E
    3882:	07 2e       	mov	r0, r23
    3884:	00 0c       	add	r0, r0
    3886:	88 0b       	sbc	r24, r24
    3888:	99 0b       	sbc	r25, r25
    388a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e6       	ldi	r19, 0x60	; 96
    3892:	4a e6       	ldi	r20, 0x6A	; 106
    3894:	56 e4       	ldi	r21, 0x46	; 70
    3896:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    389a:	60 93 10 05 	sts	0x0510, r22
    389e:	70 93 11 05 	sts	0x0511, r23
    38a2:	80 93 12 05 	sts	0x0512, r24
    38a6:	90 93 13 05 	sts	0x0513, r25
    38aa:	ff 91       	pop	r31
    38ac:	ef 91       	pop	r30
    38ae:	bf 91       	pop	r27
    38b0:	af 91       	pop	r26
    38b2:	9f 91       	pop	r25
    38b4:	8f 91       	pop	r24
    38b6:	7f 91       	pop	r23
    38b8:	6f 91       	pop	r22
    38ba:	5f 91       	pop	r21
    38bc:	4f 91       	pop	r20
    38be:	3f 91       	pop	r19
    38c0:	2f 91       	pop	r18
    38c2:	0f 90       	pop	r0
    38c4:	0b be       	out	0x3b, r0	; 59
    38c6:	0f 90       	pop	r0
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	0f 90       	pop	r0
    38cc:	1f 90       	pop	r1
    38ce:	18 95       	reti

000038d0 <send_MM_cmd>:

void send_MM_cmd(char *data)
{
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
  ///Send the char array till stop
  while((*data) != '\0')
    38d4:	fc 01       	movw	r30, r24
    38d6:	20 81       	ld	r18, Z
    38d8:	22 23       	and	r18, r18
    38da:	69 f0       	breq	.+26     	; 0x38f6 <send_MM_cmd+0x26>
    38dc:	dc 01       	movw	r26, r24
    38de:	11 96       	adiw	r26, 0x01	; 1
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    38e0:	eb e9       	ldi	r30, 0x9B	; 155
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    ///* Start transmission
    UDR1 = *data;
    38e4:	cc e9       	ldi	r28, 0x9C	; 156
    38e6:	d0 e0       	ldi	r29, 0x00	; 0
{
  ///Send the char array till stop
  while((*data) != '\0')
  {
    ///* Wait for empty transmit buffer 
    while ( !(UCSR1A & (_BV(UDRE1))) );
    38e8:	90 81       	ld	r25, Z
    38ea:	95 ff       	sbrs	r25, 5
    38ec:	fd cf       	rjmp	.-6      	; 0x38e8 <send_MM_cmd+0x18>
    ///* Start transmission
    UDR1 = *data;
    38ee:	28 83       	st	Y, r18
}

void send_MM_cmd(char *data)
{
  ///Send the char array till stop
  while((*data) != '\0')
    38f0:	2d 91       	ld	r18, X+
    38f2:	21 11       	cpse	r18, r1
    38f4:	f9 cf       	rjmp	.-14     	; 0x38e8 <send_MM_cmd+0x18>
    while ( !(UCSR1A & (_BV(UDRE1))) );
    ///* Start transmission
    UDR1 = *data;
    data++;
  }
}
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	08 95       	ret

000038fc <poll_MM>:
  ///Temporary variables for magnetometer readings
  
  uint8_t tmp;
  
  ///Send the poll command
 send_MM_cmd("*00P\r");
    38fc:	84 e9       	ldi	r24, 0x94	; 148
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	e7 cf       	rjmp	.-50     	; 0x38d0 <send_MM_cmd>
    3902:	08 95       	ret

00003904 <copy_vector>:
#include "common.h"
#include "mathutil.h"


void copy_vector(vector v_src, vector v_dest)
{
    3904:	dc 01       	movw	r26, r24
    3906:	fb 01       	movw	r30, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3908:	4d 91       	ld	r20, X+
    390a:	5d 91       	ld	r21, X+
    390c:	6d 91       	ld	r22, X+
    390e:	7c 91       	ld	r23, X
    3910:	13 97       	sbiw	r26, 0x03	; 3
    3912:	40 83       	st	Z, r20
    3914:	51 83       	std	Z+1, r21	; 0x01
    3916:	62 83       	std	Z+2, r22	; 0x02
    3918:	73 83       	std	Z+3, r23	; 0x03
    391a:	14 96       	adiw	r26, 0x04	; 4
    391c:	4d 91       	ld	r20, X+
    391e:	5d 91       	ld	r21, X+
    3920:	6d 91       	ld	r22, X+
    3922:	7c 91       	ld	r23, X
    3924:	17 97       	sbiw	r26, 0x07	; 7
    3926:	44 83       	std	Z+4, r20	; 0x04
    3928:	55 83       	std	Z+5, r21	; 0x05
    392a:	66 83       	std	Z+6, r22	; 0x06
    392c:	77 83       	std	Z+7, r23	; 0x07
    392e:	18 96       	adiw	r26, 0x08	; 8
    3930:	8d 91       	ld	r24, X+
    3932:	9d 91       	ld	r25, X+
    3934:	0d 90       	ld	r0, X+
    3936:	bc 91       	ld	r27, X
    3938:	a0 2d       	mov	r26, r0
    393a:	80 87       	std	Z+8, r24	; 0x08
    393c:	91 87       	std	Z+9, r25	; 0x09
    393e:	a2 87       	std	Z+10, r26	; 0x0a
    3940:	b3 87       	std	Z+11, r27	; 0x0b
    3942:	08 95       	ret

00003944 <copy_quaternion>:
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3944:	fc 01       	movw	r30, r24
    3946:	a6 2f       	mov	r26, r22
    3948:	b7 2f       	mov	r27, r23
    394a:	40 96       	adiw	r24, 0x10	; 16
  uint8_t i;
  for(i = 0; i < 4; i++)
    q_dest[i] = q_src[i];
    394c:	41 91       	ld	r20, Z+
    394e:	51 91       	ld	r21, Z+
    3950:	61 91       	ld	r22, Z+
    3952:	71 91       	ld	r23, Z+
    3954:	4d 93       	st	X+, r20
    3956:	5d 93       	st	X+, r21
    3958:	6d 93       	st	X+, r22
    395a:	7d 93       	st	X+, r23
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    395c:	e8 17       	cp	r30, r24
    395e:	f9 07       	cpc	r31, r25
    3960:	a9 f7       	brne	.-22     	; 0x394c <copy_quaternion+0x8>
    q_dest[i] = q_src[i];
}
    3962:	08 95       	ret

00003964 <vector_norm>:


double vector_norm(vector v)// floatch //add sqrt
{
    3964:	4f 92       	push	r4
    3966:	5f 92       	push	r5
    3968:	6f 92       	push	r6
    396a:	7f 92       	push	r7
    396c:	8f 92       	push	r8
    396e:	9f 92       	push	r9
    3970:	af 92       	push	r10
    3972:	bf 92       	push	r11
    3974:	cf 92       	push	r12
    3976:	df 92       	push	r13
    3978:	ef 92       	push	r14
    397a:	ff 92       	push	r15
    397c:	cf 93       	push	r28
    397e:	df 93       	push	r29
    3980:	00 d0       	rcall	.+0      	; 0x3982 <vector_norm+0x1e>
    3982:	00 d0       	rcall	.+0      	; 0x3984 <vector_norm+0x20>
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    398a:	80 80       	ld	r8, Z
    398c:	91 80       	ldd	r9, Z+1	; 0x01
    398e:	a2 80       	ldd	r10, Z+2	; 0x02
    3990:	b3 80       	ldd	r11, Z+3	; 0x03
    3992:	c4 80       	ldd	r12, Z+4	; 0x04
    3994:	d5 80       	ldd	r13, Z+5	; 0x05
    3996:	e6 80       	ldd	r14, Z+6	; 0x06
    3998:	f7 80       	ldd	r15, Z+7	; 0x07
    399a:	40 84       	ldd	r4, Z+8	; 0x08
    399c:	51 84       	ldd	r5, Z+9	; 0x09
    399e:	62 84       	ldd	r6, Z+10	; 0x0a
    39a0:	73 84       	ldd	r7, Z+11	; 0x0b
    39a2:	a5 01       	movw	r20, r10
    39a4:	94 01       	movw	r18, r8
    39a6:	c5 01       	movw	r24, r10
    39a8:	b4 01       	movw	r22, r8
    39aa:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    39ae:	69 83       	std	Y+1, r22	; 0x01
    39b0:	7a 83       	std	Y+2, r23	; 0x02
    39b2:	8b 83       	std	Y+3, r24	; 0x03
    39b4:	9c 83       	std	Y+4, r25	; 0x04
    39b6:	a7 01       	movw	r20, r14
    39b8:	96 01       	movw	r18, r12
    39ba:	c7 01       	movw	r24, r14
    39bc:	b6 01       	movw	r22, r12
    39be:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    39c2:	9b 01       	movw	r18, r22
    39c4:	ac 01       	movw	r20, r24
    39c6:	69 81       	ldd	r22, Y+1	; 0x01
    39c8:	7a 81       	ldd	r23, Y+2	; 0x02
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	9c 81       	ldd	r25, Y+4	; 0x04
    39ce:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    39d2:	69 83       	std	Y+1, r22	; 0x01
    39d4:	7a 83       	std	Y+2, r23	; 0x02
    39d6:	8b 83       	std	Y+3, r24	; 0x03
    39d8:	9c 83       	std	Y+4, r25	; 0x04
    39da:	a5 01       	movw	r20, r10
    39dc:	94 01       	movw	r18, r8
    39de:	c5 01       	movw	r24, r10
    39e0:	b4 01       	movw	r22, r8
    39e2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    39e6:	4b 01       	movw	r8, r22
    39e8:	5c 01       	movw	r10, r24
    39ea:	a7 01       	movw	r20, r14
    39ec:	96 01       	movw	r18, r12
    39ee:	c7 01       	movw	r24, r14
    39f0:	b6 01       	movw	r22, r12
    39f2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    39f6:	9b 01       	movw	r18, r22
    39f8:	ac 01       	movw	r20, r24
    39fa:	c5 01       	movw	r24, r10
    39fc:	b4 01       	movw	r22, r8
    39fe:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3a02:	6b 01       	movw	r12, r22
    3a04:	7c 01       	movw	r14, r24
    3a06:	a3 01       	movw	r20, r6
    3a08:	92 01       	movw	r18, r4
    3a0a:	c3 01       	movw	r24, r6
    3a0c:	b2 01       	movw	r22, r4
    3a0e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
    3a16:	c7 01       	movw	r24, r14
    3a18:	b6 01       	movw	r22, r12
    3a1a:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3a1e:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
}
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	df 90       	pop	r13
    3a34:	cf 90       	pop	r12
    3a36:	bf 90       	pop	r11
    3a38:	af 90       	pop	r10
    3a3a:	9f 90       	pop	r9
    3a3c:	8f 90       	pop	r8
    3a3e:	7f 90       	pop	r7
    3a40:	6f 90       	pop	r6
    3a42:	5f 90       	pop	r5
    3a44:	4f 90       	pop	r4
    3a46:	08 95       	ret

00003a48 <quaternion_norm>:

double quaternion_norm(quaternion q)// floatch
{
    3a48:	4f 92       	push	r4
    3a4a:	5f 92       	push	r5
    3a4c:	6f 92       	push	r6
    3a4e:	7f 92       	push	r7
    3a50:	8f 92       	push	r8
    3a52:	9f 92       	push	r9
    3a54:	af 92       	push	r10
    3a56:	bf 92       	push	r11
    3a58:	cf 92       	push	r12
    3a5a:	df 92       	push	r13
    3a5c:	ef 92       	push	r14
    3a5e:	ff 92       	push	r15
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	28 97       	sbiw	r28, 0x08	; 8
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	9c 01       	movw	r18, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3a76:	dc 01       	movw	r26, r24
    3a78:	8d 90       	ld	r8, X+
    3a7a:	9d 90       	ld	r9, X+
    3a7c:	ad 90       	ld	r10, X+
    3a7e:	bc 90       	ld	r11, X
    3a80:	13 97       	sbiw	r26, 0x03	; 3
    3a82:	14 96       	adiw	r26, 0x04	; 4
    3a84:	cd 90       	ld	r12, X+
    3a86:	dd 90       	ld	r13, X+
    3a88:	ed 90       	ld	r14, X+
    3a8a:	fc 90       	ld	r15, X
    3a8c:	17 97       	sbiw	r26, 0x07	; 7
    3a8e:	18 96       	adiw	r26, 0x08	; 8
    3a90:	8d 91       	ld	r24, X+
    3a92:	9d 91       	ld	r25, X+
    3a94:	0d 90       	ld	r0, X+
    3a96:	bc 91       	ld	r27, X
    3a98:	a0 2d       	mov	r26, r0
    3a9a:	8d 83       	std	Y+5, r24	; 0x05
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	af 83       	std	Y+7, r26	; 0x07
    3aa0:	b8 87       	std	Y+8, r27	; 0x08
    3aa2:	f9 01       	movw	r30, r18
    3aa4:	44 84       	ldd	r4, Z+12	; 0x0c
    3aa6:	55 84       	ldd	r5, Z+13	; 0x0d
    3aa8:	66 84       	ldd	r6, Z+14	; 0x0e
    3aaa:	77 84       	ldd	r7, Z+15	; 0x0f
    3aac:	a5 01       	movw	r20, r10
    3aae:	94 01       	movw	r18, r8
    3ab0:	c5 01       	movw	r24, r10
    3ab2:	b4 01       	movw	r22, r8
    3ab4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3ab8:	69 83       	std	Y+1, r22	; 0x01
    3aba:	7a 83       	std	Y+2, r23	; 0x02
    3abc:	8b 83       	std	Y+3, r24	; 0x03
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	a7 01       	movw	r20, r14
    3ac2:	96 01       	movw	r18, r12
    3ac4:	c7 01       	movw	r24, r14
    3ac6:	b6 01       	movw	r22, r12
    3ac8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3acc:	9b 01       	movw	r18, r22
    3ace:	ac 01       	movw	r20, r24
    3ad0:	69 81       	ldd	r22, Y+1	; 0x01
    3ad2:	7a 81       	ldd	r23, Y+2	; 0x02
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad8:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3adc:	69 83       	std	Y+1, r22	; 0x01
    3ade:	7a 83       	std	Y+2, r23	; 0x02
    3ae0:	8b 83       	std	Y+3, r24	; 0x03
    3ae2:	9c 83       	std	Y+4, r25	; 0x04
    3ae4:	2d 81       	ldd	r18, Y+5	; 0x05
    3ae6:	3e 81       	ldd	r19, Y+6	; 0x06
    3ae8:	4f 81       	ldd	r20, Y+7	; 0x07
    3aea:	58 85       	ldd	r21, Y+8	; 0x08
    3aec:	ca 01       	movw	r24, r20
    3aee:	b9 01       	movw	r22, r18
    3af0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3af4:	9b 01       	movw	r18, r22
    3af6:	ac 01       	movw	r20, r24
    3af8:	69 81       	ldd	r22, Y+1	; 0x01
    3afa:	7a 81       	ldd	r23, Y+2	; 0x02
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3b04:	69 83       	std	Y+1, r22	; 0x01
    3b06:	7a 83       	std	Y+2, r23	; 0x02
    3b08:	8b 83       	std	Y+3, r24	; 0x03
    3b0a:	9c 83       	std	Y+4, r25	; 0x04
    3b0c:	a5 01       	movw	r20, r10
    3b0e:	94 01       	movw	r18, r8
    3b10:	c5 01       	movw	r24, r10
    3b12:	b4 01       	movw	r22, r8
    3b14:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3b18:	4b 01       	movw	r8, r22
    3b1a:	5c 01       	movw	r10, r24
    3b1c:	a7 01       	movw	r20, r14
    3b1e:	96 01       	movw	r18, r12
    3b20:	c7 01       	movw	r24, r14
    3b22:	b6 01       	movw	r22, r12
    3b24:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3b28:	9b 01       	movw	r18, r22
    3b2a:	ac 01       	movw	r20, r24
    3b2c:	c5 01       	movw	r24, r10
    3b2e:	b4 01       	movw	r22, r8
    3b30:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3b34:	6b 01       	movw	r12, r22
    3b36:	7c 01       	movw	r14, r24
    3b38:	2d 81       	ldd	r18, Y+5	; 0x05
    3b3a:	3e 81       	ldd	r19, Y+6	; 0x06
    3b3c:	4f 81       	ldd	r20, Y+7	; 0x07
    3b3e:	58 85       	ldd	r21, Y+8	; 0x08
    3b40:	ca 01       	movw	r24, r20
    3b42:	b9 01       	movw	r22, r18
    3b44:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3b48:	9b 01       	movw	r18, r22
    3b4a:	ac 01       	movw	r20, r24
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	b6 01       	movw	r22, r12
    3b50:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3b54:	6b 01       	movw	r12, r22
    3b56:	7c 01       	movw	r14, r24
    3b58:	a3 01       	movw	r20, r6
    3b5a:	92 01       	movw	r18, r4
    3b5c:	c3 01       	movw	r24, r6
    3b5e:	b2 01       	movw	r22, r4
    3b60:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3b64:	9b 01       	movw	r18, r22
    3b66:	ac 01       	movw	r20, r24
    3b68:	c7 01       	movw	r24, r14
    3b6a:	b6 01       	movw	r22, r12
    3b6c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3b70:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
}
    3b74:	28 96       	adiw	r28, 0x08	; 8
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	9f 90       	pop	r9
    3b92:	8f 90       	pop	r8
    3b94:	7f 90       	pop	r7
    3b96:	6f 90       	pop	r6
    3b98:	5f 90       	pop	r5
    3b9a:	4f 90       	pop	r4
    3b9c:	08 95       	ret

00003b9e <vector_dot_product>:

double vector_dot_product(vector v_a, vector v_b)// floatch
{
    3b9e:	cf 92       	push	r12
    3ba0:	df 92       	push	r13
    3ba2:	ef 92       	push	r14
    3ba4:	ff 92       	push	r15
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	ec 01       	movw	r28, r24
    3bb0:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3bb2:	fb 01       	movw	r30, r22
    3bb4:	20 81       	ld	r18, Z
    3bb6:	31 81       	ldd	r19, Z+1	; 0x01
    3bb8:	42 81       	ldd	r20, Z+2	; 0x02
    3bba:	53 81       	ldd	r21, Z+3	; 0x03
    3bbc:	68 81       	ld	r22, Y
    3bbe:	79 81       	ldd	r23, Y+1	; 0x01
    3bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3bc8:	6b 01       	movw	r12, r22
    3bca:	7c 01       	movw	r14, r24
    3bcc:	f8 01       	movw	r30, r16
    3bce:	24 81       	ldd	r18, Z+4	; 0x04
    3bd0:	35 81       	ldd	r19, Z+5	; 0x05
    3bd2:	46 81       	ldd	r20, Z+6	; 0x06
    3bd4:	57 81       	ldd	r21, Z+7	; 0x07
    3bd6:	6c 81       	ldd	r22, Y+4	; 0x04
    3bd8:	7d 81       	ldd	r23, Y+5	; 0x05
    3bda:	8e 81       	ldd	r24, Y+6	; 0x06
    3bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    3bde:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3be2:	9b 01       	movw	r18, r22
    3be4:	ac 01       	movw	r20, r24
    3be6:	c7 01       	movw	r24, r14
    3be8:	b6 01       	movw	r22, r12
    3bea:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3bee:	6b 01       	movw	r12, r22
    3bf0:	7c 01       	movw	r14, r24
    3bf2:	f8 01       	movw	r30, r16
    3bf4:	20 85       	ldd	r18, Z+8	; 0x08
    3bf6:	31 85       	ldd	r19, Z+9	; 0x09
    3bf8:	42 85       	ldd	r20, Z+10	; 0x0a
    3bfa:	53 85       	ldd	r21, Z+11	; 0x0b
    3bfc:	68 85       	ldd	r22, Y+8	; 0x08
    3bfe:	79 85       	ldd	r23, Y+9	; 0x09
    3c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c04:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3c08:	9b 01       	movw	r18, r22
    3c0a:	ac 01       	movw	r20, r24
    3c0c:	c7 01       	movw	r24, r14
    3c0e:	b6 01       	movw	r22, r12
    3c10:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
}
    3c14:	df 91       	pop	r29
    3c16:	cf 91       	pop	r28
    3c18:	1f 91       	pop	r17
    3c1a:	0f 91       	pop	r16
    3c1c:	ff 90       	pop	r15
    3c1e:	ef 90       	pop	r14
    3c20:	df 90       	pop	r13
    3c22:	cf 90       	pop	r12
    3c24:	08 95       	ret

00003c26 <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3c26:	cf 92       	push	r12
    3c28:	df 92       	push	r13
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	ec 01       	movw	r28, r24
    3c38:	e6 2e       	mov	r14, r22
    3c3a:	f7 2e       	mov	r15, r23
    3c3c:	04 2f       	mov	r16, r20
    3c3e:	15 2f       	mov	r17, r21
    3c40:	6c 01       	movw	r12, r24
    3c42:	2c e0       	ldi	r18, 0x0C	; 12
    3c44:	c2 0e       	add	r12, r18
    3c46:	d1 1c       	adc	r13, r1
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_res[i] = v_a[i] + v_b[i];
    3c48:	69 91       	ld	r22, Y+
    3c4a:	79 91       	ld	r23, Y+
    3c4c:	89 91       	ld	r24, Y+
    3c4e:	99 91       	ld	r25, Y+
    3c50:	f7 01       	movw	r30, r14
    3c52:	21 91       	ld	r18, Z+
    3c54:	31 91       	ld	r19, Z+
    3c56:	41 91       	ld	r20, Z+
    3c58:	51 91       	ld	r21, Z+
    3c5a:	7f 01       	movw	r14, r30
    3c5c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3c60:	f8 01       	movw	r30, r16
    3c62:	61 93       	st	Z+, r22
    3c64:	71 93       	st	Z+, r23
    3c66:	81 93       	st	Z+, r24
    3c68:	91 93       	st	Z+, r25
    3c6a:	8f 01       	movw	r16, r30
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3c6c:	cc 15       	cp	r28, r12
    3c6e:	dd 05       	cpc	r29, r13
    3c70:	59 f7       	brne	.-42     	; 0x3c48 <add_vectors+0x22>
    v_res[i] = v_a[i] + v_b[i];
}
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	ff 90       	pop	r15
    3c7c:	ef 90       	pop	r14
    3c7e:	df 90       	pop	r13
    3c80:	cf 90       	pop	r12
    3c82:	08 95       	ret

00003c84 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3c84:	4f 92       	push	r4
    3c86:	5f 92       	push	r5
    3c88:	6f 92       	push	r6
    3c8a:	7f 92       	push	r7
    3c8c:	8f 92       	push	r8
    3c8e:	9f 92       	push	r9
    3c90:	af 92       	push	r10
    3c92:	bf 92       	push	r11
    3c94:	cf 92       	push	r12
    3c96:	df 92       	push	r13
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	6a 01       	movw	r12, r20
    3ca6:	86 2e       	mov	r8, r22
    3ca8:	97 2e       	mov	r9, r23
    3caa:	3a 01       	movw	r6, r20
    3cac:	2c e0       	ldi	r18, 0x0C	; 12
    3cae:	62 0e       	add	r6, r18
    3cb0:	71 1c       	adc	r7, r1
    3cb2:	48 2e       	mov	r4, r24
    3cb4:	59 2e       	mov	r5, r25
    3cb6:	5c 01       	movw	r10, r24
    3cb8:	ec e0       	ldi	r30, 0x0C	; 12
    3cba:	ae 0e       	add	r10, r30
    3cbc:	b1 1c       	adc	r11, r1
    3cbe:	76 01       	movw	r14, r12
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3cc0:	f6 01       	movw	r30, r12
    3cc2:	10 82       	st	Z, r1
    3cc4:	11 82       	std	Z+1, r1	; 0x01
    3cc6:	12 82       	std	Z+2, r1	; 0x02
    3cc8:	13 82       	std	Z+3, r1	; 0x03
    3cca:	c4 2d       	mov	r28, r4
    3ccc:	d5 2d       	mov	r29, r5
    3cce:	84 01       	movw	r16, r8
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
    3cd0:	69 91       	ld	r22, Y+
    3cd2:	79 91       	ld	r23, Y+
    3cd4:	89 91       	ld	r24, Y+
    3cd6:	99 91       	ld	r25, Y+
    3cd8:	f8 01       	movw	r30, r16
    3cda:	20 81       	ld	r18, Z
    3cdc:	31 81       	ldd	r19, Z+1	; 0x01
    3cde:	42 81       	ldd	r20, Z+2	; 0x02
    3ce0:	53 81       	ldd	r21, Z+3	; 0x03
    3ce2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3ce6:	9b 01       	movw	r18, r22
    3ce8:	ac 01       	movw	r20, r24
    3cea:	f7 01       	movw	r30, r14
    3cec:	60 81       	ld	r22, Z
    3cee:	71 81       	ldd	r23, Z+1	; 0x01
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    3cf8:	f7 01       	movw	r30, r14
    3cfa:	60 83       	st	Z, r22
    3cfc:	71 83       	std	Z+1, r23	; 0x01
    3cfe:	82 83       	std	Z+2, r24	; 0x02
    3d00:	93 83       	std	Z+3, r25	; 0x03
    3d02:	04 5f       	subi	r16, 0xF4	; 244
    3d04:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3d06:	ca 15       	cp	r28, r10
    3d08:	db 05       	cpc	r29, r11
    3d0a:	11 f7       	brne	.-60     	; 0x3cd0 <vector_into_matrix+0x4c>
    3d0c:	f4 e0       	ldi	r31, 0x04	; 4
    3d0e:	cf 0e       	add	r12, r31
    3d10:	d1 1c       	adc	r13, r1
    3d12:	24 e0       	ldi	r18, 0x04	; 4
    3d14:	82 0e       	add	r8, r18
    3d16:	91 1c       	adc	r9, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3d18:	c6 14       	cp	r12, r6
    3d1a:	d7 04       	cpc	r13, r7
    3d1c:	81 f6       	brne	.-96     	; 0x3cbe <vector_into_matrix+0x3a>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	ef 90       	pop	r14
    3d2a:	df 90       	pop	r13
    3d2c:	cf 90       	pop	r12
    3d2e:	bf 90       	pop	r11
    3d30:	af 90       	pop	r10
    3d32:	9f 90       	pop	r9
    3d34:	8f 90       	pop	r8
    3d36:	7f 90       	pop	r7
    3d38:	6f 90       	pop	r6
    3d3a:	5f 90       	pop	r5
    3d3c:	4f 90       	pop	r4
    3d3e:	08 95       	ret

00003d40 <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3d40:	8f 92       	push	r8
    3d42:	9f 92       	push	r9
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	ef 92       	push	r14
    3d4a:	ff 92       	push	r15
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	ec 01       	movw	r28, r24
    3d56:	8b 01       	movw	r16, r22
    3d58:	7a 01       	movw	r14, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3d5a:	fb 01       	movw	r30, r22
    3d5c:	20 85       	ldd	r18, Z+8	; 0x08
    3d5e:	31 85       	ldd	r19, Z+9	; 0x09
    3d60:	42 85       	ldd	r20, Z+10	; 0x0a
    3d62:	53 85       	ldd	r21, Z+11	; 0x0b
    3d64:	6c 81       	ldd	r22, Y+4	; 0x04
    3d66:	7d 81       	ldd	r23, Y+5	; 0x05
    3d68:	8e 81       	ldd	r24, Y+6	; 0x06
    3d6a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d6c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3d70:	4b 01       	movw	r8, r22
    3d72:	5c 01       	movw	r10, r24
    3d74:	f8 01       	movw	r30, r16
    3d76:	24 81       	ldd	r18, Z+4	; 0x04
    3d78:	35 81       	ldd	r19, Z+5	; 0x05
    3d7a:	46 81       	ldd	r20, Z+6	; 0x06
    3d7c:	57 81       	ldd	r21, Z+7	; 0x07
    3d7e:	68 85       	ldd	r22, Y+8	; 0x08
    3d80:	79 85       	ldd	r23, Y+9	; 0x09
    3d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d86:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3d8a:	9b 01       	movw	r18, r22
    3d8c:	ac 01       	movw	r20, r24
    3d8e:	c5 01       	movw	r24, r10
    3d90:	b4 01       	movw	r22, r8
    3d92:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3d96:	f7 01       	movw	r30, r14
    3d98:	60 83       	st	Z, r22
    3d9a:	71 83       	std	Z+1, r23	; 0x01
    3d9c:	82 83       	std	Z+2, r24	; 0x02
    3d9e:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    3da0:	f8 01       	movw	r30, r16
    3da2:	20 81       	ld	r18, Z
    3da4:	31 81       	ldd	r19, Z+1	; 0x01
    3da6:	42 81       	ldd	r20, Z+2	; 0x02
    3da8:	53 81       	ldd	r21, Z+3	; 0x03
    3daa:	68 85       	ldd	r22, Y+8	; 0x08
    3dac:	79 85       	ldd	r23, Y+9	; 0x09
    3dae:	8a 85       	ldd	r24, Y+10	; 0x0a
    3db0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3db2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3db6:	4b 01       	movw	r8, r22
    3db8:	5c 01       	movw	r10, r24
    3dba:	f8 01       	movw	r30, r16
    3dbc:	20 85       	ldd	r18, Z+8	; 0x08
    3dbe:	31 85       	ldd	r19, Z+9	; 0x09
    3dc0:	42 85       	ldd	r20, Z+10	; 0x0a
    3dc2:	53 85       	ldd	r21, Z+11	; 0x0b
    3dc4:	68 81       	ld	r22, Y
    3dc6:	79 81       	ldd	r23, Y+1	; 0x01
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3dd0:	9b 01       	movw	r18, r22
    3dd2:	ac 01       	movw	r20, r24
    3dd4:	c5 01       	movw	r24, r10
    3dd6:	b4 01       	movw	r22, r8
    3dd8:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3ddc:	f7 01       	movw	r30, r14
    3dde:	64 83       	std	Z+4, r22	; 0x04
    3de0:	75 83       	std	Z+5, r23	; 0x05
    3de2:	86 83       	std	Z+6, r24	; 0x06
    3de4:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    3de6:	f8 01       	movw	r30, r16
    3de8:	24 81       	ldd	r18, Z+4	; 0x04
    3dea:	35 81       	ldd	r19, Z+5	; 0x05
    3dec:	46 81       	ldd	r20, Z+6	; 0x06
    3dee:	57 81       	ldd	r21, Z+7	; 0x07
    3df0:	68 81       	ld	r22, Y
    3df2:	79 81       	ldd	r23, Y+1	; 0x01
    3df4:	8a 81       	ldd	r24, Y+2	; 0x02
    3df6:	9b 81       	ldd	r25, Y+3	; 0x03
    3df8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3dfc:	4b 01       	movw	r8, r22
    3dfe:	5c 01       	movw	r10, r24
    3e00:	f8 01       	movw	r30, r16
    3e02:	20 81       	ld	r18, Z
    3e04:	31 81       	ldd	r19, Z+1	; 0x01
    3e06:	42 81       	ldd	r20, Z+2	; 0x02
    3e08:	53 81       	ldd	r21, Z+3	; 0x03
    3e0a:	6c 81       	ldd	r22, Y+4	; 0x04
    3e0c:	7d 81       	ldd	r23, Y+5	; 0x05
    3e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e10:	9f 81       	ldd	r25, Y+7	; 0x07
    3e12:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3e16:	9b 01       	movw	r18, r22
    3e18:	ac 01       	movw	r20, r24
    3e1a:	c5 01       	movw	r24, r10
    3e1c:	b4 01       	movw	r22, r8
    3e1e:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    3e22:	f7 01       	movw	r30, r14
    3e24:	60 87       	std	Z+8, r22	; 0x08
    3e26:	71 87       	std	Z+9, r23	; 0x09
    3e28:	82 87       	std	Z+10, r24	; 0x0a
    3e2a:	93 87       	std	Z+11, r25	; 0x0b
}
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	bf 90       	pop	r11
    3e3a:	af 90       	pop	r10
    3e3c:	9f 90       	pop	r9
    3e3e:	8f 90       	pop	r8
    3e40:	08 95       	ret

00003e42 <scalar_into_vector>:

void scalar_into_vector(vector v, double s)// floatch
{
    3e42:	cf 92       	push	r12
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	ec 01       	movw	r28, r24
    3e50:	6a 01       	movw	r12, r20
    3e52:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    3e54:	9a 01       	movw	r18, r20
    3e56:	ab 01       	movw	r20, r22
    3e58:	68 81       	ld	r22, Y
    3e5a:	79 81       	ldd	r23, Y+1	; 0x01
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e60:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3e64:	68 83       	st	Y, r22
    3e66:	79 83       	std	Y+1, r23	; 0x01
    3e68:	8a 83       	std	Y+2, r24	; 0x02
    3e6a:	9b 83       	std	Y+3, r25	; 0x03
    3e6c:	a7 01       	movw	r20, r14
    3e6e:	96 01       	movw	r18, r12
    3e70:	6c 81       	ldd	r22, Y+4	; 0x04
    3e72:	7d 81       	ldd	r23, Y+5	; 0x05
    3e74:	8e 81       	ldd	r24, Y+6	; 0x06
    3e76:	9f 81       	ldd	r25, Y+7	; 0x07
    3e78:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3e7c:	6c 83       	std	Y+4, r22	; 0x04
    3e7e:	7d 83       	std	Y+5, r23	; 0x05
    3e80:	8e 83       	std	Y+6, r24	; 0x06
    3e82:	9f 83       	std	Y+7, r25	; 0x07
    3e84:	a7 01       	movw	r20, r14
    3e86:	96 01       	movw	r18, r12
    3e88:	68 85       	ldd	r22, Y+8	; 0x08
    3e8a:	79 85       	ldd	r23, Y+9	; 0x09
    3e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e90:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3e94:	68 87       	std	Y+8, r22	; 0x08
    3e96:	79 87       	std	Y+9, r23	; 0x09
    3e98:	8a 87       	std	Y+10, r24	; 0x0a
    3e9a:	9b 87       	std	Y+11, r25	; 0x0b
}
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	ff 90       	pop	r15
    3ea2:	ef 90       	pop	r14
    3ea4:	df 90       	pop	r13
    3ea6:	cf 90       	pop	r12
    3ea8:	08 95       	ret

00003eaa <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, double s)// floatch
{
    3eaa:	cf 92       	push	r12
    3eac:	df 92       	push	r13
    3eae:	ef 92       	push	r14
    3eb0:	ff 92       	push	r15
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	6a 01       	movw	r12, r20
    3ebc:	7b 01       	movw	r14, r22
    3ebe:	ec 01       	movw	r28, r24
    3ec0:	8c 01       	movw	r16, r24
    3ec2:	00 5f       	subi	r16, 0xF0	; 240
    3ec4:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t i;
  for(i = 0; i < 4; i++)
    q[i] = q[i] * s;
    3ec6:	a7 01       	movw	r20, r14
    3ec8:	96 01       	movw	r18, r12
    3eca:	68 81       	ld	r22, Y
    3ecc:	79 81       	ldd	r23, Y+1	; 0x01
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    3ed6:	69 93       	st	Y+, r22
    3ed8:	79 93       	st	Y+, r23
    3eda:	89 93       	st	Y+, r24
    3edc:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, double s)// floatch
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3ede:	c0 17       	cp	r28, r16
    3ee0:	d1 07       	cpc	r29, r17
    3ee2:	89 f7       	brne	.-30     	; 0x3ec6 <scalar_into_quaternion+0x1c>
    q[i] = q[i] * s;
}
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	df 90       	pop	r13
    3ef2:	cf 90       	pop	r12
    3ef4:	08 95       	ret

00003ef6 <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    3ef6:	cf 92       	push	r12
    3ef8:	df 92       	push	r13
    3efa:	ef 92       	push	r14
    3efc:	ff 92       	push	r15
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	ec 01       	movw	r28, r24
  uint8_t i;
  double norm;// floatch
  
  norm = vector_norm(v);
    3f04:	2f dd       	rcall	.-1442   	; 0x3964 <vector_norm>
    3f06:	6b 01       	movw	r12, r22
    3f08:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    3f0a:	9b 01       	movw	r18, r22
    3f0c:	ac 01       	movw	r20, r24
    3f0e:	68 81       	ld	r22, Y
    3f10:	79 81       	ldd	r23, Y+1	; 0x01
    3f12:	8a 81       	ldd	r24, Y+2	; 0x02
    3f14:	9b 81       	ldd	r25, Y+3	; 0x03
    3f16:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3f1a:	68 83       	st	Y, r22
    3f1c:	79 83       	std	Y+1, r23	; 0x01
    3f1e:	8a 83       	std	Y+2, r24	; 0x02
    3f20:	9b 83       	std	Y+3, r25	; 0x03
    3f22:	a7 01       	movw	r20, r14
    3f24:	96 01       	movw	r18, r12
    3f26:	6c 81       	ldd	r22, Y+4	; 0x04
    3f28:	7d 81       	ldd	r23, Y+5	; 0x05
    3f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f2e:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3f32:	6c 83       	std	Y+4, r22	; 0x04
    3f34:	7d 83       	std	Y+5, r23	; 0x05
    3f36:	8e 83       	std	Y+6, r24	; 0x06
    3f38:	9f 83       	std	Y+7, r25	; 0x07
    3f3a:	a7 01       	movw	r20, r14
    3f3c:	96 01       	movw	r18, r12
    3f3e:	68 85       	ldd	r22, Y+8	; 0x08
    3f40:	79 85       	ldd	r23, Y+9	; 0x09
    3f42:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f44:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f46:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3f4a:	68 87       	std	Y+8, r22	; 0x08
    3f4c:	79 87       	std	Y+9, r23	; 0x09
    3f4e:	8a 87       	std	Y+10, r24	; 0x0a
    3f50:	9b 87       	std	Y+11, r25	; 0x0b
}
    3f52:	df 91       	pop	r29
    3f54:	cf 91       	pop	r28
    3f56:	ff 90       	pop	r15
    3f58:	ef 90       	pop	r14
    3f5a:	df 90       	pop	r13
    3f5c:	cf 90       	pop	r12
    3f5e:	08 95       	ret

00003f60 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    3f60:	cf 92       	push	r12
    3f62:	df 92       	push	r13
    3f64:	ef 92       	push	r14
    3f66:	ff 92       	push	r15
    3f68:	0f 93       	push	r16
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	8c 01       	movw	r16, r24
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
    3f72:	6a dd       	rcall	.-1324   	; 0x3a48 <quaternion_norm>
    3f74:	6b 01       	movw	r12, r22
    3f76:	7c 01       	movw	r14, r24
    3f78:	e8 01       	movw	r28, r16
    3f7a:	00 5f       	subi	r16, 0xF0	; 240
    3f7c:	1f 4f       	sbci	r17, 0xFF	; 255
  
  for(i = 0; i < 4; i++)
    q[i] = q[i] / norm;
    3f7e:	a7 01       	movw	r20, r14
    3f80:	96 01       	movw	r18, r12
    3f82:	68 81       	ld	r22, Y
    3f84:	79 81       	ldd	r23, Y+1	; 0x01
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	9b 81       	ldd	r25, Y+3	; 0x03
    3f8a:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    3f8e:	69 93       	st	Y+, r22
    3f90:	79 93       	st	Y+, r23
    3f92:	89 93       	st	Y+, r24
    3f94:	99 93       	st	Y+, r25
  uint8_t i;
  double norm;// floatch
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    3f96:	c0 17       	cp	r28, r16
    3f98:	d1 07       	cpc	r29, r17
    3f9a:	89 f7       	brne	.-30     	; 0x3f7e <convert_unit_quaternion+0x1e>
    q[i] = q[i] / norm;
}
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	ff 90       	pop	r15
    3fa6:	ef 90       	pop	r14
    3fa8:	df 90       	pop	r13
    3faa:	cf 90       	pop	r12
    3fac:	08 95       	ret

00003fae <read_GPS>:
}*/

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    3fae:	57 9a       	sbi	0x0a, 7	; 10
    3fb0:	08 95       	ret

00003fb2 <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS();// make this poll_ss()
    3fb2:	0c 94 07 2b 	jmp	0x560e	; 0x560e <poll_SS>
    3fb6:	08 95       	ret

00003fb8 <read_MM>:
void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
 // poll_MM(); //for uart 1
  poll_MM();// for uart0
    3fb8:	a1 cc       	rjmp	.-1726   	; 0x38fc <poll_MM>
    3fba:	08 95       	ret

00003fbc <configure_torquer>:
}

void configure_torquer(void)
{
  ///Configure the current direction pins as output
  DDRC |= _BV(DDC3) | _BV(DDC4) | _BV(DDC5);
    3fbc:	84 b3       	in	r24, 0x14	; 20
    3fbe:	88 63       	ori	r24, 0x38	; 56
    3fc0:	84 bb       	out	0x14, r24	; 20
  
  ///Configure the PWM pins as output
  DDRE |= _BV(DDE3) | _BV(DDE4) | _BV(DDE5);
    3fc2:	82 b1       	in	r24, 0x02	; 2
    3fc4:	88 63       	ori	r24, 0x38	; 56
    3fc6:	82 b9       	out	0x02, r24	; 2
  
  ///Configure PWM: Phase Correct mode Prescalar = 1 Frequency = 122Hz
  TCCR3A = 0;
    3fc8:	ab e8       	ldi	r26, 0x8B	; 139
    3fca:	b0 e0       	ldi	r27, 0x00	; 0
    3fcc:	1c 92       	st	X, r1
  TCCR3B = 0;
    3fce:	ea e8       	ldi	r30, 0x8A	; 138
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	10 82       	st	Z, r1
  TCCR3C = 0;
    3fd4:	10 92 8c 00 	sts	0x008C, r1
  TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1) | _BV(WGM31);
    3fd8:	8c 91       	ld	r24, X
    3fda:	8a 6a       	ori	r24, 0xAA	; 170
    3fdc:	8c 93       	st	X, r24
  TCCR3B |= _BV(WGM33) | _BV(CS30);
    3fde:	80 81       	ld	r24, Z
    3fe0:	81 61       	ori	r24, 0x11	; 17
    3fe2:	80 83       	st	Z, r24
  
  ///Set top as MAX 16-bit
  ICR3 = 0xFFFF;
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	9f ef       	ldi	r25, 0xFF	; 255
    3fe8:	90 93 81 00 	sts	0x0081, r25
    3fec:	80 93 80 00 	sts	0x0080, r24
  OCR3A = 0x0000;
    3ff0:	10 92 87 00 	sts	0x0087, r1
    3ff4:	10 92 86 00 	sts	0x0086, r1
  OCR3B = 0x0000;
    3ff8:	10 92 85 00 	sts	0x0085, r1
    3ffc:	10 92 84 00 	sts	0x0084, r1
  OCR3C = 0x0000;
    4000:	10 92 83 00 	sts	0x0083, r1
    4004:	10 92 82 00 	sts	0x0082, r1
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4008:	85 b3       	in	r24, 0x15	; 21
    400a:	87 7c       	andi	r24, 0xC7	; 199
    400c:	85 bb       	out	0x15, r24	; 21
    400e:	08 95       	ret

00004010 <set_PWM>:
}

void set_PWM(void)
{
  ///Assuming X = A, Y = B, Z = C
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
    4010:	85 b3       	in	r24, 0x15	; 21
    4012:	87 7c       	andi	r24, 0xC7	; 199
    4014:	85 bb       	out	0x15, r24	; 21
  
  ///If current direction of axis X/Y/Z opposite of default set pin
   if(Current_state.pwm.x_dir)
    4016:	80 91 21 05 	lds	r24, 0x0521
    401a:	88 23       	and	r24, r24
    401c:	11 f0       	breq	.+4      	; 0x4022 <set_PWM+0x12>
   PORTC |= _BV(PC5);
    401e:	ad 9a       	sbi	0x15, 5	; 21
    4020:	01 c0       	rjmp	.+2      	; 0x4024 <set_PWM+0x14>
   else
   PORTC &= ~(_BV(PC5));
    4022:	ad 98       	cbi	0x15, 5	; 21
   
   if(Current_state.pwm.y_dir)
    4024:	80 91 22 05 	lds	r24, 0x0522
    4028:	88 23       	and	r24, r24
    402a:	11 f0       	breq	.+4      	; 0x4030 <set_PWM+0x20>
   PORTC |= _BV(PC4);
    402c:	ac 9a       	sbi	0x15, 4	; 21
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <set_PWM+0x22>
   else
   PORTC &= ~(_BV(PC4));
    4030:	ac 98       	cbi	0x15, 4	; 21
   
   if(Current_state.pwm.z_dir)
    4032:	80 91 23 05 	lds	r24, 0x0523
    4036:	88 23       	and	r24, r24
    4038:	11 f0       	breq	.+4      	; 0x403e <set_PWM+0x2e>
   PORTC |= _BV(PC3);
    403a:	ab 9a       	sbi	0x15, 3	; 21
    403c:	01 c0       	rjmp	.+2      	; 0x4040 <set_PWM+0x30>
   else
   PORTC &= ~(_BV(PC3));
    403e:	ab 98       	cbi	0x15, 3	; 21
   
  ///Set PWM values
  OCR3A = Current_state.pwm.x;
    4040:	80 91 1b 05 	lds	r24, 0x051B
    4044:	90 91 1c 05 	lds	r25, 0x051C
    4048:	90 93 87 00 	sts	0x0087, r25
    404c:	80 93 86 00 	sts	0x0086, r24
  OCR3B = Current_state.pwm.y;
    4050:	80 91 1d 05 	lds	r24, 0x051D
    4054:	90 91 1e 05 	lds	r25, 0x051E
    4058:	90 93 85 00 	sts	0x0085, r25
    405c:	80 93 84 00 	sts	0x0084, r24
  OCR3C = Current_state.pwm.z;
    4060:	80 91 1f 05 	lds	r24, 0x051F
    4064:	90 91 20 05 	lds	r25, 0x0520
    4068:	90 93 83 00 	sts	0x0083, r25
    406c:	80 93 82 00 	sts	0x0082, r24
    4070:	08 95       	ret

00004072 <reset_PWM>:
  PORTC &= ~(_BV(PC3) | _BV(PC4) | _BV(PC5));
}

void reset_PWM(void)
{
  Current_state.pwm.x = 0;
    4072:	10 92 1c 05 	sts	0x051C, r1
    4076:	10 92 1b 05 	sts	0x051B, r1
  Current_state.pwm.y = 0;
    407a:	10 92 1e 05 	sts	0x051E, r1
    407e:	10 92 1d 05 	sts	0x051D, r1
  Current_state.pwm.z = 0;
    4082:	10 92 20 05 	sts	0x0520, r1
    4086:	10 92 1f 05 	sts	0x051F, r1
  Current_state.pwm.x_dir = 0;
    408a:	10 92 21 05 	sts	0x0521, r1
  Current_state.pwm.y_dir = 0;
    408e:	10 92 22 05 	sts	0x0522, r1
  Current_state.pwm.z_dir = 0;
    4092:	10 92 23 05 	sts	0x0523, r1
  set_PWM();
    4096:	bc cf       	rjmp	.-136    	; 0x4010 <set_PWM>
    4098:	08 95       	ret

0000409a <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    409a:	ef 92       	push	r14
    409c:	ff 92       	push	r15
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    40a6:	c3 eb       	ldi	r28, 0xB3	; 179
    40a8:	d4 e0       	ldi	r29, 0x04	; 4
    40aa:	18 aa       	std	Y+48, r1	; 0x30
    40ac:	1f a6       	std	Y+47, r1	; 0x2f
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((double)Current_state.gps.x)/100;//((float)test/100);//
    40ae:	68 81       	ld	r22, Y
    40b0:	79 81       	ldd	r23, Y+1	; 0x01
    40b2:	8a 81       	ldd	r24, Y+2	; 0x02
    40b4:	9b 81       	ldd	r25, Y+3	; 0x03
    40b6:	00 e3       	ldi	r16, 0x30	; 48
    40b8:	14 e0       	ldi	r17, 0x04	; 4
    40ba:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	48 ec       	ldi	r20, 0xC8	; 200
    40c4:	52 e4       	ldi	r21, 0x42	; 66
    40c6:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    40ca:	d8 01       	movw	r26, r16
    40cc:	6d 93       	st	X+, r22
    40ce:	7d 93       	st	X+, r23
    40d0:	8d 93       	st	X+, r24
    40d2:	9c 93       	st	X, r25
    40d4:	13 97       	sbiw	r26, 0x03	; 3
  v_r_ecef[1] = ((double)Current_state.gps.y) / 100;//((float)test/100);//
    40d6:	6c 81       	ldd	r22, Y+4	; 0x04
    40d8:	7d 81       	ldd	r23, Y+5	; 0x05
    40da:	8e 81       	ldd	r24, Y+6	; 0x06
    40dc:	9f 81       	ldd	r25, Y+7	; 0x07
    40de:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	48 ec       	ldi	r20, 0xC8	; 200
    40e8:	52 e4       	ldi	r21, 0x42	; 66
    40ea:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    40ee:	f8 01       	movw	r30, r16
    40f0:	64 83       	std	Z+4, r22	; 0x04
    40f2:	75 83       	std	Z+5, r23	; 0x05
    40f4:	86 83       	std	Z+6, r24	; 0x06
    40f6:	97 83       	std	Z+7, r25	; 0x07
  v_r_ecef[2] = ((double)Current_state.gps.z) / 100;//((float)test/100);//
    40f8:	68 85       	ldd	r22, Y+8	; 0x08
    40fa:	79 85       	ldd	r23, Y+9	; 0x09
    40fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    40fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4100:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	48 ec       	ldi	r20, 0xC8	; 200
    410a:	52 e4       	ldi	r21, 0x42	; 66
    410c:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4110:	d8 01       	movw	r26, r16
    4112:	18 96       	adiw	r26, 0x08	; 8
    4114:	6d 93       	st	X+, r22
    4116:	7d 93       	st	X+, r23
    4118:	8d 93       	st	X+, r24
    411a:	9c 93       	st	X, r25
    411c:	1b 97       	sbiw	r26, 0x0b	; 11
  
  v_v_ecef[0] = ((double)Current_state.gps.v_x) / 1000;
    411e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4120:	7d 85       	ldd	r23, Y+13	; 0x0d
    4122:	8e 85       	ldd	r24, Y+14	; 0x0e
    4124:	9f 85       	ldd	r25, Y+15	; 0x0f
    4126:	0f 2e       	mov	r0, r31
    4128:	f4 e2       	ldi	r31, 0x24	; 36
    412a:	ef 2e       	mov	r14, r31
    412c:	f4 e0       	ldi	r31, 0x04	; 4
    412e:	ff 2e       	mov	r15, r31
    4130:	f0 2d       	mov	r31, r0
    4132:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	4a e7       	ldi	r20, 0x7A	; 122
    413c:	54 e4       	ldi	r21, 0x44	; 68
    413e:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4142:	f7 01       	movw	r30, r14
    4144:	60 83       	st	Z, r22
    4146:	71 83       	std	Z+1, r23	; 0x01
    4148:	82 83       	std	Z+2, r24	; 0x02
    414a:	93 83       	std	Z+3, r25	; 0x03
  v_v_ecef[1] = ((double)Current_state.gps.v_y) / 1000;
    414c:	68 89       	ldd	r22, Y+16	; 0x10
    414e:	79 89       	ldd	r23, Y+17	; 0x11
    4150:	8a 89       	ldd	r24, Y+18	; 0x12
    4152:	9b 89       	ldd	r25, Y+19	; 0x13
    4154:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	4a e7       	ldi	r20, 0x7A	; 122
    415e:	54 e4       	ldi	r21, 0x44	; 68
    4160:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4164:	d7 01       	movw	r26, r14
    4166:	14 96       	adiw	r26, 0x04	; 4
    4168:	6d 93       	st	X+, r22
    416a:	7d 93       	st	X+, r23
    416c:	8d 93       	st	X+, r24
    416e:	9c 93       	st	X, r25
    4170:	17 97       	sbiw	r26, 0x07	; 7
  v_v_ecef[2] = ((double)Current_state.gps.v_z) / 1000;
    4172:	6c 89       	ldd	r22, Y+20	; 0x14
    4174:	7d 89       	ldd	r23, Y+21	; 0x15
    4176:	8e 89       	ldd	r24, Y+22	; 0x16
    4178:	9f 89       	ldd	r25, Y+23	; 0x17
    417a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	4a e7       	ldi	r20, 0x7A	; 122
    4184:	54 e4       	ldi	r21, 0x44	; 68
    4186:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    418a:	f7 01       	movw	r30, r14
    418c:	60 87       	std	Z+8, r22	; 0x08
    418e:	71 87       	std	Z+9, r23	; 0x09
    4190:	82 87       	std	Z+10, r24	; 0x0a
    4192:	93 87       	std	Z+11, r25	; 0x0b
   
  get_seconds_since_equinox();//check
    4194:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    4198:	ec e4       	ldi	r30, 0x4C	; 76
    419a:	f4 e0       	ldi	r31, 0x04	; 4
    419c:	d8 01       	movw	r26, r16
    419e:	4d 91       	ld	r20, X+
    41a0:	5d 91       	ld	r21, X+
    41a2:	6d 91       	ld	r22, X+
    41a4:	7c 91       	ld	r23, X
    41a6:	13 97       	sbiw	r26, 0x03	; 3
    41a8:	40 83       	st	Z, r20
    41aa:	51 83       	std	Z+1, r21	; 0x01
    41ac:	62 83       	std	Z+2, r22	; 0x02
    41ae:	73 83       	std	Z+3, r23	; 0x03
  r_ecef_ash[1] = v_r_ecef[1];
    41b0:	14 96       	adiw	r26, 0x04	; 4
    41b2:	4d 91       	ld	r20, X+
    41b4:	5d 91       	ld	r21, X+
    41b6:	6d 91       	ld	r22, X+
    41b8:	7c 91       	ld	r23, X
    41ba:	17 97       	sbiw	r26, 0x07	; 7
    41bc:	44 83       	std	Z+4, r20	; 0x04
    41be:	55 83       	std	Z+5, r21	; 0x05
    41c0:	66 83       	std	Z+6, r22	; 0x06
    41c2:	77 83       	std	Z+7, r23	; 0x07
  r_ecef_ash[2] = v_r_ecef[2];
    41c4:	18 96       	adiw	r26, 0x08	; 8
    41c6:	4d 91       	ld	r20, X+
    41c8:	5d 91       	ld	r21, X+
    41ca:	6d 91       	ld	r22, X+
    41cc:	7c 91       	ld	r23, X
    41ce:	1b 97       	sbiw	r26, 0x0b	; 11
    41d0:	40 87       	std	Z+8, r20	; 0x08
    41d2:	51 87       	std	Z+9, r21	; 0x09
    41d4:	62 87       	std	Z+10, r22	; 0x0a
    41d6:	73 87       	std	Z+11, r23	; 0x0b
  ecef2eci(v_r_ecef, v_r);
    41d8:	68 e5       	ldi	r22, 0x58	; 88
    41da:	74 e0       	ldi	r23, 0x04	; 4
    41dc:	c8 01       	movw	r24, r16
    41de:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    41e2:	60 e4       	ldi	r22, 0x40	; 64
    41e4:	74 e0       	ldi	r23, 0x04	; 4
    41e6:	c7 01       	movw	r24, r14
    41e8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    41ec:	68 8d       	ldd	r22, Y+24	; 0x18
    41ee:	79 8d       	ldd	r23, Y+25	; 0x19
    41f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    41f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    41f4:	07 ea       	ldi	r16, 0xA7	; 167
    41f6:	14 e0       	ldi	r17, 0x04	; 4
    41f8:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    41fc:	20 e8       	ldi	r18, 0x80	; 128
    41fe:	36 e9       	ldi	r19, 0x96	; 150
    4200:	48 e1       	ldi	r20, 0x18	; 24
    4202:	5b e4       	ldi	r21, 0x4B	; 75
    4204:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4208:	25 e3       	ldi	r18, 0x35	; 53
    420a:	3a ef       	ldi	r19, 0xFA	; 250
    420c:	4e e8       	ldi	r20, 0x8E	; 142
    420e:	5c e3       	ldi	r21, 0x3C	; 60
    4210:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4214:	f8 01       	movw	r30, r16
    4216:	60 83       	st	Z, r22
    4218:	71 83       	std	Z+1, r23	; 0x01
    421a:	82 83       	std	Z+2, r24	; 0x02
    421c:	93 83       	std	Z+3, r25	; 0x03
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    421e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4220:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4222:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4224:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4226:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__floatsisf>
    422a:	20 e8       	ldi	r18, 0x80	; 128
    422c:	36 e9       	ldi	r19, 0x96	; 150
    422e:	48 e1       	ldi	r20, 0x18	; 24
    4230:	5b e4       	ldi	r21, 0x4B	; 75
    4232:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4236:	25 e3       	ldi	r18, 0x35	; 53
    4238:	3a ef       	ldi	r19, 0xFA	; 250
    423a:	4e e8       	ldi	r20, 0x8E	; 142
    423c:	5c e3       	ldi	r21, 0x3C	; 60
    423e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4242:	d8 01       	movw	r26, r16
    4244:	14 96       	adiw	r26, 0x04	; 4
    4246:	6d 93       	st	X+, r22
    4248:	7d 93       	st	X+, r23
    424a:	8d 93       	st	X+, r24
    424c:	9c 93       	st	X, r25
    424e:	17 97       	sbiw	r26, 0x07	; 7
  
  GPS_done = 0;
    4250:	10 92 27 01 	sts	0x0127, r1
}
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	1f 91       	pop	r17
    425a:	0f 91       	pop	r16
    425c:	ff 90       	pop	r15
    425e:	ef 90       	pop	r14
    4260:	08 95       	ret

00004262 <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    4262:	2f 92       	push	r2
    4264:	3f 92       	push	r3
    4266:	4f 92       	push	r4
    4268:	5f 92       	push	r5
    426a:	6f 92       	push	r6
    426c:	7f 92       	push	r7
    426e:	8f 92       	push	r8
    4270:	9f 92       	push	r9
    4272:	af 92       	push	r10
    4274:	bf 92       	push	r11
    4276:	cf 92       	push	r12
    4278:	df 92       	push	r13
    427a:	ef 92       	push	r14
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	64 97       	sbiw	r28, 0x14	; 20
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	1c 01       	movw	r2, r24
  vector v_r_ecef, v_g_ecef;
  double R, R2, R3, R4;// floatch
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    4298:	8c e4       	ldi	r24, 0x4C	; 76
    429a:	94 e0       	ldi	r25, 0x04	; 4
    429c:	63 db       	rcall	.-2362   	; 0x3964 <vector_norm>
    429e:	2b 01       	movw	r4, r22
    42a0:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    42a2:	9b 01       	movw	r18, r22
    42a4:	ac 01       	movw	r20, r24
    42a6:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    42aa:	9b 01       	movw	r18, r22
    42ac:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    42ae:	61 eb       	ldi	r22, 0xB1	; 177
    42b0:	7a e1       	ldi	r23, 0x1A	; 26
    42b2:	86 e7       	ldi	r24, 0x76	; 118
    42b4:	91 e5       	ldi	r25, 0x51	; 81
    42b6:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    42ba:	6d 87       	std	Y+13, r22	; 0x0d
    42bc:	7e 87       	std	Y+14, r23	; 0x0e
    42be:	8f 87       	std	Y+15, r24	; 0x0f
    42c0:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e4       	ldi	r20, 0x40	; 64
    42c8:	50 e4       	ldi	r21, 0x40	; 64
    42ca:	c3 01       	movw	r24, r6
    42cc:	b2 01       	movw	r22, r4
    42ce:	0e 94 37 34 	call	0x686e	; 0x686e <pow>
    42d2:	6b 01       	movw	r12, r22
    42d4:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	40 e8       	ldi	r20, 0x80	; 128
    42dc:	50 e4       	ldi	r21, 0x40	; 64
    42de:	c3 01       	movw	r24, r6
    42e0:	b2 01       	movw	r22, r4
    42e2:	0e 94 37 34 	call	0x686e	; 0x686e <pow>
    42e6:	2b 01       	movw	r4, r22
    42e8:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    42ea:	0c e4       	ldi	r16, 0x4C	; 76
    42ec:	14 e0       	ldi	r17, 0x04	; 4
    42ee:	f8 01       	movw	r30, r16
    42f0:	80 84       	ldd	r8, Z+8	; 0x08
    42f2:	91 84       	ldd	r9, Z+9	; 0x09
    42f4:	a2 84       	ldd	r10, Z+10	; 0x0a
    42f6:	b3 84       	ldd	r11, Z+11	; 0x0b
    42f8:	a5 01       	movw	r20, r10
    42fa:	94 01       	movw	r18, r8
    42fc:	c5 01       	movw	r24, r10
    42fe:	b4 01       	movw	r22, r8
    4300:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4304:	28 e9       	ldi	r18, 0x98	; 152
    4306:	38 e0       	ldi	r19, 0x08	; 8
    4308:	45 e0       	ldi	r20, 0x05	; 5
    430a:	5c e3       	ldi	r21, 0x3C	; 60
    430c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4310:	2a ec       	ldi	r18, 0xCA	; 202
    4312:	3e ef       	ldi	r19, 0xFE	; 254
    4314:	43 e1       	ldi	r20, 0x13	; 19
    4316:	56 e5       	ldi	r21, 0x56	; 86
    4318:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    431c:	a3 01       	movw	r20, r6
    431e:	92 01       	movw	r18, r4
    4320:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4324:	69 8b       	std	Y+17, r22	; 0x11
    4326:	7a 8b       	std	Y+18, r23	; 0x12
    4328:	8b 8b       	std	Y+19, r24	; 0x13
    432a:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	40 e8       	ldi	r20, 0x80	; 128
    4332:	5f e3       	ldi	r21, 0x3F	; 63
    4334:	6d 85       	ldd	r22, Y+13	; 0x0d
    4336:	7e 85       	ldd	r23, Y+14	; 0x0e
    4338:	8f 85       	ldd	r24, Y+15	; 0x0f
    433a:	98 89       	ldd	r25, Y+16	; 0x10
    433c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4340:	29 89       	ldd	r18, Y+17	; 0x11
    4342:	3a 89       	ldd	r19, Y+18	; 0x12
    4344:	4b 89       	ldd	r20, Y+19	; 0x13
    4346:	5c 89       	ldd	r21, Y+20	; 0x14
    4348:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    434c:	2b 01       	movw	r4, r22
    434e:	3c 01       	movw	r6, r24
    4350:	21 ef       	ldi	r18, 0xF1	; 241
    4352:	39 e4       	ldi	r19, 0x49	; 73
    4354:	45 eb       	ldi	r20, 0xB5	; 181
    4356:	57 ed       	ldi	r21, 0xD7	; 215
    4358:	f8 01       	movw	r30, r16
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4366:	a3 01       	movw	r20, r6
    4368:	92 01       	movw	r18, r4
    436a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    436e:	a7 01       	movw	r20, r14
    4370:	96 01       	movw	r18, r12
    4372:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4376:	69 83       	std	Y+1, r22	; 0x01
    4378:	7a 83       	std	Y+2, r23	; 0x02
    437a:	8b 83       	std	Y+3, r24	; 0x03
    437c:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    437e:	21 ef       	ldi	r18, 0xF1	; 241
    4380:	39 e4       	ldi	r19, 0x49	; 73
    4382:	45 eb       	ldi	r20, 0xB5	; 181
    4384:	57 ed       	ldi	r21, 0xD7	; 215
    4386:	f8 01       	movw	r30, r16
    4388:	64 81       	ldd	r22, Z+4	; 0x04
    438a:	75 81       	ldd	r23, Z+5	; 0x05
    438c:	86 81       	ldd	r24, Z+6	; 0x06
    438e:	97 81       	ldd	r25, Z+7	; 0x07
    4390:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4394:	9b 01       	movw	r18, r22
    4396:	ac 01       	movw	r20, r24
    4398:	c3 01       	movw	r24, r6
    439a:	b2 01       	movw	r22, r4
    439c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    43a0:	a7 01       	movw	r20, r14
    43a2:	96 01       	movw	r18, r12
    43a4:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    43a8:	6d 83       	std	Y+5, r22	; 0x05
    43aa:	7e 83       	std	Y+6, r23	; 0x06
    43ac:	8f 83       	std	Y+7, r24	; 0x07
    43ae:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    43b0:	21 ef       	ldi	r18, 0xF1	; 241
    43b2:	39 e4       	ldi	r19, 0x49	; 73
    43b4:	45 eb       	ldi	r20, 0xB5	; 181
    43b6:	57 ed       	ldi	r21, 0xD7	; 215
    43b8:	c5 01       	movw	r24, r10
    43ba:	b4 01       	movw	r22, r8
    43bc:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    43c0:	2b 01       	movw	r4, r22
    43c2:	3c 01       	movw	r6, r24
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e4       	ldi	r20, 0x40	; 64
    43ca:	50 e4       	ldi	r21, 0x40	; 64
    43cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    43ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    43d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    43d2:	98 89       	ldd	r25, Y+16	; 0x10
    43d4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	40 e8       	ldi	r20, 0x80	; 128
    43de:	5f e3       	ldi	r21, 0x3F	; 63
    43e0:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    43e4:	29 89       	ldd	r18, Y+17	; 0x11
    43e6:	3a 89       	ldd	r19, Y+18	; 0x12
    43e8:	4b 89       	ldd	r20, Y+19	; 0x13
    43ea:	5c 89       	ldd	r21, Y+20	; 0x14
    43ec:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    43f0:	9b 01       	movw	r18, r22
    43f2:	ac 01       	movw	r20, r24
    43f4:	c3 01       	movw	r24, r6
    43f6:	b2 01       	movw	r22, r4
    43f8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    43fc:	a7 01       	movw	r20, r14
    43fe:	96 01       	movw	r18, r12
    4400:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4404:	69 87       	std	Y+9, r22	; 0x09
    4406:	7a 87       	std	Y+10, r23	; 0x0a
    4408:	8b 87       	std	Y+11, r24	; 0x0b
    440a:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    440c:	b1 01       	movw	r22, r2
    440e:	ce 01       	movw	r24, r28
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    4416:	64 96       	adiw	r28, 0x14	; 20
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	f8 94       	cli
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	0f be       	out	0x3f, r0	; 63
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	ff 90       	pop	r15
    442c:	ef 90       	pop	r14
    442e:	df 90       	pop	r13
    4430:	cf 90       	pop	r12
    4432:	bf 90       	pop	r11
    4434:	af 90       	pop	r10
    4436:	9f 90       	pop	r9
    4438:	8f 90       	pop	r8
    443a:	7f 90       	pop	r7
    443c:	6f 90       	pop	r6
    443e:	5f 90       	pop	r5
    4440:	4f 90       	pop	r4
    4442:	3f 90       	pop	r3
    4444:	2f 90       	pop	r2
    4446:	08 95       	ret

00004448 <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    4448:	7f 92       	push	r7
    444a:	8f 92       	push	r8
    444c:	9f 92       	push	r9
    444e:	af 92       	push	r10
    4450:	bf 92       	push	r11
    4452:	cf 92       	push	r12
    4454:	df 92       	push	r13
    4456:	ef 92       	push	r14
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	cd b7       	in	r28, 0x3d	; 61
    4464:	de b7       	in	r29, 0x3e	; 62
    4466:	68 97       	sbiw	r28, 0x18	; 24
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	de bf       	out	0x3e, r29	; 62
    446e:	0f be       	out	0x3f, r0	; 63
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	0f 2e       	mov	r0, r31
    4474:	fa e0       	ldi	r31, 0x0A	; 10
    4476:	7f 2e       	mov	r7, r31
    4478:	f0 2d       	mov	r31, r0
    447a:	0f 2e       	mov	r0, r31
    447c:	fc e4       	ldi	r31, 0x4C	; 76
    447e:	cf 2e       	mov	r12, r31
    4480:	f4 e0       	ldi	r31, 0x04	; 4
    4482:	df 2e       	mov	r13, r31
    4484:	f0 2d       	mov	r31, r0
    4486:	0f 2e       	mov	r0, r31
    4488:	f8 e5       	ldi	r31, 0x58	; 88
    448a:	af 2e       	mov	r10, r31
    448c:	f4 e0       	ldi	r31, 0x04	; 4
    448e:	bf 2e       	mov	r11, r31
    4490:	f0 2d       	mov	r31, r0
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    4492:	ce 01       	movw	r24, r28
    4494:	01 96       	adiw	r24, 0x01	; 1
    4496:	e5 de       	rcall	.-566    	; 0x4262 <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    4498:	be 01       	movw	r22, r28
    449a:	63 5f       	subi	r22, 0xF3	; 243
    449c:	7f 4f       	sbci	r23, 0xFF	; 255
    449e:	80 e4       	ldi	r24, 0x40	; 64
    44a0:	94 e0       	ldi	r25, 0x04	; 4
    44a2:	30 da       	rcall	.-2976   	; 0x3904 <copy_vector>
    44a4:	ce 01       	movw	r24, r28
    44a6:	01 96       	adiw	r24, 0x01	; 1
    44a8:	4c 01       	movw	r8, r24
    44aa:	0f 2e       	mov	r0, r31
    44ac:	f0 e4       	ldi	r31, 0x40	; 64
    44ae:	ef 2e       	mov	r14, r31
    44b0:	f4 e0       	ldi	r31, 0x04	; 4
    44b2:	ff 2e       	mov	r15, r31
    44b4:	f0 2d       	mov	r31, r0
    44b6:	87 01       	movw	r16, r14
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    44b8:	f4 01       	movw	r30, r8
    44ba:	61 91       	ld	r22, Z+
    44bc:	71 91       	ld	r23, Z+
    44be:	81 91       	ld	r24, Z+
    44c0:	91 91       	ld	r25, Z+
    44c2:	4f 01       	movw	r8, r30
    44c4:	2d ec       	ldi	r18, 0xCD	; 205
    44c6:	3c ec       	ldi	r19, 0xCC	; 204
    44c8:	4c e4       	ldi	r20, 0x4C	; 76
    44ca:	5e e3       	ldi	r21, 0x3E	; 62
    44cc:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    44d0:	9b 01       	movw	r18, r22
    44d2:	ac 01       	movw	r20, r24
    44d4:	f8 01       	movw	r30, r16
    44d6:	60 81       	ld	r22, Z
    44d8:	71 81       	ldd	r23, Z+1	; 0x01
    44da:	82 81       	ldd	r24, Z+2	; 0x02
    44dc:	93 81       	ldd	r25, Z+3	; 0x03
    44de:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    44e2:	f8 01       	movw	r30, r16
    44e4:	61 93       	st	Z+, r22
    44e6:	71 93       	st	Z+, r23
    44e8:	81 93       	st	Z+, r24
    44ea:	91 93       	st	Z+, r25
    44ec:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    44ee:	ec 15       	cp	r30, r12
    44f0:	fd 05       	cpc	r31, r13
    44f2:	11 f7       	brne	.-60     	; 0x44b8 <sgp_orbit_propagator+0x70>
    44f4:	ce 01       	movw	r24, r28
    44f6:	0d 96       	adiw	r24, 0x0d	; 13
    44f8:	4c 01       	movw	r8, r24
    44fa:	85 01       	movw	r16, r10
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    44fc:	f7 01       	movw	r30, r14
    44fe:	61 91       	ld	r22, Z+
    4500:	71 91       	ld	r23, Z+
    4502:	81 91       	ld	r24, Z+
    4504:	91 91       	ld	r25, Z+
    4506:	7f 01       	movw	r14, r30
    4508:	f4 01       	movw	r30, r8
    450a:	21 91       	ld	r18, Z+
    450c:	31 91       	ld	r19, Z+
    450e:	41 91       	ld	r20, Z+
    4510:	51 91       	ld	r21, Z+
    4512:	4f 01       	movw	r8, r30
    4514:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	5f e3       	ldi	r21, 0x3F	; 63
    4520:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4524:	2d ec       	ldi	r18, 0xCD	; 205
    4526:	3c ec       	ldi	r19, 0xCC	; 204
    4528:	4c e4       	ldi	r20, 0x4C	; 76
    452a:	5e e3       	ldi	r21, 0x3E	; 62
    452c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4530:	9b 01       	movw	r18, r22
    4532:	ac 01       	movw	r20, r24
    4534:	f8 01       	movw	r30, r16
    4536:	60 81       	ld	r22, Z
    4538:	71 81       	ldd	r23, Z+1	; 0x01
    453a:	82 81       	ldd	r24, Z+2	; 0x02
    453c:	93 81       	ldd	r25, Z+3	; 0x03
    453e:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4542:	f8 01       	movw	r30, r16
    4544:	61 93       	st	Z+, r22
    4546:	71 93       	st	Z+, r23
    4548:	81 93       	st	Z+, r24
    454a:	91 93       	st	Z+, r25
    454c:	8f 01       	movw	r16, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    454e:	ec 14       	cp	r14, r12
    4550:	fd 04       	cpc	r15, r13
    4552:	a1 f6       	brne	.-88     	; 0x44fc <sgp_orbit_propagator+0xb4>
    4554:	7a 94       	dec	r7
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    4556:	71 10       	cpse	r7, r1
    4558:	9c cf       	rjmp	.-200    	; 0x4492 <sgp_orbit_propagator+0x4a>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    455a:	68 96       	adiw	r28, 0x18	; 24
    455c:	0f b6       	in	r0, 0x3f	; 63
    455e:	f8 94       	cli
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	0f be       	out	0x3f, r0	; 63
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	ff 90       	pop	r15
    4570:	ef 90       	pop	r14
    4572:	df 90       	pop	r13
    4574:	cf 90       	pop	r12
    4576:	bf 90       	pop	r11
    4578:	af 90       	pop	r10
    457a:	9f 90       	pop	r9
    457c:	8f 90       	pop	r8
    457e:	7f 90       	pop	r7
    4580:	08 95       	ret

00004582 <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    4582:	4f 92       	push	r4
    4584:	5f 92       	push	r5
    4586:	6f 92       	push	r6
    4588:	7f 92       	push	r7
    458a:	8f 92       	push	r8
    458c:	9f 92       	push	r9
    458e:	af 92       	push	r10
    4590:	bf 92       	push	r11
    4592:	cf 92       	push	r12
    4594:	df 92       	push	r13
    4596:	ef 92       	push	r14
    4598:	ff 92       	push	r15
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	cd b7       	in	r28, 0x3d	; 61
    45a4:	de b7       	in	r29, 0x3e	; 62
    45a6:	2c 97       	sbiw	r28, 0x0c	; 12
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	f8 94       	cli
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	cd bf       	out	0x3d, r28	; 61
    45b2:	8c 01       	movw	r16, r24
  double time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega// floatch
    45b4:	20 91 98 04 	lds	r18, 0x0498
    45b8:	30 91 99 04 	lds	r19, 0x0499
    45bc:	40 91 9a 04 	lds	r20, 0x049A
    45c0:	50 91 9b 04 	lds	r21, 0x049B
    45c4:	60 91 9c 04 	lds	r22, 0x049C
    45c8:	70 91 9d 04 	lds	r23, 0x049D
    45cc:	80 91 9e 04 	lds	r24, 0x049E
    45d0:	90 91 9f 04 	lds	r25, 0x049F
    45d4:	0e 94 8c 32 	call	0x6518	; 0x6518 <__floatundisf>
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 ec       	ldi	r19, 0xC0	; 192
    45dc:	48 ea       	ldi	r20, 0xA8	; 168
    45de:	57 e4       	ldi	r21, 0x47	; 71
    45e0:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
  double lambda = (2 * M_PI * time_in_days) / 365.256363;// floatch
    45e4:	2b ed       	ldi	r18, 0xDB	; 219
    45e6:	3f e0       	ldi	r19, 0x0F	; 15
    45e8:	49 ec       	ldi	r20, 0xC9	; 201
    45ea:	50 e4       	ldi	r21, 0x40	; 64
    45ec:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    45f0:	21 ed       	ldi	r18, 0xD1	; 209
    45f2:	30 ea       	ldi	r19, 0xA0	; 160
    45f4:	46 eb       	ldi	r20, 0xB6	; 182
    45f6:	53 e4       	ldi	r21, 0x43	; 67
    45f8:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    45fc:	4b 01       	movw	r8, r22
    45fe:	5c 01       	movw	r10, r24
  double delta, alpha;// floatch
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    4600:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    4604:	20 e9       	ldi	r18, 0x90	; 144
    4606:	3e e2       	ldi	r19, 0x2E	; 46
    4608:	4c ec       	ldi	r20, 0xCC	; 204
    460a:	5e e3       	ldi	r21, 0x3E	; 62
    460c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4610:	0e 94 36 31 	call	0x626c	; 0x626c <asin>
    4614:	6b 01       	movw	r12, r22
    4616:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    4618:	c5 01       	movw	r24, r10
    461a:	b4 01       	movw	r22, r8
    461c:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    4620:	2b 01       	movw	r4, r22
    4622:	3c 01       	movw	r6, r24
    4624:	c7 01       	movw	r24, r14
    4626:	b6 01       	movw	r22, r12
    4628:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    462c:	4b 01       	movw	r8, r22
    462e:	5c 01       	movw	r10, r24
    4630:	9b 01       	movw	r18, r22
    4632:	ac 01       	movw	r20, r24
    4634:	c3 01       	movw	r24, r6
    4636:	b2 01       	movw	r22, r4
    4638:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    463c:	0e 94 c3 30 	call	0x6186	; 0x6186 <acos>
    4640:	2b 01       	movw	r4, r22
    4642:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	a9 01       	movw	r20, r18
    464a:	c7 01       	movw	r24, r14
    464c:	b6 01       	movw	r22, r12
    464e:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    4652:	88 23       	and	r24, r24
    4654:	54 f4       	brge	.+20     	; 0x466a <sun_vector_estimator+0xe8>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    4656:	a3 01       	movw	r20, r6
    4658:	92 01       	movw	r18, r4
    465a:	6b ed       	ldi	r22, 0xDB	; 219
    465c:	7f e0       	ldi	r23, 0x0F	; 15
    465e:	89 ec       	ldi	r24, 0xC9	; 201
    4660:	90 e4       	ldi	r25, 0x40	; 64
    4662:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    4666:	2b 01       	movw	r4, r22
    4668:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    466a:	c3 01       	movw	r24, r6
    466c:	b2 01       	movw	r22, r4
    466e:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    4672:	9b 01       	movw	r18, r22
    4674:	ac 01       	movw	r20, r24
    4676:	c5 01       	movw	r24, r10
    4678:	b4 01       	movw	r22, r8
    467a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    467e:	69 83       	std	Y+1, r22	; 0x01
    4680:	7a 83       	std	Y+2, r23	; 0x02
    4682:	8b 83       	std	Y+3, r24	; 0x03
    4684:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    4686:	c3 01       	movw	r24, r6
    4688:	b2 01       	movw	r22, r4
    468a:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    468e:	9b 01       	movw	r18, r22
    4690:	ac 01       	movw	r20, r24
    4692:	c5 01       	movw	r24, r10
    4694:	b4 01       	movw	r22, r8
    4696:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    469a:	6d 83       	std	Y+5, r22	; 0x05
    469c:	7e 83       	std	Y+6, r23	; 0x06
    469e:	8f 83       	std	Y+7, r24	; 0x07
    46a0:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    46a2:	c7 01       	movw	r24, r14
    46a4:	b6 01       	movw	r22, r12
    46a6:	0e 94 83 34 	call	0x6906	; 0x6906 <sin>
    46aa:	69 87       	std	Y+9, r22	; 0x09
    46ac:	7a 87       	std	Y+10, r23	; 0x0a
    46ae:	8b 87       	std	Y+11, r24	; 0x0b
    46b0:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    46b2:	2d ec       	ldi	r18, 0xCD	; 205
    46b4:	3c ec       	ldi	r19, 0xCC	; 204
    46b6:	4c ec       	ldi	r20, 0xCC	; 204
    46b8:	5d e3       	ldi	r21, 0x3D	; 61
    46ba:	60 91 3c 04 	lds	r22, 0x043C
    46be:	70 91 3d 04 	lds	r23, 0x043D
    46c2:	80 91 3e 04 	lds	r24, 0x043E
    46c6:	90 91 3f 04 	lds	r25, 0x043F
    46ca:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    46ce:	60 93 3c 04 	sts	0x043C, r22
    46d2:	70 93 3d 04 	sts	0x043D, r23
    46d6:	80 93 3e 04 	sts	0x043E, r24
    46da:	90 93 3f 04 	sts	0x043F, r25
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    46de:	98 01       	movw	r18, r16
    46e0:	ae 01       	movw	r20, r28
    46e2:	4f 5f       	subi	r20, 0xFF	; 255
    46e4:	5f 4f       	sbci	r21, 0xFF	; 255
    46e6:	60 e4       	ldi	r22, 0x40	; 64
    46e8:	74 e0       	ldi	r23, 0x04	; 4
    46ea:	88 e5       	ldi	r24, 0x58	; 88
    46ec:	94 e0       	ldi	r25, 0x04	; 4
    46ee:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    46f2:	2c 96       	adiw	r28, 0x0c	; 12
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	f8 94       	cli
    46f8:	de bf       	out	0x3e, r29	; 62
    46fa:	0f be       	out	0x3f, r0	; 63
    46fc:	cd bf       	out	0x3d, r28	; 61
    46fe:	df 91       	pop	r29
    4700:	cf 91       	pop	r28
    4702:	1f 91       	pop	r17
    4704:	0f 91       	pop	r16
    4706:	ff 90       	pop	r15
    4708:	ef 90       	pop	r14
    470a:	df 90       	pop	r13
    470c:	cf 90       	pop	r12
    470e:	bf 90       	pop	r11
    4710:	af 90       	pop	r10
    4712:	9f 90       	pop	r9
    4714:	8f 90       	pop	r8
    4716:	7f 90       	pop	r7
    4718:	6f 90       	pop	r6
    471a:	5f 90       	pop	r5
    471c:	4f 90       	pop	r4
    471e:	08 95       	ret

00004720 <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    4720:	8f 92       	push	r8
    4722:	9f 92       	push	r9
    4724:	af 92       	push	r10
    4726:	bf 92       	push	r11
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	cd b7       	in	r28, 0x3d	; 61
    4736:	de b7       	in	r29, 0x3e	; 62
    4738:	e0 97       	sbiw	r28, 0x30	; 48
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
    4744:	7c 01       	movw	r14, r24
  double time_in_years = 2016 + (float)seconds_since_pivot / SECONDS_IN_YEAR;// floatch
    4746:	20 91 90 04 	lds	r18, 0x0490
    474a:	30 91 91 04 	lds	r19, 0x0491
    474e:	40 91 92 04 	lds	r20, 0x0492
    4752:	50 91 93 04 	lds	r21, 0x0493
    4756:	60 91 94 04 	lds	r22, 0x0494
    475a:	70 91 95 04 	lds	r23, 0x0495
    475e:	80 91 96 04 	lds	r24, 0x0496
    4762:	90 91 97 04 	lds	r25, 0x0497
    4766:	0e 94 8c 32 	call	0x6518	; 0x6518 <__floatundisf>
    476a:	20 ec       	ldi	r18, 0xC0	; 192
    476c:	39 e9       	ldi	r19, 0x99	; 153
    476e:	40 ef       	ldi	r20, 0xF0	; 240
    4770:	5b e4       	ldi	r21, 0x4B	; 75
    4772:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	4c ef       	ldi	r20, 0xFC	; 252
    477c:	54 e4       	ldi	r21, 0x44	; 68
    477e:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4782:	4b 01       	movw	r8, r22
    4784:	5c 01       	movw	r10, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    4786:	be 01       	movw	r22, r28
    4788:	6f 5f       	subi	r22, 0xFF	; 255
    478a:	7f 4f       	sbci	r23, 0xFF	; 255
    478c:	88 e5       	ldi	r24, 0x58	; 88
    478e:	94 e0       	ldi	r25, 0x04	; 4
    4790:	0e 94 67 0e 	call	0x1cce	; 0x1cce <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    4794:	be 01       	movw	r22, r28
    4796:	63 5f       	subi	r22, 0xF3	; 243
    4798:	7f 4f       	sbci	r23, 0xFF	; 255
    479a:	ce 01       	movw	r24, r28
    479c:	01 96       	adiw	r24, 0x01	; 1
    479e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    47a2:	67 ea       	ldi	r22, 0xA7	; 167
    47a4:	74 e0       	ldi	r23, 0x04	; 4
    47a6:	ce 01       	movw	r24, r28
    47a8:	0d 96       	adiw	r24, 0x0d	; 13
    47aa:	ac d8       	rcall	.-3752   	; 0x3904 <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    47ac:	8e 01       	movw	r16, r28
    47ae:	07 5e       	subi	r16, 0xE7	; 231
    47b0:	1f 4f       	sbci	r17, 0xFF	; 255
    47b2:	28 e0       	ldi	r18, 0x08	; 8
    47b4:	b5 01       	movw	r22, r10
    47b6:	a4 01       	movw	r20, r8
    47b8:	ce 01       	movw	r24, r28
    47ba:	0d 96       	adiw	r24, 0x0d	; 13
    47bc:	0e 94 c5 14 	call	0x298a	; 0x298a <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    47c0:	ae 01       	movw	r20, r28
    47c2:	4f 5f       	subi	r20, 0xFF	; 255
    47c4:	5f 4f       	sbci	r21, 0xFF	; 255
    47c6:	be 01       	movw	r22, r28
    47c8:	63 5f       	subi	r22, 0xF3	; 243
    47ca:	7f 4f       	sbci	r23, 0xFF	; 255
    47cc:	c8 01       	movw	r24, r16
    47ce:	0e 94 21 11 	call	0x2242	; 0x2242 <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    47d2:	be 01       	movw	r22, r28
    47d4:	6b 5d       	subi	r22, 0xDB	; 219
    47d6:	7f 4f       	sbci	r23, 0xFF	; 255
    47d8:	ce 01       	movw	r24, r28
    47da:	01 96       	adiw	r24, 0x01	; 1
    47dc:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    47e0:	97 01       	movw	r18, r14
    47e2:	ae 01       	movw	r20, r28
    47e4:	4b 5d       	subi	r20, 0xDB	; 219
    47e6:	5f 4f       	sbci	r21, 0xFF	; 255
    47e8:	60 e4       	ldi	r22, 0x40	; 64
    47ea:	74 e0       	ldi	r23, 0x04	; 4
    47ec:	88 e5       	ldi	r24, 0x58	; 88
    47ee:	94 e0       	ldi	r25, 0x04	; 4
    47f0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    47f4:	e0 96       	adiw	r28, 0x30	; 48
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	f8 94       	cli
    47fa:	de bf       	out	0x3e, r29	; 62
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	cd bf       	out	0x3d, r28	; 61
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	1f 91       	pop	r17
    4806:	0f 91       	pop	r16
    4808:	ff 90       	pop	r15
    480a:	ef 90       	pop	r14
    480c:	bf 90       	pop	r11
    480e:	af 90       	pop	r10
    4810:	9f 90       	pop	r9
    4812:	8f 90       	pop	r8
    4814:	08 95       	ret

00004816 <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4816:	ef 92       	push	r14
    4818:	ff 92       	push	r15
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	c0 ef       	ldi	r28, 0xF0	; 240
    4822:	d4 e0       	ldi	r29, 0x04	; 4
    4824:	0f 2e       	mov	r0, r31
    4826:	f8 e0       	ldi	r31, 0x08	; 8
    4828:	ef 2e       	mov	r14, r31
    482a:	f5 e0       	ldi	r31, 0x05	; 5
    482c:	ff 2e       	mov	r15, r31
    482e:	f0 2d       	mov	r31, r0
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    4830:	10 e0       	ldi	r17, 0x00	; 0
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4832:	69 91       	ld	r22, Y+
    4834:	79 91       	ld	r23, Y+
    4836:	89 91       	ld	r24, Y+
    4838:	99 91       	ld	r25, Y+
    483a:	27 e2       	ldi	r18, 0x27	; 39
    483c:	31 e3       	ldi	r19, 0x31	; 49
    483e:	48 ec       	ldi	r20, 0xC8	; 200
    4840:	5e e3       	ldi	r21, 0x3E	; 62
    4842:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    4846:	88 23       	and	r24, r24
    4848:	0c f4       	brge	.+2      	; 0x484c <light_cal+0x36>
		  num_dark_sensors++;
    484a:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    484c:	ce 15       	cp	r28, r14
    484e:	df 05       	cpc	r29, r15
    4850:	81 f7       	brne	.-32     	; 0x4832 <light_cal+0x1c>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	16 30       	cpi	r17, 0x06	; 6
    4856:	09 f4       	brne	.+2      	; 0x485a <light_cal+0x44>
    4858:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	1f 91       	pop	r17
    4860:	ff 90       	pop	r15
    4862:	ef 90       	pop	r14
    4864:	08 95       	ret

00004866 <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    4866:	2f 92       	push	r2
    4868:	3f 92       	push	r3
    486a:	4f 92       	push	r4
    486c:	5f 92       	push	r5
    486e:	6f 92       	push	r6
    4870:	7f 92       	push	r7
    4872:	8f 92       	push	r8
    4874:	9f 92       	push	r9
    4876:	af 92       	push	r10
    4878:	bf 92       	push	r11
    487a:	cf 92       	push	r12
    487c:	df 92       	push	r13
    487e:	ef 92       	push	r14
    4880:	ff 92       	push	r15
    4882:	0f 93       	push	r16
    4884:	1f 93       	push	r17
    4886:	cf 93       	push	r28
    4888:	df 93       	push	r29
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	cb 57       	subi	r28, 0x7B	; 123
    4890:	d1 09       	sbc	r29, r1
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	0f be       	out	0x3f, r0	; 63
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	af 96       	adiw	r28, 0x2f	; 47
    489e:	9f af       	std	Y+63, r25	; 0x3f
    48a0:	8e af       	std	Y+62, r24	; 0x3e
    48a2:	af 97       	sbiw	r28, 0x2f	; 47
    48a4:	e5 96       	adiw	r28, 0x35	; 53
    48a6:	7f af       	std	Y+63, r23	; 0x3f
    48a8:	6e af       	std	Y+62, r22	; 0x3e
    48aa:	e5 97       	sbiw	r28, 0x35	; 53
    48ac:	e3 96       	adiw	r28, 0x33	; 51
    48ae:	5f af       	std	Y+63, r21	; 0x3f
    48b0:	4e af       	std	Y+62, r20	; 0x3e
    48b2:	e3 97       	sbiw	r28, 0x33	; 51
    48b4:	79 01       	movw	r14, r18
    48b6:	00 ef       	ldi	r16, 0xF0	; 240
    48b8:	14 e0       	ldi	r17, 0x04	; 4
    48ba:	0f 2e       	mov	r0, r31
    48bc:	f8 e0       	ldi	r31, 0x08	; 8
    48be:	cf 2e       	mov	r12, r31
    48c0:	f5 e0       	ldi	r31, 0x05	; 5
    48c2:	df 2e       	mov	r13, r31
    48c4:	f0 2d       	mov	r31, r0
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  double * sun_adc = (double *)Current_state.ss.read;// floatch
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    48c6:	b1 2c       	mov	r11, r1
  
  
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    48c8:	f8 01       	movw	r30, r16
    48ca:	61 91       	ld	r22, Z+
    48cc:	71 91       	ld	r23, Z+
    48ce:	81 91       	ld	r24, Z+
    48d0:	91 91       	ld	r25, Z+
    48d2:	8f 01       	movw	r16, r30
    48d4:	27 e2       	ldi	r18, 0x27	; 39
    48d6:	31 e3       	ldi	r19, 0x31	; 49
    48d8:	48 ec       	ldi	r20, 0xC8	; 200
    48da:	5e e3       	ldi	r21, 0x3E	; 62
    48dc:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    48e0:	88 23       	and	r24, r24
    48e2:	0c f4       	brge	.+2      	; 0x48e6 <quest+0x80>
      num_dark_sensors++;
    48e4:	b3 94       	inc	r11
  vector v_temp1, v_temp2;
  vector v_triad;
  double mu, nu, rho, k, triad;// floatch
  
  
  for(i = 0; i < N_SS; i++)
    48e6:	0c 15       	cp	r16, r12
    48e8:	1d 05       	cpc	r17, r13
    48ea:	71 f7       	brne	.-36     	; 0x48c8 <quest+0x62>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.17 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    48ec:	f1 e0       	ldi	r31, 0x01	; 1
    48ee:	e8 96       	adiw	r28, 0x38	; 56
    48f0:	ff af       	std	Y+63, r31	; 0x3f
    48f2:	e8 97       	sbiw	r28, 0x38	; 56
    48f4:	26 e0       	ldi	r18, 0x06	; 6
    48f6:	b2 12       	cpse	r11, r18
    48f8:	03 c0       	rjmp	.+6      	; 0x4900 <quest+0x9a>
    48fa:	e8 96       	adiw	r28, 0x38	; 56
    48fc:	1f ae       	std	Y+63, r1	; 0x3f
    48fe:	e8 97       	sbiw	r28, 0x38	; 56
    light = 0;
  
  if(light)
    4900:	e8 96       	adiw	r28, 0x38	; 56
    4902:	8f ad       	ldd	r24, Y+63	; 0x3f
    4904:	e8 97       	sbiw	r28, 0x38	; 56
    4906:	88 23       	and	r24, r24
    4908:	09 f4       	brne	.+2      	; 0x490c <quest+0xa6>
    490a:	11 c3       	rjmp	.+1570   	; 0x4f2e <quest+0x6c8>
  {
    if(!*p_w_ctrl)
    490c:	f7 01       	movw	r30, r14
    490e:	80 81       	ld	r24, Z
    4910:	81 11       	cpse	r24, r1
    4912:	0f c0       	rjmp	.+30     	; 0x4932 <quest+0xcc>
    {
      time_since_light += FRAME_TIME;
    4914:	80 91 64 04 	lds	r24, 0x0464
    4918:	90 91 65 04 	lds	r25, 0x0465
    491c:	02 96       	adiw	r24, 0x02	; 2
    491e:	90 93 65 04 	sts	0x0465, r25
    4922:	80 93 64 04 	sts	0x0464, r24
      if(time_since_light == 300)
    4926:	8c 32       	cpi	r24, 0x2C	; 44
    4928:	91 40       	sbci	r25, 0x01	; 1
    492a:	19 f4       	brne	.+6      	; 0x4932 <quest+0xcc>
        *p_w_ctrl = 1;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	f7 01       	movw	r30, r14
    4930:	80 83       	st	Z, r24
    }
    
    if(light_prev == 0)
    4932:	80 91 12 01 	lds	r24, 0x0112
    4936:	81 11       	cpse	r24, r1
    4938:	13 c3       	rjmp	.+1574   	; 0x4f60 <quest+0x6fa>
    {
      *p_w_ctrl = 0;
    493a:	f7 01       	movw	r30, r14
    493c:	10 82       	st	Z, r1
      time_since_light = 0;
    493e:	10 92 65 04 	sts	0x0465, r1
    4942:	10 92 64 04 	sts	0x0464, r1
    4946:	0c c3       	rjmp	.+1560   	; 0x4f60 <quest+0x6fa>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4948:	89 86       	std	Y+9, r8	; 0x09
    494a:	9a 86       	std	Y+10, r9	; 0x0a
    494c:	ab 86       	std	Y+11, r10	; 0x0b
    494e:	bc 86       	std	Y+12, r11	; 0x0c
    4950:	08 c0       	rjmp	.+16     	; 0x4962 <quest+0xfc>
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4952:	f7 fa       	bst	r15, 7
    4954:	f0 94       	com	r15
    4956:	f7 f8       	bld	r15, 7
    4958:	f0 94       	com	r15
    495a:	c9 86       	std	Y+9, r12	; 0x09
    495c:	da 86       	std	Y+10, r13	; 0x0a
    495e:	eb 86       	std	Y+11, r14	; 0x0b
    4960:	fc 86       	std	Y+12, r15	; 0x0c
    4962:	8e 01       	movw	r16, r28
    4964:	0f 5f       	subi	r16, 0xFF	; 255
    4966:	1f 4f       	sbci	r17, 0xFF	; 255
    4968:	1e 01       	movw	r2, r28
    496a:	fd e0       	ldi	r31, 0x0D	; 13
    496c:	2f 0e       	add	r2, r31
    496e:	31 1c       	adc	r3, r1

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
	{
		temp = (fabs(v_sun_m[i])-1.05)/1.514;
    4970:	f8 01       	movw	r30, r16
    4972:	c0 80       	ld	r12, Z
    4974:	d1 80       	ldd	r13, Z+1	; 0x01
    4976:	e2 80       	ldd	r14, Z+2	; 0x02
    4978:	f3 80       	ldd	r15, Z+3	; 0x03
    497a:	46 01       	movw	r8, r12
    497c:	57 01       	movw	r10, r14
    497e:	e8 94       	clt
    4980:	b7 f8       	bld	r11, 7
    4982:	26 e6       	ldi	r18, 0x66	; 102
    4984:	36 e6       	ldi	r19, 0x66	; 102
    4986:	46 e8       	ldi	r20, 0x86	; 134
    4988:	5f e3       	ldi	r21, 0x3F	; 63
    498a:	c5 01       	movw	r24, r10
    498c:	b4 01       	movw	r22, r8
    498e:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    4992:	21 ec       	ldi	r18, 0xC1	; 193
    4994:	3a ec       	ldi	r19, 0xCA	; 202
    4996:	41 ec       	ldi	r20, 0xC1	; 193
    4998:	5f e3       	ldi	r21, 0x3F	; 63
    499a:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
		ang = acos(temp)*180.0/3.14159;
    499e:	0e 94 c3 30 	call	0x6186	; 0x6186 <acos>
    49a2:	20 e0       	ldi	r18, 0x00	; 0
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	44 e3       	ldi	r20, 0x34	; 52
    49a8:	53 e4       	ldi	r21, 0x43	; 67
    49aa:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    49ae:	20 ed       	ldi	r18, 0xD0	; 208
    49b0:	3f e0       	ldi	r19, 0x0F	; 15
    49b2:	49 e4       	ldi	r20, 0x49	; 73
    49b4:	50 e4       	ldi	r21, 0x40	; 64
    49b6:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
		angle = (ang+9.9)/1.65*3.14159/180.0;
    49ba:	26 e6       	ldi	r18, 0x66	; 102
    49bc:	36 e6       	ldi	r19, 0x66	; 102
    49be:	4e e1       	ldi	r20, 0x1E	; 30
    49c0:	51 e4       	ldi	r21, 0x41	; 65
    49c2:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    49c6:	23 e3       	ldi	r18, 0x33	; 51
    49c8:	33 e3       	ldi	r19, 0x33	; 51
    49ca:	43 ed       	ldi	r20, 0xD3	; 211
    49cc:	5f e3       	ldi	r21, 0x3F	; 63
    49ce:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    49d2:	20 ed       	ldi	r18, 0xD0	; 208
    49d4:	3f e0       	ldi	r19, 0x0F	; 15
    49d6:	49 e4       	ldi	r20, 0x49	; 73
    49d8:	50 e4       	ldi	r21, 0x40	; 64
    49da:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	44 e3       	ldi	r20, 0x34	; 52
    49e4:	53 e4       	ldi	r21, 0x43	; 67
    49e6:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    49ea:	2b 01       	movw	r4, r22
    49ec:	3c 01       	movw	r6, r24
		if (v_sun_m[i] != 0) 
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	a9 01       	movw	r20, r18
    49f4:	c7 01       	movw	r24, r14
    49f6:	b6 01       	movw	r22, r12
    49f8:	0e 94 af 31 	call	0x635e	; 0x635e <__cmpsf2>
    49fc:	88 23       	and	r24, r24
    49fe:	c1 f0       	breq	.+48     	; 0x4a30 <quest+0x1ca>
		v_sun_m[i] = cos(angle)*(fabs(v_sun_m[i])/v_sun_m[i]);
    4a00:	c3 01       	movw	r24, r6
    4a02:	b2 01       	movw	r22, r4
    4a04:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    4a08:	2b 01       	movw	r4, r22
    4a0a:	3c 01       	movw	r6, r24
    4a0c:	a7 01       	movw	r20, r14
    4a0e:	96 01       	movw	r18, r12
    4a10:	c5 01       	movw	r24, r10
    4a12:	b4 01       	movw	r22, r8
    4a14:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4a18:	9b 01       	movw	r18, r22
    4a1a:	ac 01       	movw	r20, r24
    4a1c:	c3 01       	movw	r24, r6
    4a1e:	b2 01       	movw	r22, r4
    4a20:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4a24:	f8 01       	movw	r30, r16
    4a26:	60 83       	st	Z, r22
    4a28:	71 83       	std	Z+1, r23	; 0x01
    4a2a:	82 83       	std	Z+2, r24	; 0x02
    4a2c:	93 83       	std	Z+3, r25	; 0x03
    4a2e:	09 c0       	rjmp	.+18     	; 0x4a42 <quest+0x1dc>
		else
		v_sun_m[i] = cos(angle);
    4a30:	c3 01       	movw	r24, r6
    4a32:	b2 01       	movw	r22, r4
    4a34:	0e 94 b3 31 	call	0x6366	; 0x6366 <cos>
    4a38:	f8 01       	movw	r30, r16
    4a3a:	60 83       	st	Z, r22
    4a3c:	71 83       	std	Z+1, r23	; 0x01
    4a3e:	82 83       	std	Z+2, r24	; 0x02
    4a40:	93 83       	std	Z+3, r25	; 0x03
    4a42:	0c 5f       	subi	r16, 0xFC	; 252
    4a44:	1f 4f       	sbci	r17, 0xFF	; 255
    }
	

	double temp=0,ang=0,angle=0;
	// added recently- Sun sensor calibration eq
	for(i = 0; i < N_SS/2; i++)
    4a46:	02 15       	cp	r16, r2
    4a48:	13 05       	cpc	r17, r3
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <quest+0x1e8>
    4a4c:	91 cf       	rjmp	.-222    	; 0x4970 <quest+0x10a>
		transmit_UART0(sen);
		transmit_UART0(sen1);
		transmit_UART0(sen2);
		transmit_UART0(sen3);
	}*/
	convert_unit_vector(v_sun_m);
    4a4e:	ce 01       	movw	r24, r28
    4a50:	01 96       	adiw	r24, 0x01	; 1
    4a52:	51 da       	rcall	.-2910   	; 0x3ef6 <convert_unit_vector>
	  v_B_m[2] = Current_state.mm.B_x;
    4a54:	80 91 08 05 	lds	r24, 0x0508
    4a58:	90 91 09 05 	lds	r25, 0x0509
    4a5c:	a0 91 0a 05 	lds	r26, 0x050A
    4a60:	b0 91 0b 05 	lds	r27, 0x050B
    4a64:	8d 8b       	std	Y+21, r24	; 0x15
    4a66:	9e 8b       	std	Y+22, r25	; 0x16
    4a68:	af 8b       	std	Y+23, r26	; 0x17
    4a6a:	b8 8f       	std	Y+24, r27	; 0x18
	  v_B_m[1] = -1*Current_state.mm.B_y;
    4a6c:	80 91 0c 05 	lds	r24, 0x050C
    4a70:	90 91 0d 05 	lds	r25, 0x050D
    4a74:	a0 91 0e 05 	lds	r26, 0x050E
    4a78:	b0 91 0f 05 	lds	r27, 0x050F
    4a7c:	b0 58       	subi	r27, 0x80	; 128
    4a7e:	89 8b       	std	Y+17, r24	; 0x11
    4a80:	9a 8b       	std	Y+18, r25	; 0x12
    4a82:	ab 8b       	std	Y+19, r26	; 0x13
    4a84:	bc 8b       	std	Y+20, r27	; 0x14
	  v_B_m[0] = Current_state.mm.B_z;
    4a86:	80 91 10 05 	lds	r24, 0x0510
    4a8a:	90 91 11 05 	lds	r25, 0x0511
    4a8e:	a0 91 12 05 	lds	r26, 0x0512
    4a92:	b0 91 13 05 	lds	r27, 0x0513
    4a96:	8d 87       	std	Y+13, r24	; 0x0d
    4a98:	9e 87       	std	Y+14, r25	; 0x0e
    4a9a:	af 87       	std	Y+15, r26	; 0x0f
    4a9c:	b8 8b       	std	Y+16, r27	; 0x10
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    4a9e:	ae 01       	movw	r20, r28
    4aa0:	47 5e       	subi	r20, 0xE7	; 231
    4aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa4:	be 01       	movw	r22, r28
    4aa6:	6f 5f       	subi	r22, 0xFF	; 255
    4aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aaa:	ce 01       	movw	r24, r28
    4aac:	0d 96       	adiw	r24, 0x0d	; 13
    4aae:	48 d9       	rcall	.-3440   	; 0x3d40 <vector_cross_product>
    convert_unit_vector(v_cross_m);
    4ab0:	ce 01       	movw	r24, r28
    4ab2:	49 96       	adiw	r24, 0x19	; 25
    4ab4:	20 da       	rcall	.-3008   	; 0x3ef6 <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    4ab6:	ae 01       	movw	r20, r28
    4ab8:	4b 5d       	subi	r20, 0xDB	; 219
    4aba:	5f 4f       	sbci	r21, 0xFF	; 255
    4abc:	e5 96       	adiw	r28, 0x35	; 53
    4abe:	6e ad       	ldd	r22, Y+62	; 0x3e
    4ac0:	7f ad       	ldd	r23, Y+63	; 0x3f
    4ac2:	e5 97       	sbiw	r28, 0x35	; 53
    4ac4:	af 96       	adiw	r28, 0x2f	; 47
    4ac6:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ac8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4aca:	af 97       	sbiw	r28, 0x2f	; 47
    4acc:	39 d9       	rcall	.-3470   	; 0x3d40 <vector_cross_product>
    convert_unit_vector(v_cross_c);
    4ace:	ce 01       	movw	r24, r28
    4ad0:	85 96       	adiw	r24, 0x25	; 37
    4ad2:	11 da       	rcall	.-3038   	; 0x3ef6 <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    4ad4:	be 01       	movw	r22, r28
    4ad6:	6b 5d       	subi	r22, 0xDB	; 219
    4ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    4ada:	ce 01       	movw	r24, r28
    4adc:	49 96       	adiw	r24, 0x19	; 25
    4ade:	5f d8       	rcall	.-3906   	; 0x3b9e <vector_dot_product>
    4ae0:	6b 01       	movw	r12, r22
    4ae2:	7c 01       	movw	r14, r24
    4ae4:	af 96       	adiw	r28, 0x2f	; 47
    4ae6:	6e ad       	ldd	r22, Y+62	; 0x3e
    4ae8:	7f ad       	ldd	r23, Y+63	; 0x3f
    4aea:	af 97       	sbiw	r28, 0x2f	; 47
    4aec:	ce 01       	movw	r24, r28
    4aee:	0d 96       	adiw	r24, 0x0d	; 13
    4af0:	56 d8       	rcall	.-3924   	; 0x3b9e <vector_dot_product>
    4af2:	4b 01       	movw	r8, r22
    4af4:	5c 01       	movw	r10, r24
    4af6:	e5 96       	adiw	r28, 0x35	; 53
    4af8:	6e ad       	ldd	r22, Y+62	; 0x3e
    4afa:	7f ad       	ldd	r23, Y+63	; 0x3f
    4afc:	e5 97       	sbiw	r28, 0x35	; 53
    4afe:	ce 01       	movw	r24, r28
    4b00:	01 96       	adiw	r24, 0x01	; 1
    4b02:	4d d8       	rcall	.-3942   	; 0x3b9e <vector_dot_product>
    4b04:	2b 01       	movw	r4, r22
    4b06:	3c 01       	movw	r6, r24
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	40 e8       	ldi	r20, 0x80	; 128
    4b0e:	5f e3       	ldi	r21, 0x3F	; 63
    4b10:	c7 01       	movw	r24, r14
    4b12:	b6 01       	movw	r22, r12
    4b14:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4b18:	6b 01       	movw	r12, r22
    4b1a:	7c 01       	movw	r14, r24
    4b1c:	26 e6       	ldi	r18, 0x66	; 102
    4b1e:	36 e6       	ldi	r19, 0x66	; 102
    4b20:	46 e6       	ldi	r20, 0x66	; 102
    4b22:	5f e3       	ldi	r21, 0x3F	; 63
    4b24:	c5 01       	movw	r24, r10
    4b26:	b4 01       	movw	r22, r8
    4b28:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4b2c:	4b 01       	movw	r8, r22
    4b2e:	5c 01       	movw	r10, r24
    4b30:	20 ed       	ldi	r18, 0xD0	; 208
    4b32:	3c ec       	ldi	r19, 0xCC	; 204
    4b34:	4c ec       	ldi	r20, 0xCC	; 204
    4b36:	5d e3       	ldi	r21, 0x3D	; 61
    4b38:	c3 01       	movw	r24, r6
    4b3a:	b2 01       	movw	r22, r4
    4b3c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4b40:	9b 01       	movw	r18, r22
    4b42:	ac 01       	movw	r20, r24
    4b44:	c5 01       	movw	r24, r10
    4b46:	b4 01       	movw	r22, r8
    4b48:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4b4c:	9b 01       	movw	r18, r22
    4b4e:	ac 01       	movw	r20, r24
    4b50:	c7 01       	movw	r24, r14
    4b52:	b6 01       	movw	r22, r12
    4b54:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4b58:	4b 01       	movw	r8, r22
    4b5a:	5c 01       	movw	r10, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4b5c:	ae 01       	movw	r20, r28
    4b5e:	47 5b       	subi	r20, 0xB7	; 183
    4b60:	5f 4f       	sbci	r21, 0xFF	; 255
    4b62:	af 96       	adiw	r28, 0x2f	; 47
    4b64:	6e ad       	ldd	r22, Y+62	; 0x3e
    4b66:	7f ad       	ldd	r23, Y+63	; 0x3f
    4b68:	af 97       	sbiw	r28, 0x2f	; 47
    4b6a:	ce 01       	movw	r24, r28
    4b6c:	0d 96       	adiw	r24, 0x0d	; 13
    4b6e:	e8 d8       	rcall	.-3632   	; 0x3d40 <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4b70:	ae 01       	movw	r20, r28
    4b72:	4b 5a       	subi	r20, 0xAB	; 171
    4b74:	5f 4f       	sbci	r21, 0xFF	; 255
    4b76:	e5 96       	adiw	r28, 0x35	; 53
    4b78:	6e ad       	ldd	r22, Y+62	; 0x3e
    4b7a:	7f ad       	ldd	r23, Y+63	; 0x3f
    4b7c:	e5 97       	sbiw	r28, 0x35	; 53
    4b7e:	ce 01       	movw	r24, r28
    4b80:	01 96       	adiw	r24, 0x01	; 1
    4b82:	de d8       	rcall	.-3652   	; 0x3d40 <vector_cross_product>
    4b84:	ce 01       	movw	r24, r28
    4b86:	87 5b       	subi	r24, 0xB7	; 183
    4b88:	9f 4f       	sbci	r25, 0xFF	; 255
    4b8a:	7c 01       	movw	r14, r24
    4b8c:	8e 01       	movw	r16, r28
    4b8e:	0b 5a       	subi	r16, 0xAB	; 171
    4b90:	1f 4f       	sbci	r17, 0xFF	; 255
    4b92:	68 01       	movw	r12, r16
    4b94:	9c e0       	ldi	r25, 0x0C	; 12
    4b96:	c9 0e       	add	r12, r25
    4b98:	d1 1c       	adc	r13, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4b9a:	f7 01       	movw	r30, r14
    4b9c:	61 91       	ld	r22, Z+
    4b9e:	71 91       	ld	r23, Z+
    4ba0:	81 91       	ld	r24, Z+
    4ba2:	91 91       	ld	r25, Z+
    4ba4:	7f 01       	movw	r14, r30
    4ba6:	26 e6       	ldi	r18, 0x66	; 102
    4ba8:	36 e6       	ldi	r19, 0x66	; 102
    4baa:	46 e6       	ldi	r20, 0x66	; 102
    4bac:	5f e3       	ldi	r21, 0x3F	; 63
    4bae:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4bb2:	2b 01       	movw	r4, r22
    4bb4:	3c 01       	movw	r6, r24
    4bb6:	20 ed       	ldi	r18, 0xD0	; 208
    4bb8:	3c ec       	ldi	r19, 0xCC	; 204
    4bba:	4c ec       	ldi	r20, 0xCC	; 204
    4bbc:	5d e3       	ldi	r21, 0x3D	; 61
    4bbe:	f8 01       	movw	r30, r16
    4bc0:	60 81       	ld	r22, Z
    4bc2:	71 81       	ldd	r23, Z+1	; 0x01
    4bc4:	82 81       	ldd	r24, Z+2	; 0x02
    4bc6:	93 81       	ldd	r25, Z+3	; 0x03
    4bc8:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4bcc:	9b 01       	movw	r18, r22
    4bce:	ac 01       	movw	r20, r24
    4bd0:	c3 01       	movw	r24, r6
    4bd2:	b2 01       	movw	r22, r4
    4bd4:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4bd8:	f8 01       	movw	r30, r16
    4bda:	61 93       	st	Z+, r22
    4bdc:	71 93       	st	Z+, r23
    4bde:	81 93       	st	Z+, r24
    4be0:	91 93       	st	Z+, r25
    4be2:	8f 01       	movw	r16, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4be4:	ec 15       	cp	r30, r12
    4be6:	fd 05       	cpc	r31, r13
    4be8:	c1 f6       	brne	.-80     	; 0x4b9a <quest+0x334>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4bea:	ae 01       	movw	r20, r28
    4bec:	4f 5c       	subi	r20, 0xCF	; 207
    4bee:	5f 4f       	sbci	r21, 0xFF	; 255
    4bf0:	be 01       	movw	r22, r28
    4bf2:	6b 5d       	subi	r22, 0xDB	; 219
    4bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf6:	ce 01       	movw	r24, r28
    4bf8:	49 96       	adiw	r24, 0x19	; 25
    4bfa:	a2 d8       	rcall	.-3772   	; 0x3d40 <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4bfc:	be 01       	movw	r22, r28
    4bfe:	6b 5a       	subi	r22, 0xAB	; 171
    4c00:	7f 4f       	sbci	r23, 0xFF	; 255
    4c02:	ce 01       	movw	r24, r28
    4c04:	c1 96       	adiw	r24, 0x31	; 49
    4c06:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vector_dot_product>
    4c0a:	a5 01       	movw	r20, r10
    4c0c:	94 01       	movw	r18, r8
    4c0e:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4c12:	6b 01       	movw	r12, r22
    4c14:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4c16:	ae 01       	movw	r20, r28
    4c18:	43 5c       	subi	r20, 0xC3	; 195
    4c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c1c:	be 01       	movw	r22, r28
    4c1e:	6b 5d       	subi	r22, 0xDB	; 219
    4c20:	7f 4f       	sbci	r23, 0xFF	; 255
    4c22:	ce 01       	movw	r24, r28
    4c24:	49 96       	adiw	r24, 0x19	; 25
    4c26:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4c2a:	be 01       	movw	r22, r28
    4c2c:	6b 5a       	subi	r22, 0xAB	; 171
    4c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c30:	ce 01       	movw	r24, r28
    4c32:	cd 96       	adiw	r24, 0x3d	; 61
    4c34:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vector_dot_product>
    4c38:	e1 96       	adiw	r28, 0x31	; 49
    4c3a:	6c af       	std	Y+60, r22	; 0x3c
    4c3c:	7d af       	std	Y+61, r23	; 0x3d
    4c3e:	8e af       	std	Y+62, r24	; 0x3e
    4c40:	9f af       	std	Y+63, r25	; 0x3f
    4c42:	e1 97       	sbiw	r28, 0x31	; 49
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4c44:	a7 01       	movw	r20, r14
    4c46:	96 01       	movw	r18, r12
    4c48:	c7 01       	movw	r24, r14
    4c4a:	b6 01       	movw	r22, r12
    4c4c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4c50:	4b 01       	movw	r8, r22
    4c52:	5c 01       	movw	r10, r24
    4c54:	e1 96       	adiw	r28, 0x31	; 49
    4c56:	2c ad       	ldd	r18, Y+60	; 0x3c
    4c58:	3d ad       	ldd	r19, Y+61	; 0x3d
    4c5a:	4e ad       	ldd	r20, Y+62	; 0x3e
    4c5c:	5f ad       	ldd	r21, Y+63	; 0x3f
    4c5e:	e1 97       	sbiw	r28, 0x31	; 49
    4c60:	ca 01       	movw	r24, r20
    4c62:	b9 01       	movw	r22, r18
    4c64:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4c68:	2b 01       	movw	r4, r22
    4c6a:	3c 01       	movw	r6, r24
    4c6c:	a3 01       	movw	r20, r6
    4c6e:	92 01       	movw	r18, r4
    4c70:	c5 01       	movw	r24, r10
    4c72:	b4 01       	movw	r22, r8
    4c74:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4c78:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    4c7c:	4b 01       	movw	r8, r22
    4c7e:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	a9 01       	movw	r20, r18
    4c86:	c7 01       	movw	r24, r14
    4c88:	b6 01       	movw	r22, r12
    4c8a:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    4c8e:	18 16       	cp	r1, r24
    4c90:	0c f0       	brlt	.+2      	; 0x4c94 <quest+0x42e>
    4c92:	90 c0       	rjmp	.+288    	; 0x4db4 <quest+0x54e>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4c94:	a7 01       	movw	r20, r14
    4c96:	96 01       	movw	r18, r12
    4c98:	c5 01       	movw	r24, r10
    4c9a:	b4 01       	movw	r22, r8
    4c9c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4ca0:	e7 96       	adiw	r28, 0x37	; 55
    4ca2:	6c af       	std	Y+60, r22	; 0x3c
    4ca4:	7d af       	std	Y+61, r23	; 0x3d
    4ca6:	8e af       	std	Y+62, r24	; 0x3e
    4ca8:	9f af       	std	Y+63, r25	; 0x3f
    4caa:	e7 97       	sbiw	r28, 0x37	; 55
    4cac:	a5 01       	movw	r20, r10
    4cae:	94 01       	movw	r18, r8
    4cb0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4cb4:	4b 01       	movw	r8, r22
    4cb6:	5c 01       	movw	r10, r24
    4cb8:	be 01       	movw	r22, r28
    4cba:	6b 5d       	subi	r22, 0xDB	; 219
    4cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	49 96       	adiw	r24, 0x19	; 25
    4cc2:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vector_dot_product>
    4cc6:	2b 01       	movw	r4, r22
    4cc8:	3c 01       	movw	r6, r24
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	40 e8       	ldi	r20, 0x80	; 128
    4cd0:	5f e3       	ldi	r21, 0x3F	; 63
    4cd2:	c3 01       	movw	r24, r6
    4cd4:	b2 01       	movw	r22, r4
    4cd6:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4cda:	9b 01       	movw	r18, r22
    4cdc:	ac 01       	movw	r20, r24
    4cde:	c5 01       	movw	r24, r10
    4ce0:	b4 01       	movw	r22, r8
    4ce2:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4ce6:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    4cea:	9b 01       	movw	r18, r22
    4cec:	ac 01       	movw	r20, r24
    4cee:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4cf2:	9b 01       	movw	r18, r22
    4cf4:	ac 01       	movw	r20, r24
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	80 e8       	ldi	r24, 0x80	; 128
    4cfc:	9f e3       	ldi	r25, 0x3F	; 63
    4cfe:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4d02:	ec 96       	adiw	r28, 0x3c	; 60
    4d04:	6c af       	std	Y+60, r22	; 0x3c
    4d06:	7d af       	std	Y+61, r23	; 0x3d
    4d08:	8e af       	std	Y+62, r24	; 0x3e
    4d0a:	9f af       	std	Y+63, r25	; 0x3f
    4d0c:	ec 97       	sbiw	r28, 0x3c	; 60
    4d0e:	8e 01       	movw	r16, r28
    4d10:	0f 5c       	subi	r16, 0xCF	; 207
    4d12:	1f 4f       	sbci	r17, 0xFF	; 255
    4d14:	1e 01       	movw	r2, r28
    4d16:	fd e3       	ldi	r31, 0x3D	; 61
    4d18:	2f 0e       	add	r2, r31
    4d1a:	31 1c       	adc	r3, r1
    4d1c:	6e 01       	movw	r12, r28
    4d1e:	21 e6       	ldi	r18, 0x61	; 97
    4d20:	c2 0e       	add	r12, r18
    4d22:	d1 1c       	adc	r13, r1
    4d24:	71 01       	movw	r14, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4d26:	f8 01       	movw	r30, r16
    4d28:	21 91       	ld	r18, Z+
    4d2a:	31 91       	ld	r19, Z+
    4d2c:	41 91       	ld	r20, Z+
    4d2e:	51 91       	ld	r21, Z+
    4d30:	8f 01       	movw	r16, r30
    4d32:	f1 01       	movw	r30, r2
    4d34:	41 90       	ld	r4, Z+
    4d36:	51 90       	ld	r5, Z+
    4d38:	61 90       	ld	r6, Z+
    4d3a:	71 90       	ld	r7, Z+
    4d3c:	1f 01       	movw	r2, r30
    4d3e:	e7 96       	adiw	r28, 0x37	; 55
    4d40:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d42:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d44:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d46:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d48:	e7 97       	sbiw	r28, 0x37	; 55
    4d4a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4d4e:	4b 01       	movw	r8, r22
    4d50:	5c 01       	movw	r10, r24
    4d52:	e1 96       	adiw	r28, 0x31	; 49
    4d54:	2c ad       	ldd	r18, Y+60	; 0x3c
    4d56:	3d ad       	ldd	r19, Y+61	; 0x3d
    4d58:	4e ad       	ldd	r20, Y+62	; 0x3e
    4d5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    4d5c:	e1 97       	sbiw	r28, 0x31	; 49
    4d5e:	c3 01       	movw	r24, r6
    4d60:	b2 01       	movw	r22, r4
    4d62:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4d66:	9b 01       	movw	r18, r22
    4d68:	ac 01       	movw	r20, r24
    4d6a:	c5 01       	movw	r24, r10
    4d6c:	b4 01       	movw	r22, r8
    4d6e:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4d72:	f6 01       	movw	r30, r12
    4d74:	61 93       	st	Z+, r22
    4d76:	71 93       	st	Z+, r23
    4d78:	81 93       	st	Z+, r24
    4d7a:	91 93       	st	Z+, r25
    4d7c:	6f 01       	movw	r12, r30
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4d7e:	0e 15       	cp	r16, r14
    4d80:	1f 05       	cpc	r17, r15
    4d82:	89 f6       	brne	.-94     	; 0x4d26 <quest+0x4c0>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4d84:	be 01       	movw	r22, r28
    4d86:	6b 5d       	subi	r22, 0xDB	; 219
    4d88:	7f 4f       	sbci	r23, 0xFF	; 255
    4d8a:	ce 01       	movw	r24, r28
    4d8c:	49 96       	adiw	r24, 0x19	; 25
    4d8e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vector_dot_product>
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	40 e8       	ldi	r20, 0x80	; 128
    4d98:	5f e3       	ldi	r21, 0x3F	; 63
    4d9a:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4d9e:	9b 01       	movw	r18, r22
    4da0:	ac 01       	movw	r20, r24
    4da2:	e7 96       	adiw	r28, 0x37	; 55
    4da4:	6c ad       	ldd	r22, Y+60	; 0x3c
    4da6:	7d ad       	ldd	r23, Y+61	; 0x3d
    4da8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4daa:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dac:	e7 97       	sbiw	r28, 0x37	; 55
    4dae:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4db2:	8d c0       	rjmp	.+282    	; 0x4ece <quest+0x668>
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4db4:	a7 01       	movw	r20, r14
    4db6:	96 01       	movw	r18, r12
    4db8:	c5 01       	movw	r24, r10
    4dba:	b4 01       	movw	r22, r8
    4dbc:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    4dc0:	e7 96       	adiw	r28, 0x37	; 55
    4dc2:	6c af       	std	Y+60, r22	; 0x3c
    4dc4:	7d af       	std	Y+61, r23	; 0x3d
    4dc6:	8e af       	std	Y+62, r24	; 0x3e
    4dc8:	9f af       	std	Y+63, r25	; 0x3f
    4dca:	e7 97       	sbiw	r28, 0x37	; 55
    4dcc:	a5 01       	movw	r20, r10
    4dce:	94 01       	movw	r18, r8
    4dd0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4dd4:	6b 01       	movw	r12, r22
    4dd6:	7c 01       	movw	r14, r24
    4dd8:	be 01       	movw	r22, r28
    4dda:	6b 5d       	subi	r22, 0xDB	; 219
    4ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dde:	ce 01       	movw	r24, r28
    4de0:	49 96       	adiw	r24, 0x19	; 25
    4de2:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vector_dot_product>
    4de6:	4b 01       	movw	r8, r22
    4de8:	5c 01       	movw	r10, r24
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	30 e0       	ldi	r19, 0x00	; 0
    4dee:	40 e8       	ldi	r20, 0x80	; 128
    4df0:	5f e3       	ldi	r21, 0x3F	; 63
    4df2:	c5 01       	movw	r24, r10
    4df4:	b4 01       	movw	r22, r8
    4df6:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4dfa:	9b 01       	movw	r18, r22
    4dfc:	ac 01       	movw	r20, r24
    4dfe:	c7 01       	movw	r24, r14
    4e00:	b6 01       	movw	r22, r12
    4e02:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4e06:	0e 94 8d 34 	call	0x691a	; 0x691a <sqrt>
    4e0a:	9b 01       	movw	r18, r22
    4e0c:	ac 01       	movw	r20, r24
    4e0e:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4e12:	9b 01       	movw	r18, r22
    4e14:	ac 01       	movw	r20, r24
    4e16:	60 e0       	ldi	r22, 0x00	; 0
    4e18:	70 e0       	ldi	r23, 0x00	; 0
    4e1a:	80 e8       	ldi	r24, 0x80	; 128
    4e1c:	9f e3       	ldi	r25, 0x3F	; 63
    4e1e:	0e 94 b6 31 	call	0x636c	; 0x636c <__divsf3>
    4e22:	ec 96       	adiw	r28, 0x3c	; 60
    4e24:	6c af       	std	Y+60, r22	; 0x3c
    4e26:	7d af       	std	Y+61, r23	; 0x3d
    4e28:	8e af       	std	Y+62, r24	; 0x3e
    4e2a:	9f af       	std	Y+63, r25	; 0x3f
    4e2c:	ec 97       	sbiw	r28, 0x3c	; 60
    4e2e:	8e 01       	movw	r16, r28
    4e30:	0f 5c       	subi	r16, 0xCF	; 207
    4e32:	1f 4f       	sbci	r17, 0xFF	; 255
    4e34:	1e 01       	movw	r2, r28
    4e36:	fd e3       	ldi	r31, 0x3D	; 61
    4e38:	2f 0e       	add	r2, r31
    4e3a:	31 1c       	adc	r3, r1
    4e3c:	2e 01       	movw	r4, r28
    4e3e:	21 e6       	ldi	r18, 0x61	; 97
    4e40:	42 0e       	add	r4, r18
    4e42:	51 1c       	adc	r5, r1
    4e44:	31 01       	movw	r6, r2
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    4e46:	f8 01       	movw	r30, r16
    4e48:	61 91       	ld	r22, Z+
    4e4a:	71 91       	ld	r23, Z+
    4e4c:	81 91       	ld	r24, Z+
    4e4e:	91 91       	ld	r25, Z+
    4e50:	8f 01       	movw	r16, r30
    4e52:	f1 01       	movw	r30, r2
    4e54:	81 90       	ld	r8, Z+
    4e56:	91 90       	ld	r9, Z+
    4e58:	a1 90       	ld	r10, Z+
    4e5a:	b1 90       	ld	r11, Z+
    4e5c:	1f 01       	movw	r2, r30
    4e5e:	e1 96       	adiw	r28, 0x31	; 49
    4e60:	2c ad       	ldd	r18, Y+60	; 0x3c
    4e62:	3d ad       	ldd	r19, Y+61	; 0x3d
    4e64:	4e ad       	ldd	r20, Y+62	; 0x3e
    4e66:	5f ad       	ldd	r21, Y+63	; 0x3f
    4e68:	e1 97       	sbiw	r28, 0x31	; 49
    4e6a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4e6e:	6b 01       	movw	r12, r22
    4e70:	7c 01       	movw	r14, r24
    4e72:	a5 01       	movw	r20, r10
    4e74:	94 01       	movw	r18, r8
    4e76:	e7 96       	adiw	r28, 0x37	; 55
    4e78:	6c ad       	ldd	r22, Y+60	; 0x3c
    4e7a:	7d ad       	ldd	r23, Y+61	; 0x3d
    4e7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e80:	e7 97       	sbiw	r28, 0x37	; 55
    4e82:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    4e86:	9b 01       	movw	r18, r22
    4e88:	ac 01       	movw	r20, r24
    4e8a:	c7 01       	movw	r24, r14
    4e8c:	b6 01       	movw	r22, r12
    4e8e:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4e92:	f2 01       	movw	r30, r4
    4e94:	61 93       	st	Z+, r22
    4e96:	71 93       	st	Z+, r23
    4e98:	81 93       	st	Z+, r24
    4e9a:	91 93       	st	Z+, r25
    4e9c:	2f 01       	movw	r4, r30
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4e9e:	06 15       	cp	r16, r6
    4ea0:	17 05       	cpc	r17, r7
    4ea2:	89 f6       	brne	.-94     	; 0x4e46 <quest+0x5e0>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4ea4:	be 01       	movw	r22, r28
    4ea6:	6b 5d       	subi	r22, 0xDB	; 219
    4ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eaa:	ce 01       	movw	r24, r28
    4eac:	49 96       	adiw	r24, 0x19	; 25
    4eae:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vector_dot_product>
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e8       	ldi	r20, 0x80	; 128
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    4ebe:	e1 96       	adiw	r28, 0x31	; 49
    4ec0:	2c ad       	ldd	r18, Y+60	; 0x3c
    4ec2:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ec4:	4e ad       	ldd	r20, Y+62	; 0x3e
    4ec6:	5f ad       	ldd	r21, Y+63	; 0x3f
    4ec8:	e1 97       	sbiw	r28, 0x31	; 49
    4eca:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    4ece:	a5 96       	adiw	r28, 0x25	; 37
    4ed0:	0c ad       	ldd	r16, Y+60	; 0x3c
    4ed2:	1d ad       	ldd	r17, Y+61	; 0x3d
    4ed4:	2e ad       	ldd	r18, Y+62	; 0x3e
    4ed6:	3f ad       	ldd	r19, Y+63	; 0x3f
    4ed8:	a5 97       	sbiw	r28, 0x25	; 37
    4eda:	e3 96       	adiw	r28, 0x33	; 51
    4edc:	ee ad       	ldd	r30, Y+62	; 0x3e
    4ede:	ff ad       	ldd	r31, Y+63	; 0x3f
    4ee0:	e3 97       	sbiw	r28, 0x33	; 51
    4ee2:	00 83       	st	Z, r16
    4ee4:	11 83       	std	Z+1, r17	; 0x01
    4ee6:	22 83       	std	Z+2, r18	; 0x02
    4ee8:	33 83       	std	Z+3, r19	; 0x03
    4eea:	a9 96       	adiw	r28, 0x29	; 41
    4eec:	0c ad       	ldd	r16, Y+60	; 0x3c
    4eee:	1d ad       	ldd	r17, Y+61	; 0x3d
    4ef0:	2e ad       	ldd	r18, Y+62	; 0x3e
    4ef2:	3f ad       	ldd	r19, Y+63	; 0x3f
    4ef4:	a9 97       	sbiw	r28, 0x29	; 41
    4ef6:	04 83       	std	Z+4, r16	; 0x04
    4ef8:	15 83       	std	Z+5, r17	; 0x05
    4efa:	26 83       	std	Z+6, r18	; 0x06
    4efc:	37 83       	std	Z+7, r19	; 0x07
    4efe:	ad 96       	adiw	r28, 0x2d	; 45
    4f00:	0c ad       	ldd	r16, Y+60	; 0x3c
    4f02:	1d ad       	ldd	r17, Y+61	; 0x3d
    4f04:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f06:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f08:	ad 97       	sbiw	r28, 0x2d	; 45
    4f0a:	00 87       	std	Z+8, r16	; 0x08
    4f0c:	11 87       	std	Z+9, r17	; 0x09
    4f0e:	22 87       	std	Z+10, r18	; 0x0a
    4f10:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    4f12:	64 87       	std	Z+12, r22	; 0x0c
    4f14:	75 87       	std	Z+13, r23	; 0x0d
    4f16:	86 87       	std	Z+14, r24	; 0x0e
    4f18:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    4f1a:	ec 96       	adiw	r28, 0x3c	; 60
    4f1c:	4c ad       	ldd	r20, Y+60	; 0x3c
    4f1e:	5d ad       	ldd	r21, Y+61	; 0x3d
    4f20:	6e ad       	ldd	r22, Y+62	; 0x3e
    4f22:	7f ad       	ldd	r23, Y+63	; 0x3f
    4f24:	ec 97       	sbiw	r28, 0x3c	; 60
    4f26:	cf 01       	movw	r24, r30
    4f28:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <scalar_into_quaternion>
    4f2c:	7d c0       	rjmp	.+250    	; 0x5028 <quest+0x7c2>
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    4f2e:	e3 96       	adiw	r28, 0x33	; 51
    4f30:	ee ad       	ldd	r30, Y+62	; 0x3e
    4f32:	ff ad       	ldd	r31, Y+63	; 0x3f
    4f34:	e3 97       	sbiw	r28, 0x33	; 51
    4f36:	10 82       	st	Z, r1
    4f38:	11 82       	std	Z+1, r1	; 0x01
    4f3a:	12 82       	std	Z+2, r1	; 0x02
    4f3c:	13 82       	std	Z+3, r1	; 0x03
    4f3e:	14 82       	std	Z+4, r1	; 0x04
    4f40:	15 82       	std	Z+5, r1	; 0x05
    4f42:	16 82       	std	Z+6, r1	; 0x06
    4f44:	17 82       	std	Z+7, r1	; 0x07
    4f46:	10 86       	std	Z+8, r1	; 0x08
    4f48:	11 86       	std	Z+9, r1	; 0x09
    4f4a:	12 86       	std	Z+10, r1	; 0x0a
    4f4c:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	a0 e8       	ldi	r26, 0x80	; 128
    4f54:	bf e3       	ldi	r27, 0x3F	; 63
    4f56:	84 87       	std	Z+12, r24	; 0x0c
    4f58:	95 87       	std	Z+13, r25	; 0x0d
    4f5a:	a6 87       	std	Z+14, r26	; 0x0e
    4f5c:	b7 87       	std	Z+15, r27	; 0x0f
    4f5e:	64 c0       	rjmp	.+200    	; 0x5028 <quest+0x7c2>
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4f60:	80 90 f0 04 	lds	r8, 0x04F0
    4f64:	90 90 f1 04 	lds	r9, 0x04F1
    4f68:	a0 90 f2 04 	lds	r10, 0x04F2
    4f6c:	b0 90 f3 04 	lds	r11, 0x04F3
    4f70:	c0 90 f4 04 	lds	r12, 0x04F4
    4f74:	d0 90 f5 04 	lds	r13, 0x04F5
    4f78:	e0 90 f6 04 	lds	r14, 0x04F6
    4f7c:	f0 90 f7 04 	lds	r15, 0x04F7
    4f80:	a7 01       	movw	r20, r14
    4f82:	96 01       	movw	r18, r12
    4f84:	c5 01       	movw	r24, r10
    4f86:	b4 01       	movw	r22, r8
    4f88:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    4f8c:	18 16       	cp	r1, r24
    4f8e:	4c f0       	brlt	.+18     	; 0x4fa2 <quest+0x73c>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4f90:	f7 fa       	bst	r15, 7
    4f92:	f0 94       	com	r15
    4f94:	f7 f8       	bld	r15, 7
    4f96:	f0 94       	com	r15
    4f98:	c9 82       	std	Y+1, r12	; 0x01
    4f9a:	da 82       	std	Y+2, r13	; 0x02
    4f9c:	eb 82       	std	Y+3, r14	; 0x03
    4f9e:	fc 82       	std	Y+4, r15	; 0x04
    4fa0:	04 c0       	rjmp	.+8      	; 0x4faa <quest+0x744>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4fa2:	89 82       	std	Y+1, r8	; 0x01
    4fa4:	9a 82       	std	Y+2, r9	; 0x02
    4fa6:	ab 82       	std	Y+3, r10	; 0x03
    4fa8:	bc 82       	std	Y+4, r11	; 0x04
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4faa:	80 90 f8 04 	lds	r8, 0x04F8
    4fae:	90 90 f9 04 	lds	r9, 0x04F9
    4fb2:	a0 90 fa 04 	lds	r10, 0x04FA
    4fb6:	b0 90 fb 04 	lds	r11, 0x04FB
    4fba:	c0 90 fc 04 	lds	r12, 0x04FC
    4fbe:	d0 90 fd 04 	lds	r13, 0x04FD
    4fc2:	e0 90 fe 04 	lds	r14, 0x04FE
    4fc6:	f0 90 ff 04 	lds	r15, 0x04FF
    4fca:	a7 01       	movw	r20, r14
    4fcc:	96 01       	movw	r18, r12
    4fce:	c5 01       	movw	r24, r10
    4fd0:	b4 01       	movw	r22, r8
    4fd2:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    4fd6:	18 16       	cp	r1, r24
    4fd8:	4c f0       	brlt	.+18     	; 0x4fec <quest+0x786>
        {v_sun_m[i] = (double)sun_adc[j];}
      else
        {v_sun_m[i] = -1.0 * (double)sun_adc[j + 1];}
    4fda:	f7 fa       	bst	r15, 7
    4fdc:	f0 94       	com	r15
    4fde:	f7 f8       	bld	r15, 7
    4fe0:	f0 94       	com	r15
    4fe2:	cd 82       	std	Y+5, r12	; 0x05
    4fe4:	de 82       	std	Y+6, r13	; 0x06
    4fe6:	ef 82       	std	Y+7, r14	; 0x07
    4fe8:	f8 86       	std	Y+8, r15	; 0x08
    4fea:	04 c0       	rjmp	.+8      	; 0x4ff4 <quest+0x78e>
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        {v_sun_m[i] = (double)sun_adc[j];}
    4fec:	8d 82       	std	Y+5, r8	; 0x05
    4fee:	9e 82       	std	Y+6, r9	; 0x06
    4ff0:	af 82       	std	Y+7, r10	; 0x07
    4ff2:	b8 86       	std	Y+8, r11	; 0x08
	
    //uint8_t sen;
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4ff4:	80 90 00 05 	lds	r8, 0x0500
    4ff8:	90 90 01 05 	lds	r9, 0x0501
    4ffc:	a0 90 02 05 	lds	r10, 0x0502
    5000:	b0 90 03 05 	lds	r11, 0x0503
    5004:	c0 90 04 05 	lds	r12, 0x0504
    5008:	d0 90 05 05 	lds	r13, 0x0505
    500c:	e0 90 06 05 	lds	r14, 0x0506
    5010:	f0 90 07 05 	lds	r15, 0x0507
    5014:	a7 01       	movw	r20, r14
    5016:	96 01       	movw	r18, r12
    5018:	c5 01       	movw	r24, r10
    501a:	b4 01       	movw	r22, r8
    501c:	0e 94 c9 33 	call	0x6792	; 0x6792 <__gesf2>
    5020:	18 16       	cp	r1, r24
    5022:	0c f4       	brge	.+2      	; 0x5026 <quest+0x7c0>
    5024:	91 cc       	rjmp	.-1758   	; 0x4948 <quest+0xe2>
    5026:	95 cc       	rjmp	.-1750   	; 0x4952 <quest+0xec>
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    5028:	e8 96       	adiw	r28, 0x38	; 56
    502a:	ff ad       	ldd	r31, Y+63	; 0x3f
    502c:	e8 97       	sbiw	r28, 0x38	; 56
    502e:	f0 93 12 01 	sts	0x0112, r31
 
  return light;
   
}
    5032:	8f 2f       	mov	r24, r31
    5034:	c5 58       	subi	r28, 0x85	; 133
    5036:	df 4f       	sbci	r29, 0xFF	; 255
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	cf 90       	pop	r12
    5052:	bf 90       	pop	r11
    5054:	af 90       	pop	r10
    5056:	9f 90       	pop	r9
    5058:	8f 90       	pop	r8
    505a:	7f 90       	pop	r7
    505c:	6f 90       	pop	r6
    505e:	5f 90       	pop	r5
    5060:	4f 90       	pop	r4
    5062:	3f 90       	pop	r3
    5064:	2f 90       	pop	r2
    5066:	08 95       	ret

00005068 <omega_estimation>:

void omega_estimation(quaternion q_B, vector v_w)
{
    5068:	2f 92       	push	r2
    506a:	3f 92       	push	r3
    506c:	4f 92       	push	r4
    506e:	5f 92       	push	r5
    5070:	6f 92       	push	r6
    5072:	7f 92       	push	r7
    5074:	8f 92       	push	r8
    5076:	9f 92       	push	r9
    5078:	af 92       	push	r10
    507a:	bf 92       	push	r11
    507c:	cf 92       	push	r12
    507e:	df 92       	push	r13
    5080:	ef 92       	push	r14
    5082:	ff 92       	push	r15
    5084:	0f 93       	push	r16
    5086:	1f 93       	push	r17
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	cd b7       	in	r28, 0x3d	; 61
    508e:	de b7       	in	r29, 0x3e	; 62
    5090:	c6 5c       	subi	r28, 0xC6	; 198
    5092:	d1 09       	sbc	r29, r1
    5094:	0f b6       	in	r0, 0x3f	; 63
    5096:	f8 94       	cli
    5098:	de bf       	out	0x3e, r29	; 62
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	cd bf       	out	0x3d, r28	; 61
    509e:	cd 53       	subi	r28, 0x3D	; 61
    50a0:	df 4f       	sbci	r29, 0xFF	; 255
    50a2:	88 83       	st	Y, r24
    50a4:	c3 5c       	subi	r28, 0xC3	; 195
    50a6:	d0 40       	sbci	r29, 0x00	; 0
    50a8:	cc 53       	subi	r28, 0x3C	; 60
    50aa:	df 4f       	sbci	r29, 0xFF	; 255
    50ac:	98 83       	st	Y, r25
    50ae:	c4 5c       	subi	r28, 0xC4	; 196
    50b0:	d0 40       	sbci	r29, 0x00	; 0
    50b2:	cb 53       	subi	r28, 0x3B	; 59
    50b4:	df 4f       	sbci	r29, 0xFF	; 255
    50b6:	68 83       	st	Y, r22
    50b8:	c5 5c       	subi	r28, 0xC5	; 197
    50ba:	d0 40       	sbci	r29, 0x00	; 0
    50bc:	ca 53       	subi	r28, 0x3A	; 58
    50be:	df 4f       	sbci	r29, 0xFF	; 255
    50c0:	78 83       	st	Y, r23
    50c2:	c6 5c       	subi	r28, 0xC6	; 198
    50c4:	d0 40       	sbci	r29, 0x00	; 0
    50c6:	28 2e       	mov	r2, r24
    50c8:	39 2e       	mov	r3, r25
    50ca:	02 e7       	ldi	r16, 0x72	; 114
    50cc:	14 e0       	ldi	r17, 0x04	; 4
    50ce:	ce 01       	movw	r24, r28
    50d0:	01 96       	adiw	r24, 0x01	; 1
    50d2:	7c 01       	movw	r14, r24
    50d4:	de 01       	movw	r26, r28
    50d6:	51 96       	adiw	r26, 0x11	; 17
    50d8:	cb 54       	subi	r28, 0x4B	; 75
    50da:	df 4f       	sbci	r29, 0xFF	; 255
    50dc:	b9 83       	std	Y+1, r27	; 0x01
    50de:	a8 83       	st	Y, r26
    50e0:	c5 5b       	subi	r28, 0xB5	; 181
    50e2:	d0 40       	sbci	r29, 0x00	; 0
    50e4:	0f 2e       	mov	r0, r31
    50e6:	f2 e8       	ldi	r31, 0x82	; 130
    50e8:	cf 2e       	mov	r12, r31
    50ea:	f4 e0       	ldi	r31, 0x04	; 4
    50ec:	df 2e       	mov	r13, r31
    50ee:	f0 2d       	mov	r31, r0
    50f0:	cf 54       	subi	r28, 0x4F	; 79
    50f2:	df 4f       	sbci	r29, 0xFF	; 255
    50f4:	b9 83       	std	Y+1, r27	; 0x01
    50f6:	a8 83       	st	Y, r26
    50f8:	c1 5b       	subi	r28, 0xB1	; 177
    50fa:	d0 40       	sbci	r29, 0x00	; 0
    50fc:	c7 54       	subi	r28, 0x47	; 71
    50fe:	df 4f       	sbci	r29, 0xFF	; 255
    5100:	99 83       	std	Y+1, r25	; 0x01
    5102:	88 83       	st	Y, r24
    5104:	c9 5b       	subi	r28, 0xB9	; 185
    5106:	d0 40       	sbci	r29, 0x00	; 0
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    5108:	f1 01       	movw	r30, r2
    510a:	81 90       	ld	r8, Z+
    510c:	91 90       	ld	r9, Z+
    510e:	a1 90       	ld	r10, Z+
    5110:	b1 90       	ld	r11, Z+
    5112:	1f 01       	movw	r2, r30
    5114:	d8 01       	movw	r26, r16
    5116:	4d 90       	ld	r4, X+
    5118:	5d 90       	ld	r5, X+
    511a:	6d 90       	ld	r6, X+
    511c:	7d 90       	ld	r7, X+
    511e:	8d 01       	movw	r16, r26
    5120:	a3 01       	movw	r20, r6
    5122:	92 01       	movw	r18, r4
    5124:	c5 01       	movw	r24, r10
    5126:	b4 01       	movw	r22, r8
    5128:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	40 e0       	ldi	r20, 0x00	; 0
    5132:	5f e3       	ldi	r21, 0x3F	; 63
    5134:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    5138:	f7 01       	movw	r30, r14
    513a:	61 93       	st	Z+, r22
    513c:	71 93       	st	Z+, r23
    513e:	81 93       	st	Z+, r24
    5140:	91 93       	st	Z+, r25
    5142:	7f 01       	movw	r14, r30
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    5144:	a3 01       	movw	r20, r6
    5146:	92 01       	movw	r18, r4
    5148:	c5 01       	movw	r24, r10
    514a:	b4 01       	movw	r22, r8
    514c:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    5150:	20 e0       	ldi	r18, 0x00	; 0
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	40 e0       	ldi	r20, 0x00	; 0
    5156:	5f e3       	ldi	r21, 0x3F	; 63
    5158:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    515c:	cf 54       	subi	r28, 0x4F	; 79
    515e:	df 4f       	sbci	r29, 0xFF	; 255
    5160:	a8 81       	ld	r26, Y
    5162:	b9 81       	ldd	r27, Y+1	; 0x01
    5164:	c1 5b       	subi	r28, 0xB1	; 177
    5166:	d0 40       	sbci	r29, 0x00	; 0
    5168:	6d 93       	st	X+, r22
    516a:	7d 93       	st	X+, r23
    516c:	8d 93       	st	X+, r24
    516e:	9d 93       	st	X+, r25
    5170:	cf 54       	subi	r28, 0x4F	; 79
    5172:	df 4f       	sbci	r29, 0xFF	; 255
    5174:	b9 83       	std	Y+1, r27	; 0x01
    5176:	a8 83       	st	Y, r26
    5178:	c1 5b       	subi	r28, 0xB1	; 177
    517a:	d0 40       	sbci	r29, 0x00	; 0
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  double n;// floatch
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    517c:	0c 15       	cp	r16, r12
    517e:	1d 05       	cpc	r17, r13
    5180:	19 f6       	brne	.-122    	; 0x5108 <omega_estimation+0xa0>
    5182:	c7 54       	subi	r28, 0x47	; 71
    5184:	df 4f       	sbci	r29, 0xFF	; 255
    5186:	e8 80       	ld	r14, Y
    5188:	f9 80       	ldd	r15, Y+1	; 0x01
    518a:	c9 5b       	subi	r28, 0xB9	; 185
    518c:	d0 40       	sbci	r29, 0x00	; 0
    518e:	de 01       	movw	r26, r28
    5190:	9d 96       	adiw	r26, 0x2d	; 45
    5192:	8e 01       	movw	r16, r28
    5194:	0f 5d       	subi	r16, 0xDF	; 223
    5196:	1f 4f       	sbci	r17, 0xFF	; 255
    5198:	ce 01       	movw	r24, r28
    519a:	0d 96       	adiw	r24, 0x0d	; 13
    519c:	bd 01       	movw	r22, r26
    519e:	98 01       	movw	r18, r16
    51a0:	f7 01       	movw	r30, r14
    51a2:	cb 54       	subi	r28, 0x4B	; 75
    51a4:	df 4f       	sbci	r29, 0xFF	; 255
    51a6:	48 81       	ld	r20, Y
    51a8:	59 81       	ldd	r21, Y+1	; 0x01
    51aa:	c5 5b       	subi	r28, 0xB5	; 181
    51ac:	d0 40       	sbci	r29, 0x00	; 0
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    51ae:	c1 90       	ld	r12, Z+
    51b0:	d1 90       	ld	r13, Z+
    51b2:	e1 90       	ld	r14, Z+
    51b4:	f1 90       	ld	r15, Z+
    51b6:	db 01       	movw	r26, r22
    51b8:	cd 92       	st	X+, r12
    51ba:	dd 92       	st	X+, r13
    51bc:	ed 92       	st	X+, r14
    51be:	fd 92       	st	X+, r15
    51c0:	bd 01       	movw	r22, r26
    e[i] = q[i];
    51c2:	da 01       	movw	r26, r20
    51c4:	cd 90       	ld	r12, X+
    51c6:	dd 90       	ld	r13, X+
    51c8:	ed 90       	ld	r14, X+
    51ca:	fd 90       	ld	r15, X+
    51cc:	ad 01       	movw	r20, r26
    51ce:	d9 01       	movw	r26, r18
    51d0:	cd 92       	st	X+, r12
    51d2:	dd 92       	st	X+, r13
    51d4:	ed 92       	st	X+, r14
    51d6:	fd 92       	st	X+, r15
    51d8:	9d 01       	movw	r18, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    51da:	e8 17       	cp	r30, r24
    51dc:	f9 07       	cpc	r31, r25
    51de:	39 f7       	brne	.-50     	; 0x51ae <omega_estimation+0x146>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    51e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51e4:	af 8d       	ldd	r26, Y+31	; 0x1f
    51e6:	b8 a1       	ldd	r27, Y+32	; 0x20
    51e8:	c7 54       	subi	r28, 0x47	; 71
    51ea:	df 4f       	sbci	r29, 0xFF	; 255
    51ec:	88 83       	st	Y, r24
    51ee:	99 83       	std	Y+1, r25	; 0x01
    51f0:	aa 83       	std	Y+2, r26	; 0x02
    51f2:	bb 83       	std	Y+3, r27	; 0x03
    51f4:	c9 5b       	subi	r28, 0xB9	; 185
    51f6:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    51f8:	ad 96       	adiw	r28, 0x2d	; 45
    51fa:	1c ae       	std	Y+60, r1	; 0x3c
    51fc:	1d ae       	std	Y+61, r1	; 0x3d
    51fe:	1e ae       	std	Y+62, r1	; 0x3e
    5200:	1f ae       	std	Y+63, r1	; 0x3f
    5202:	ad 97       	sbiw	r28, 0x2d	; 45
    5204:	c9 a4       	ldd	r12, Y+41	; 0x29
    5206:	da a4       	ldd	r13, Y+42	; 0x2a
    5208:	eb a4       	ldd	r14, Y+43	; 0x2b
    520a:	fc a4       	ldd	r15, Y+44	; 0x2c
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	40 e0       	ldi	r20, 0x00	; 0
    5212:	50 ec       	ldi	r21, 0xC0	; 192
    5214:	c7 01       	movw	r24, r14
    5216:	b6 01       	movw	r22, r12
    5218:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    521c:	e1 96       	adiw	r28, 0x31	; 49
    521e:	6c af       	std	Y+60, r22	; 0x3c
    5220:	7d af       	std	Y+61, r23	; 0x3d
    5222:	8e af       	std	Y+62, r24	; 0x3e
    5224:	9f af       	std	Y+63, r25	; 0x3f
    5226:	e1 97       	sbiw	r28, 0x31	; 49
    5228:	8d a0       	ldd	r8, Y+37	; 0x25
    522a:	9e a0       	ldd	r9, Y+38	; 0x26
    522c:	af a0       	ldd	r10, Y+39	; 0x27
    522e:	b8 a4       	ldd	r11, Y+40	; 0x28
    5230:	a5 01       	movw	r20, r10
    5232:	94 01       	movw	r18, r8
    5234:	c5 01       	movw	r24, r10
    5236:	b4 01       	movw	r22, r8
    5238:	b5 d7       	rcall	.+3946   	; 0x61a4 <__addsf3>
    523a:	e5 96       	adiw	r28, 0x35	; 53
    523c:	6c af       	std	Y+60, r22	; 0x3c
    523e:	7d af       	std	Y+61, r23	; 0x3d
    5240:	8e af       	std	Y+62, r24	; 0x3e
    5242:	9f af       	std	Y+63, r25	; 0x3f
    5244:	e5 97       	sbiw	r28, 0x35	; 53
  { 2 * e[2], 0, -2 * e[0] },
    5246:	a7 01       	movw	r20, r14
    5248:	96 01       	movw	r18, r12
    524a:	c7 01       	movw	r24, r14
    524c:	b6 01       	movw	r22, r12
    524e:	aa d7       	rcall	.+3924   	; 0x61a4 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5250:	e9 96       	adiw	r28, 0x39	; 57
    5252:	6c af       	std	Y+60, r22	; 0x3c
    5254:	7d af       	std	Y+61, r23	; 0x3d
    5256:	8e af       	std	Y+62, r24	; 0x3e
    5258:	9f af       	std	Y+63, r25	; 0x3f
    525a:	e9 97       	sbiw	r28, 0x39	; 57
    525c:	ed 96       	adiw	r28, 0x3d	; 61
    525e:	1c ae       	std	Y+60, r1	; 0x3c
    5260:	1d ae       	std	Y+61, r1	; 0x3d
    5262:	1e ae       	std	Y+62, r1	; 0x3e
    5264:	1f ae       	std	Y+63, r1	; 0x3f
    5266:	ed 97       	sbiw	r28, 0x3d	; 61
  { 2 * e[2], 0, -2 * e[0] },
    5268:	c9 a0       	ldd	r12, Y+33	; 0x21
    526a:	da a0       	ldd	r13, Y+34	; 0x22
    526c:	eb a0       	ldd	r14, Y+35	; 0x23
    526e:	fc a0       	ldd	r15, Y+36	; 0x24
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	40 e0       	ldi	r20, 0x00	; 0
    5276:	50 ec       	ldi	r21, 0xC0	; 192
    5278:	c7 01       	movw	r24, r14
    527a:	b6 01       	movw	r22, r12
    527c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5280:	c3 58       	subi	r28, 0x83	; 131
    5282:	df 4f       	sbci	r29, 0xFF	; 255
    5284:	68 83       	st	Y, r22
    5286:	79 83       	std	Y+1, r23	; 0x01
    5288:	8a 83       	std	Y+2, r24	; 0x02
    528a:	9b 83       	std	Y+3, r25	; 0x03
    528c:	cd 57       	subi	r28, 0x7D	; 125
    528e:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5290:	20 e0       	ldi	r18, 0x00	; 0
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	50 ec       	ldi	r21, 0xC0	; 192
    5298:	c5 01       	movw	r24, r10
    529a:	b4 01       	movw	r22, r8
    529c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    52a0:	cf 57       	subi	r28, 0x7F	; 127
    52a2:	df 4f       	sbci	r29, 0xFF	; 255
    52a4:	68 83       	st	Y, r22
    52a6:	79 83       	std	Y+1, r23	; 0x01
    52a8:	8a 83       	std	Y+2, r24	; 0x02
    52aa:	9b 83       	std	Y+3, r25	; 0x03
    52ac:	c1 58       	subi	r28, 0x81	; 129
    52ae:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    52b0:	a7 01       	movw	r20, r14
    52b2:	96 01       	movw	r18, r12
    52b4:	c7 01       	movw	r24, r14
    52b6:	b6 01       	movw	r22, r12
    52b8:	75 d7       	rcall	.+3818   	; 0x61a4 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    52ba:	cb 57       	subi	r28, 0x7B	; 123
    52bc:	df 4f       	sbci	r29, 0xFF	; 255
    52be:	68 83       	st	Y, r22
    52c0:	79 83       	std	Y+1, r23	; 0x01
    52c2:	8a 83       	std	Y+2, r24	; 0x02
    52c4:	9b 83       	std	Y+3, r25	; 0x03
    52c6:	c5 58       	subi	r28, 0x85	; 133
    52c8:	d0 40       	sbci	r29, 0x00	; 0
    52ca:	c7 57       	subi	r28, 0x77	; 119
    52cc:	df 4f       	sbci	r29, 0xFF	; 255
    52ce:	18 82       	st	Y, r1
    52d0:	19 82       	std	Y+1, r1	; 0x01
    52d2:	1a 82       	std	Y+2, r1	; 0x02
    52d4:	1b 82       	std	Y+3, r1	; 0x03
    52d6:	c9 58       	subi	r28, 0x89	; 137
    52d8:	d0 40       	sbci	r29, 0x00	; 0
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    52da:	c7 54       	subi	r28, 0x47	; 71
    52dc:	df 4f       	sbci	r29, 0xFF	; 255
    52de:	28 81       	ld	r18, Y
    52e0:	39 81       	ldd	r19, Y+1	; 0x01
    52e2:	4a 81       	ldd	r20, Y+2	; 0x02
    52e4:	5b 81       	ldd	r21, Y+3	; 0x03
    52e6:	c9 5b       	subi	r28, 0xB9	; 185
    52e8:	d0 40       	sbci	r29, 0x00	; 0
    52ea:	ca 01       	movw	r24, r20
    52ec:	b9 01       	movw	r22, r18
    52ee:	5a d7       	rcall	.+3764   	; 0x61a4 <__addsf3>
    52f0:	c3 57       	subi	r28, 0x73	; 115
    52f2:	df 4f       	sbci	r29, 0xFF	; 255
    52f4:	68 83       	st	Y, r22
    52f6:	79 83       	std	Y+1, r23	; 0x01
    52f8:	8a 83       	std	Y+2, r24	; 0x02
    52fa:	9b 83       	std	Y+3, r25	; 0x03
    52fc:	cd 58       	subi	r28, 0x8D	; 141
    52fe:	d0 40       	sbci	r29, 0x00	; 0
    5300:	cf 56       	subi	r28, 0x6F	; 111
    5302:	df 4f       	sbci	r29, 0xFF	; 255
    5304:	18 82       	st	Y, r1
    5306:	19 82       	std	Y+1, r1	; 0x01
    5308:	1a 82       	std	Y+2, r1	; 0x02
    530a:	1b 82       	std	Y+3, r1	; 0x03
    530c:	c1 59       	subi	r28, 0x91	; 145
    530e:	d0 40       	sbci	r29, 0x00	; 0
    5310:	cb 56       	subi	r28, 0x6B	; 107
    5312:	df 4f       	sbci	r29, 0xFF	; 255
    5314:	18 82       	st	Y, r1
    5316:	19 82       	std	Y+1, r1	; 0x01
    5318:	1a 82       	std	Y+2, r1	; 0x02
    531a:	1b 82       	std	Y+3, r1	; 0x03
    531c:	c5 59       	subi	r28, 0x95	; 149
    531e:	d0 40       	sbci	r29, 0x00	; 0
    5320:	c7 56       	subi	r28, 0x67	; 103
    5322:	df 4f       	sbci	r29, 0xFF	; 255
    5324:	18 82       	st	Y, r1
    5326:	19 82       	std	Y+1, r1	; 0x01
    5328:	1a 82       	std	Y+2, r1	; 0x02
    532a:	1b 82       	std	Y+3, r1	; 0x03
    532c:	c9 59       	subi	r28, 0x99	; 153
    532e:	d0 40       	sbci	r29, 0x00	; 0
    5330:	c3 56       	subi	r28, 0x63	; 99
    5332:	df 4f       	sbci	r29, 0xFF	; 255
    5334:	68 83       	st	Y, r22
    5336:	79 83       	std	Y+1, r23	; 0x01
    5338:	8a 83       	std	Y+2, r24	; 0x02
    533a:	9b 83       	std	Y+3, r25	; 0x03
    533c:	cd 59       	subi	r28, 0x9D	; 157
    533e:	d0 40       	sbci	r29, 0x00	; 0
    5340:	cf 55       	subi	r28, 0x5F	; 95
    5342:	df 4f       	sbci	r29, 0xFF	; 255
    5344:	18 82       	st	Y, r1
    5346:	19 82       	std	Y+1, r1	; 0x01
    5348:	1a 82       	std	Y+2, r1	; 0x02
    534a:	1b 82       	std	Y+3, r1	; 0x03
    534c:	c1 5a       	subi	r28, 0xA1	; 161
    534e:	d0 40       	sbci	r29, 0x00	; 0
    5350:	cb 55       	subi	r28, 0x5B	; 91
    5352:	df 4f       	sbci	r29, 0xFF	; 255
    5354:	18 82       	st	Y, r1
    5356:	19 82       	std	Y+1, r1	; 0x01
    5358:	1a 82       	std	Y+2, r1	; 0x02
    535a:	1b 82       	std	Y+3, r1	; 0x03
    535c:	c5 5a       	subi	r28, 0xA5	; 165
    535e:	d0 40       	sbci	r29, 0x00	; 0
    5360:	c7 55       	subi	r28, 0x57	; 87
    5362:	df 4f       	sbci	r29, 0xFF	; 255
    5364:	18 82       	st	Y, r1
    5366:	19 82       	std	Y+1, r1	; 0x01
    5368:	1a 82       	std	Y+2, r1	; 0x02
    536a:	1b 82       	std	Y+3, r1	; 0x03
    536c:	c9 5a       	subi	r28, 0xA9	; 169
    536e:	d0 40       	sbci	r29, 0x00	; 0
    5370:	c3 55       	subi	r28, 0x53	; 83
    5372:	df 4f       	sbci	r29, 0xFF	; 255
    5374:	68 83       	st	Y, r22
    5376:	79 83       	std	Y+1, r23	; 0x01
    5378:	8a 83       	std	Y+2, r24	; 0x02
    537a:	9b 83       	std	Y+3, r25	; 0x03
    537c:	cd 5a       	subi	r28, 0xAD	; 173
    537e:	d0 40       	sbci	r29, 0x00	; 0
    5380:	3e 01       	movw	r6, r28
    5382:	95 e4       	ldi	r25, 0x45	; 69
    5384:	69 0e       	add	r6, r25
    5386:	71 1c       	adc	r7, r1
    5388:	c3 54       	subi	r28, 0x43	; 67
    538a:	df 4f       	sbci	r29, 0xFF	; 255
    538c:	19 83       	std	Y+1, r17	; 0x01
    538e:	08 83       	st	Y, r16
    5390:	cd 5b       	subi	r28, 0xBD	; 189
    5392:	d0 40       	sbci	r29, 0x00	; 0
    5394:	81 2c       	mov	r8, r1
    5396:	91 2c       	mov	r9, r1
    5398:	5e 01       	movw	r10, r28
    539a:	ad e2       	ldi	r26, 0x2D	; 45
    539c:	aa 0e       	add	r10, r26
    539e:	b1 1c       	adc	r11, r1
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    53a0:	cf 53       	subi	r28, 0x3F	; 63
    53a2:	df 4f       	sbci	r29, 0xFF	; 255
    53a4:	08 83       	st	Y, r16
    53a6:	c1 5c       	subi	r28, 0xC1	; 193
    53a8:	d0 40       	sbci	r29, 0x00	; 0
    53aa:	ce 53       	subi	r28, 0x3E	; 62
    53ac:	df 4f       	sbci	r29, 0xFF	; 255
    53ae:	18 83       	st	Y, r17
    53b0:	c2 5c       	subi	r28, 0xC2	; 194
    53b2:	d0 40       	sbci	r29, 0x00	; 0
    53b4:	59 c0       	rjmp	.+178    	; 0x5468 <omega_estimation+0x400>
    53b6:	f1 01       	movw	r30, r2
    53b8:	61 91       	ld	r22, Z+
    53ba:	71 91       	ld	r23, Z+
    53bc:	81 91       	ld	r24, Z+
    53be:	91 91       	ld	r25, Z+
    53c0:	1f 01       	movw	r2, r30
    53c2:	d6 01       	movw	r26, r12
    53c4:	2d 91       	ld	r18, X+
    53c6:	3d 91       	ld	r19, X+
    53c8:	4d 91       	ld	r20, X+
    53ca:	5d 91       	ld	r21, X+
    53cc:	6d 01       	movw	r12, r26
    53ce:	f2 01       	movw	r30, r4
    53d0:	61 90       	ld	r6, Z+
    53d2:	71 90       	ld	r7, Z+
    53d4:	81 90       	ld	r8, Z+
    53d6:	91 90       	ld	r9, Z+
    53d8:	2f 01       	movw	r4, r30
    53da:	e3 d6       	rcall	.+3526   	; 0x61a2 <__subsf3>
    53dc:	cf 54       	subi	r28, 0x4F	; 79
    53de:	df 4f       	sbci	r29, 0xFF	; 255
    53e0:	68 83       	st	Y, r22
    53e2:	79 83       	std	Y+1, r23	; 0x01
    53e4:	8a 83       	std	Y+2, r24	; 0x02
    53e6:	9b 83       	std	Y+3, r25	; 0x03
    53e8:	c1 5b       	subi	r28, 0xB1	; 177
    53ea:	d0 40       	sbci	r29, 0x00	; 0
    53ec:	a4 01       	movw	r20, r8
    53ee:	93 01       	movw	r18, r6
    53f0:	cb 54       	subi	r28, 0x4B	; 75
    53f2:	df 4f       	sbci	r29, 0xFF	; 255
    53f4:	68 81       	ld	r22, Y
    53f6:	79 81       	ldd	r23, Y+1	; 0x01
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	9b 81       	ldd	r25, Y+3	; 0x03
    53fc:	c5 5b       	subi	r28, 0xB5	; 181
    53fe:	d0 40       	sbci	r29, 0x00	; 0
    5400:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    5404:	c7 54       	subi	r28, 0x47	; 71
    5406:	df 4f       	sbci	r29, 0xFF	; 255
    5408:	28 81       	ld	r18, Y
    540a:	39 81       	ldd	r19, Y+1	; 0x01
    540c:	4a 81       	ldd	r20, Y+2	; 0x02
    540e:	5b 81       	ldd	r21, Y+3	; 0x03
    5410:	c9 5b       	subi	r28, 0xB9	; 185
    5412:	d0 40       	sbci	r29, 0x00	; 0
    5414:	ab d7       	rcall	.+3926   	; 0x636c <__divsf3>
    5416:	9b 01       	movw	r18, r22
    5418:	ac 01       	movw	r20, r24
    541a:	cf 54       	subi	r28, 0x4F	; 79
    541c:	df 4f       	sbci	r29, 0xFF	; 255
    541e:	68 81       	ld	r22, Y
    5420:	79 81       	ldd	r23, Y+1	; 0x01
    5422:	8a 81       	ldd	r24, Y+2	; 0x02
    5424:	9b 81       	ldd	r25, Y+3	; 0x03
    5426:	c1 5b       	subi	r28, 0xB1	; 177
    5428:	d0 40       	sbci	r29, 0x00	; 0
    542a:	bc d6       	rcall	.+3448   	; 0x61a4 <__addsf3>
    542c:	d8 01       	movw	r26, r16
    542e:	6d 93       	st	X+, r22
    5430:	7d 93       	st	X+, r23
    5432:	8d 93       	st	X+, r24
    5434:	9c 93       	st	X, r25
    5436:	13 97       	sbiw	r26, 0x03	; 3
    5438:	04 5f       	subi	r16, 0xF4	; 244
    543a:	1f 4f       	sbci	r17, 0xFF	; 255
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    543c:	4a 14       	cp	r4, r10
    543e:	5b 04       	cpc	r5, r11
    5440:	09 f0       	breq	.+2      	; 0x5444 <omega_estimation+0x3dc>
    5442:	b9 cf       	rjmp	.-142    	; 0x53b6 <omega_estimation+0x34e>
    5444:	47 01       	movw	r8, r14
    5446:	c1 54       	subi	r28, 0x41	; 65
    5448:	df 4f       	sbci	r29, 0xFF	; 255
    544a:	68 80       	ld	r6, Y
    544c:	79 80       	ldd	r7, Y+1	; 0x01
    544e:	cf 5b       	subi	r28, 0xBF	; 191
    5450:	d0 40       	sbci	r29, 0x00	; 0
    5452:	bc e0       	ldi	r27, 0x0C	; 12
    5454:	8b 0e       	add	r8, r27
    5456:	91 1c       	adc	r9, r1
    5458:	e4 e0       	ldi	r30, 0x04	; 4
    545a:	6e 0e       	add	r6, r30
    545c:	71 1c       	adc	r7, r1
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    545e:	f4 e2       	ldi	r31, 0x24	; 36
    5460:	8f 16       	cp	r8, r31
    5462:	91 04       	cpc	r9, r1
    5464:	09 f4       	brne	.+2      	; 0x5468 <omega_estimation+0x400>
    5466:	40 c0       	rjmp	.+128    	; 0x54e8 <omega_estimation+0x480>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    5468:	c3 54       	subi	r28, 0x43	; 67
    546a:	df 4f       	sbci	r29, 0xFF	; 255
    546c:	a8 81       	ld	r26, Y
    546e:	b9 81       	ldd	r27, Y+1	; 0x01
    5470:	cd 5b       	subi	r28, 0xBD	; 189
    5472:	d0 40       	sbci	r29, 0x00	; 0
    5474:	6d 91       	ld	r22, X+
    5476:	7d 91       	ld	r23, X+
    5478:	8d 91       	ld	r24, X+
    547a:	9d 91       	ld	r25, X+
    547c:	c3 54       	subi	r28, 0x43	; 67
    547e:	df 4f       	sbci	r29, 0xFF	; 255
    5480:	b9 83       	std	Y+1, r27	; 0x01
    5482:	a8 83       	st	Y, r26
    5484:	cd 5b       	subi	r28, 0xBD	; 189
    5486:	d0 40       	sbci	r29, 0x00	; 0
    5488:	9b 01       	movw	r18, r22
    548a:	ac 01       	movw	r20, r24
    548c:	8b d6       	rcall	.+3350   	; 0x61a4 <__addsf3>
    548e:	cb 54       	subi	r28, 0x4B	; 75
    5490:	df 4f       	sbci	r29, 0xFF	; 255
    5492:	68 83       	st	Y, r22
    5494:	79 83       	std	Y+1, r23	; 0x01
    5496:	8a 83       	std	Y+2, r24	; 0x02
    5498:	9b 83       	std	Y+3, r25	; 0x03
    549a:	c5 5b       	subi	r28, 0xB5	; 181
    549c:	d0 40       	sbci	r29, 0x00	; 0
    549e:	0f 2e       	mov	r0, r31
    54a0:	fd e8       	ldi	r31, 0x8D	; 141
    54a2:	2f 2e       	mov	r2, r31
    54a4:	31 2c       	mov	r3, r1
    54a6:	f0 2d       	mov	r31, r0
    54a8:	2c 0e       	add	r2, r28
    54aa:	3d 1e       	adc	r3, r29
    54ac:	28 0c       	add	r2, r8
    54ae:	39 1c       	adc	r3, r9
    54b0:	0f 2e       	mov	r0, r31
    54b2:	f9 e6       	ldi	r31, 0x69	; 105
    54b4:	cf 2e       	mov	r12, r31
    54b6:	d1 2c       	mov	r13, r1
    54b8:	f0 2d       	mov	r31, r0
    54ba:	cc 0e       	add	r12, r28
    54bc:	dd 1e       	adc	r13, r29
    54be:	c8 0c       	add	r12, r8
    54c0:	d9 1c       	adc	r13, r9
    54c2:	83 01       	movw	r16, r6
    54c4:	cf 53       	subi	r28, 0x3F	; 63
    54c6:	df 4f       	sbci	r29, 0xFF	; 255
    54c8:	48 80       	ld	r4, Y
    54ca:	c1 5c       	subi	r28, 0xC1	; 193
    54cc:	d0 40       	sbci	r29, 0x00	; 0
    54ce:	ce 53       	subi	r28, 0x3E	; 62
    54d0:	df 4f       	sbci	r29, 0xFF	; 255
    54d2:	58 80       	ld	r5, Y
    54d4:	c2 5c       	subi	r28, 0xC2	; 194
    54d6:	d0 40       	sbci	r29, 0x00	; 0
    54d8:	74 01       	movw	r14, r8
    54da:	c1 54       	subi	r28, 0x41	; 65
    54dc:	df 4f       	sbci	r29, 0xFF	; 255
    54de:	79 82       	std	Y+1, r7	; 0x01
    54e0:	68 82       	st	Y, r6
    54e2:	cf 5b       	subi	r28, 0xBF	; 191
    54e4:	d0 40       	sbci	r29, 0x00	; 0
    54e6:	67 cf       	rjmp	.-306    	; 0x53b6 <omega_estimation+0x34e>
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    54e8:	ae 01       	movw	r20, r28
    54ea:	47 5c       	subi	r20, 0xC7	; 199
    54ec:	5f 4f       	sbci	r21, 0xFF	; 255
    54ee:	be 01       	movw	r22, r28
    54f0:	6b 5b       	subi	r22, 0xBB	; 187
    54f2:	7f 4f       	sbci	r23, 0xFF	; 255
    54f4:	ce 01       	movw	r24, r28
    54f6:	8d 96       	adiw	r24, 0x2d	; 45
    54f8:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <vector_into_matrix>
    54fc:	8e 01       	movw	r16, r28
    54fe:	07 5c       	subi	r16, 0xC7	; 199
    5500:	1f 4f       	sbci	r17, 0xFF	; 255
    5502:	0f 2e       	mov	r0, r31
    5504:	f6 e6       	ldi	r31, 0x66	; 102
    5506:	cf 2e       	mov	r12, r31
    5508:	f4 e0       	ldi	r31, 0x04	; 4
    550a:	df 2e       	mov	r13, r31
    550c:	f0 2d       	mov	r31, r0
    550e:	cb 53       	subi	r28, 0x3B	; 59
    5510:	df 4f       	sbci	r29, 0xFF	; 255
    5512:	28 80       	ld	r2, Y
    5514:	c5 5c       	subi	r28, 0xC5	; 197
    5516:	d0 40       	sbci	r29, 0x00	; 0
    5518:	ca 53       	subi	r28, 0x3A	; 58
    551a:	df 4f       	sbci	r29, 0xFF	; 255
    551c:	38 80       	ld	r3, Y
    551e:	c6 5c       	subi	r28, 0xC6	; 198
    5520:	d0 40       	sbci	r29, 0x00	; 0
    5522:	78 01       	movw	r14, r16
    5524:	bc e0       	ldi	r27, 0x0C	; 12
    5526:	eb 0e       	add	r14, r27
    5528:	f1 1c       	adc	r15, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    552a:	f8 01       	movw	r30, r16
    552c:	61 91       	ld	r22, Z+
    552e:	71 91       	ld	r23, Z+
    5530:	81 91       	ld	r24, Z+
    5532:	91 91       	ld	r25, Z+
    5534:	8f 01       	movw	r16, r30
    5536:	d6 01       	movw	r26, r12
    5538:	4d 90       	ld	r4, X+
    553a:	5d 90       	ld	r5, X+
    553c:	6d 90       	ld	r6, X+
    553e:	7d 90       	ld	r7, X+
    5540:	6d 01       	movw	r12, r26
    5542:	28 e0       	ldi	r18, 0x08	; 8
    5544:	31 e2       	ldi	r19, 0x21	; 33
    5546:	44 e0       	ldi	r20, 0x04	; 4
    5548:	5d e3       	ldi	r21, 0x3D	; 61
    554a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    554e:	4b 01       	movw	r8, r22
    5550:	5c 01       	movw	r10, r24
    5552:	20 ef       	ldi	r18, 0xF0	; 240
    5554:	3d eb       	ldi	r19, 0xBD	; 189
    5556:	47 e7       	ldi	r20, 0x77	; 119
    5558:	5f e3       	ldi	r21, 0x3F	; 63
    555a:	c3 01       	movw	r24, r6
    555c:	b2 01       	movw	r22, r4
    555e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <__mulsf3>
    5562:	9b 01       	movw	r18, r22
    5564:	ac 01       	movw	r20, r24
    5566:	c5 01       	movw	r24, r10
    5568:	b4 01       	movw	r22, r8
    556a:	1c d6       	rcall	.+3128   	; 0x61a4 <__addsf3>
    556c:	f1 01       	movw	r30, r2
    556e:	61 93       	st	Z+, r22
    5570:	71 93       	st	Z+, r23
    5572:	81 93       	st	Z+, r24
    5574:	91 93       	st	Z+, r25
    5576:	1f 01       	movw	r2, r30
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    5578:	0e 15       	cp	r16, r14
    557a:	1f 05       	cpc	r17, r15
    557c:	b1 f6       	brne	.-84     	; 0x552a <omega_estimation+0x4c2>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    557e:	62 e7       	ldi	r22, 0x72	; 114
    5580:	74 e0       	ldi	r23, 0x04	; 4
    5582:	cd 53       	subi	r28, 0x3D	; 61
    5584:	df 4f       	sbci	r29, 0xFF	; 255
    5586:	88 81       	ld	r24, Y
    5588:	c3 5c       	subi	r28, 0xC3	; 195
    558a:	d0 40       	sbci	r29, 0x00	; 0
    558c:	cc 53       	subi	r28, 0x3C	; 60
    558e:	df 4f       	sbci	r29, 0xFF	; 255
    5590:	98 81       	ld	r25, Y
    5592:	c4 5c       	subi	r28, 0xC4	; 196
    5594:	d0 40       	sbci	r29, 0x00	; 0
    5596:	0e 94 a2 1c 	call	0x3944	; 0x3944 <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    559a:	66 e6       	ldi	r22, 0x66	; 102
    559c:	74 e0       	ldi	r23, 0x04	; 4
    559e:	cb 53       	subi	r28, 0x3B	; 59
    55a0:	df 4f       	sbci	r29, 0xFF	; 255
    55a2:	88 81       	ld	r24, Y
    55a4:	c5 5c       	subi	r28, 0xC5	; 197
    55a6:	d0 40       	sbci	r29, 0x00	; 0
    55a8:	ca 53       	subi	r28, 0x3A	; 58
    55aa:	df 4f       	sbci	r29, 0xFF	; 255
    55ac:	98 81       	ld	r25, Y
    55ae:	c6 5c       	subi	r28, 0xC6	; 198
    55b0:	d0 40       	sbci	r29, 0x00	; 0
    55b2:	0e 94 82 1c 	call	0x3904	; 0x3904 <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    55b6:	ca 53       	subi	r28, 0x3A	; 58
    55b8:	df 4f       	sbci	r29, 0xFF	; 255
    55ba:	0f b6       	in	r0, 0x3f	; 63
    55bc:	f8 94       	cli
    55be:	de bf       	out	0x3e, r29	; 62
    55c0:	0f be       	out	0x3f, r0	; 63
    55c2:	cd bf       	out	0x3d, r28	; 61
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	1f 91       	pop	r17
    55ca:	0f 91       	pop	r16
    55cc:	ff 90       	pop	r15
    55ce:	ef 90       	pop	r14
    55d0:	df 90       	pop	r13
    55d2:	cf 90       	pop	r12
    55d4:	bf 90       	pop	r11
    55d6:	af 90       	pop	r10
    55d8:	9f 90       	pop	r9
    55da:	8f 90       	pop	r8
    55dc:	7f 90       	pop	r7
    55de:	6f 90       	pop	r6
    55e0:	5f 90       	pop	r5
    55e2:	4f 90       	pop	r4
    55e4:	3f 90       	pop	r3
    55e6:	2f 90       	pop	r2
    55e8:	08 95       	ret

000055ea <init_SPI>:

void SPI_send(char* str, uint16_t size) 
{
  uint16_t i = 0;
  ///In while loop:
  while(i<size)
    55ea:	17 ba       	out	0x17, r1	; 23
    55ec:	86 e0       	ldi	r24, 0x06	; 6
    55ee:	87 bb       	out	0x17, r24	; 23
    55f0:	87 b3       	in	r24, 0x17	; 23
    55f2:	81 63       	ori	r24, 0x31	; 49
    55f4:	87 bb       	out	0x17, r24	; 23
    55f6:	88 b3       	in	r24, 0x18	; 24
    55f8:	80 63       	ori	r24, 0x30	; 48
    55fa:	88 bb       	out	0x18, r24	; 24
    55fc:	c0 98       	cbi	0x18, 0	; 24
    55fe:	8f e5       	ldi	r24, 0x5F	; 95
    5600:	8d b9       	out	0x0d, r24	; 13
    5602:	08 95       	ret

00005604 <SPI_transfer>:
}


uint8_t SPI_transfer(uint8_t transmit_byte)
{
  SPDR = transmit_byte;
    5604:	8f b9       	out	0x0f, r24	; 15
  ///Wait for Transmission to complete
  while(!(SPSR & (1<<SPIF)));
    5606:	77 9b       	sbis	0x0e, 7	; 14
    5608:	fe cf       	rjmp	.-4      	; 0x5606 <SPI_transfer+0x2>
  ///return received Byte
  return SPDR;
    560a:	8f b1       	in	r24, 0x0f	; 15
}
    560c:	08 95       	ret

0000560e <poll_SS>:
	val=(val<<8)+vall;
	return val;
}

void poll_SS(void)
{
    560e:	7f 92       	push	r7
    5610:	8f 92       	push	r8
    5612:	9f 92       	push	r9
    5614:	af 92       	push	r10
    5616:	bf 92       	push	r11
    5618:	cf 92       	push	r12
    561a:	df 92       	push	r13
    561c:	ef 92       	push	r14
    561e:	ff 92       	push	r15
    5620:	0f 93       	push	r16
    5622:	1f 93       	push	r17
    5624:	cf 93       	push	r28
    5626:	df 93       	push	r29
    5628:	cd b7       	in	r28, 0x3d	; 61
    562a:	de b7       	in	r29, 0x3e	; 62
    562c:	2c 97       	sbiw	r28, 0x0c	; 12
    562e:	0f b6       	in	r0, 0x3f	; 63
    5630:	f8 94       	cli
    5632:	de bf       	out	0x3e, r29	; 62
    5634:	0f be       	out	0x3f, r0	; 63
    5636:	cd bf       	out	0x3d, r28	; 61
	uint8_t valh6;
	uint8_t vall6;

	uint16_t val[6];//First sunsensor combined 16 bit value
	int8_t data_r;
  PORTB |= (1<<PB0);//Set Slave select of Slave OBC to 1
    5638:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~(1<<PB5);// Set slave select of ADC to 0
    563a:	c5 98       	cbi	0x18, 5	; 24
    563c:	8f ec       	ldi	r24, 0xCF	; 207
    563e:	97 e0       	ldi	r25, 0x07	; 7
    5640:	01 97       	sbiw	r24, 0x01	; 1
    5642:	f1 f7       	brne	.-4      	; 0x5640 <poll_SS+0x32>
    5644:	00 c0       	rjmp	.+0      	; 0x5646 <poll_SS+0x38>
    5646:	00 00       	nop
  //SPCR |=(1<<SPE);
  _delay_ms(1);
  data_r=SPI_transfer(0xFF); //Dummy transaction. Tell ADC that data transmission should begin now.
    5648:	8f ef       	ldi	r24, 0xFF	; 255
    564a:	dc df       	rcall	.-72     	; 0x5604 <SPI_transfer>
    564c:	ef ec       	ldi	r30, 0xCF	; 207
    564e:	f7 e0       	ldi	r31, 0x07	; 7
    5650:	31 97       	sbiw	r30, 0x01	; 1
    5652:	f1 f7       	brne	.-4      	; 0x5650 <poll_SS+0x42>
    5654:	00 c0       	rjmp	.+0      	; 0x5656 <poll_SS+0x48>
    5656:	00 00       	nop
  _delay_ms(1);
  //transmit_UART0(data_r);
  PORTA = 0xFF;
    5658:	8f ef       	ldi	r24, 0xFF	; 255
    565a:	8b bb       	out	0x1b, r24	; 27
  vall1=SPI_transfer(0xFF);//First data byte
    565c:	d3 df       	rcall	.-90     	; 0x5604 <SPI_transfer>
    565e:	78 2e       	mov	r7, r24
    5660:	8f ec       	ldi	r24, 0xCF	; 207
    5662:	97 e0       	ldi	r25, 0x07	; 7
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	f1 f7       	brne	.-4      	; 0x5664 <poll_SS+0x56>
    5668:	00 c0       	rjmp	.+0      	; 0x566a <poll_SS+0x5c>
    566a:	00 00       	nop
  _delay_ms(1);
  valh1=SPI_transfer(0xFF);
    566c:	8f ef       	ldi	r24, 0xFF	; 255
    566e:	ca df       	rcall	.-108    	; 0x5604 <SPI_transfer>
    5670:	88 2e       	mov	r8, r24
    5672:	ef ec       	ldi	r30, 0xCF	; 207
    5674:	f7 e0       	ldi	r31, 0x07	; 7
    5676:	31 97       	sbiw	r30, 0x01	; 1
    5678:	f1 f7       	brne	.-4      	; 0x5676 <poll_SS+0x68>
    567a:	00 c0       	rjmp	.+0      	; 0x567c <poll_SS+0x6e>
    567c:	00 00       	nop
  _delay_ms(1);


  vall2=SPI_transfer(0xFF);
    567e:	8f ef       	ldi	r24, 0xFF	; 255
    5680:	c1 df       	rcall	.-126    	; 0x5604 <SPI_transfer>
    5682:	98 2e       	mov	r9, r24
    5684:	8f ec       	ldi	r24, 0xCF	; 207
    5686:	97 e0       	ldi	r25, 0x07	; 7
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	f1 f7       	brne	.-4      	; 0x5688 <poll_SS+0x7a>
    568c:	00 c0       	rjmp	.+0      	; 0x568e <poll_SS+0x80>
    568e:	00 00       	nop
  _delay_ms(1);
  valh2=SPI_transfer(0xFF);
    5690:	8f ef       	ldi	r24, 0xFF	; 255
    5692:	b8 df       	rcall	.-144    	; 0x5604 <SPI_transfer>
    5694:	a8 2e       	mov	r10, r24
    5696:	ef ec       	ldi	r30, 0xCF	; 207
    5698:	f7 e0       	ldi	r31, 0x07	; 7
    569a:	31 97       	sbiw	r30, 0x01	; 1
    569c:	f1 f7       	brne	.-4      	; 0x569a <poll_SS+0x8c>
    569e:	00 c0       	rjmp	.+0      	; 0x56a0 <poll_SS+0x92>
    56a0:	00 00       	nop
  _delay_ms(1);




  vall3=SPI_transfer(0xFF);
    56a2:	8f ef       	ldi	r24, 0xFF	; 255
    56a4:	af df       	rcall	.-162    	; 0x5604 <SPI_transfer>
    56a6:	b8 2e       	mov	r11, r24
    56a8:	8f ec       	ldi	r24, 0xCF	; 207
    56aa:	97 e0       	ldi	r25, 0x07	; 7
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	f1 f7       	brne	.-4      	; 0x56ac <poll_SS+0x9e>
    56b0:	00 c0       	rjmp	.+0      	; 0x56b2 <poll_SS+0xa4>
    56b2:	00 00       	nop
  _delay_ms(1);
  valh3=SPI_transfer(0xFF);
    56b4:	8f ef       	ldi	r24, 0xFF	; 255
    56b6:	a6 df       	rcall	.-180    	; 0x5604 <SPI_transfer>
    56b8:	c8 2e       	mov	r12, r24
    56ba:	ef ec       	ldi	r30, 0xCF	; 207
    56bc:	f7 e0       	ldi	r31, 0x07	; 7
    56be:	31 97       	sbiw	r30, 0x01	; 1
    56c0:	f1 f7       	brne	.-4      	; 0x56be <poll_SS+0xb0>
    56c2:	00 c0       	rjmp	.+0      	; 0x56c4 <poll_SS+0xb6>
    56c4:	00 00       	nop
  _delay_ms(1);



  vall4=SPI_transfer(0xFF);
    56c6:	8f ef       	ldi	r24, 0xFF	; 255
    56c8:	9d df       	rcall	.-198    	; 0x5604 <SPI_transfer>
    56ca:	d8 2e       	mov	r13, r24
    56cc:	8f ec       	ldi	r24, 0xCF	; 207
    56ce:	97 e0       	ldi	r25, 0x07	; 7
    56d0:	01 97       	sbiw	r24, 0x01	; 1
    56d2:	f1 f7       	brne	.-4      	; 0x56d0 <poll_SS+0xc2>
    56d4:	00 c0       	rjmp	.+0      	; 0x56d6 <poll_SS+0xc8>
    56d6:	00 00       	nop
  _delay_ms(1);
  valh4=SPI_transfer(0xFF);
    56d8:	8f ef       	ldi	r24, 0xFF	; 255
    56da:	94 df       	rcall	.-216    	; 0x5604 <SPI_transfer>
    56dc:	f8 2e       	mov	r15, r24
    56de:	ef ec       	ldi	r30, 0xCF	; 207
    56e0:	f7 e0       	ldi	r31, 0x07	; 7
    56e2:	31 97       	sbiw	r30, 0x01	; 1
    56e4:	f1 f7       	brne	.-4      	; 0x56e2 <poll_SS+0xd4>
    56e6:	00 c0       	rjmp	.+0      	; 0x56e8 <poll_SS+0xda>
    56e8:	00 00       	nop
  _delay_ms(1);



  vall5=SPI_transfer(0xFF);
    56ea:	8f ef       	ldi	r24, 0xFF	; 255
    56ec:	8b df       	rcall	.-234    	; 0x5604 <SPI_transfer>
    56ee:	e8 2e       	mov	r14, r24
    56f0:	8f ec       	ldi	r24, 0xCF	; 207
    56f2:	97 e0       	ldi	r25, 0x07	; 7
    56f4:	01 97       	sbiw	r24, 0x01	; 1
    56f6:	f1 f7       	brne	.-4      	; 0x56f4 <poll_SS+0xe6>
    56f8:	00 c0       	rjmp	.+0      	; 0x56fa <poll_SS+0xec>
    56fa:	00 00       	nop
  _delay_ms(1);
  valh5=SPI_transfer(0xFF);
    56fc:	8f ef       	ldi	r24, 0xFF	; 255
    56fe:	82 df       	rcall	.-252    	; 0x5604 <SPI_transfer>
    5700:	18 2f       	mov	r17, r24
    5702:	ef ec       	ldi	r30, 0xCF	; 207
    5704:	f7 e0       	ldi	r31, 0x07	; 7
    5706:	31 97       	sbiw	r30, 0x01	; 1
    5708:	f1 f7       	brne	.-4      	; 0x5706 <poll_SS+0xf8>
    570a:	00 c0       	rjmp	.+0      	; 0x570c <poll_SS+0xfe>
    570c:	00 00       	nop
  _delay_ms(1);



  vall6=SPI_transfer(0xFF);
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	79 df       	rcall	.-270    	; 0x5604 <SPI_transfer>
    5712:	08 2f       	mov	r16, r24
    5714:	8f ec       	ldi	r24, 0xCF	; 207
    5716:	97 e0       	ldi	r25, 0x07	; 7
    5718:	01 97       	sbiw	r24, 0x01	; 1
    571a:	f1 f7       	brne	.-4      	; 0x5718 <poll_SS+0x10a>
    571c:	00 c0       	rjmp	.+0      	; 0x571e <poll_SS+0x110>
    571e:	00 00       	nop
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
    5720:	8f ef       	ldi	r24, 0xFF	; 255
    5722:	70 df       	rcall	.-288    	; 0x5604 <SPI_transfer>
    5724:	ef ec       	ldi	r30, 0xCF	; 207
    5726:	f7 e0       	ldi	r31, 0x07	; 7
    5728:	31 97       	sbiw	r30, 0x01	; 1
    572a:	f1 f7       	brne	.-4      	; 0x5728 <poll_SS+0x11a>
    572c:	00 c0       	rjmp	.+0      	; 0x572e <poll_SS+0x120>
    572e:	00 00       	nop
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5730:	48 2d       	mov	r20, r8
    5732:	50 e0       	ldi	r21, 0x00	; 0
	val=(val<<8)+vall;
    5734:	54 2f       	mov	r21, r20
    5736:	44 27       	eor	r20, r20
    5738:	47 0d       	add	r20, r7
    573a:	51 1d       	adc	r21, r1

  vall6=SPI_transfer(0xFF);
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
    573c:	5a 83       	std	Y+2, r21	; 0x02
    573e:	49 83       	std	Y+1, r20	; 0x01
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5740:	4a 2d       	mov	r20, r10
    5742:	50 e0       	ldi	r21, 0x00	; 0
	val=(val<<8)+vall;
    5744:	54 2f       	mov	r21, r20
    5746:	44 27       	eor	r20, r20
    5748:	49 0d       	add	r20, r9
    574a:	51 1d       	adc	r21, r1
  vall6=SPI_transfer(0xFF);
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
    574c:	5c 83       	std	Y+4, r21	; 0x04
    574e:	4b 83       	std	Y+3, r20	; 0x03
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5750:	4c 2d       	mov	r20, r12
    5752:	50 e0       	ldi	r21, 0x00	; 0
	val=(val<<8)+vall;
    5754:	54 2f       	mov	r21, r20
    5756:	44 27       	eor	r20, r20
    5758:	4b 0d       	add	r20, r11
    575a:	51 1d       	adc	r21, r1
  _delay_ms(1);
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
    575c:	5e 83       	std	Y+6, r21	; 0x06
    575e:	4d 83       	std	Y+5, r20	; 0x05
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5760:	4f 2d       	mov	r20, r15
    5762:	50 e0       	ldi	r21, 0x00	; 0
	val=(val<<8)+vall;
    5764:	54 2f       	mov	r21, r20
    5766:	44 27       	eor	r20, r20
    5768:	4d 0d       	add	r20, r13
    576a:	51 1d       	adc	r21, r1
  valh6=SPI_transfer(0xFF);
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
    576c:	58 87       	std	Y+8, r21	; 0x08
    576e:	4f 83       	std	Y+7, r20	; 0x07
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5770:	41 2f       	mov	r20, r17
    5772:	50 e0       	ldi	r21, 0x00	; 0
	val=(val<<8)+vall;
    5774:	54 2f       	mov	r21, r20
    5776:	44 27       	eor	r20, r20
    5778:	4e 0d       	add	r20, r14
    577a:	51 1d       	adc	r21, r1
  _delay_ms(1);
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
    577c:	5a 87       	std	Y+10, r21	; 0x0a
    577e:	49 87       	std	Y+9, r20	; 0x09
}

uint16_t convert(uint8_t vall, uint8_t valh) //to convert 2 8 bit integer values to one 16 bit value
{
	
	uint16_t val= valh;
    5780:	28 2f       	mov	r18, r24
    5782:	30 e0       	ldi	r19, 0x00	; 0
	val=(val<<8)+vall;
    5784:	32 2f       	mov	r19, r18
    5786:	22 27       	eor	r18, r18
    5788:	c9 01       	movw	r24, r18
    578a:	80 0f       	add	r24, r16
    578c:	91 1d       	adc	r25, r1
  val[0]=convert(vall1,valh1);
  val[1]=convert(vall2,valh2);
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
  val[5]=convert(vall6,valh6);
    578e:	9c 87       	std	Y+12, r25	; 0x0c
    5790:	8b 87       	std	Y+11, r24	; 0x0b
    5792:	ce 01       	movw	r24, r28
    5794:	01 96       	adiw	r24, 0x01	; 1
    5796:	7c 01       	movw	r14, r24

  for (int i=0;i<6;i=i+1)
    5798:	00 e0       	ldi	r16, 0x00	; 0
    579a:	10 e0       	ldi	r17, 0x00	; 0
  {
	  Current_state.ss.read[i] = (double)(((double)val[i]*3.3/1024.0));//Current_state.ss.read[i] = (double)(((double)Current_state.ss.reading[i]*3.3/1024)-1.65)*2;
    579c:	f7 01       	movw	r30, r14
    579e:	61 91       	ld	r22, Z+
    57a0:	71 91       	ld	r23, Z+
    57a2:	7f 01       	movw	r14, r30
    57a4:	80 e0       	ldi	r24, 0x00	; 0
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	7a d6       	rcall	.+3316   	; 0x649e <__floatunsisf>
    57aa:	23 e3       	ldi	r18, 0x33	; 51
    57ac:	33 e3       	ldi	r19, 0x33	; 51
    57ae:	43 e5       	ldi	r20, 0x53	; 83
    57b0:	50 e4       	ldi	r21, 0x40	; 64
    57b2:	fa d7       	rcall	.+4084   	; 0x67a8 <__mulsf3>
    57b4:	20 e0       	ldi	r18, 0x00	; 0
    57b6:	30 e0       	ldi	r19, 0x00	; 0
    57b8:	40 e8       	ldi	r20, 0x80	; 128
    57ba:	5a e3       	ldi	r21, 0x3A	; 58
    57bc:	f5 d7       	rcall	.+4074   	; 0x67a8 <__mulsf3>
    57be:	f8 01       	movw	r30, r16
    57c0:	ee 0f       	add	r30, r30
    57c2:	ff 1f       	adc	r31, r31
    57c4:	ee 0f       	add	r30, r30
    57c6:	ff 1f       	adc	r31, r31
    57c8:	e1 54       	subi	r30, 0x41	; 65
    57ca:	fb 4f       	sbci	r31, 0xFB	; 251
    57cc:	61 ab       	std	Z+49, r22	; 0x31
    57ce:	72 ab       	std	Z+50, r23	; 0x32
    57d0:	83 ab       	std	Z+51, r24	; 0x33
    57d2:	94 ab       	std	Z+52, r25	; 0x34
  val[2]=convert(vall3,valh3);
  val[3]=convert(vall4,valh4);
  val[4]=convert(vall5,valh5);
  val[5]=convert(vall6,valh6);

  for (int i=0;i<6;i=i+1)
    57d4:	0f 5f       	subi	r16, 0xFF	; 255
    57d6:	1f 4f       	sbci	r17, 0xFF	; 255
    57d8:	06 30       	cpi	r16, 0x06	; 6
    57da:	11 05       	cpc	r17, r1
    57dc:	f9 f6       	brne	.-66     	; 0x579c <poll_SS+0x18e>
  {
	  sen = (Current_state.ss.read[i]*255/3.3);
	  transmit_UART0(sen);
  }
 */
  PORTB |= (1<<PB5);
    57de:	c5 9a       	sbi	0x18, 5	; 24
  //_delay_ms(1000);
  ///Power Down PD low
  //cbi(PORTB, PB6);
//return;  
}
    57e0:	2c 96       	adiw	r28, 0x0c	; 12
    57e2:	0f b6       	in	r0, 0x3f	; 63
    57e4:	f8 94       	cli
    57e6:	de bf       	out	0x3e, r29	; 62
    57e8:	0f be       	out	0x3f, r0	; 63
    57ea:	cd bf       	out	0x3d, r28	; 61
    57ec:	df 91       	pop	r29
    57ee:	cf 91       	pop	r28
    57f0:	1f 91       	pop	r17
    57f2:	0f 91       	pop	r16
    57f4:	ff 90       	pop	r15
    57f6:	ef 90       	pop	r14
    57f8:	df 90       	pop	r13
    57fa:	cf 90       	pop	r12
    57fc:	bf 90       	pop	r11
    57fe:	af 90       	pop	r10
    5800:	9f 90       	pop	r9
    5802:	8f 90       	pop	r8
    5804:	7f 90       	pop	r7
    5806:	08 95       	ret

00005808 <timer_reset_two_sec>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    5808:	86 b7       	in	r24, 0x36	; 54
    580a:	80 61       	ori	r24, 0x10	; 16
    580c:	86 bf       	out	0x36, r24	; 54
    580e:	1e bc       	out	0x2e, r1	; 46
    5810:	1d bc       	out	0x2d, r1	; 45
    5812:	1c bc       	out	0x2c, r1	; 44
    5814:	88 e0       	ldi	r24, 0x08	; 8
    5816:	9d e3       	ldi	r25, 0x3D	; 61
    5818:	9b bd       	out	0x2b, r25	; 43
    581a:	8a bd       	out	0x2a, r24	; 42
    581c:	1f bc       	out	0x2f, r1	; 47
    581e:	85 e0       	ldi	r24, 0x05	; 5
    5820:	8e bd       	out	0x2e, r24	; 46
    5822:	10 92 7a 00 	sts	0x007A, r1
    5826:	08 95       	ret

00005828 <timer_wait_reset>:
  wdt_enable(time);
}

void timer_wait_reset(void){
  ///* Return when timer>2 seconds.
  while(!(TIFR & _BV(OCF1A)));
    5828:	06 b6       	in	r0, 0x36	; 54
    582a:	04 fe       	sbrs	r0, 4
    582c:	fd cf       	rjmp	.-6      	; 0x5828 <timer_wait_reset>
  ///* Restart timer
  timer_reset_two_sec();  
    582e:	ec cf       	rjmp	.-40     	; 0x5808 <timer_reset_two_sec>
    5830:	08 95       	ret

00005832 <init_UART0>:
void transmit_UART1(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR1A & (_BV(UDRE1))) );
  //* Start transmission
  UDR1 = data;
    5832:	1b b8       	out	0x0b, r1	; 11
    5834:	1a b8       	out	0x0a, r1	; 10
    5836:	e5 e9       	ldi	r30, 0x95	; 149
    5838:	f0 e0       	ldi	r31, 0x00	; 0
    583a:	10 82       	st	Z, r1
    583c:	59 9a       	sbi	0x0b, 1	; 11
    583e:	8a b1       	in	r24, 0x0a	; 10
    5840:	88 61       	ori	r24, 0x18	; 24
    5842:	8a b9       	out	0x0a, r24	; 10
    5844:	80 81       	ld	r24, Z
    5846:	8e 60       	ori	r24, 0x0E	; 14
    5848:	80 83       	st	Z, r24
    584a:	87 e6       	ldi	r24, 0x67	; 103
    584c:	89 b9       	out	0x09, r24	; 9
    584e:	10 92 90 00 	sts	0x0090, r1
    5852:	08 95       	ret

00005854 <transmit_UART0>:
}

void transmit_UART0(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
    5854:	5d 9b       	sbis	0x0b, 5	; 11
    5856:	fe cf       	rjmp	.-4      	; 0x5854 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
    5858:	8c b9       	out	0x0c, r24	; 12
    585a:	08 95       	ret

0000585c <TWI_init_master>:
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
}
    585c:	10 92 71 00 	sts	0x0071, r1
    5860:	10 92 74 00 	sts	0x0074, r1
    5864:	8c e0       	ldi	r24, 0x0C	; 12
    5866:	80 93 70 00 	sts	0x0070, r24
    586a:	08 95       	ret

0000586c <TWI_start>:
    586c:	84 ea       	ldi	r24, 0xA4	; 164
    586e:	80 93 74 00 	sts	0x0074, r24
    5872:	e4 e7       	ldi	r30, 0x74	; 116
    5874:	f0 e0       	ldi	r31, 0x00	; 0
    5876:	80 81       	ld	r24, Z
    5878:	88 23       	and	r24, r24
    587a:	ec f7       	brge	.-6      	; 0x5876 <TWI_start+0xa>
    587c:	e1 e7       	ldi	r30, 0x71	; 113
    587e:	f0 e0       	ldi	r31, 0x00	; 0
    5880:	80 81       	ld	r24, Z
    5882:	88 7f       	andi	r24, 0xF8	; 248
    5884:	88 30       	cpi	r24, 0x08	; 8
    5886:	e1 f7       	brne	.-8      	; 0x5880 <TWI_start+0x14>
    5888:	08 95       	ret

0000588a <TWI_write_address>:

void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
    588a:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    588e:	84 e8       	ldi	r24, 0x84	; 132
    5890:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    5894:	a4 e7       	ldi	r26, 0x74	; 116
    5896:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    5898:	e1 e7       	ldi	r30, 0x71	; 113
    589a:	f0 e0       	ldi	r31, 0x00	; 0
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    589c:	04 c0       	rjmp	.+8      	; 0x58a6 <TWI_write_address+0x1c>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement
    589e:	80 81       	ld	r24, Z
    58a0:	88 7f       	andi	r24, 0xF8	; 248
    58a2:	88 31       	cpi	r24, 0x18	; 24
    58a4:	e1 f7       	brne	.-8      	; 0x589e <TWI_write_address+0x14>
void TWI_write_address(unsigned char data)//Function for Master side to send slave address for I2C
{

	TWDR=data; // Address and write instruction
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT)))// Wait till complete TWDR byte transmitted
    58a6:	8c 91       	ld	r24, X
    58a8:	88 23       	and	r24, r24
    58aa:	cc f7       	brge	.-14     	; 0x589e <TWI_write_address+0x14>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknowledgement

}
    58ac:	08 95       	ret

000058ae <TWI_read_address>:

void TWI_read_address(unsigned char data) //Function for slave side to read address sent by Master
{
	TWDR=data; // Address and read instruction
    58ae:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    58b2:	84 e8       	ldi	r24, 0x84	; 132
    58b4:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    58b8:	e4 e7       	ldi	r30, 0x74	; 116
    58ba:	f0 e0       	ldi	r31, 0x00	; 0
    58bc:	80 81       	ld	r24, Z
    58be:	88 23       	and	r24, r24
    58c0:	ec f7       	brge	.-6      	; 0x58bc <TWI_read_address+0xe>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
    58c2:	e1 e7       	ldi	r30, 0x71	; 113
    58c4:	f0 e0       	ldi	r31, 0x00	; 0
    58c6:	80 81       	ld	r24, Z
    58c8:	88 7f       	andi	r24, 0xF8	; 248
    58ca:	80 34       	cpi	r24, 0x40	; 64
    58cc:	e1 f7       	brne	.-8      	; 0x58c6 <TWI_read_address+0x18>
}
    58ce:	08 95       	ret

000058d0 <TWI_write_data>:

void TWI_write_data(unsigned char data)//Function to write data on I2C data line
{
	TWDR=data; // put data in TWDR
    58d0:	80 93 73 00 	sts	0x0073, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    58d4:	84 e8       	ldi	r24, 0x84	; 132
    58d6:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    58da:	e4 e7       	ldi	r30, 0x74	; 116
    58dc:	f0 e0       	ldi	r31, 0x00	; 0
    58de:	80 81       	ld	r24, Z
    58e0:	88 23       	and	r24, r24
    58e2:	ec f7       	brge	.-6      	; 0x58de <TWI_write_data+0xe>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
    58e4:	e1 e7       	ldi	r30, 0x71	; 113
    58e6:	f0 e0       	ldi	r31, 0x00	; 0
    58e8:	80 81       	ld	r24, Z
    58ea:	88 7f       	andi	r24, 0xF8	; 248
    58ec:	88 32       	cpi	r24, 0x28	; 40
    58ee:	e1 f7       	brne	.-8      	; 0x58e8 <TWI_write_data+0x18>
}
    58f0:	08 95       	ret

000058f2 <TWI_read_data>:

void TWI_read_data(void) //Function to read data from I2C data line
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    58f2:	84 e8       	ldi	r24, 0x84	; 132
    58f4:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    58f8:	e4 e7       	ldi	r30, 0x74	; 116
    58fa:	f0 e0       	ldi	r31, 0x00	; 0
    58fc:	80 81       	ld	r24, Z
    58fe:	88 23       	and	r24, r24
    5900:	ec f7       	brge	.-6      	; 0x58fc <TWI_read_data+0xa>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
    5902:	e1 e7       	ldi	r30, 0x71	; 113
    5904:	f0 e0       	ldi	r31, 0x00	; 0
    5906:	80 81       	ld	r24, Z
    5908:	88 7f       	andi	r24, 0xF8	; 248
    590a:	88 35       	cpi	r24, 0x58	; 88
    590c:	e1 f7       	brne	.-8      	; 0x5906 <TWI_read_data+0x14>
	recv_data=TWDR;//PORTA=recv_data;
    590e:	80 91 73 00 	lds	r24, 0x0073
    5912:	80 93 24 05 	sts	0x0524, r24
    5916:	08 95       	ret

00005918 <TWI_stop>:
}

void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    5918:	84 e9       	ldi	r24, 0x94	; 148
    591a:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
    591e:	e4 e7       	ldi	r30, 0x74	; 116
    5920:	f0 e0       	ldi	r31, 0x00	; 0
    5922:	80 81       	ld	r24, Z
    5924:	84 ff       	sbrs	r24, 4
    5926:	fd cf       	rjmp	.-6      	; 0x5922 <TWI_stop+0xa>
}
    5928:	08 95       	ret

0000592a <SendHM>:
/**
 * @brief Main function
 */

 void SendHM(void)
 {
    592a:	ed e2       	ldi	r30, 0x2D	; 45
    592c:	f5 e0       	ldi	r31, 0x05	; 5
    592e:	24 e3       	ldi	r18, 0x34	; 52
    5930:	35 e0       	ldi	r19, 0x05	; 5
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
    5932:	9f ef       	ldi	r25, 0xFF	; 255
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
		 SPDR = HM_Data[i];
    5934:	81 91       	ld	r24, Z+
    5936:	8f b9       	out	0x0f, r24	; 15
		 while(!(SPSR & (1<<SPIF) ));
    5938:	77 9b       	sbis	0x0e, 7	; 14
    593a:	fe cf       	rjmp	.-4      	; 0x5938 <SendHM+0xe>
		 PORTA = 0xFF;
    593c:	9b bb       	out	0x1b, r25	; 27
    593e:	af ec       	ldi	r26, 0xCF	; 207
    5940:	b7 e0       	ldi	r27, 0x07	; 7
    5942:	11 97       	sbiw	r26, 0x01	; 1
    5944:	f1 f7       	brne	.-4      	; 0x5942 <SendHM+0x18>
    5946:	00 c0       	rjmp	.+0      	; 0x5948 <SendHM+0x1e>
    5948:	00 00       	nop
 * @brief Main function
 */

 void SendHM(void)
 {
	 for (uint8_t i =0;i<7;i++) {
    594a:	e2 17       	cp	r30, r18
    594c:	f3 07       	cpc	r31, r19
    594e:	91 f7       	brne	.-28     	; 0x5934 <SendHM+0xa>
		 SPDR = HM_Data[i];
		 while(!(SPSR & (1<<SPIF) ));
		 PORTA = 0xFF;
		 _delay_ms(1);
	 }
 }
    5950:	08 95       	ret

00005952 <main>:


int main(void){
    5952:	cf 93       	push	r28
    5954:	df 93       	push	r29
    5956:	cd b7       	in	r28, 0x3d	; 61
    5958:	de b7       	in	r29, 0x3e	; 62
    595a:	6c 97       	sbiw	r28, 0x1c	; 28
    595c:	0f b6       	in	r0, 0x3f	; 63
    595e:	f8 94       	cli
    5960:	de bf       	out	0x3e, r29	; 62
    5962:	0f be       	out	0x3f, r0	; 63
    5964:	cd bf       	out	0x3d, r28	; 61
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
   //0 - no over current; 1-reverse
  //Current_state.gps.gps_OC = 0;
  init_SPI();
    5966:	41 de       	rcall	.-894    	; 0x55ea <init_SPI>
  init_UART0();
    5968:	64 df       	rcall	.-312    	; 0x5832 <init_UART0>
  init_UART_MM();
    596a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <init_UART_MM>
  configure_torquer();
    596e:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <configure_torquer>
  DDRA=0xF0;
    5972:	80 ef       	ldi	r24, 0xF0	; 240
    5974:	8a bb       	out	0x1a, r24	; 26
  Current_state.gps.gps_OC = 0; // This is important because the default value of OC should be 0
    5976:	10 92 e0 04 	sts	0x04E0, r1
  DDRB |= (1<<PB0)|(1<<PB5);//PB0 and PB5 are slave select pins for Slave OBC and ADC
    597a:	87 b3       	in	r24, 0x17	; 23
    597c:	81 62       	ori	r24, 0x21	; 33
    597e:	87 bb       	out	0x17, r24	; 23
    5980:	2f ef       	ldi	r18, 0xFF	; 255
    5982:	33 ed       	ldi	r19, 0xD3	; 211
    5984:	80 e3       	ldi	r24, 0x30	; 48
    5986:	21 50       	subi	r18, 0x01	; 1
    5988:	30 40       	sbci	r19, 0x00	; 0
    598a:	80 40       	sbci	r24, 0x00	; 0
    598c:	e1 f7       	brne	.-8      	; 0x5986 <main+0x34>
    598e:	00 c0       	rjmp	.+0      	; 0x5990 <main+0x3e>
    5990:	00 00       	nop
  int j=1;
  _delay_ms(2000);
  PORTA=0b11010000; //LED indicator for debugging
    5992:	80 ed       	ldi	r24, 0xD0	; 208
    5994:	8b bb       	out	0x1b, r24	; 27
  TWI_init_master();
    5996:	62 df       	rcall	.-316    	; 0x585c <TWI_init_master>
    5998:	9f ef       	ldi	r25, 0xFF	; 255
    599a:	a1 e1       	ldi	r26, 0x11	; 17
    599c:	ba e7       	ldi	r27, 0x7A	; 122
    599e:	91 50       	subi	r25, 0x01	; 1
    59a0:	a0 40       	sbci	r26, 0x00	; 0
    59a2:	b0 40       	sbci	r27, 0x00	; 0
    59a4:	e1 f7       	brne	.-8      	; 0x599e <main+0x4c>
    59a6:	00 c0       	rjmp	.+0      	; 0x59a8 <main+0x56>
    59a8:	00 00       	nop
  //transmit_string_UART0("Code");
    ///Wait for all components to switch on
    _delay_ms(5000);
    
    ///* Switch on Global interrupts
    sei();
    59aa:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    59ac:	10 92 25 05 	sts	0x0525, r1
    59b0:	10 92 26 05 	sts	0x0526, r1
    59b4:	10 92 27 05 	sts	0x0527, r1
    59b8:	10 92 28 05 	sts	0x0528, r1
    59bc:	10 92 29 05 	sts	0x0529, r1
    59c0:	10 92 2a 05 	sts	0x052A, r1
    59c4:	10 92 2b 05 	sts	0x052B, r1
    59c8:	10 92 2c 05 	sts	0x052C, r1
    59cc:	0f 2e       	mov	r0, r31
    59ce:	fd e2       	ldi	r31, 0x2D	; 45
    59d0:	4f 2e       	mov	r4, r31
    59d2:	f5 e0       	ldi	r31, 0x05	; 5
    59d4:	5f 2e       	mov	r5, r31
    59d6:	f0 2d       	mov	r31, r0
    59d8:	0f 2e       	mov	r0, r31
    59da:	f4 e3       	ldi	r31, 0x34	; 52
    59dc:	6f 2e       	mov	r6, r31
    59de:	f5 e0       	ldi	r31, 0x05	; 5
    59e0:	7f 2e       	mov	r7, r31
    59e2:	f0 2d       	mov	r31, r0
G9 = (uint8_t)(q_o[0]*256);
G10 = (uint8_t)(q_o[1]*256);
G11 = (uint8_t)(q_o[2]*256);
G12 = (uint8_t)(q_o[4]*256);

GPS_Data[0] = G1;
    59e4:	0f 2e       	mov	r0, r31
    59e6:	f4 e1       	ldi	r31, 0x14	; 20
    59e8:	2f 2e       	mov	r2, r31
    59ea:	f1 e0       	ldi	r31, 0x01	; 1
    59ec:	3f 2e       	mov	r3, r31
    59ee:	f0 2d       	mov	r31, r0
       */
	 
	  
  while (1)
  {
	  timer_reset_two_sec();
    59f0:	0b df       	rcall	.-490    	; 0x5808 <timer_reset_two_sec>
	  //wdt_enable(WDTO_2S);
	  //wdt_reset();
	  if (Mode == DETUMBLING){ write_data|=(1<<6)|(1<<3)|(1<<2);}
    59f2:	80 91 26 01 	lds	r24, 0x0126
    59f6:	84 30       	cpi	r24, 0x04	; 4
    59f8:	31 f4       	brne	.+12     	; 0x5a06 <main+0xb4>
    59fa:	80 91 25 01 	lds	r24, 0x0125
    59fe:	8c 64       	ori	r24, 0x4C	; 76
    5a00:	80 93 25 01 	sts	0x0125, r24
    5a04:	07 c0       	rjmp	.+14     	; 0x5a14 <main+0xc2>
	  if (Mode == NOMINAL){write_data|=(1<<6)|(1<<3)|(1<<2)|(1<<7);}
    5a06:	81 30       	cpi	r24, 0x01	; 1
    5a08:	29 f4       	brne	.+10     	; 0x5a14 <main+0xc2>
    5a0a:	80 91 25 01 	lds	r24, 0x0125
    5a0e:	8c 6c       	ori	r24, 0xCC	; 204
    5a10:	80 93 25 01 	sts	0x0125, r24
	  
  PORTB |= (1<<PB5); //Set slave select of ADC =1
    5a14:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1<<PB0);//Set slave select of Slave OBC = 0
    5a16:	c0 98       	cbi	0x18, 0	; 24
	//SPCR |= (1<<SPE);
	//write_data&= ~(1<<4);// Turn off downlink
	//write_data&= ~(1<<1);//Turn off uplink
	if((Current_state.gps.gps_power_main==2)&&(Current_state.gps.gps_OC == 0))// gps_oc =0 means no overcurrent
    5a18:	80 91 e1 04 	lds	r24, 0x04E1
    5a1c:	82 30       	cpi	r24, 0x02	; 2
    5a1e:	51 f4       	brne	.+20     	; 0x5a34 <main+0xe2>
    5a20:	80 91 e0 04 	lds	r24, 0x04E0
    5a24:	81 11       	cpse	r24, r1
    5a26:	06 c0       	rjmp	.+12     	; 0x5a34 <main+0xe2>
	{write_data |= (1<<5);}
    5a28:	80 91 25 01 	lds	r24, 0x0125
    5a2c:	80 62       	ori	r24, 0x20	; 32
    5a2e:	80 93 25 01 	sts	0x0125, r24
    5a32:	05 c0       	rjmp	.+10     	; 0x5a3e <main+0xec>
		else
		{write_data&= ~(1<<5);}//transmit_UART0('a');
    5a34:	80 91 25 01 	lds	r24, 0x0125
    5a38:	8f 7d       	andi	r24, 0xDF	; 223
    5a3a:	80 93 25 01 	sts	0x0125, r24
			
	
	if ((Mode == NOMINAL)&&(light_main == 0)) //Nominal+Eclipse
    5a3e:	80 91 26 01 	lds	r24, 0x0126
    5a42:	81 30       	cpi	r24, 0x01	; 1
    5a44:	49 f4       	brne	.+18     	; 0x5a58 <main+0x106>
    5a46:	80 91 13 01 	lds	r24, 0x0113
    5a4a:	81 11       	cpse	r24, r1
    5a4c:	05 c0       	rjmp	.+10     	; 0x5a58 <main+0x106>
	{
		write_data &= ~(1<<5);// Turn off GPS
		write_data &= ~(1<<2);// Turn off Mag
		write_data &= ~(1<<6);// Turn off Torq
    5a4e:	80 91 25 01 	lds	r24, 0x0125
    5a52:	8b 79       	andi	r24, 0x9B	; 155
    5a54:	80 93 25 01 	sts	0x0125, r24
    5a58:	9f e0       	ldi	r25, 0x0F	; 15
    5a5a:	88 e1       	ldi	r24, 0x18	; 24
    5a5c:	0f b6       	in	r0, 0x3f	; 63
    5a5e:	f8 94       	cli
    5a60:	a8 95       	wdr
    5a62:	81 bd       	out	0x21, r24	; 33
    5a64:	0f be       	out	0x3f, r0	; 63
    5a66:	91 bd       	out	0x21, r25	; 33
	}
	
	wdt_enable(WDTO_2S);
	wdt_reset();
    5a68:	a8 95       	wdr
	
PORTA = 0xAA;
    5a6a:	8a ea       	ldi	r24, 0xAA	; 170
    5a6c:	8b bb       	out	0x1b, r24	; 27
TWI_start(); // Function to send start condition
    5a6e:	fe de       	rcall	.-516    	; 0x586c <TWI_start>
PORTA=0b11000000;
    5a70:	80 ec       	ldi	r24, 0xC0	; 192
    5a72:	8b bb       	out	0x1b, r24	; 27
TWI_write_address(address); // Function to write address and data direction bit(write) on SDA
    5a74:	80 91 24 01 	lds	r24, 0x0124
    5a78:	08 df       	rcall	.-496    	; 0x588a <TWI_write_address>

PORTA=0b01100000;
    5a7a:	80 e6       	ldi	r24, 0x60	; 96
    5a7c:	8b bb       	out	0x1b, r24	; 27
TWI_write_data(write_data);     // Function to write data in slave
    5a7e:	80 91 25 01 	lds	r24, 0x0125
    5a82:	26 df       	rcall	.-436    	; 0x58d0 <TWI_write_data>
PORTA=0b10100000;
    5a84:	80 ea       	ldi	r24, 0xA0	; 160
    5a86:	8b bb       	out	0x1b, r24	; 27
TWI_stop(); // Function to send stop condition
    5a88:	47 df       	rcall	.-370    	; 0x5918 <TWI_stop>
    5a8a:	ef e1       	ldi	r30, 0x1F	; 31
    5a8c:	fe e4       	ldi	r31, 0x4E	; 78
    5a8e:	31 97       	sbiw	r30, 0x01	; 1
    5a90:	f1 f7       	brne	.-4      	; 0x5a8e <main+0x13c>
    5a92:	00 c0       	rjmp	.+0      	; 0x5a94 <main+0x142>
    5a94:	00 00       	nop
    5a96:	82 01       	movw	r16, r4
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
{
	TWI_start();
    5a98:	e9 de       	rcall	.-558    	; 0x586c <TWI_start>
	
	TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
    5a9a:	90 91 23 01 	lds	r25, 0x0123
    5a9e:	80 91 24 01 	lds	r24, 0x0124
    5aa2:	89 0f       	add	r24, r25
    5aa4:	04 df       	rcall	.-504    	; 0x58ae <TWI_read_address>
	TWI_read_data(); // Function to read data from slave
    5aa6:	25 df       	rcall	.-438    	; 0x58f2 <TWI_read_data>
	HM_Data[i] = recv_data;
    5aa8:	80 91 24 05 	lds	r24, 0x0524
    5aac:	d8 01       	movw	r26, r16
    5aae:	8d 93       	st	X+, r24
    5ab0:	8d 01       	movw	r16, r26
	TWI_stop();
    5ab2:	32 df       	rcall	.-412    	; 0x5918 <TWI_stop>

//if (UniversalCycles%CyclesToCollectData == 0){transmit_string_UART0("PRA");}
_delay_ms(10); // Delay of 10 mili second
//************************Get HM Data from Power Board*************************************

for(int i=0;i<7;i=i+1) 
    5ab4:	06 15       	cp	r16, r6
    5ab6:	17 05       	cpc	r17, r7
    5ab8:	79 f7       	brne	.-34     	; 0x5a98 <main+0x146>
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    5aba:	0f b6       	in	r0, 0x3f	; 63
    5abc:	f8 94       	cli
    5abe:	a8 95       	wdr
    5ac0:	81 b5       	in	r24, 0x21	; 33
    5ac2:	88 61       	ori	r24, 0x18	; 24
    5ac4:	81 bd       	out	0x21, r24	; 33
    5ac6:	11 bc       	out	0x21, r1	; 33
    5ac8:	0f be       	out	0x3f, r0	; 63
    5aca:	ef e1       	ldi	r30, 0x1F	; 31
    5acc:	fe e4       	ldi	r31, 0x4E	; 78
    5ace:	31 97       	sbiw	r30, 0x01	; 1
    5ad0:	f1 f7       	brne	.-4      	; 0x5ace <main+0x17c>
    5ad2:	00 c0       	rjmp	.+0      	; 0x5ad4 <main+0x182>
    5ad4:	00 00       	nop
}
wdt_disable();
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5ad6:	80 90 cb 04 	lds	r8, 0x04CB
    5ada:	90 90 cc 04 	lds	r9, 0x04CC
    5ade:	a0 90 cd 04 	lds	r10, 0x04CD
    5ae2:	b0 90 ce 04 	lds	r11, 0x04CE
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5ae6:	c0 90 cb 04 	lds	r12, 0x04CB
    5aea:	d0 90 cc 04 	lds	r13, 0x04CC
    5aee:	e0 90 cd 04 	lds	r14, 0x04CD
    5af2:	f0 90 ce 04 	lds	r15, 0x04CE
G3 = (uint8_t)((Current_state.gps.lat)>>16);
    5af6:	00 91 cb 04 	lds	r16, 0x04CB
    5afa:	10 91 cc 04 	lds	r17, 0x04CC
    5afe:	20 91 cd 04 	lds	r18, 0x04CD
    5b02:	30 91 ce 04 	lds	r19, 0x04CE
G4 = (uint8_t)((Current_state.gps.lat)>>24);
    5b06:	80 91 cb 04 	lds	r24, 0x04CB
    5b0a:	90 91 cc 04 	lds	r25, 0x04CC
    5b0e:	a0 91 cd 04 	lds	r26, 0x04CD
    5b12:	b0 91 ce 04 	lds	r27, 0x04CE
    5b16:	89 83       	std	Y+1, r24	; 0x01
    5b18:	9a 83       	std	Y+2, r25	; 0x02
    5b1a:	ab 83       	std	Y+3, r26	; 0x03
    5b1c:	bc 83       	std	Y+4, r27	; 0x04
G5 = (uint8_t)Current_state.gps.lon;
    5b1e:	80 91 cf 04 	lds	r24, 0x04CF
    5b22:	90 91 d0 04 	lds	r25, 0x04D0
    5b26:	a0 91 d1 04 	lds	r26, 0x04D1
    5b2a:	b0 91 d2 04 	lds	r27, 0x04D2
    5b2e:	8d 83       	std	Y+5, r24	; 0x05
    5b30:	9e 83       	std	Y+6, r25	; 0x06
    5b32:	af 83       	std	Y+7, r26	; 0x07
    5b34:	b8 87       	std	Y+8, r27	; 0x08
G6 = (uint8_t)((Current_state.gps.lon)>>8);
    5b36:	80 91 cf 04 	lds	r24, 0x04CF
    5b3a:	90 91 d0 04 	lds	r25, 0x04D0
    5b3e:	a0 91 d1 04 	lds	r26, 0x04D1
    5b42:	b0 91 d2 04 	lds	r27, 0x04D2
    5b46:	89 87       	std	Y+9, r24	; 0x09
    5b48:	9a 87       	std	Y+10, r25	; 0x0a
    5b4a:	ab 87       	std	Y+11, r26	; 0x0b
    5b4c:	bc 87       	std	Y+12, r27	; 0x0c
G7 = (uint8_t)((Current_state.gps.lon)>>16);
    5b4e:	40 91 cf 04 	lds	r20, 0x04CF
    5b52:	50 91 d0 04 	lds	r21, 0x04D0
    5b56:	60 91 d1 04 	lds	r22, 0x04D1
    5b5a:	70 91 d2 04 	lds	r23, 0x04D2
G8 = (uint8_t)((Current_state.gps.lon)>>24);
    5b5e:	80 91 cf 04 	lds	r24, 0x04CF
    5b62:	90 91 d0 04 	lds	r25, 0x04D0
    5b66:	a0 91 d1 04 	lds	r26, 0x04D1
    5b6a:	b0 91 d2 04 	lds	r27, 0x04D2
}
wdt_disable();
_delay_ms(10);
////////////////////////////////////////////////////////
uint8_t G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12;
G1 = (uint8_t)Current_state.gps.lat;
    5b6e:	f1 01       	movw	r30, r2
    5b70:	80 82       	st	Z, r8
G2 = (uint8_t)((Current_state.gps.lat)>>8);
    5b72:	d1 82       	std	Z+1, r13	; 0x01
G3 = (uint8_t)((Current_state.gps.lat)>>16);
    5b74:	22 83       	std	Z+2, r18	; 0x02
G4 = (uint8_t)((Current_state.gps.lat)>>24);
    5b76:	2c 81       	ldd	r18, Y+4	; 0x04
    5b78:	23 83       	std	Z+3, r18	; 0x03
G5 = (uint8_t)Current_state.gps.lon;
    5b7a:	3d 81       	ldd	r19, Y+5	; 0x05
    5b7c:	34 83       	std	Z+4, r19	; 0x04
G6 = (uint8_t)((Current_state.gps.lon)>>8);
    5b7e:	2a 85       	ldd	r18, Y+10	; 0x0a
    5b80:	25 83       	std	Z+5, r18	; 0x05
G7 = (uint8_t)((Current_state.gps.lon)>>16);
    5b82:	66 83       	std	Z+6, r22	; 0x06
G8 = (uint8_t)((Current_state.gps.lon)>>24);
    5b84:	b7 83       	std	Z+7, r27	; 0x07
GPS_Data[3] = G4;
GPS_Data[4] = G5;
GPS_Data[5] = G6;
GPS_Data[6] = G7;
GPS_Data[7] = G8;
GPS_Data[8] = G9;
    5b86:	10 86       	std	Z+8, r1	; 0x08
GPS_Data[9] = G10;
    5b88:	11 86       	std	Z+9, r1	; 0x09
GPS_Data[10] = G11;
    5b8a:	12 86       	std	Z+10, r1	; 0x0a
GPS_Data[11] = G12;
    5b8c:	13 86       	std	Z+11, r1	; 0x0b
//////////////////////////////////////////

if((flag_india == 1)||(flag_france == 1)) //Check for Circles
    5b8e:	80 91 84 04 	lds	r24, 0x0484
    5b92:	81 30       	cpi	r24, 0x01	; 1
    5b94:	29 f0       	breq	.+10     	; 0x5ba0 <main+0x24e>
    5b96:	80 91 83 04 	lds	r24, 0x0483
    5b9a:	81 30       	cpi	r24, 0x01	; 1
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <main+0x24e>
    5b9e:	4c c0       	rjmp	.+152    	; 0x5c38 <main+0x2e6>
{
	
	if(FirstTimeOuter ==0)
    5ba0:	80 91 89 04 	lds	r24, 0x0489
    5ba4:	81 11       	cpse	r24, r1
    5ba6:	0e c0       	rjmp	.+28     	; 0x5bc4 <main+0x272>
	{
		
	FirstTimeInner = 0;
    5ba8:	10 92 88 04 	sts	0x0488, r1
	FirstTimeNormal = 0;
    5bac:	10 92 87 04 	sts	0x0487, r1
	write_data |= (1<<4);
	write_data &= ~(1<<1);
    5bb0:	80 91 25 01 	lds	r24, 0x0125
    5bb4:	8d 7f       	andi	r24, 0xFD	; 253
    5bb6:	80 61       	ori	r24, 0x10	; 16
    5bb8:	80 93 25 01 	sts	0x0125, r24
	FirstTimeOuter = 1;
    5bbc:	81 e0       	ldi	r24, 0x01	; 1
    5bbe:	80 93 89 04 	sts	0x0489, r24
    5bc2:	34 c0       	rjmp	.+104    	; 0x5c2c <main+0x2da>
	}
	else if(FirstTimeOuter == 1)
    5bc4:	81 30       	cpi	r24, 0x01	; 1
    5bc6:	e1 f4       	brne	.+56     	; 0x5c00 <main+0x2ae>
	{
		
		if(countu ==0)
    5bc8:	80 91 85 04 	lds	r24, 0x0485
    5bcc:	81 11       	cpse	r24, r1
    5bce:	14 c0       	rjmp	.+40     	; 0x5bf8 <main+0x2a6>
    5bd0:	83 e0       	ldi	r24, 0x03	; 3
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
		{
		
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xB1;//Tell slave it's time to start downlink
    5bd4:	31 eb       	ldi	r19, 0xB1	; 177
    5bd6:	3f b9       	out	0x0f, r19	; 15
			while(!(SPSR & (1<<SPIF) ));
    5bd8:	77 9b       	sbis	0x0e, 7	; 14
    5bda:	fe cf       	rjmp	.-4      	; 0x5bd8 <main+0x286>
			PORTA = 0xFF;
    5bdc:	af ef       	ldi	r26, 0xFF	; 255
    5bde:	ab bb       	out	0x1b, r26	; 27
    5be0:	ef ec       	ldi	r30, 0xCF	; 207
    5be2:	f7 e0       	ldi	r31, 0x07	; 7
    5be4:	31 97       	sbiw	r30, 0x01	; 1
    5be6:	f1 f7       	brne	.-4      	; 0x5be4 <main+0x292>
    5be8:	00 c0       	rjmp	.+0      	; 0x5bea <main+0x298>
    5bea:	00 00       	nop
    5bec:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
		
		for(int i = 0; i<3; i++)
    5bee:	91 f7       	brne	.-28     	; 0x5bd4 <main+0x282>
			SPDR = 0xB1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeOuter =2;
    5bf0:	82 e0       	ldi	r24, 0x02	; 2
    5bf2:	80 93 89 04 	sts	0x0489, r24
    5bf6:	1a c0       	rjmp	.+52     	; 0x5c2c <main+0x2da>
		}
		else if(countu == 1)
    5bf8:	81 30       	cpi	r24, 0x01	; 1
    5bfa:	c1 f4       	brne	.+48     	; 0x5c2c <main+0x2da>
		{
			
			SendHM();
    5bfc:	96 de       	rcall	.-724    	; 0x592a <SendHM>
    5bfe:	16 c0       	rjmp	.+44     	; 0x5c2c <main+0x2da>
		
	}
	else
	{
		
		SendHM();// add an if for sending gps data based on flag
    5c00:	94 de       	rcall	.-728    	; 0x592a <SendHM>
		if(countu ==0)
    5c02:	80 91 85 04 	lds	r24, 0x0485
    5c06:	81 11       	cpse	r24, r1
    5c08:	11 c0       	rjmp	.+34     	; 0x5c2c <main+0x2da>
    5c0a:	f1 01       	movw	r30, r2
		{
			
			for (uint8_t i =0;i<12;i++) 
			{
				SPDR = GPS_Data[i];
    5c0c:	81 91       	ld	r24, Z+
    5c0e:	8f b9       	out	0x0f, r24	; 15
				while(!(SPSR & (1<<SPIF) ));
    5c10:	77 9b       	sbis	0x0e, 7	; 14
    5c12:	fe cf       	rjmp	.-4      	; 0x5c10 <main+0x2be>
				PORTA = 0xFF;
    5c14:	2f ef       	ldi	r18, 0xFF	; 255
    5c16:	2b bb       	out	0x1b, r18	; 27
    5c18:	8f ec       	ldi	r24, 0xCF	; 207
    5c1a:	97 e0       	ldi	r25, 0x07	; 7
    5c1c:	01 97       	sbiw	r24, 0x01	; 1
    5c1e:	f1 f7       	brne	.-4      	; 0x5c1c <main+0x2ca>
    5c20:	00 c0       	rjmp	.+0      	; 0x5c22 <main+0x2d0>
    5c22:	00 00       	nop
		
		SendHM();// add an if for sending gps data based on flag
		if(countu ==0)
		{
			
			for (uint8_t i =0;i<12;i++) 
    5c24:	91 e0       	ldi	r25, 0x01	; 1
    5c26:	e0 32       	cpi	r30, 0x20	; 32
    5c28:	f9 07       	cpc	r31, r25
    5c2a:	81 f7       	brne	.-32     	; 0x5c0c <main+0x2ba>
				PORTA = 0xFF;
				_delay_ms(1);
			}   
		}
	}
	countd=countd+2;
    5c2c:	80 91 86 04 	lds	r24, 0x0486
    5c30:	8e 5f       	subi	r24, 0xFE	; 254
    5c32:	80 93 86 04 	sts	0x0486, r24
    5c36:	93 c0       	rjmp	.+294    	; 0x5d5e <main+0x40c>
}
else if(flag_mumbai ==1) //Check for Circles
    5c38:	80 91 82 04 	lds	r24, 0x0482
    5c3c:	81 30       	cpi	r24, 0x01	; 1
    5c3e:	09 f0       	breq	.+2      	; 0x5c42 <main+0x2f0>
    5c40:	4c c0       	rjmp	.+152    	; 0x5cda <main+0x388>
{
	
	if(FirstTimeInner ==0)
    5c42:	80 91 88 04 	lds	r24, 0x0488
    5c46:	81 11       	cpse	r24, r1
    5c48:	0e c0       	rjmp	.+28     	; 0x5c66 <main+0x314>
	{
		
		FirstTimeOuter = 0;
    5c4a:	10 92 89 04 	sts	0x0489, r1
		FirstTimeNormal = 0;
    5c4e:	10 92 87 04 	sts	0x0487, r1
		write_data |= (1<<4);// if uplink on this is negated below
		write_data &= ~(1<<1);
    5c52:	80 91 25 01 	lds	r24, 0x0125
    5c56:	8d 7f       	andi	r24, 0xFD	; 253
    5c58:	80 61       	ori	r24, 0x10	; 16
    5c5a:	80 93 25 01 	sts	0x0125, r24
		FirstTimeInner = 1;
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	80 93 88 04 	sts	0x0488, r24
    5c64:	34 c0       	rjmp	.+104    	; 0x5cce <main+0x37c>
		
	}
	else if(FirstTimeInner == 1)
    5c66:	81 30       	cpi	r24, 0x01	; 1
    5c68:	e1 f4       	brne	.+56     	; 0x5ca2 <main+0x350>
	{
		
		if(countu ==0)
    5c6a:	80 91 85 04 	lds	r24, 0x0485
    5c6e:	81 11       	cpse	r24, r1
    5c70:	14 c0       	rjmp	.+40     	; 0x5c9a <main+0x348>
    5c72:	83 e0       	ldi	r24, 0x03	; 3
    5c74:	90 e0       	ldi	r25, 0x00	; 0
		{
			
		for(int i = 0; i<3; i++)
		{
			SPDR = 0xF1;//Tell slave it's time to start downlink
    5c76:	21 ef       	ldi	r18, 0xF1	; 241
    5c78:	2f b9       	out	0x0f, r18	; 15
			while(!(SPSR & (1<<SPIF) ));
    5c7a:	77 9b       	sbis	0x0e, 7	; 14
    5c7c:	fe cf       	rjmp	.-4      	; 0x5c7a <main+0x328>
			PORTA = 0xFF;
    5c7e:	af ef       	ldi	r26, 0xFF	; 255
    5c80:	ab bb       	out	0x1b, r26	; 27
    5c82:	ef ec       	ldi	r30, 0xCF	; 207
    5c84:	f7 e0       	ldi	r31, 0x07	; 7
    5c86:	31 97       	sbiw	r30, 0x01	; 1
    5c88:	f1 f7       	brne	.-4      	; 0x5c86 <main+0x334>
    5c8a:	00 c0       	rjmp	.+0      	; 0x5c8c <main+0x33a>
    5c8c:	00 00       	nop
    5c8e:	01 97       	sbiw	r24, 0x01	; 1
	{
		
		if(countu ==0)
		{
			
		for(int i = 0; i<3; i++)
    5c90:	99 f7       	brne	.-26     	; 0x5c78 <main+0x326>
			SPDR = 0xF1;//Tell slave it's time to start downlink
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);
		}
		FirstTimeInner =2;	
    5c92:	82 e0       	ldi	r24, 0x02	; 2
    5c94:	80 93 88 04 	sts	0x0488, r24
    5c98:	1a c0       	rjmp	.+52     	; 0x5cce <main+0x37c>
		}
		
		else if(countu == 1)
    5c9a:	81 30       	cpi	r24, 0x01	; 1
    5c9c:	c1 f4       	brne	.+48     	; 0x5cce <main+0x37c>
		{
			
			SendHM();
    5c9e:	45 de       	rcall	.-886    	; 0x592a <SendHM>
    5ca0:	16 c0       	rjmp	.+44     	; 0x5cce <main+0x37c>
		
	}
	else
	{
		
		SendHM();
    5ca2:	43 de       	rcall	.-890    	; 0x592a <SendHM>
		if(countu ==0)
    5ca4:	80 91 85 04 	lds	r24, 0x0485
    5ca8:	81 11       	cpse	r24, r1
    5caa:	11 c0       	rjmp	.+34     	; 0x5cce <main+0x37c>
    5cac:	f1 01       	movw	r30, r2
		{
			
		for (uint8_t i =0;i<12;i++)
		{
			SPDR = GPS_Data[i];
    5cae:	81 91       	ld	r24, Z+
    5cb0:	8f b9       	out	0x0f, r24	; 15
			while(!(SPSR & (1<<SPIF) ));
    5cb2:	77 9b       	sbis	0x0e, 7	; 14
    5cb4:	fe cf       	rjmp	.-4      	; 0x5cb2 <main+0x360>
			PORTA = 0xFF;
    5cb6:	2f ef       	ldi	r18, 0xFF	; 255
    5cb8:	2b bb       	out	0x1b, r18	; 27
    5cba:	8f ec       	ldi	r24, 0xCF	; 207
    5cbc:	97 e0       	ldi	r25, 0x07	; 7
    5cbe:	01 97       	sbiw	r24, 0x01	; 1
    5cc0:	f1 f7       	brne	.-4      	; 0x5cbe <main+0x36c>
    5cc2:	00 c0       	rjmp	.+0      	; 0x5cc4 <main+0x372>
    5cc4:	00 00       	nop
		
		SendHM();
		if(countu ==0)
		{
			
		for (uint8_t i =0;i<12;i++)
    5cc6:	91 e0       	ldi	r25, 0x01	; 1
    5cc8:	e0 32       	cpi	r30, 0x20	; 32
    5cca:	f9 07       	cpc	r31, r25
    5ccc:	81 f7       	brne	.-32     	; 0x5cae <main+0x35c>
			PORTA = 0xFF;
			_delay_ms(1);
		}
		}
	}
	countd=countd+2;
    5cce:	80 91 86 04 	lds	r24, 0x0486
    5cd2:	8e 5f       	subi	r24, 0xFE	; 254
    5cd4:	80 93 86 04 	sts	0x0486, r24
    5cd8:	42 c0       	rjmp	.+132    	; 0x5d5e <main+0x40c>
}
else
{

	countd = 0;
    5cda:	10 92 86 04 	sts	0x0486, r1
	countu = 0;
    5cde:	10 92 85 04 	sts	0x0485, r1
	if(FirstTimeNormal == 0)
    5ce2:	80 91 87 04 	lds	r24, 0x0487
    5ce6:	81 11       	cpse	r24, r1
    5ce8:	13 c0       	rjmp	.+38     	; 0x5d10 <main+0x3be>
    5cea:	83 e0       	ldi	r24, 0x03	; 3
    5cec:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i =0; i<3; i++){
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5cee:	a1 ed       	ldi	r26, 0xD1	; 209
    5cf0:	af b9       	out	0x0f, r26	; 15
			while(!(SPSR & (1<<SPIF) ));
    5cf2:	77 9b       	sbis	0x0e, 7	; 14
    5cf4:	fe cf       	rjmp	.-4      	; 0x5cf2 <main+0x3a0>
			PORTA = 0xFF;
    5cf6:	bf ef       	ldi	r27, 0xFF	; 255
    5cf8:	bb bb       	out	0x1b, r27	; 27
    5cfa:	ef ec       	ldi	r30, 0xCF	; 207
    5cfc:	f7 e0       	ldi	r31, 0x07	; 7
    5cfe:	31 97       	sbiw	r30, 0x01	; 1
    5d00:	f1 f7       	brne	.-4      	; 0x5cfe <main+0x3ac>
    5d02:	00 c0       	rjmp	.+0      	; 0x5d04 <main+0x3b2>
    5d04:	00 00       	nop
    5d06:	01 97       	sbiw	r24, 0x01	; 1

	countd = 0;
	countu = 0;
	if(FirstTimeNormal == 0)
	{
		for(int i =0; i<3; i++){
    5d08:	91 f7       	brne	.-28     	; 0x5cee <main+0x39c>
			SPDR = 0xD1;//Tell slave it's time to go back to normal mode
			while(!(SPSR & (1<<SPIF) ));
			PORTA = 0xFF;
			_delay_ms(1);}
			FirstTimeNormal = 1;
    5d0a:	81 e0       	ldi	r24, 0x01	; 1
    5d0c:	80 93 87 04 	sts	0x0487, r24
	}
	
	if(UniversalCycles%10==0){SendHM();}// In normal mode, HM in EEPROM every 20 sec, otherwise, every 2 sec
    5d10:	40 91 21 01 	lds	r20, 0x0121
    5d14:	50 91 22 01 	lds	r21, 0x0122
    5d18:	9a 01       	movw	r18, r20
    5d1a:	ad ec       	ldi	r26, 0xCD	; 205
    5d1c:	bc ec       	ldi	r27, 0xCC	; 204
    5d1e:	4e d7       	rcall	.+3740   	; 0x6bbc <__umulhisi3>
    5d20:	96 95       	lsr	r25
    5d22:	87 95       	ror	r24
    5d24:	96 95       	lsr	r25
    5d26:	87 95       	ror	r24
    5d28:	96 95       	lsr	r25
    5d2a:	87 95       	ror	r24
    5d2c:	9c 01       	movw	r18, r24
    5d2e:	22 0f       	add	r18, r18
    5d30:	33 1f       	adc	r19, r19
    5d32:	88 0f       	add	r24, r24
    5d34:	99 1f       	adc	r25, r25
    5d36:	88 0f       	add	r24, r24
    5d38:	99 1f       	adc	r25, r25
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	82 0f       	add	r24, r18
    5d40:	93 1f       	adc	r25, r19
    5d42:	48 17       	cp	r20, r24
    5d44:	59 07       	cpc	r21, r25
    5d46:	09 f4       	brne	.+2      	; 0x5d4a <main+0x3f8>
    5d48:	f0 dd       	rcall	.-1056   	; 0x592a <SendHM>
	write_data &= ~(1<<4);
    5d4a:	80 91 25 01 	lds	r24, 0x0125
    5d4e:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); 
    5d50:	82 60       	ori	r24, 0x02	; 2
    5d52:	80 93 25 01 	sts	0x0125, r24
	FirstTimeInner = 0;
    5d56:	10 92 88 04 	sts	0x0488, r1
	FirstTimeOuter = 0;
    5d5a:	10 92 89 04 	sts	0x0489, r1
}

if ((countd >120)&&(countd <=150))
    5d5e:	90 91 86 04 	lds	r25, 0x0486
    5d62:	87 e8       	ldi	r24, 0x87	; 135
    5d64:	89 0f       	add	r24, r25
    5d66:	8e 31       	cpi	r24, 0x1E	; 30
    5d68:	d8 f4       	brcc	.+54     	; 0x5da0 <main+0x44e>
{
	
	write_data &= ~(1<<4); //switch off downlink
    5d6a:	80 91 25 01 	lds	r24, 0x0125
    5d6e:	8f 7e       	andi	r24, 0xEF	; 239
	write_data |= (1<<1); // switch on uplink
    5d70:	82 60       	ori	r24, 0x02	; 2
    5d72:	80 93 25 01 	sts	0x0125, r24
	if (countd == 122)
    5d76:	9a 37       	cpi	r25, 0x7A	; 122
    5d78:	81 f4       	brne	.+32     	; 0x5d9a <main+0x448>
    5d7a:	83 e0       	ldi	r24, 0x03	; 3
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
	{
	for(int i =0; i<3; i++)
	{
		SPDR = 0xD1;//Tell slave it's time to go back to normal mode
    5d7e:	f1 ed       	ldi	r31, 0xD1	; 209
    5d80:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1<<SPIF) ));
    5d82:	77 9b       	sbis	0x0e, 7	; 14
    5d84:	fe cf       	rjmp	.-4      	; 0x5d82 <main+0x430>
		PORTA = 0xFF;
    5d86:	2f ef       	ldi	r18, 0xFF	; 255
    5d88:	2b bb       	out	0x1b, r18	; 27
    5d8a:	af ec       	ldi	r26, 0xCF	; 207
    5d8c:	b7 e0       	ldi	r27, 0x07	; 7
    5d8e:	11 97       	sbiw	r26, 0x01	; 1
    5d90:	f1 f7       	brne	.-4      	; 0x5d8e <main+0x43c>
    5d92:	00 c0       	rjmp	.+0      	; 0x5d94 <main+0x442>
    5d94:	00 00       	nop
    5d96:	01 97       	sbiw	r24, 0x01	; 1
	
	write_data &= ~(1<<4); //switch off downlink
	write_data |= (1<<1); // switch on uplink
	if (countd == 122)
	{
	for(int i =0; i<3; i++)
    5d98:	91 f7       	brne	.-28     	; 0x5d7e <main+0x42c>
		while(!(SPSR & (1<<SPIF) ));
		PORTA = 0xFF;
		_delay_ms(1);
	}//send normal mode commands d1
	}
	countu = 1;//set a flag 
    5d9a:	81 e0       	ldi	r24, 0x01	; 1
    5d9c:	80 93 85 04 	sts	0x0485, r24
}
if (countd >150)
    5da0:	80 91 86 04 	lds	r24, 0x0486
    5da4:	87 39       	cpi	r24, 0x97	; 151
    5da6:	70 f0       	brcs	.+28     	; 0x5dc4 <main+0x472>
{

	countd=0;
    5da8:	10 92 86 04 	sts	0x0486, r1
	countu=0;
    5dac:	10 92 85 04 	sts	0x0485, r1
	write_data &= ~(1<<1); 
    5db0:	80 91 25 01 	lds	r24, 0x0125
    5db4:	8d 7f       	andi	r24, 0xFD	; 253
	write_data |= (1<<4);
    5db6:	80 61       	ori	r24, 0x10	; 16
    5db8:	80 93 25 01 	sts	0x0125, r24
	FirstTimeOuter = 0;
    5dbc:	10 92 89 04 	sts	0x0489, r1
	FirstTimeInner = 0;
    5dc0:	10 92 88 04 	sts	0x0488, r1
		
}

	
		PORTB |= (1<<PB0);
    5dc4:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &= ~(1<<PB5);
    5dc6:	c5 98       	cbi	0x18, 5	; 24
     	
     	if(counter1 == 0) //OC Check for Beacon
    5dc8:	80 91 8a 04 	lds	r24, 0x048A
    5dcc:	90 91 8b 04 	lds	r25, 0x048B
    5dd0:	89 2b       	or	r24, r25
    5dd2:	79 f4       	brne	.+30     	; 0x5df2 <main+0x4a0>
     	{
	     	if((HM_Data[6]&(0x80)) == 0)
    5dd4:	f2 01       	movw	r30, r4
    5dd6:	86 81       	ldd	r24, Z+6	; 0x06
    5dd8:	88 23       	and	r24, r24
    5dda:	4c f1       	brlt	.+82     	; 0x5e2e <main+0x4dc>
	     	{
		     	counter1 = 1;
    5ddc:	21 e0       	ldi	r18, 0x01	; 1
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	30 93 8b 04 	sts	0x048B, r19
    5de4:	20 93 8a 04 	sts	0x048A, r18
		     	write_data &= ~(1<<7);
    5de8:	80 91 25 01 	lds	r24, 0x0125
    5dec:	8f 77       	andi	r24, 0x7F	; 127
    5dee:	80 93 25 01 	sts	0x0125, r24
		     	
	     	}
     	}
     	
     	if((counter1 > 0) && (counter1 < 7))
    5df2:	80 91 8a 04 	lds	r24, 0x048A
    5df6:	90 91 8b 04 	lds	r25, 0x048B
    5dfa:	9c 01       	movw	r18, r24
    5dfc:	21 50       	subi	r18, 0x01	; 1
    5dfe:	31 09       	sbc	r19, r1
    5e00:	26 30       	cpi	r18, 0x06	; 6
    5e02:	31 05       	cpc	r19, r1
    5e04:	28 f4       	brcc	.+10     	; 0x5e10 <main+0x4be>
     	{
	     	counter1 = counter1+1;
    5e06:	01 96       	adiw	r24, 0x01	; 1
    5e08:	90 93 8b 04 	sts	0x048B, r25
    5e0c:	80 93 8a 04 	sts	0x048A, r24
     	}
     	
     	if(counter1 == 7)
    5e10:	80 91 8a 04 	lds	r24, 0x048A
    5e14:	90 91 8b 04 	lds	r25, 0x048B
    5e18:	07 97       	sbiw	r24, 0x07	; 7
    5e1a:	49 f4       	brne	.+18     	; 0x5e2e <main+0x4dc>
     	{
	     	counter1 = 0;
    5e1c:	10 92 8b 04 	sts	0x048B, r1
    5e20:	10 92 8a 04 	sts	0x048A, r1
	     	write_data |= (1<<7);
    5e24:	80 91 25 01 	lds	r24, 0x0125
    5e28:	80 68       	ori	r24, 0x80	; 128
    5e2a:	80 93 25 01 	sts	0x0125, r24
		 
		
		 
		 
		 
			 if((HM_Data[6]&(0x20)) == 0) //OC check for GPS
    5e2e:	d2 01       	movw	r26, r4
    5e30:	16 96       	adiw	r26, 0x06	; 6
    5e32:	8c 91       	ld	r24, X
    5e34:	85 fd       	sbrc	r24, 5
    5e36:	04 c0       	rjmp	.+8      	; 0x5e40 <main+0x4ee>
			 {
				Current_state.gps.gps_OC = 1;
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	80 93 e0 04 	sts	0x04E0, r24
    5e3e:	02 c0       	rjmp	.+4      	; 0x5e44 <main+0x4f2>
			}
			else
			{
				Current_state.gps.gps_OC = 0;
    5e40:	10 92 e0 04 	sts	0x04E0, r1
			}


	
	control();
    5e44:	0e 94 f5 07 	call	0xfea	; 0xfea <control>
	//for (int i = 0; i<7;i++)
	//{
		//transmit_UART0(HM_Data[i]);
	//}
	
	light_main = light_cal();	
    5e48:	0e 94 0b 24 	call	0x4816	; 0x4816 <light_cal>
    5e4c:	80 93 13 01 	sts	0x0113, r24
	 if((HM_Data[6]&(0x40)) == 0) // OC Check for Torquer
    5e50:	f2 01       	movw	r30, r4
    5e52:	86 81       	ldd	r24, Z+6	; 0x06
    5e54:	86 ff       	sbrs	r24, 6
	 {
		 reset_PWM();
    5e56:	0e 94 39 20 	call	0x4072	; 0x4072 <reset_PWM>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    5e5a:	20 91 25 05 	lds	r18, 0x0525
    5e5e:	30 91 26 05 	lds	r19, 0x0526
    5e62:	40 91 27 05 	lds	r20, 0x0527
    5e66:	50 91 28 05 	lds	r21, 0x0528
    5e6a:	60 91 29 05 	lds	r22, 0x0529
    5e6e:	70 91 2a 05 	lds	r23, 0x052A
    5e72:	80 91 2b 05 	lds	r24, 0x052B
    5e76:	90 91 2c 05 	lds	r25, 0x052C
    5e7a:	a2 e0       	ldi	r26, 0x02	; 2
    5e7c:	d0 d6       	rcall	.+3488   	; 0x6c1e <__adddi3_s8>
    5e7e:	20 93 25 05 	sts	0x0525, r18
    5e82:	30 93 26 05 	sts	0x0526, r19
    5e86:	40 93 27 05 	sts	0x0527, r20
    5e8a:	50 93 28 05 	sts	0x0528, r21
    5e8e:	60 93 29 05 	sts	0x0529, r22
    5e92:	70 93 2a 05 	sts	0x052A, r23
    5e96:	80 93 2b 05 	sts	0x052B, r24
    5e9a:	90 93 2c 05 	sts	0x052C, r25
	  // for india outer circle
	  double a = Current_state.gps.lat - 22.5833;
    5e9e:	60 91 cb 04 	lds	r22, 0x04CB
    5ea2:	70 91 cc 04 	lds	r23, 0x04CC
    5ea6:	80 91 cd 04 	lds	r24, 0x04CD
    5eaa:	90 91 ce 04 	lds	r25, 0x04CE
    5eae:	f9 d2       	rcall	.+1522   	; 0x64a2 <__floatsisf>
    5eb0:	29 e9       	ldi	r18, 0x99	; 153
    5eb2:	3a ea       	ldi	r19, 0xAA	; 170
    5eb4:	44 eb       	ldi	r20, 0xB4	; 180
    5eb6:	51 e4       	ldi	r21, 0x41	; 65
    5eb8:	74 d1       	rcall	.+744    	; 0x61a2 <__subsf3>
    5eba:	69 87       	std	Y+9, r22	; 0x09
    5ebc:	7a 87       	std	Y+10, r23	; 0x0a
    5ebe:	8b 87       	std	Y+11, r24	; 0x0b
    5ec0:	9c 87       	std	Y+12, r25	; 0x0c
	  double b = Current_state.gps.lon - 82.7666;
    5ec2:	60 91 cf 04 	lds	r22, 0x04CF
    5ec6:	70 91 d0 04 	lds	r23, 0x04D0
    5eca:	80 91 d1 04 	lds	r24, 0x04D1
    5ece:	90 91 d2 04 	lds	r25, 0x04D2
    5ed2:	e7 d2       	rcall	.+1486   	; 0x64a2 <__floatsisf>
    5ed4:	20 e8       	ldi	r18, 0x80	; 128
    5ed6:	38 e8       	ldi	r19, 0x88	; 136
    5ed8:	45 ea       	ldi	r20, 0xA5	; 165
    5eda:	52 e4       	ldi	r21, 0x42	; 66
    5edc:	62 d1       	rcall	.+708    	; 0x61a2 <__subsf3>
    5ede:	6d 87       	std	Y+13, r22	; 0x0d
    5ee0:	7e 87       	std	Y+14, r23	; 0x0e
    5ee2:	8f 87       	std	Y+15, r24	; 0x0f
    5ee4:	98 8b       	std	Y+16, r25	; 0x10
	  double c = Current_state.gps.lat*3.141592/180;
    5ee6:	60 91 cb 04 	lds	r22, 0x04CB
    5eea:	70 91 cc 04 	lds	r23, 0x04CC
    5eee:	80 91 cd 04 	lds	r24, 0x04CD
    5ef2:	90 91 ce 04 	lds	r25, 0x04CE
    5ef6:	d5 d2       	rcall	.+1450   	; 0x64a2 <__floatsisf>
    5ef8:	28 ed       	ldi	r18, 0xD8	; 216
    5efa:	3f e0       	ldi	r19, 0x0F	; 15
    5efc:	49 e4       	ldi	r20, 0x49	; 73
    5efe:	50 e4       	ldi	r21, 0x40	; 64
    5f00:	53 d4       	rcall	.+2214   	; 0x67a8 <__mulsf3>
    5f02:	20 e0       	ldi	r18, 0x00	; 0
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	44 e3       	ldi	r20, 0x34	; 52
    5f08:	53 e4       	ldi	r21, 0x43	; 67
    5f0a:	30 d2       	rcall	.+1120   	; 0x636c <__divsf3>
    5f0c:	69 8f       	std	Y+25, r22	; 0x19
    5f0e:	7a 8f       	std	Y+26, r23	; 0x1a
    5f10:	8b 8f       	std	Y+27, r24	; 0x1b
    5f12:	9c 8f       	std	Y+28, r25	; 0x1c
		// for france
		  double a1 = Current_state.gps.lat - 48.8;
    5f14:	80 90 cb 04 	lds	r8, 0x04CB
    5f18:	90 90 cc 04 	lds	r9, 0x04CC
    5f1c:	a0 90 cd 04 	lds	r10, 0x04CD
    5f20:	b0 90 ce 04 	lds	r11, 0x04CE
		  double b1 = Current_state.gps.lon - 2.33;
    5f24:	80 91 cf 04 	lds	r24, 0x04CF
    5f28:	90 91 d0 04 	lds	r25, 0x04D0
    5f2c:	a0 91 d1 04 	lds	r26, 0x04D1
    5f30:	b0 91 d2 04 	lds	r27, 0x04D2
    5f34:	89 8b       	std	Y+17, r24	; 0x11
    5f36:	9a 8b       	std	Y+18, r25	; 0x12
    5f38:	ab 8b       	std	Y+19, r26	; 0x13
    5f3a:	bc 8b       	std	Y+20, r27	; 0x14
		  double c1 = Current_state.gps.lat*3.141592/180;
    5f3c:	c0 90 cb 04 	lds	r12, 0x04CB
    5f40:	d0 90 cc 04 	lds	r13, 0x04CC
    5f44:	e0 90 cd 04 	lds	r14, 0x04CD
    5f48:	f0 90 ce 04 	lds	r15, 0x04CE
		  // for india inner circle
		  double a2 = Current_state.gps.lat - 19.076;
    5f4c:	60 91 cb 04 	lds	r22, 0x04CB
    5f50:	70 91 cc 04 	lds	r23, 0x04CC
    5f54:	80 91 cd 04 	lds	r24, 0x04CD
    5f58:	90 91 ce 04 	lds	r25, 0x04CE
    5f5c:	a2 d2       	rcall	.+1348   	; 0x64a2 <__floatsisf>
    5f5e:	26 ea       	ldi	r18, 0xA6	; 166
    5f60:	3b e9       	ldi	r19, 0x9B	; 155
    5f62:	48 e9       	ldi	r20, 0x98	; 152
    5f64:	51 e4       	ldi	r21, 0x41	; 65
    5f66:	1d d1       	rcall	.+570    	; 0x61a2 <__subsf3>
    5f68:	69 83       	std	Y+1, r22	; 0x01
    5f6a:	7a 83       	std	Y+2, r23	; 0x02
    5f6c:	8b 83       	std	Y+3, r24	; 0x03
    5f6e:	9c 83       	std	Y+4, r25	; 0x04
		  double b2 = Current_state.gps.lon - 72.877;
    5f70:	60 91 cf 04 	lds	r22, 0x04CF
    5f74:	70 91 d0 04 	lds	r23, 0x04D0
    5f78:	80 91 d1 04 	lds	r24, 0x04D1
    5f7c:	90 91 d2 04 	lds	r25, 0x04D2
    5f80:	90 d2       	rcall	.+1312   	; 0x64a2 <__floatsisf>
    5f82:	26 e0       	ldi	r18, 0x06	; 6
    5f84:	31 ec       	ldi	r19, 0xC1	; 193
    5f86:	41 e9       	ldi	r20, 0x91	; 145
    5f88:	52 e4       	ldi	r21, 0x42	; 66
    5f8a:	0b d1       	rcall	.+534    	; 0x61a2 <__subsf3>
    5f8c:	6d 83       	std	Y+5, r22	; 0x05
    5f8e:	7e 83       	std	Y+6, r23	; 0x06
    5f90:	8f 83       	std	Y+7, r24	; 0x07
    5f92:	98 87       	std	Y+8, r25	; 0x08
		  double c2 = Current_state.gps.lat*3.141592/180;
    5f94:	60 91 cb 04 	lds	r22, 0x04CB
    5f98:	70 91 cc 04 	lds	r23, 0x04CC
    5f9c:	80 91 cd 04 	lds	r24, 0x04CD
    5fa0:	90 91 ce 04 	lds	r25, 0x04CE
    5fa4:	7e d2       	rcall	.+1276   	; 0x64a2 <__floatsisf>
    5fa6:	28 ed       	ldi	r18, 0xD8	; 216
    5fa8:	3f e0       	ldi	r19, 0x0F	; 15
    5faa:	49 e4       	ldi	r20, 0x49	; 73
    5fac:	50 e4       	ldi	r21, 0x40	; 64
    5fae:	fc d3       	rcall	.+2040   	; 0x67a8 <__mulsf3>
    5fb0:	20 e0       	ldi	r18, 0x00	; 0
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	44 e3       	ldi	r20, 0x34	; 52
    5fb6:	53 e4       	ldi	r21, 0x43	; 67
    5fb8:	d9 d1       	rcall	.+946    	; 0x636c <__divsf3>
		  // over mumbai
		if (((a2*a2 + cos(c2)*b2*b2) < 100) && (Mode == NOMINAL))//change it to nominal  ((HM_Data[1])>163)
    5fba:	d5 d1       	rcall	.+938    	; 0x6366 <cos>
    5fbc:	6d 8b       	std	Y+21, r22	; 0x15
    5fbe:	7e 8b       	std	Y+22, r23	; 0x16
    5fc0:	8f 8b       	std	Y+23, r24	; 0x17
    5fc2:	98 8f       	std	Y+24, r25	; 0x18
    5fc4:	29 81       	ldd	r18, Y+1	; 0x01
    5fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    5fc8:	4b 81       	ldd	r20, Y+3	; 0x03
    5fca:	5c 81       	ldd	r21, Y+4	; 0x04
    5fcc:	ca 01       	movw	r24, r20
    5fce:	b9 01       	movw	r22, r18
    5fd0:	eb d3       	rcall	.+2006   	; 0x67a8 <__mulsf3>
    5fd2:	69 83       	std	Y+1, r22	; 0x01
    5fd4:	7a 83       	std	Y+2, r23	; 0x02
    5fd6:	8b 83       	std	Y+3, r24	; 0x03
    5fd8:	9c 83       	std	Y+4, r25	; 0x04
    5fda:	2d 81       	ldd	r18, Y+5	; 0x05
    5fdc:	3e 81       	ldd	r19, Y+6	; 0x06
    5fde:	4f 81       	ldd	r20, Y+7	; 0x07
    5fe0:	58 85       	ldd	r21, Y+8	; 0x08
    5fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    5fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    5fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    5fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    5fea:	de d3       	rcall	.+1980   	; 0x67a8 <__mulsf3>
    5fec:	2d 81       	ldd	r18, Y+5	; 0x05
    5fee:	3e 81       	ldd	r19, Y+6	; 0x06
    5ff0:	4f 81       	ldd	r20, Y+7	; 0x07
    5ff2:	58 85       	ldd	r21, Y+8	; 0x08
    5ff4:	d9 d3       	rcall	.+1970   	; 0x67a8 <__mulsf3>
    5ff6:	9b 01       	movw	r18, r22
    5ff8:	ac 01       	movw	r20, r24
    5ffa:	69 81       	ldd	r22, Y+1	; 0x01
    5ffc:	7a 81       	ldd	r23, Y+2	; 0x02
    5ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    6000:	9c 81       	ldd	r25, Y+4	; 0x04
    6002:	d0 d0       	rcall	.+416    	; 0x61a4 <__addsf3>
    6004:	20 e0       	ldi	r18, 0x00	; 0
    6006:	30 e0       	ldi	r19, 0x00	; 0
    6008:	48 ec       	ldi	r20, 0xC8	; 200
    600a:	52 e4       	ldi	r21, 0x42	; 66
    600c:	a8 d1       	rcall	.+848    	; 0x635e <__cmpsf2>
    600e:	88 23       	and	r24, r24
    6010:	64 f4       	brge	.+24     	; 0x602a <main+0x6d8>
    6012:	80 91 26 01 	lds	r24, 0x0126
    6016:	81 30       	cpi	r24, 0x01	; 1
    6018:	09 f0       	breq	.+2      	; 0x601c <main+0x6ca>
    601a:	a6 c0       	rjmp	.+332    	; 0x6168 <main+0x816>
		{
			flag_mumbai = 1;
    601c:	80 93 82 04 	sts	0x0482, r24
			flag_india = 0;
    6020:	10 92 84 04 	sts	0x0484, r1
			flag_france = 0;
    6024:	10 92 83 04 	sts	0x0483, r1
    6028:	94 c0       	rjmp	.+296    	; 0x6152 <main+0x800>
		}  
		//over india outer
      else if (((a*a + cos(c)*b*b) < 625) && (Mode == NOMINAL))//change it to nominal && ((HM_Data[1])>163) 
    602a:	69 8d       	ldd	r22, Y+25	; 0x19
    602c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    602e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6032:	99 d1       	rcall	.+818    	; 0x6366 <cos>
    6034:	69 83       	std	Y+1, r22	; 0x01
    6036:	7a 83       	std	Y+2, r23	; 0x02
    6038:	8b 83       	std	Y+3, r24	; 0x03
    603a:	9c 83       	std	Y+4, r25	; 0x04
    603c:	29 85       	ldd	r18, Y+9	; 0x09
    603e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6040:	4b 85       	ldd	r20, Y+11	; 0x0b
    6042:	5c 85       	ldd	r21, Y+12	; 0x0c
    6044:	ca 01       	movw	r24, r20
    6046:	b9 01       	movw	r22, r18
    6048:	af d3       	rcall	.+1886   	; 0x67a8 <__mulsf3>
    604a:	6d 83       	std	Y+5, r22	; 0x05
    604c:	7e 83       	std	Y+6, r23	; 0x06
    604e:	8f 83       	std	Y+7, r24	; 0x07
    6050:	98 87       	std	Y+8, r25	; 0x08
    6052:	2d 85       	ldd	r18, Y+13	; 0x0d
    6054:	3e 85       	ldd	r19, Y+14	; 0x0e
    6056:	4f 85       	ldd	r20, Y+15	; 0x0f
    6058:	58 89       	ldd	r21, Y+16	; 0x10
    605a:	69 81       	ldd	r22, Y+1	; 0x01
    605c:	7a 81       	ldd	r23, Y+2	; 0x02
    605e:	8b 81       	ldd	r24, Y+3	; 0x03
    6060:	9c 81       	ldd	r25, Y+4	; 0x04
    6062:	a2 d3       	rcall	.+1860   	; 0x67a8 <__mulsf3>
    6064:	2d 85       	ldd	r18, Y+13	; 0x0d
    6066:	3e 85       	ldd	r19, Y+14	; 0x0e
    6068:	4f 85       	ldd	r20, Y+15	; 0x0f
    606a:	58 89       	ldd	r21, Y+16	; 0x10
    606c:	9d d3       	rcall	.+1850   	; 0x67a8 <__mulsf3>
    606e:	9b 01       	movw	r18, r22
    6070:	ac 01       	movw	r20, r24
    6072:	6d 81       	ldd	r22, Y+5	; 0x05
    6074:	7e 81       	ldd	r23, Y+6	; 0x06
    6076:	8f 81       	ldd	r24, Y+7	; 0x07
    6078:	98 85       	ldd	r25, Y+8	; 0x08
    607a:	94 d0       	rcall	.+296    	; 0x61a4 <__addsf3>
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	30 e4       	ldi	r19, 0x40	; 64
    6080:	4c e1       	ldi	r20, 0x1C	; 28
    6082:	54 e4       	ldi	r21, 0x44	; 68
    6084:	6c d1       	rcall	.+728    	; 0x635e <__cmpsf2>
    6086:	88 23       	and	r24, r24
    6088:	64 f4       	brge	.+24     	; 0x60a2 <main+0x750>
    608a:	80 91 26 01 	lds	r24, 0x0126
    608e:	81 30       	cpi	r24, 0x01	; 1
    6090:	09 f0       	breq	.+2      	; 0x6094 <main+0x742>
    6092:	59 c0       	rjmp	.+178    	; 0x6146 <main+0x7f4>
	  {
      flag_mumbai = 0;
    6094:	10 92 82 04 	sts	0x0482, r1
      flag_india = 1;
    6098:	80 93 84 04 	sts	0x0484, r24
	  flag_france = 0;
    609c:	10 92 83 04 	sts	0x0483, r1
    60a0:	58 c0       	rjmp	.+176    	; 0x6152 <main+0x800>
	  double a = Current_state.gps.lat - 22.5833;
	  double b = Current_state.gps.lon - 82.7666;
	  double c = Current_state.gps.lat*3.141592/180;
		// for france
		  double a1 = Current_state.gps.lat - 48.8;
		  double b1 = Current_state.gps.lon - 2.33;
    60a2:	69 89       	ldd	r22, Y+17	; 0x11
    60a4:	7a 89       	ldd	r23, Y+18	; 0x12
    60a6:	8b 89       	ldd	r24, Y+19	; 0x13
    60a8:	9c 89       	ldd	r25, Y+20	; 0x14
    60aa:	fb d1       	rcall	.+1014   	; 0x64a2 <__floatsisf>
    60ac:	28 eb       	ldi	r18, 0xB8	; 184
    60ae:	3e e1       	ldi	r19, 0x1E	; 30
    60b0:	45 e1       	ldi	r20, 0x15	; 21
    60b2:	50 e4       	ldi	r21, 0x40	; 64
    60b4:	76 d0       	rcall	.+236    	; 0x61a2 <__subsf3>
    60b6:	69 83       	std	Y+1, r22	; 0x01
    60b8:	7a 83       	std	Y+2, r23	; 0x02
    60ba:	8b 83       	std	Y+3, r24	; 0x03
    60bc:	9c 83       	std	Y+4, r25	; 0x04
	  // for india outer circle
	  double a = Current_state.gps.lat - 22.5833;
	  double b = Current_state.gps.lon - 82.7666;
	  double c = Current_state.gps.lat*3.141592/180;
		// for france
		  double a1 = Current_state.gps.lat - 48.8;
    60be:	c5 01       	movw	r24, r10
    60c0:	b4 01       	movw	r22, r8
    60c2:	ef d1       	rcall	.+990    	; 0x64a2 <__floatsisf>
    60c4:	23 e3       	ldi	r18, 0x33	; 51
    60c6:	33 e3       	ldi	r19, 0x33	; 51
    60c8:	43 e4       	ldi	r20, 0x43	; 67
    60ca:	52 e4       	ldi	r21, 0x42	; 66
    60cc:	6a d0       	rcall	.+212    	; 0x61a2 <__subsf3>
    60ce:	4b 01       	movw	r8, r22
    60d0:	5c 01       	movw	r10, r24
		  double b1 = Current_state.gps.lon - 2.33;
		  double c1 = Current_state.gps.lat*3.141592/180;
    60d2:	c7 01       	movw	r24, r14
    60d4:	b6 01       	movw	r22, r12
    60d6:	e5 d1       	rcall	.+970    	; 0x64a2 <__floatsisf>
    60d8:	28 ed       	ldi	r18, 0xD8	; 216
    60da:	3f e0       	ldi	r19, 0x0F	; 15
    60dc:	49 e4       	ldi	r20, 0x49	; 73
    60de:	50 e4       	ldi	r21, 0x40	; 64
    60e0:	63 d3       	rcall	.+1734   	; 0x67a8 <__mulsf3>
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	44 e3       	ldi	r20, 0x34	; 52
    60e8:	53 e4       	ldi	r21, 0x43	; 67
    60ea:	40 d1       	rcall	.+640    	; 0x636c <__divsf3>
      flag_mumbai = 0;
      flag_india = 1;
	  flag_france = 0;
	  }
	  //over france
      else if (((a1*a1 + cos(c1)*b1*b1) < 100)  && (Mode == NOMINAL))//&& ((HM_Data[1])>163)
    60ec:	3c d1       	rcall	.+632    	; 0x6366 <cos>
    60ee:	6b 01       	movw	r12, r22
    60f0:	7c 01       	movw	r14, r24
    60f2:	a5 01       	movw	r20, r10
    60f4:	94 01       	movw	r18, r8
    60f6:	c5 01       	movw	r24, r10
    60f8:	b4 01       	movw	r22, r8
    60fa:	56 d3       	rcall	.+1708   	; 0x67a8 <__mulsf3>
    60fc:	4b 01       	movw	r8, r22
    60fe:	5c 01       	movw	r10, r24
    6100:	29 81       	ldd	r18, Y+1	; 0x01
    6102:	3a 81       	ldd	r19, Y+2	; 0x02
    6104:	4b 81       	ldd	r20, Y+3	; 0x03
    6106:	5c 81       	ldd	r21, Y+4	; 0x04
    6108:	c7 01       	movw	r24, r14
    610a:	b6 01       	movw	r22, r12
    610c:	4d d3       	rcall	.+1690   	; 0x67a8 <__mulsf3>
    610e:	29 81       	ldd	r18, Y+1	; 0x01
    6110:	3a 81       	ldd	r19, Y+2	; 0x02
    6112:	4b 81       	ldd	r20, Y+3	; 0x03
    6114:	5c 81       	ldd	r21, Y+4	; 0x04
    6116:	48 d3       	rcall	.+1680   	; 0x67a8 <__mulsf3>
    6118:	9b 01       	movw	r18, r22
    611a:	ac 01       	movw	r20, r24
    611c:	c5 01       	movw	r24, r10
    611e:	b4 01       	movw	r22, r8
    6120:	41 d0       	rcall	.+130    	; 0x61a4 <__addsf3>
    6122:	20 e0       	ldi	r18, 0x00	; 0
    6124:	30 e0       	ldi	r19, 0x00	; 0
    6126:	48 ec       	ldi	r20, 0xC8	; 200
    6128:	52 e4       	ldi	r21, 0x42	; 66
    612a:	19 d1       	rcall	.+562    	; 0x635e <__cmpsf2>
    612c:	88 23       	and	r24, r24
    612e:	5c f4       	brge	.+22     	; 0x6146 <main+0x7f4>
    6130:	80 91 26 01 	lds	r24, 0x0126
    6134:	81 30       	cpi	r24, 0x01	; 1
    6136:	39 f4       	brne	.+14     	; 0x6146 <main+0x7f4>
      {
	  flag_mumbai = 0;
    6138:	10 92 82 04 	sts	0x0482, r1
      flag_france = 1;
    613c:	80 93 83 04 	sts	0x0483, r24
	  flag_india = 0;
    6140:	10 92 84 04 	sts	0x0484, r1
    6144:	06 c0       	rjmp	.+12     	; 0x6152 <main+0x800>
	  }
	  // normal mode no downlink
      else
	  {
      flag_france = 0;
    6146:	10 92 83 04 	sts	0x0483, r1
	  flag_india = 0;
    614a:	10 92 84 04 	sts	0x0484, r1
	  flag_mumbai = 0;
    614e:	10 92 82 04 	sts	0x0482, r1
		   Current_state.gps.lon = 0;
		   transmit_UART0('N');
	   }
      */
      //_delay_ms(200);
	  UniversalCycles = UniversalCycles+1;
    6152:	80 91 21 01 	lds	r24, 0x0121
    6156:	90 91 22 01 	lds	r25, 0x0122
    615a:	01 96       	adiw	r24, 0x01	; 1
    615c:	90 93 22 01 	sts	0x0122, r25
    6160:	80 93 21 01 	sts	0x0121, r24
    //}
	timer_wait_reset();
    6164:	61 db       	rcall	.-2366   	; 0x5828 <timer_wait_reset>
	//wdt_disable();
  }
    6166:	44 cc       	rjmp	.-1912   	; 0x59f0 <main+0x9e>
	  double a = Current_state.gps.lat - 22.5833;
	  double b = Current_state.gps.lon - 82.7666;
	  double c = Current_state.gps.lat*3.141592/180;
		// for france
		  double a1 = Current_state.gps.lat - 48.8;
		  double b1 = Current_state.gps.lon - 2.33;
    6168:	69 89       	ldd	r22, Y+17	; 0x11
    616a:	7a 89       	ldd	r23, Y+18	; 0x12
    616c:	8b 89       	ldd	r24, Y+19	; 0x13
    616e:	9c 89       	ldd	r25, Y+20	; 0x14
    6170:	98 d1       	rcall	.+816    	; 0x64a2 <__floatsisf>
    6172:	28 eb       	ldi	r18, 0xB8	; 184
    6174:	3e e1       	ldi	r19, 0x1E	; 30
    6176:	45 e1       	ldi	r20, 0x15	; 21
    6178:	50 e4       	ldi	r21, 0x40	; 64
    617a:	13 d0       	rcall	.+38     	; 0x61a2 <__subsf3>
    617c:	69 83       	std	Y+1, r22	; 0x01
    617e:	7a 83       	std	Y+2, r23	; 0x02
    6180:	8b 83       	std	Y+3, r24	; 0x03
    6182:	9c 83       	std	Y+4, r25	; 0x04
    6184:	e0 cf       	rjmp	.-64     	; 0x6146 <main+0x7f4>

00006186 <acos>:
    6186:	9f 93       	push	r25
    6188:	9f 77       	andi	r25, 0x7F	; 127
    618a:	04 d2       	rcall	.+1032   	; 0x6594 <__fp_arccos>
    618c:	0f 90       	pop	r0
    618e:	00 20       	and	r0, r0
    6190:	3a f4       	brpl	.+14     	; 0x61a0 <acos+0x1a>
    6192:	90 58       	subi	r25, 0x80	; 128
    6194:	a2 ea       	ldi	r26, 0xA2	; 162
    6196:	2a ed       	ldi	r18, 0xDA	; 218
    6198:	3f e0       	ldi	r19, 0x0F	; 15
    619a:	49 e4       	ldi	r20, 0x49	; 73
    619c:	50 e4       	ldi	r21, 0x40	; 64
    619e:	13 d0       	rcall	.+38     	; 0x61c6 <__addsf3x>
    61a0:	ad c2       	rjmp	.+1370   	; 0x66fc <__fp_round>

000061a2 <__subsf3>:
    61a2:	50 58       	subi	r21, 0x80	; 128

000061a4 <__addsf3>:
    61a4:	bb 27       	eor	r27, r27
    61a6:	aa 27       	eor	r26, r26
    61a8:	0e d0       	rcall	.+28     	; 0x61c6 <__addsf3x>
    61aa:	a8 c2       	rjmp	.+1360   	; 0x66fc <__fp_round>
    61ac:	71 d2       	rcall	.+1250   	; 0x6690 <__fp_pscA>
    61ae:	30 f0       	brcs	.+12     	; 0x61bc <__addsf3+0x18>
    61b0:	76 d2       	rcall	.+1260   	; 0x669e <__fp_pscB>
    61b2:	20 f0       	brcs	.+8      	; 0x61bc <__addsf3+0x18>
    61b4:	31 f4       	brne	.+12     	; 0x61c2 <__addsf3+0x1e>
    61b6:	9f 3f       	cpi	r25, 0xFF	; 255
    61b8:	11 f4       	brne	.+4      	; 0x61be <__addsf3+0x1a>
    61ba:	1e f4       	brtc	.+6      	; 0x61c2 <__addsf3+0x1e>
    61bc:	30 c2       	rjmp	.+1120   	; 0x661e <__fp_nan>
    61be:	0e f4       	brtc	.+2      	; 0x61c2 <__addsf3+0x1e>
    61c0:	e0 95       	com	r30
    61c2:	e7 fb       	bst	r30, 7
    61c4:	26 c2       	rjmp	.+1100   	; 0x6612 <__fp_inf>

000061c6 <__addsf3x>:
    61c6:	e9 2f       	mov	r30, r25
    61c8:	bb d2       	rcall	.+1398   	; 0x6740 <__fp_split3>
    61ca:	80 f3       	brcs	.-32     	; 0x61ac <__addsf3+0x8>
    61cc:	ba 17       	cp	r27, r26
    61ce:	62 07       	cpc	r22, r18
    61d0:	73 07       	cpc	r23, r19
    61d2:	84 07       	cpc	r24, r20
    61d4:	95 07       	cpc	r25, r21
    61d6:	18 f0       	brcs	.+6      	; 0x61de <__addsf3x+0x18>
    61d8:	71 f4       	brne	.+28     	; 0x61f6 <__addsf3x+0x30>
    61da:	9e f5       	brtc	.+102    	; 0x6242 <__addsf3x+0x7c>
    61dc:	d3 c2       	rjmp	.+1446   	; 0x6784 <__fp_zero>
    61de:	0e f4       	brtc	.+2      	; 0x61e2 <__addsf3x+0x1c>
    61e0:	e0 95       	com	r30
    61e2:	0b 2e       	mov	r0, r27
    61e4:	ba 2f       	mov	r27, r26
    61e6:	a0 2d       	mov	r26, r0
    61e8:	0b 01       	movw	r0, r22
    61ea:	b9 01       	movw	r22, r18
    61ec:	90 01       	movw	r18, r0
    61ee:	0c 01       	movw	r0, r24
    61f0:	ca 01       	movw	r24, r20
    61f2:	a0 01       	movw	r20, r0
    61f4:	11 24       	eor	r1, r1
    61f6:	ff 27       	eor	r31, r31
    61f8:	59 1b       	sub	r21, r25
    61fa:	99 f0       	breq	.+38     	; 0x6222 <__addsf3x+0x5c>
    61fc:	59 3f       	cpi	r21, 0xF9	; 249
    61fe:	50 f4       	brcc	.+20     	; 0x6214 <__addsf3x+0x4e>
    6200:	50 3e       	cpi	r21, 0xE0	; 224
    6202:	68 f1       	brcs	.+90     	; 0x625e <__addsf3x+0x98>
    6204:	1a 16       	cp	r1, r26
    6206:	f0 40       	sbci	r31, 0x00	; 0
    6208:	a2 2f       	mov	r26, r18
    620a:	23 2f       	mov	r18, r19
    620c:	34 2f       	mov	r19, r20
    620e:	44 27       	eor	r20, r20
    6210:	58 5f       	subi	r21, 0xF8	; 248
    6212:	f3 cf       	rjmp	.-26     	; 0x61fa <__addsf3x+0x34>
    6214:	46 95       	lsr	r20
    6216:	37 95       	ror	r19
    6218:	27 95       	ror	r18
    621a:	a7 95       	ror	r26
    621c:	f0 40       	sbci	r31, 0x00	; 0
    621e:	53 95       	inc	r21
    6220:	c9 f7       	brne	.-14     	; 0x6214 <__addsf3x+0x4e>
    6222:	7e f4       	brtc	.+30     	; 0x6242 <__addsf3x+0x7c>
    6224:	1f 16       	cp	r1, r31
    6226:	ba 0b       	sbc	r27, r26
    6228:	62 0b       	sbc	r22, r18
    622a:	73 0b       	sbc	r23, r19
    622c:	84 0b       	sbc	r24, r20
    622e:	ba f0       	brmi	.+46     	; 0x625e <__addsf3x+0x98>
    6230:	91 50       	subi	r25, 0x01	; 1
    6232:	a1 f0       	breq	.+40     	; 0x625c <__addsf3x+0x96>
    6234:	ff 0f       	add	r31, r31
    6236:	bb 1f       	adc	r27, r27
    6238:	66 1f       	adc	r22, r22
    623a:	77 1f       	adc	r23, r23
    623c:	88 1f       	adc	r24, r24
    623e:	c2 f7       	brpl	.-16     	; 0x6230 <__addsf3x+0x6a>
    6240:	0e c0       	rjmp	.+28     	; 0x625e <__addsf3x+0x98>
    6242:	ba 0f       	add	r27, r26
    6244:	62 1f       	adc	r22, r18
    6246:	73 1f       	adc	r23, r19
    6248:	84 1f       	adc	r24, r20
    624a:	48 f4       	brcc	.+18     	; 0x625e <__addsf3x+0x98>
    624c:	87 95       	ror	r24
    624e:	77 95       	ror	r23
    6250:	67 95       	ror	r22
    6252:	b7 95       	ror	r27
    6254:	f7 95       	ror	r31
    6256:	9e 3f       	cpi	r25, 0xFE	; 254
    6258:	08 f0       	brcs	.+2      	; 0x625c <__addsf3x+0x96>
    625a:	b3 cf       	rjmp	.-154    	; 0x61c2 <__addsf3+0x1e>
    625c:	93 95       	inc	r25
    625e:	88 0f       	add	r24, r24
    6260:	08 f0       	brcs	.+2      	; 0x6264 <__addsf3x+0x9e>
    6262:	99 27       	eor	r25, r25
    6264:	ee 0f       	add	r30, r30
    6266:	97 95       	ror	r25
    6268:	87 95       	ror	r24
    626a:	08 95       	ret

0000626c <asin>:
    626c:	9f 93       	push	r25
    626e:	9f 77       	andi	r25, 0x7F	; 127
    6270:	ee e3       	ldi	r30, 0x3E	; 62
    6272:	89 37       	cpi	r24, 0x79	; 121
    6274:	9e 07       	cpc	r25, r30
    6276:	20 f4       	brcc	.+8      	; 0x6280 <asin+0x14>
    6278:	e2 ea       	ldi	r30, 0xA2	; 162
    627a:	f0 e0       	ldi	r31, 0x00	; 0
    627c:	f8 d1       	rcall	.+1008   	; 0x666e <__fp_powsodd>
    627e:	09 c0       	rjmp	.+18     	; 0x6292 <asin+0x26>
    6280:	89 d1       	rcall	.+786    	; 0x6594 <__fp_arccos>
    6282:	90 58       	subi	r25, 0x80	; 128
    6284:	a2 ea       	ldi	r26, 0xA2	; 162
    6286:	2a ed       	ldi	r18, 0xDA	; 218
    6288:	3f e0       	ldi	r19, 0x0F	; 15
    628a:	49 ec       	ldi	r20, 0xC9	; 201
    628c:	5f e3       	ldi	r21, 0x3F	; 63
    628e:	9b df       	rcall	.-202    	; 0x61c6 <__addsf3x>
    6290:	35 d2       	rcall	.+1130   	; 0x66fc <__fp_round>
    6292:	0f 90       	pop	r0
    6294:	07 fc       	sbrc	r0, 7
    6296:	90 58       	subi	r25, 0x80	; 128
    6298:	08 95       	ret
    629a:	fa d1       	rcall	.+1012   	; 0x6690 <__fp_pscA>
    629c:	58 f0       	brcs	.+22     	; 0x62b4 <asin+0x48>
    629e:	80 e8       	ldi	r24, 0x80	; 128
    62a0:	91 e0       	ldi	r25, 0x01	; 1
    62a2:	09 f4       	brne	.+2      	; 0x62a6 <asin+0x3a>
    62a4:	9e ef       	ldi	r25, 0xFE	; 254
    62a6:	fb d1       	rcall	.+1014   	; 0x669e <__fp_pscB>
    62a8:	28 f0       	brcs	.+10     	; 0x62b4 <asin+0x48>
    62aa:	40 e8       	ldi	r20, 0x80	; 128
    62ac:	51 e0       	ldi	r21, 0x01	; 1
    62ae:	59 f4       	brne	.+22     	; 0x62c6 <atan2+0xe>
    62b0:	5e ef       	ldi	r21, 0xFE	; 254
    62b2:	09 c0       	rjmp	.+18     	; 0x62c6 <atan2+0xe>
    62b4:	b4 c1       	rjmp	.+872    	; 0x661e <__fp_nan>
    62b6:	66 c2       	rjmp	.+1228   	; 0x6784 <__fp_zero>

000062b8 <atan2>:
    62b8:	e9 2f       	mov	r30, r25
    62ba:	e0 78       	andi	r30, 0x80	; 128
    62bc:	41 d2       	rcall	.+1154   	; 0x6740 <__fp_split3>
    62be:	68 f3       	brcs	.-38     	; 0x629a <asin+0x2e>
    62c0:	09 2e       	mov	r0, r25
    62c2:	05 2a       	or	r0, r21
    62c4:	c1 f3       	breq	.-16     	; 0x62b6 <asin+0x4a>
    62c6:	26 17       	cp	r18, r22
    62c8:	37 07       	cpc	r19, r23
    62ca:	48 07       	cpc	r20, r24
    62cc:	59 07       	cpc	r21, r25
    62ce:	38 f0       	brcs	.+14     	; 0x62de <atan2+0x26>
    62d0:	0e 2e       	mov	r0, r30
    62d2:	07 f8       	bld	r0, 7
    62d4:	e0 25       	eor	r30, r0
    62d6:	69 f0       	breq	.+26     	; 0x62f2 <atan2+0x3a>
    62d8:	e0 25       	eor	r30, r0
    62da:	e0 64       	ori	r30, 0x40	; 64
    62dc:	0a c0       	rjmp	.+20     	; 0x62f2 <atan2+0x3a>
    62de:	ef 63       	ori	r30, 0x3F	; 63
    62e0:	07 f8       	bld	r0, 7
    62e2:	00 94       	com	r0
    62e4:	07 fa       	bst	r0, 7
    62e6:	db 01       	movw	r26, r22
    62e8:	b9 01       	movw	r22, r18
    62ea:	9d 01       	movw	r18, r26
    62ec:	dc 01       	movw	r26, r24
    62ee:	ca 01       	movw	r24, r20
    62f0:	ad 01       	movw	r20, r26
    62f2:	ef 93       	push	r30
    62f4:	4a d0       	rcall	.+148    	; 0x638a <__divsf3_pse>
    62f6:	02 d2       	rcall	.+1028   	; 0x66fc <__fp_round>
    62f8:	0a d0       	rcall	.+20     	; 0x630e <atan>
    62fa:	5f 91       	pop	r21
    62fc:	55 23       	and	r21, r21
    62fe:	31 f0       	breq	.+12     	; 0x630c <atan2+0x54>
    6300:	2b ed       	ldi	r18, 0xDB	; 219
    6302:	3f e0       	ldi	r19, 0x0F	; 15
    6304:	49 e4       	ldi	r20, 0x49	; 73
    6306:	50 fd       	sbrc	r21, 0
    6308:	49 ec       	ldi	r20, 0xC9	; 201
    630a:	4c cf       	rjmp	.-360    	; 0x61a4 <__addsf3>
    630c:	08 95       	ret

0000630e <atan>:
    630e:	df 93       	push	r29
    6310:	dd 27       	eor	r29, r29
    6312:	b9 2f       	mov	r27, r25
    6314:	bf 77       	andi	r27, 0x7F	; 127
    6316:	40 e8       	ldi	r20, 0x80	; 128
    6318:	5f e3       	ldi	r21, 0x3F	; 63
    631a:	16 16       	cp	r1, r22
    631c:	17 06       	cpc	r1, r23
    631e:	48 07       	cpc	r20, r24
    6320:	5b 07       	cpc	r21, r27
    6322:	10 f4       	brcc	.+4      	; 0x6328 <atan+0x1a>
    6324:	d9 2f       	mov	r29, r25
    6326:	39 d2       	rcall	.+1138   	; 0x679a <inverse>
    6328:	9f 93       	push	r25
    632a:	8f 93       	push	r24
    632c:	7f 93       	push	r23
    632e:	6f 93       	push	r22
    6330:	32 d3       	rcall	.+1636   	; 0x6996 <square>
    6332:	e6 eb       	ldi	r30, 0xB6	; 182
    6334:	f0 e0       	ldi	r31, 0x00	; 0
    6336:	76 d1       	rcall	.+748    	; 0x6624 <__fp_powser>
    6338:	e1 d1       	rcall	.+962    	; 0x66fc <__fp_round>
    633a:	2f 91       	pop	r18
    633c:	3f 91       	pop	r19
    633e:	4f 91       	pop	r20
    6340:	5f 91       	pop	r21
    6342:	3e d2       	rcall	.+1148   	; 0x67c0 <__mulsf3x>
    6344:	dd 23       	and	r29, r29
    6346:	49 f0       	breq	.+18     	; 0x635a <atan+0x4c>
    6348:	90 58       	subi	r25, 0x80	; 128
    634a:	a2 ea       	ldi	r26, 0xA2	; 162
    634c:	2a ed       	ldi	r18, 0xDA	; 218
    634e:	3f e0       	ldi	r19, 0x0F	; 15
    6350:	49 ec       	ldi	r20, 0xC9	; 201
    6352:	5f e3       	ldi	r21, 0x3F	; 63
    6354:	d0 78       	andi	r29, 0x80	; 128
    6356:	5d 27       	eor	r21, r29
    6358:	36 df       	rcall	.-404    	; 0x61c6 <__addsf3x>
    635a:	df 91       	pop	r29
    635c:	cf c1       	rjmp	.+926    	; 0x66fc <__fp_round>

0000635e <__cmpsf2>:
    635e:	35 d1       	rcall	.+618    	; 0x65ca <__fp_cmp>
    6360:	08 f4       	brcc	.+2      	; 0x6364 <__cmpsf2+0x6>
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	08 95       	ret

00006366 <cos>:
    6366:	a3 d1       	rcall	.+838    	; 0x66ae <__fp_rempio2>
    6368:	e3 95       	inc	r30
    636a:	d9 c1       	rjmp	.+946    	; 0x671e <__fp_sinus>

0000636c <__divsf3>:
    636c:	0c d0       	rcall	.+24     	; 0x6386 <__divsf3x>
    636e:	c6 c1       	rjmp	.+908    	; 0x66fc <__fp_round>
    6370:	96 d1       	rcall	.+812    	; 0x669e <__fp_pscB>
    6372:	40 f0       	brcs	.+16     	; 0x6384 <__divsf3+0x18>
    6374:	8d d1       	rcall	.+794    	; 0x6690 <__fp_pscA>
    6376:	30 f0       	brcs	.+12     	; 0x6384 <__divsf3+0x18>
    6378:	21 f4       	brne	.+8      	; 0x6382 <__divsf3+0x16>
    637a:	5f 3f       	cpi	r21, 0xFF	; 255
    637c:	19 f0       	breq	.+6      	; 0x6384 <__divsf3+0x18>
    637e:	49 c1       	rjmp	.+658    	; 0x6612 <__fp_inf>
    6380:	51 11       	cpse	r21, r1
    6382:	01 c2       	rjmp	.+1026   	; 0x6786 <__fp_szero>
    6384:	4c c1       	rjmp	.+664    	; 0x661e <__fp_nan>

00006386 <__divsf3x>:
    6386:	dc d1       	rcall	.+952    	; 0x6740 <__fp_split3>
    6388:	98 f3       	brcs	.-26     	; 0x6370 <__divsf3+0x4>

0000638a <__divsf3_pse>:
    638a:	99 23       	and	r25, r25
    638c:	c9 f3       	breq	.-14     	; 0x6380 <__divsf3+0x14>
    638e:	55 23       	and	r21, r21
    6390:	b1 f3       	breq	.-20     	; 0x637e <__divsf3+0x12>
    6392:	95 1b       	sub	r25, r21
    6394:	55 0b       	sbc	r21, r21
    6396:	bb 27       	eor	r27, r27
    6398:	aa 27       	eor	r26, r26
    639a:	62 17       	cp	r22, r18
    639c:	73 07       	cpc	r23, r19
    639e:	84 07       	cpc	r24, r20
    63a0:	38 f0       	brcs	.+14     	; 0x63b0 <__divsf3_pse+0x26>
    63a2:	9f 5f       	subi	r25, 0xFF	; 255
    63a4:	5f 4f       	sbci	r21, 0xFF	; 255
    63a6:	22 0f       	add	r18, r18
    63a8:	33 1f       	adc	r19, r19
    63aa:	44 1f       	adc	r20, r20
    63ac:	aa 1f       	adc	r26, r26
    63ae:	a9 f3       	breq	.-22     	; 0x639a <__divsf3_pse+0x10>
    63b0:	33 d0       	rcall	.+102    	; 0x6418 <__divsf3_pse+0x8e>
    63b2:	0e 2e       	mov	r0, r30
    63b4:	3a f0       	brmi	.+14     	; 0x63c4 <__divsf3_pse+0x3a>
    63b6:	e0 e8       	ldi	r30, 0x80	; 128
    63b8:	30 d0       	rcall	.+96     	; 0x641a <__divsf3_pse+0x90>
    63ba:	91 50       	subi	r25, 0x01	; 1
    63bc:	50 40       	sbci	r21, 0x00	; 0
    63be:	e6 95       	lsr	r30
    63c0:	00 1c       	adc	r0, r0
    63c2:	ca f7       	brpl	.-14     	; 0x63b6 <__divsf3_pse+0x2c>
    63c4:	29 d0       	rcall	.+82     	; 0x6418 <__divsf3_pse+0x8e>
    63c6:	fe 2f       	mov	r31, r30
    63c8:	27 d0       	rcall	.+78     	; 0x6418 <__divsf3_pse+0x8e>
    63ca:	66 0f       	add	r22, r22
    63cc:	77 1f       	adc	r23, r23
    63ce:	88 1f       	adc	r24, r24
    63d0:	bb 1f       	adc	r27, r27
    63d2:	26 17       	cp	r18, r22
    63d4:	37 07       	cpc	r19, r23
    63d6:	48 07       	cpc	r20, r24
    63d8:	ab 07       	cpc	r26, r27
    63da:	b0 e8       	ldi	r27, 0x80	; 128
    63dc:	09 f0       	breq	.+2      	; 0x63e0 <__divsf3_pse+0x56>
    63de:	bb 0b       	sbc	r27, r27
    63e0:	80 2d       	mov	r24, r0
    63e2:	bf 01       	movw	r22, r30
    63e4:	ff 27       	eor	r31, r31
    63e6:	93 58       	subi	r25, 0x83	; 131
    63e8:	5f 4f       	sbci	r21, 0xFF	; 255
    63ea:	2a f0       	brmi	.+10     	; 0x63f6 <__divsf3_pse+0x6c>
    63ec:	9e 3f       	cpi	r25, 0xFE	; 254
    63ee:	51 05       	cpc	r21, r1
    63f0:	68 f0       	brcs	.+26     	; 0x640c <__divsf3_pse+0x82>
    63f2:	0f c1       	rjmp	.+542    	; 0x6612 <__fp_inf>
    63f4:	c8 c1       	rjmp	.+912    	; 0x6786 <__fp_szero>
    63f6:	5f 3f       	cpi	r21, 0xFF	; 255
    63f8:	ec f3       	brlt	.-6      	; 0x63f4 <__divsf3_pse+0x6a>
    63fa:	98 3e       	cpi	r25, 0xE8	; 232
    63fc:	dc f3       	brlt	.-10     	; 0x63f4 <__divsf3_pse+0x6a>
    63fe:	86 95       	lsr	r24
    6400:	77 95       	ror	r23
    6402:	67 95       	ror	r22
    6404:	b7 95       	ror	r27
    6406:	f7 95       	ror	r31
    6408:	9f 5f       	subi	r25, 0xFF	; 255
    640a:	c9 f7       	brne	.-14     	; 0x63fe <__divsf3_pse+0x74>
    640c:	88 0f       	add	r24, r24
    640e:	91 1d       	adc	r25, r1
    6410:	96 95       	lsr	r25
    6412:	87 95       	ror	r24
    6414:	97 f9       	bld	r25, 7
    6416:	08 95       	ret
    6418:	e1 e0       	ldi	r30, 0x01	; 1
    641a:	66 0f       	add	r22, r22
    641c:	77 1f       	adc	r23, r23
    641e:	88 1f       	adc	r24, r24
    6420:	bb 1f       	adc	r27, r27
    6422:	62 17       	cp	r22, r18
    6424:	73 07       	cpc	r23, r19
    6426:	84 07       	cpc	r24, r20
    6428:	ba 07       	cpc	r27, r26
    642a:	20 f0       	brcs	.+8      	; 0x6434 <__divsf3_pse+0xaa>
    642c:	62 1b       	sub	r22, r18
    642e:	73 0b       	sbc	r23, r19
    6430:	84 0b       	sbc	r24, r20
    6432:	ba 0b       	sbc	r27, r26
    6434:	ee 1f       	adc	r30, r30
    6436:	88 f7       	brcc	.-30     	; 0x641a <__divsf3_pse+0x90>
    6438:	e0 95       	com	r30
    643a:	08 95       	ret

0000643c <__fixsfsi>:
    643c:	04 d0       	rcall	.+8      	; 0x6446 <__fixunssfsi>
    643e:	68 94       	set
    6440:	b1 11       	cpse	r27, r1
    6442:	a1 c1       	rjmp	.+834    	; 0x6786 <__fp_szero>
    6444:	08 95       	ret

00006446 <__fixunssfsi>:
    6446:	84 d1       	rcall	.+776    	; 0x6750 <__fp_splitA>
    6448:	88 f0       	brcs	.+34     	; 0x646c <__fixunssfsi+0x26>
    644a:	9f 57       	subi	r25, 0x7F	; 127
    644c:	90 f0       	brcs	.+36     	; 0x6472 <__fixunssfsi+0x2c>
    644e:	b9 2f       	mov	r27, r25
    6450:	99 27       	eor	r25, r25
    6452:	b7 51       	subi	r27, 0x17	; 23
    6454:	a0 f0       	brcs	.+40     	; 0x647e <__fixunssfsi+0x38>
    6456:	d1 f0       	breq	.+52     	; 0x648c <__fixunssfsi+0x46>
    6458:	66 0f       	add	r22, r22
    645a:	77 1f       	adc	r23, r23
    645c:	88 1f       	adc	r24, r24
    645e:	99 1f       	adc	r25, r25
    6460:	1a f0       	brmi	.+6      	; 0x6468 <__fixunssfsi+0x22>
    6462:	ba 95       	dec	r27
    6464:	c9 f7       	brne	.-14     	; 0x6458 <__fixunssfsi+0x12>
    6466:	12 c0       	rjmp	.+36     	; 0x648c <__fixunssfsi+0x46>
    6468:	b1 30       	cpi	r27, 0x01	; 1
    646a:	81 f0       	breq	.+32     	; 0x648c <__fixunssfsi+0x46>
    646c:	8b d1       	rcall	.+790    	; 0x6784 <__fp_zero>
    646e:	b1 e0       	ldi	r27, 0x01	; 1
    6470:	08 95       	ret
    6472:	88 c1       	rjmp	.+784    	; 0x6784 <__fp_zero>
    6474:	67 2f       	mov	r22, r23
    6476:	78 2f       	mov	r23, r24
    6478:	88 27       	eor	r24, r24
    647a:	b8 5f       	subi	r27, 0xF8	; 248
    647c:	39 f0       	breq	.+14     	; 0x648c <__fixunssfsi+0x46>
    647e:	b9 3f       	cpi	r27, 0xF9	; 249
    6480:	cc f3       	brlt	.-14     	; 0x6474 <__fixunssfsi+0x2e>
    6482:	86 95       	lsr	r24
    6484:	77 95       	ror	r23
    6486:	67 95       	ror	r22
    6488:	b3 95       	inc	r27
    648a:	d9 f7       	brne	.-10     	; 0x6482 <__fixunssfsi+0x3c>
    648c:	3e f4       	brtc	.+14     	; 0x649c <__fixunssfsi+0x56>
    648e:	90 95       	com	r25
    6490:	80 95       	com	r24
    6492:	70 95       	com	r23
    6494:	61 95       	neg	r22
    6496:	7f 4f       	sbci	r23, 0xFF	; 255
    6498:	8f 4f       	sbci	r24, 0xFF	; 255
    649a:	9f 4f       	sbci	r25, 0xFF	; 255
    649c:	08 95       	ret

0000649e <__floatunsisf>:
    649e:	e8 94       	clt
    64a0:	09 c0       	rjmp	.+18     	; 0x64b4 <__floatsisf+0x12>

000064a2 <__floatsisf>:
    64a2:	97 fb       	bst	r25, 7
    64a4:	3e f4       	brtc	.+14     	; 0x64b4 <__floatsisf+0x12>
    64a6:	90 95       	com	r25
    64a8:	80 95       	com	r24
    64aa:	70 95       	com	r23
    64ac:	61 95       	neg	r22
    64ae:	7f 4f       	sbci	r23, 0xFF	; 255
    64b0:	8f 4f       	sbci	r24, 0xFF	; 255
    64b2:	9f 4f       	sbci	r25, 0xFF	; 255
    64b4:	99 23       	and	r25, r25
    64b6:	a9 f0       	breq	.+42     	; 0x64e2 <__floatsisf+0x40>
    64b8:	f9 2f       	mov	r31, r25
    64ba:	96 e9       	ldi	r25, 0x96	; 150
    64bc:	bb 27       	eor	r27, r27
    64be:	93 95       	inc	r25
    64c0:	f6 95       	lsr	r31
    64c2:	87 95       	ror	r24
    64c4:	77 95       	ror	r23
    64c6:	67 95       	ror	r22
    64c8:	b7 95       	ror	r27
    64ca:	f1 11       	cpse	r31, r1
    64cc:	f8 cf       	rjmp	.-16     	; 0x64be <__floatsisf+0x1c>
    64ce:	fa f4       	brpl	.+62     	; 0x650e <__floatsisf+0x6c>
    64d0:	bb 0f       	add	r27, r27
    64d2:	11 f4       	brne	.+4      	; 0x64d8 <__floatsisf+0x36>
    64d4:	60 ff       	sbrs	r22, 0
    64d6:	1b c0       	rjmp	.+54     	; 0x650e <__floatsisf+0x6c>
    64d8:	6f 5f       	subi	r22, 0xFF	; 255
    64da:	7f 4f       	sbci	r23, 0xFF	; 255
    64dc:	8f 4f       	sbci	r24, 0xFF	; 255
    64de:	9f 4f       	sbci	r25, 0xFF	; 255
    64e0:	16 c0       	rjmp	.+44     	; 0x650e <__floatsisf+0x6c>
    64e2:	88 23       	and	r24, r24
    64e4:	11 f0       	breq	.+4      	; 0x64ea <__floatsisf+0x48>
    64e6:	96 e9       	ldi	r25, 0x96	; 150
    64e8:	11 c0       	rjmp	.+34     	; 0x650c <__floatsisf+0x6a>
    64ea:	77 23       	and	r23, r23
    64ec:	21 f0       	breq	.+8      	; 0x64f6 <__floatsisf+0x54>
    64ee:	9e e8       	ldi	r25, 0x8E	; 142
    64f0:	87 2f       	mov	r24, r23
    64f2:	76 2f       	mov	r23, r22
    64f4:	05 c0       	rjmp	.+10     	; 0x6500 <__floatsisf+0x5e>
    64f6:	66 23       	and	r22, r22
    64f8:	71 f0       	breq	.+28     	; 0x6516 <__floatsisf+0x74>
    64fa:	96 e8       	ldi	r25, 0x86	; 134
    64fc:	86 2f       	mov	r24, r22
    64fe:	70 e0       	ldi	r23, 0x00	; 0
    6500:	60 e0       	ldi	r22, 0x00	; 0
    6502:	2a f0       	brmi	.+10     	; 0x650e <__floatsisf+0x6c>
    6504:	9a 95       	dec	r25
    6506:	66 0f       	add	r22, r22
    6508:	77 1f       	adc	r23, r23
    650a:	88 1f       	adc	r24, r24
    650c:	da f7       	brpl	.-10     	; 0x6504 <__floatsisf+0x62>
    650e:	88 0f       	add	r24, r24
    6510:	96 95       	lsr	r25
    6512:	87 95       	ror	r24
    6514:	97 f9       	bld	r25, 7
    6516:	08 95       	ret

00006518 <__floatundisf>:
    6518:	e8 94       	clt

0000651a <__fp_di2sf>:
    651a:	f9 2f       	mov	r31, r25
    651c:	96 eb       	ldi	r25, 0xB6	; 182
    651e:	ff 23       	and	r31, r31
    6520:	81 f0       	breq	.+32     	; 0x6542 <__fp_di2sf+0x28>
    6522:	12 16       	cp	r1, r18
    6524:	13 06       	cpc	r1, r19
    6526:	14 06       	cpc	r1, r20
    6528:	44 0b       	sbc	r20, r20
    652a:	93 95       	inc	r25
    652c:	f6 95       	lsr	r31
    652e:	87 95       	ror	r24
    6530:	77 95       	ror	r23
    6532:	67 95       	ror	r22
    6534:	57 95       	ror	r21
    6536:	40 40       	sbci	r20, 0x00	; 0
    6538:	ff 23       	and	r31, r31
    653a:	b9 f7       	brne	.-18     	; 0x652a <__fp_di2sf+0x10>
    653c:	1b c0       	rjmp	.+54     	; 0x6574 <__fp_di2sf+0x5a>
    653e:	99 27       	eor	r25, r25
    6540:	08 95       	ret
    6542:	88 23       	and	r24, r24
    6544:	51 f4       	brne	.+20     	; 0x655a <__fp_di2sf+0x40>
    6546:	98 50       	subi	r25, 0x08	; 8
    6548:	d2 f7       	brpl	.-12     	; 0x653e <__fp_di2sf+0x24>
    654a:	87 2b       	or	r24, r23
    654c:	76 2f       	mov	r23, r22
    654e:	65 2f       	mov	r22, r21
    6550:	54 2f       	mov	r21, r20
    6552:	43 2f       	mov	r20, r19
    6554:	32 2f       	mov	r19, r18
    6556:	20 e0       	ldi	r18, 0x00	; 0
    6558:	b1 f3       	breq	.-20     	; 0x6546 <__fp_di2sf+0x2c>
    655a:	12 16       	cp	r1, r18
    655c:	13 06       	cpc	r1, r19
    655e:	14 06       	cpc	r1, r20
    6560:	44 0b       	sbc	r20, r20
    6562:	88 23       	and	r24, r24
    6564:	3a f0       	brmi	.+14     	; 0x6574 <__fp_di2sf+0x5a>
    6566:	9a 95       	dec	r25
    6568:	44 0f       	add	r20, r20
    656a:	55 1f       	adc	r21, r21
    656c:	66 1f       	adc	r22, r22
    656e:	77 1f       	adc	r23, r23
    6570:	88 1f       	adc	r24, r24
    6572:	ca f7       	brpl	.-14     	; 0x6566 <__fp_di2sf+0x4c>
    6574:	55 23       	and	r21, r21
    6576:	4a f4       	brpl	.+18     	; 0x658a <__fp_di2sf+0x70>
    6578:	44 0f       	add	r20, r20
    657a:	55 1f       	adc	r21, r21
    657c:	11 f4       	brne	.+4      	; 0x6582 <__fp_di2sf+0x68>
    657e:	60 ff       	sbrs	r22, 0
    6580:	04 c0       	rjmp	.+8      	; 0x658a <__fp_di2sf+0x70>
    6582:	6f 5f       	subi	r22, 0xFF	; 255
    6584:	7f 4f       	sbci	r23, 0xFF	; 255
    6586:	8f 4f       	sbci	r24, 0xFF	; 255
    6588:	9f 4f       	sbci	r25, 0xFF	; 255
    658a:	88 0f       	add	r24, r24
    658c:	96 95       	lsr	r25
    658e:	87 95       	ror	r24
    6590:	97 f9       	bld	r25, 7
    6592:	08 95       	ret

00006594 <__fp_arccos>:
    6594:	df 93       	push	r29
    6596:	cf 93       	push	r28
    6598:	1f 93       	push	r17
    659a:	0f 93       	push	r16
    659c:	8b 01       	movw	r16, r22
    659e:	ec 01       	movw	r28, r24
    65a0:	e3 ee       	ldi	r30, 0xE3	; 227
    65a2:	f0 e0       	ldi	r31, 0x00	; 0
    65a4:	3f d0       	rcall	.+126    	; 0x6624 <__fp_powser>
    65a6:	aa d0       	rcall	.+340    	; 0x66fc <__fp_round>
    65a8:	98 01       	movw	r18, r16
    65aa:	ae 01       	movw	r20, r28
    65ac:	8b 01       	movw	r16, r22
    65ae:	ec 01       	movw	r28, r24
    65b0:	60 e0       	ldi	r22, 0x00	; 0
    65b2:	70 e0       	ldi	r23, 0x00	; 0
    65b4:	80 e8       	ldi	r24, 0x80	; 128
    65b6:	9f e3       	ldi	r25, 0x3F	; 63
    65b8:	f4 dd       	rcall	.-1048   	; 0x61a2 <__subsf3>
    65ba:	af d1       	rcall	.+862    	; 0x691a <sqrt>
    65bc:	98 01       	movw	r18, r16
    65be:	ae 01       	movw	r20, r28
    65c0:	0f 91       	pop	r16
    65c2:	1f 91       	pop	r17
    65c4:	cf 91       	pop	r28
    65c6:	df 91       	pop	r29
    65c8:	fb c0       	rjmp	.+502    	; 0x67c0 <__mulsf3x>

000065ca <__fp_cmp>:
    65ca:	99 0f       	add	r25, r25
    65cc:	00 08       	sbc	r0, r0
    65ce:	55 0f       	add	r21, r21
    65d0:	aa 0b       	sbc	r26, r26
    65d2:	e0 e8       	ldi	r30, 0x80	; 128
    65d4:	fe ef       	ldi	r31, 0xFE	; 254
    65d6:	16 16       	cp	r1, r22
    65d8:	17 06       	cpc	r1, r23
    65da:	e8 07       	cpc	r30, r24
    65dc:	f9 07       	cpc	r31, r25
    65de:	c0 f0       	brcs	.+48     	; 0x6610 <__fp_cmp+0x46>
    65e0:	12 16       	cp	r1, r18
    65e2:	13 06       	cpc	r1, r19
    65e4:	e4 07       	cpc	r30, r20
    65e6:	f5 07       	cpc	r31, r21
    65e8:	98 f0       	brcs	.+38     	; 0x6610 <__fp_cmp+0x46>
    65ea:	62 1b       	sub	r22, r18
    65ec:	73 0b       	sbc	r23, r19
    65ee:	84 0b       	sbc	r24, r20
    65f0:	95 0b       	sbc	r25, r21
    65f2:	39 f4       	brne	.+14     	; 0x6602 <__fp_cmp+0x38>
    65f4:	0a 26       	eor	r0, r26
    65f6:	61 f0       	breq	.+24     	; 0x6610 <__fp_cmp+0x46>
    65f8:	23 2b       	or	r18, r19
    65fa:	24 2b       	or	r18, r20
    65fc:	25 2b       	or	r18, r21
    65fe:	21 f4       	brne	.+8      	; 0x6608 <__fp_cmp+0x3e>
    6600:	08 95       	ret
    6602:	0a 26       	eor	r0, r26
    6604:	09 f4       	brne	.+2      	; 0x6608 <__fp_cmp+0x3e>
    6606:	a1 40       	sbci	r26, 0x01	; 1
    6608:	a6 95       	lsr	r26
    660a:	8f ef       	ldi	r24, 0xFF	; 255
    660c:	81 1d       	adc	r24, r1
    660e:	81 1d       	adc	r24, r1
    6610:	08 95       	ret

00006612 <__fp_inf>:
    6612:	97 f9       	bld	r25, 7
    6614:	9f 67       	ori	r25, 0x7F	; 127
    6616:	80 e8       	ldi	r24, 0x80	; 128
    6618:	70 e0       	ldi	r23, 0x00	; 0
    661a:	60 e0       	ldi	r22, 0x00	; 0
    661c:	08 95       	ret

0000661e <__fp_nan>:
    661e:	9f ef       	ldi	r25, 0xFF	; 255
    6620:	80 ec       	ldi	r24, 0xC0	; 192
    6622:	08 95       	ret

00006624 <__fp_powser>:
    6624:	df 93       	push	r29
    6626:	cf 93       	push	r28
    6628:	1f 93       	push	r17
    662a:	0f 93       	push	r16
    662c:	ff 92       	push	r15
    662e:	ef 92       	push	r14
    6630:	df 92       	push	r13
    6632:	7b 01       	movw	r14, r22
    6634:	8c 01       	movw	r16, r24
    6636:	68 94       	set
    6638:	05 c0       	rjmp	.+10     	; 0x6644 <__fp_powser+0x20>
    663a:	da 2e       	mov	r13, r26
    663c:	ef 01       	movw	r28, r30
    663e:	c0 d0       	rcall	.+384    	; 0x67c0 <__mulsf3x>
    6640:	fe 01       	movw	r30, r28
    6642:	e8 94       	clt
    6644:	a5 91       	lpm	r26, Z+
    6646:	25 91       	lpm	r18, Z+
    6648:	35 91       	lpm	r19, Z+
    664a:	45 91       	lpm	r20, Z+
    664c:	55 91       	lpm	r21, Z+
    664e:	ae f3       	brts	.-22     	; 0x663a <__fp_powser+0x16>
    6650:	ef 01       	movw	r28, r30
    6652:	b9 dd       	rcall	.-1166   	; 0x61c6 <__addsf3x>
    6654:	fe 01       	movw	r30, r28
    6656:	97 01       	movw	r18, r14
    6658:	a8 01       	movw	r20, r16
    665a:	da 94       	dec	r13
    665c:	79 f7       	brne	.-34     	; 0x663c <__fp_powser+0x18>
    665e:	df 90       	pop	r13
    6660:	ef 90       	pop	r14
    6662:	ff 90       	pop	r15
    6664:	0f 91       	pop	r16
    6666:	1f 91       	pop	r17
    6668:	cf 91       	pop	r28
    666a:	df 91       	pop	r29
    666c:	08 95       	ret

0000666e <__fp_powsodd>:
    666e:	9f 93       	push	r25
    6670:	8f 93       	push	r24
    6672:	7f 93       	push	r23
    6674:	6f 93       	push	r22
    6676:	ff 93       	push	r31
    6678:	ef 93       	push	r30
    667a:	9b 01       	movw	r18, r22
    667c:	ac 01       	movw	r20, r24
    667e:	94 d0       	rcall	.+296    	; 0x67a8 <__mulsf3>
    6680:	ef 91       	pop	r30
    6682:	ff 91       	pop	r31
    6684:	cf df       	rcall	.-98     	; 0x6624 <__fp_powser>
    6686:	2f 91       	pop	r18
    6688:	3f 91       	pop	r19
    668a:	4f 91       	pop	r20
    668c:	5f 91       	pop	r21
    668e:	8c c0       	rjmp	.+280    	; 0x67a8 <__mulsf3>

00006690 <__fp_pscA>:
    6690:	00 24       	eor	r0, r0
    6692:	0a 94       	dec	r0
    6694:	16 16       	cp	r1, r22
    6696:	17 06       	cpc	r1, r23
    6698:	18 06       	cpc	r1, r24
    669a:	09 06       	cpc	r0, r25
    669c:	08 95       	ret

0000669e <__fp_pscB>:
    669e:	00 24       	eor	r0, r0
    66a0:	0a 94       	dec	r0
    66a2:	12 16       	cp	r1, r18
    66a4:	13 06       	cpc	r1, r19
    66a6:	14 06       	cpc	r1, r20
    66a8:	05 06       	cpc	r0, r21
    66aa:	08 95       	ret
    66ac:	b8 cf       	rjmp	.-144    	; 0x661e <__fp_nan>

000066ae <__fp_rempio2>:
    66ae:	50 d0       	rcall	.+160    	; 0x6750 <__fp_splitA>
    66b0:	e8 f3       	brcs	.-6      	; 0x66ac <__fp_pscB+0xe>
    66b2:	e8 94       	clt
    66b4:	e0 e0       	ldi	r30, 0x00	; 0
    66b6:	bb 27       	eor	r27, r27
    66b8:	9f 57       	subi	r25, 0x7F	; 127
    66ba:	f0 f0       	brcs	.+60     	; 0x66f8 <__fp_rempio2+0x4a>
    66bc:	2a ed       	ldi	r18, 0xDA	; 218
    66be:	3f e0       	ldi	r19, 0x0F	; 15
    66c0:	49 ec       	ldi	r20, 0xC9	; 201
    66c2:	06 c0       	rjmp	.+12     	; 0x66d0 <__fp_rempio2+0x22>
    66c4:	ee 0f       	add	r30, r30
    66c6:	bb 0f       	add	r27, r27
    66c8:	66 1f       	adc	r22, r22
    66ca:	77 1f       	adc	r23, r23
    66cc:	88 1f       	adc	r24, r24
    66ce:	28 f0       	brcs	.+10     	; 0x66da <__fp_rempio2+0x2c>
    66d0:	b2 3a       	cpi	r27, 0xA2	; 162
    66d2:	62 07       	cpc	r22, r18
    66d4:	73 07       	cpc	r23, r19
    66d6:	84 07       	cpc	r24, r20
    66d8:	28 f0       	brcs	.+10     	; 0x66e4 <__fp_rempio2+0x36>
    66da:	b2 5a       	subi	r27, 0xA2	; 162
    66dc:	62 0b       	sbc	r22, r18
    66de:	73 0b       	sbc	r23, r19
    66e0:	84 0b       	sbc	r24, r20
    66e2:	e3 95       	inc	r30
    66e4:	9a 95       	dec	r25
    66e6:	72 f7       	brpl	.-36     	; 0x66c4 <__fp_rempio2+0x16>
    66e8:	80 38       	cpi	r24, 0x80	; 128
    66ea:	30 f4       	brcc	.+12     	; 0x66f8 <__fp_rempio2+0x4a>
    66ec:	9a 95       	dec	r25
    66ee:	bb 0f       	add	r27, r27
    66f0:	66 1f       	adc	r22, r22
    66f2:	77 1f       	adc	r23, r23
    66f4:	88 1f       	adc	r24, r24
    66f6:	d2 f7       	brpl	.-12     	; 0x66ec <__fp_rempio2+0x3e>
    66f8:	90 48       	sbci	r25, 0x80	; 128
    66fa:	83 c1       	rjmp	.+774    	; 0x6a02 <__fp_mpack_finite>

000066fc <__fp_round>:
    66fc:	09 2e       	mov	r0, r25
    66fe:	03 94       	inc	r0
    6700:	00 0c       	add	r0, r0
    6702:	11 f4       	brne	.+4      	; 0x6708 <__fp_round+0xc>
    6704:	88 23       	and	r24, r24
    6706:	52 f0       	brmi	.+20     	; 0x671c <__fp_round+0x20>
    6708:	bb 0f       	add	r27, r27
    670a:	40 f4       	brcc	.+16     	; 0x671c <__fp_round+0x20>
    670c:	bf 2b       	or	r27, r31
    670e:	11 f4       	brne	.+4      	; 0x6714 <__fp_round+0x18>
    6710:	60 ff       	sbrs	r22, 0
    6712:	04 c0       	rjmp	.+8      	; 0x671c <__fp_round+0x20>
    6714:	6f 5f       	subi	r22, 0xFF	; 255
    6716:	7f 4f       	sbci	r23, 0xFF	; 255
    6718:	8f 4f       	sbci	r24, 0xFF	; 255
    671a:	9f 4f       	sbci	r25, 0xFF	; 255
    671c:	08 95       	ret

0000671e <__fp_sinus>:
    671e:	ef 93       	push	r30
    6720:	e0 ff       	sbrs	r30, 0
    6722:	06 c0       	rjmp	.+12     	; 0x6730 <__fp_sinus+0x12>
    6724:	a2 ea       	ldi	r26, 0xA2	; 162
    6726:	2a ed       	ldi	r18, 0xDA	; 218
    6728:	3f e0       	ldi	r19, 0x0F	; 15
    672a:	49 ec       	ldi	r20, 0xC9	; 201
    672c:	5f eb       	ldi	r21, 0xBF	; 191
    672e:	4b dd       	rcall	.-1386   	; 0x61c6 <__addsf3x>
    6730:	e5 df       	rcall	.-54     	; 0x66fc <__fp_round>
    6732:	0f 90       	pop	r0
    6734:	03 94       	inc	r0
    6736:	01 fc       	sbrc	r0, 1
    6738:	90 58       	subi	r25, 0x80	; 128
    673a:	eb e0       	ldi	r30, 0x0B	; 11
    673c:	f1 e0       	ldi	r31, 0x01	; 1
    673e:	97 cf       	rjmp	.-210    	; 0x666e <__fp_powsodd>

00006740 <__fp_split3>:
    6740:	57 fd       	sbrc	r21, 7
    6742:	90 58       	subi	r25, 0x80	; 128
    6744:	44 0f       	add	r20, r20
    6746:	55 1f       	adc	r21, r21
    6748:	59 f0       	breq	.+22     	; 0x6760 <__fp_splitA+0x10>
    674a:	5f 3f       	cpi	r21, 0xFF	; 255
    674c:	71 f0       	breq	.+28     	; 0x676a <__fp_splitA+0x1a>
    674e:	47 95       	ror	r20

00006750 <__fp_splitA>:
    6750:	88 0f       	add	r24, r24
    6752:	97 fb       	bst	r25, 7
    6754:	99 1f       	adc	r25, r25
    6756:	61 f0       	breq	.+24     	; 0x6770 <__fp_splitA+0x20>
    6758:	9f 3f       	cpi	r25, 0xFF	; 255
    675a:	79 f0       	breq	.+30     	; 0x677a <__fp_splitA+0x2a>
    675c:	87 95       	ror	r24
    675e:	08 95       	ret
    6760:	12 16       	cp	r1, r18
    6762:	13 06       	cpc	r1, r19
    6764:	14 06       	cpc	r1, r20
    6766:	55 1f       	adc	r21, r21
    6768:	f2 cf       	rjmp	.-28     	; 0x674e <__fp_split3+0xe>
    676a:	46 95       	lsr	r20
    676c:	f1 df       	rcall	.-30     	; 0x6750 <__fp_splitA>
    676e:	08 c0       	rjmp	.+16     	; 0x6780 <__fp_splitA+0x30>
    6770:	16 16       	cp	r1, r22
    6772:	17 06       	cpc	r1, r23
    6774:	18 06       	cpc	r1, r24
    6776:	99 1f       	adc	r25, r25
    6778:	f1 cf       	rjmp	.-30     	; 0x675c <__fp_splitA+0xc>
    677a:	86 95       	lsr	r24
    677c:	71 05       	cpc	r23, r1
    677e:	61 05       	cpc	r22, r1
    6780:	08 94       	sec
    6782:	08 95       	ret

00006784 <__fp_zero>:
    6784:	e8 94       	clt

00006786 <__fp_szero>:
    6786:	bb 27       	eor	r27, r27
    6788:	66 27       	eor	r22, r22
    678a:	77 27       	eor	r23, r23
    678c:	cb 01       	movw	r24, r22
    678e:	97 f9       	bld	r25, 7
    6790:	08 95       	ret

00006792 <__gesf2>:
    6792:	1b df       	rcall	.-458    	; 0x65ca <__fp_cmp>
    6794:	08 f4       	brcc	.+2      	; 0x6798 <__gesf2+0x6>
    6796:	8f ef       	ldi	r24, 0xFF	; 255
    6798:	08 95       	ret

0000679a <inverse>:
    679a:	9b 01       	movw	r18, r22
    679c:	ac 01       	movw	r20, r24
    679e:	60 e0       	ldi	r22, 0x00	; 0
    67a0:	70 e0       	ldi	r23, 0x00	; 0
    67a2:	80 e8       	ldi	r24, 0x80	; 128
    67a4:	9f e3       	ldi	r25, 0x3F	; 63
    67a6:	e2 cd       	rjmp	.-1084   	; 0x636c <__divsf3>

000067a8 <__mulsf3>:
    67a8:	0b d0       	rcall	.+22     	; 0x67c0 <__mulsf3x>
    67aa:	a8 cf       	rjmp	.-176    	; 0x66fc <__fp_round>
    67ac:	71 df       	rcall	.-286    	; 0x6690 <__fp_pscA>
    67ae:	28 f0       	brcs	.+10     	; 0x67ba <__mulsf3+0x12>
    67b0:	76 df       	rcall	.-276    	; 0x669e <__fp_pscB>
    67b2:	18 f0       	brcs	.+6      	; 0x67ba <__mulsf3+0x12>
    67b4:	95 23       	and	r25, r21
    67b6:	09 f0       	breq	.+2      	; 0x67ba <__mulsf3+0x12>
    67b8:	2c cf       	rjmp	.-424    	; 0x6612 <__fp_inf>
    67ba:	31 cf       	rjmp	.-414    	; 0x661e <__fp_nan>
    67bc:	11 24       	eor	r1, r1
    67be:	e3 cf       	rjmp	.-58     	; 0x6786 <__fp_szero>

000067c0 <__mulsf3x>:
    67c0:	bf df       	rcall	.-130    	; 0x6740 <__fp_split3>
    67c2:	a0 f3       	brcs	.-24     	; 0x67ac <__mulsf3+0x4>

000067c4 <__mulsf3_pse>:
    67c4:	95 9f       	mul	r25, r21
    67c6:	d1 f3       	breq	.-12     	; 0x67bc <__mulsf3+0x14>
    67c8:	95 0f       	add	r25, r21
    67ca:	50 e0       	ldi	r21, 0x00	; 0
    67cc:	55 1f       	adc	r21, r21
    67ce:	62 9f       	mul	r22, r18
    67d0:	f0 01       	movw	r30, r0
    67d2:	72 9f       	mul	r23, r18
    67d4:	bb 27       	eor	r27, r27
    67d6:	f0 0d       	add	r31, r0
    67d8:	b1 1d       	adc	r27, r1
    67da:	63 9f       	mul	r22, r19
    67dc:	aa 27       	eor	r26, r26
    67de:	f0 0d       	add	r31, r0
    67e0:	b1 1d       	adc	r27, r1
    67e2:	aa 1f       	adc	r26, r26
    67e4:	64 9f       	mul	r22, r20
    67e6:	66 27       	eor	r22, r22
    67e8:	b0 0d       	add	r27, r0
    67ea:	a1 1d       	adc	r26, r1
    67ec:	66 1f       	adc	r22, r22
    67ee:	82 9f       	mul	r24, r18
    67f0:	22 27       	eor	r18, r18
    67f2:	b0 0d       	add	r27, r0
    67f4:	a1 1d       	adc	r26, r1
    67f6:	62 1f       	adc	r22, r18
    67f8:	73 9f       	mul	r23, r19
    67fa:	b0 0d       	add	r27, r0
    67fc:	a1 1d       	adc	r26, r1
    67fe:	62 1f       	adc	r22, r18
    6800:	83 9f       	mul	r24, r19
    6802:	a0 0d       	add	r26, r0
    6804:	61 1d       	adc	r22, r1
    6806:	22 1f       	adc	r18, r18
    6808:	74 9f       	mul	r23, r20
    680a:	33 27       	eor	r19, r19
    680c:	a0 0d       	add	r26, r0
    680e:	61 1d       	adc	r22, r1
    6810:	23 1f       	adc	r18, r19
    6812:	84 9f       	mul	r24, r20
    6814:	60 0d       	add	r22, r0
    6816:	21 1d       	adc	r18, r1
    6818:	82 2f       	mov	r24, r18
    681a:	76 2f       	mov	r23, r22
    681c:	6a 2f       	mov	r22, r26
    681e:	11 24       	eor	r1, r1
    6820:	9f 57       	subi	r25, 0x7F	; 127
    6822:	50 40       	sbci	r21, 0x00	; 0
    6824:	8a f0       	brmi	.+34     	; 0x6848 <__mulsf3_pse+0x84>
    6826:	e1 f0       	breq	.+56     	; 0x6860 <__mulsf3_pse+0x9c>
    6828:	88 23       	and	r24, r24
    682a:	4a f0       	brmi	.+18     	; 0x683e <__mulsf3_pse+0x7a>
    682c:	ee 0f       	add	r30, r30
    682e:	ff 1f       	adc	r31, r31
    6830:	bb 1f       	adc	r27, r27
    6832:	66 1f       	adc	r22, r22
    6834:	77 1f       	adc	r23, r23
    6836:	88 1f       	adc	r24, r24
    6838:	91 50       	subi	r25, 0x01	; 1
    683a:	50 40       	sbci	r21, 0x00	; 0
    683c:	a9 f7       	brne	.-22     	; 0x6828 <__mulsf3_pse+0x64>
    683e:	9e 3f       	cpi	r25, 0xFE	; 254
    6840:	51 05       	cpc	r21, r1
    6842:	70 f0       	brcs	.+28     	; 0x6860 <__mulsf3_pse+0x9c>
    6844:	e6 ce       	rjmp	.-564    	; 0x6612 <__fp_inf>
    6846:	9f cf       	rjmp	.-194    	; 0x6786 <__fp_szero>
    6848:	5f 3f       	cpi	r21, 0xFF	; 255
    684a:	ec f3       	brlt	.-6      	; 0x6846 <__mulsf3_pse+0x82>
    684c:	98 3e       	cpi	r25, 0xE8	; 232
    684e:	dc f3       	brlt	.-10     	; 0x6846 <__mulsf3_pse+0x82>
    6850:	86 95       	lsr	r24
    6852:	77 95       	ror	r23
    6854:	67 95       	ror	r22
    6856:	b7 95       	ror	r27
    6858:	f7 95       	ror	r31
    685a:	e7 95       	ror	r30
    685c:	9f 5f       	subi	r25, 0xFF	; 255
    685e:	c1 f7       	brne	.-16     	; 0x6850 <__mulsf3_pse+0x8c>
    6860:	fe 2b       	or	r31, r30
    6862:	88 0f       	add	r24, r24
    6864:	91 1d       	adc	r25, r1
    6866:	96 95       	lsr	r25
    6868:	87 95       	ror	r24
    686a:	97 f9       	bld	r25, 7
    686c:	08 95       	ret

0000686e <pow>:
    686e:	fa 01       	movw	r30, r20
    6870:	ee 0f       	add	r30, r30
    6872:	ff 1f       	adc	r31, r31
    6874:	30 96       	adiw	r30, 0x00	; 0
    6876:	21 05       	cpc	r18, r1
    6878:	31 05       	cpc	r19, r1
    687a:	99 f1       	breq	.+102    	; 0x68e2 <pow+0x74>
    687c:	61 15       	cp	r22, r1
    687e:	71 05       	cpc	r23, r1
    6880:	61 f4       	brne	.+24     	; 0x689a <pow+0x2c>
    6882:	80 38       	cpi	r24, 0x80	; 128
    6884:	bf e3       	ldi	r27, 0x3F	; 63
    6886:	9b 07       	cpc	r25, r27
    6888:	49 f1       	breq	.+82     	; 0x68dc <pow+0x6e>
    688a:	68 94       	set
    688c:	90 38       	cpi	r25, 0x80	; 128
    688e:	81 05       	cpc	r24, r1
    6890:	61 f0       	breq	.+24     	; 0x68aa <pow+0x3c>
    6892:	80 38       	cpi	r24, 0x80	; 128
    6894:	bf ef       	ldi	r27, 0xFF	; 255
    6896:	9b 07       	cpc	r25, r27
    6898:	41 f0       	breq	.+16     	; 0x68aa <pow+0x3c>
    689a:	99 23       	and	r25, r25
    689c:	42 f5       	brpl	.+80     	; 0x68ee <pow+0x80>
    689e:	ff 3f       	cpi	r31, 0xFF	; 255
    68a0:	e1 05       	cpc	r30, r1
    68a2:	31 05       	cpc	r19, r1
    68a4:	21 05       	cpc	r18, r1
    68a6:	11 f1       	breq	.+68     	; 0x68ec <pow+0x7e>
    68a8:	e8 94       	clt
    68aa:	08 94       	sec
    68ac:	e7 95       	ror	r30
    68ae:	d9 01       	movw	r26, r18
    68b0:	aa 23       	and	r26, r26
    68b2:	29 f4       	brne	.+10     	; 0x68be <pow+0x50>
    68b4:	ab 2f       	mov	r26, r27
    68b6:	be 2f       	mov	r27, r30
    68b8:	f8 5f       	subi	r31, 0xF8	; 248
    68ba:	d0 f3       	brcs	.-12     	; 0x68b0 <pow+0x42>
    68bc:	10 c0       	rjmp	.+32     	; 0x68de <pow+0x70>
    68be:	ff 5f       	subi	r31, 0xFF	; 255
    68c0:	70 f4       	brcc	.+28     	; 0x68de <pow+0x70>
    68c2:	a6 95       	lsr	r26
    68c4:	e0 f7       	brcc	.-8      	; 0x68be <pow+0x50>
    68c6:	f7 39       	cpi	r31, 0x97	; 151
    68c8:	50 f0       	brcs	.+20     	; 0x68de <pow+0x70>
    68ca:	19 f0       	breq	.+6      	; 0x68d2 <pow+0x64>
    68cc:	ff 3a       	cpi	r31, 0xAF	; 175
    68ce:	38 f4       	brcc	.+14     	; 0x68de <pow+0x70>
    68d0:	9f 77       	andi	r25, 0x7F	; 127
    68d2:	9f 93       	push	r25
    68d4:	0c d0       	rcall	.+24     	; 0x68ee <pow+0x80>
    68d6:	0f 90       	pop	r0
    68d8:	07 fc       	sbrc	r0, 7
    68da:	90 58       	subi	r25, 0x80	; 128
    68dc:	08 95       	ret
    68de:	3e f0       	brts	.+14     	; 0x68ee <pow+0x80>
    68e0:	9e ce       	rjmp	.-708    	; 0x661e <__fp_nan>
    68e2:	60 e0       	ldi	r22, 0x00	; 0
    68e4:	70 e0       	ldi	r23, 0x00	; 0
    68e6:	80 e8       	ldi	r24, 0x80	; 128
    68e8:	9f e3       	ldi	r25, 0x3F	; 63
    68ea:	08 95       	ret
    68ec:	4f e7       	ldi	r20, 0x7F	; 127
    68ee:	9f 77       	andi	r25, 0x7F	; 127
    68f0:	5f 93       	push	r21
    68f2:	4f 93       	push	r20
    68f4:	3f 93       	push	r19
    68f6:	2f 93       	push	r18
    68f8:	d2 d0       	rcall	.+420    	; 0x6a9e <log>
    68fa:	2f 91       	pop	r18
    68fc:	3f 91       	pop	r19
    68fe:	4f 91       	pop	r20
    6900:	5f 91       	pop	r21
    6902:	52 df       	rcall	.-348    	; 0x67a8 <__mulsf3>
    6904:	50 c0       	rjmp	.+160    	; 0x69a6 <exp>

00006906 <sin>:
    6906:	9f 93       	push	r25
    6908:	d2 de       	rcall	.-604    	; 0x66ae <__fp_rempio2>
    690a:	0f 90       	pop	r0
    690c:	07 fc       	sbrc	r0, 7
    690e:	ee 5f       	subi	r30, 0xFE	; 254
    6910:	06 cf       	rjmp	.-500    	; 0x671e <__fp_sinus>
    6912:	11 f4       	brne	.+4      	; 0x6918 <sin+0x12>
    6914:	0e f4       	brtc	.+2      	; 0x6918 <sin+0x12>
    6916:	83 ce       	rjmp	.-762    	; 0x661e <__fp_nan>
    6918:	72 c0       	rjmp	.+228    	; 0x69fe <__fp_mpack>

0000691a <sqrt>:
    691a:	1a df       	rcall	.-460    	; 0x6750 <__fp_splitA>
    691c:	d0 f3       	brcs	.-12     	; 0x6912 <sin+0xc>
    691e:	99 23       	and	r25, r25
    6920:	d9 f3       	breq	.-10     	; 0x6918 <sin+0x12>
    6922:	ce f3       	brts	.-14     	; 0x6916 <sin+0x10>
    6924:	9f 57       	subi	r25, 0x7F	; 127
    6926:	55 0b       	sbc	r21, r21
    6928:	87 ff       	sbrs	r24, 7
    692a:	77 d0       	rcall	.+238    	; 0x6a1a <__fp_norm2>
    692c:	00 24       	eor	r0, r0
    692e:	a0 e6       	ldi	r26, 0x60	; 96
    6930:	40 ea       	ldi	r20, 0xA0	; 160
    6932:	90 01       	movw	r18, r0
    6934:	80 58       	subi	r24, 0x80	; 128
    6936:	56 95       	lsr	r21
    6938:	97 95       	ror	r25
    693a:	28 f4       	brcc	.+10     	; 0x6946 <sqrt+0x2c>
    693c:	80 5c       	subi	r24, 0xC0	; 192
    693e:	66 0f       	add	r22, r22
    6940:	77 1f       	adc	r23, r23
    6942:	88 1f       	adc	r24, r24
    6944:	20 f0       	brcs	.+8      	; 0x694e <sqrt+0x34>
    6946:	26 17       	cp	r18, r22
    6948:	37 07       	cpc	r19, r23
    694a:	48 07       	cpc	r20, r24
    694c:	30 f4       	brcc	.+12     	; 0x695a <sqrt+0x40>
    694e:	62 1b       	sub	r22, r18
    6950:	73 0b       	sbc	r23, r19
    6952:	84 0b       	sbc	r24, r20
    6954:	20 29       	or	r18, r0
    6956:	31 29       	or	r19, r1
    6958:	4a 2b       	or	r20, r26
    695a:	a6 95       	lsr	r26
    695c:	17 94       	ror	r1
    695e:	07 94       	ror	r0
    6960:	20 25       	eor	r18, r0
    6962:	31 25       	eor	r19, r1
    6964:	4a 27       	eor	r20, r26
    6966:	58 f7       	brcc	.-42     	; 0x693e <sqrt+0x24>
    6968:	66 0f       	add	r22, r22
    696a:	77 1f       	adc	r23, r23
    696c:	88 1f       	adc	r24, r24
    696e:	20 f0       	brcs	.+8      	; 0x6978 <sqrt+0x5e>
    6970:	26 17       	cp	r18, r22
    6972:	37 07       	cpc	r19, r23
    6974:	48 07       	cpc	r20, r24
    6976:	30 f4       	brcc	.+12     	; 0x6984 <sqrt+0x6a>
    6978:	62 0b       	sbc	r22, r18
    697a:	73 0b       	sbc	r23, r19
    697c:	84 0b       	sbc	r24, r20
    697e:	20 0d       	add	r18, r0
    6980:	31 1d       	adc	r19, r1
    6982:	41 1d       	adc	r20, r1
    6984:	a0 95       	com	r26
    6986:	81 f7       	brne	.-32     	; 0x6968 <sqrt+0x4e>
    6988:	b9 01       	movw	r22, r18
    698a:	84 2f       	mov	r24, r20
    698c:	91 58       	subi	r25, 0x81	; 129
    698e:	88 0f       	add	r24, r24
    6990:	96 95       	lsr	r25
    6992:	87 95       	ror	r24
    6994:	08 95       	ret

00006996 <square>:
    6996:	9b 01       	movw	r18, r22
    6998:	ac 01       	movw	r20, r24
    699a:	06 cf       	rjmp	.-500    	; 0x67a8 <__mulsf3>
    699c:	19 f4       	brne	.+6      	; 0x69a4 <square+0xe>
    699e:	0e f0       	brts	.+2      	; 0x69a2 <square+0xc>
    69a0:	38 ce       	rjmp	.-912    	; 0x6612 <__fp_inf>
    69a2:	f0 ce       	rjmp	.-544    	; 0x6784 <__fp_zero>
    69a4:	3c ce       	rjmp	.-904    	; 0x661e <__fp_nan>

000069a6 <exp>:
    69a6:	d4 de       	rcall	.-600    	; 0x6750 <__fp_splitA>
    69a8:	c8 f3       	brcs	.-14     	; 0x699c <square+0x6>
    69aa:	96 38       	cpi	r25, 0x86	; 134
    69ac:	c0 f7       	brcc	.-16     	; 0x699e <square+0x8>
    69ae:	07 f8       	bld	r0, 7
    69b0:	0f 92       	push	r0
    69b2:	e8 94       	clt
    69b4:	2b e3       	ldi	r18, 0x3B	; 59
    69b6:	3a ea       	ldi	r19, 0xAA	; 170
    69b8:	48 eb       	ldi	r20, 0xB8	; 184
    69ba:	5f e7       	ldi	r21, 0x7F	; 127
    69bc:	03 df       	rcall	.-506    	; 0x67c4 <__mulsf3_pse>
    69be:	0f 92       	push	r0
    69c0:	0f 92       	push	r0
    69c2:	0f 92       	push	r0
    69c4:	4d b7       	in	r20, 0x3d	; 61
    69c6:	5e b7       	in	r21, 0x3e	; 62
    69c8:	0f 92       	push	r0
    69ca:	a9 d0       	rcall	.+338    	; 0x6b1e <modf>
    69cc:	e9 e2       	ldi	r30, 0x29	; 41
    69ce:	f1 e0       	ldi	r31, 0x01	; 1
    69d0:	29 de       	rcall	.-942    	; 0x6624 <__fp_powser>
    69d2:	4f 91       	pop	r20
    69d4:	5f 91       	pop	r21
    69d6:	ef 91       	pop	r30
    69d8:	ff 91       	pop	r31
    69da:	e5 95       	asr	r30
    69dc:	ee 1f       	adc	r30, r30
    69de:	ff 1f       	adc	r31, r31
    69e0:	49 f0       	breq	.+18     	; 0x69f4 <exp+0x4e>
    69e2:	fe 57       	subi	r31, 0x7E	; 126
    69e4:	e0 68       	ori	r30, 0x80	; 128
    69e6:	44 27       	eor	r20, r20
    69e8:	ee 0f       	add	r30, r30
    69ea:	44 1f       	adc	r20, r20
    69ec:	fa 95       	dec	r31
    69ee:	e1 f7       	brne	.-8      	; 0x69e8 <exp+0x42>
    69f0:	41 95       	neg	r20
    69f2:	55 0b       	sbc	r21, r21
    69f4:	1b d0       	rcall	.+54     	; 0x6a2c <ldexp>
    69f6:	0f 90       	pop	r0
    69f8:	07 fe       	sbrs	r0, 7
    69fa:	cf ce       	rjmp	.-610    	; 0x679a <inverse>
    69fc:	08 95       	ret

000069fe <__fp_mpack>:
    69fe:	9f 3f       	cpi	r25, 0xFF	; 255
    6a00:	31 f0       	breq	.+12     	; 0x6a0e <__fp_mpack_finite+0xc>

00006a02 <__fp_mpack_finite>:
    6a02:	91 50       	subi	r25, 0x01	; 1
    6a04:	20 f4       	brcc	.+8      	; 0x6a0e <__fp_mpack_finite+0xc>
    6a06:	87 95       	ror	r24
    6a08:	77 95       	ror	r23
    6a0a:	67 95       	ror	r22
    6a0c:	b7 95       	ror	r27
    6a0e:	88 0f       	add	r24, r24
    6a10:	91 1d       	adc	r25, r1
    6a12:	96 95       	lsr	r25
    6a14:	87 95       	ror	r24
    6a16:	97 f9       	bld	r25, 7
    6a18:	08 95       	ret

00006a1a <__fp_norm2>:
    6a1a:	91 50       	subi	r25, 0x01	; 1
    6a1c:	50 40       	sbci	r21, 0x00	; 0
    6a1e:	66 0f       	add	r22, r22
    6a20:	77 1f       	adc	r23, r23
    6a22:	88 1f       	adc	r24, r24
    6a24:	d2 f7       	brpl	.-12     	; 0x6a1a <__fp_norm2>
    6a26:	08 95       	ret
    6a28:	f4 cd       	rjmp	.-1048   	; 0x6612 <__fp_inf>
    6a2a:	e9 cf       	rjmp	.-46     	; 0x69fe <__fp_mpack>

00006a2c <ldexp>:
    6a2c:	91 de       	rcall	.-734    	; 0x6750 <__fp_splitA>
    6a2e:	e8 f3       	brcs	.-6      	; 0x6a2a <__fp_norm2+0x10>
    6a30:	99 23       	and	r25, r25
    6a32:	d9 f3       	breq	.-10     	; 0x6a2a <__fp_norm2+0x10>
    6a34:	94 0f       	add	r25, r20
    6a36:	51 1d       	adc	r21, r1
    6a38:	bb f3       	brvs	.-18     	; 0x6a28 <__fp_norm2+0xe>
    6a3a:	91 50       	subi	r25, 0x01	; 1
    6a3c:	50 40       	sbci	r21, 0x00	; 0
    6a3e:	94 f0       	brlt	.+36     	; 0x6a64 <ldexp+0x38>
    6a40:	59 f0       	breq	.+22     	; 0x6a58 <ldexp+0x2c>
    6a42:	88 23       	and	r24, r24
    6a44:	32 f0       	brmi	.+12     	; 0x6a52 <ldexp+0x26>
    6a46:	66 0f       	add	r22, r22
    6a48:	77 1f       	adc	r23, r23
    6a4a:	88 1f       	adc	r24, r24
    6a4c:	91 50       	subi	r25, 0x01	; 1
    6a4e:	50 40       	sbci	r21, 0x00	; 0
    6a50:	c1 f7       	brne	.-16     	; 0x6a42 <ldexp+0x16>
    6a52:	9e 3f       	cpi	r25, 0xFE	; 254
    6a54:	51 05       	cpc	r21, r1
    6a56:	44 f7       	brge	.-48     	; 0x6a28 <__fp_norm2+0xe>
    6a58:	88 0f       	add	r24, r24
    6a5a:	91 1d       	adc	r25, r1
    6a5c:	96 95       	lsr	r25
    6a5e:	87 95       	ror	r24
    6a60:	97 f9       	bld	r25, 7
    6a62:	08 95       	ret
    6a64:	5f 3f       	cpi	r21, 0xFF	; 255
    6a66:	ac f0       	brlt	.+42     	; 0x6a92 <ldexp+0x66>
    6a68:	98 3e       	cpi	r25, 0xE8	; 232
    6a6a:	9c f0       	brlt	.+38     	; 0x6a92 <ldexp+0x66>
    6a6c:	bb 27       	eor	r27, r27
    6a6e:	86 95       	lsr	r24
    6a70:	77 95       	ror	r23
    6a72:	67 95       	ror	r22
    6a74:	b7 95       	ror	r27
    6a76:	08 f4       	brcc	.+2      	; 0x6a7a <ldexp+0x4e>
    6a78:	b1 60       	ori	r27, 0x01	; 1
    6a7a:	93 95       	inc	r25
    6a7c:	c1 f7       	brne	.-16     	; 0x6a6e <ldexp+0x42>
    6a7e:	bb 0f       	add	r27, r27
    6a80:	58 f7       	brcc	.-42     	; 0x6a58 <ldexp+0x2c>
    6a82:	11 f4       	brne	.+4      	; 0x6a88 <ldexp+0x5c>
    6a84:	60 ff       	sbrs	r22, 0
    6a86:	e8 cf       	rjmp	.-48     	; 0x6a58 <ldexp+0x2c>
    6a88:	6f 5f       	subi	r22, 0xFF	; 255
    6a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a90:	e3 cf       	rjmp	.-58     	; 0x6a58 <ldexp+0x2c>
    6a92:	79 ce       	rjmp	.-782    	; 0x6786 <__fp_szero>
    6a94:	0e f0       	brts	.+2      	; 0x6a98 <ldexp+0x6c>
    6a96:	b3 cf       	rjmp	.-154    	; 0x69fe <__fp_mpack>
    6a98:	c2 cd       	rjmp	.-1148   	; 0x661e <__fp_nan>
    6a9a:	68 94       	set
    6a9c:	ba cd       	rjmp	.-1164   	; 0x6612 <__fp_inf>

00006a9e <log>:
    6a9e:	58 de       	rcall	.-848    	; 0x6750 <__fp_splitA>
    6aa0:	c8 f3       	brcs	.-14     	; 0x6a94 <ldexp+0x68>
    6aa2:	99 23       	and	r25, r25
    6aa4:	d1 f3       	breq	.-12     	; 0x6a9a <ldexp+0x6e>
    6aa6:	c6 f3       	brts	.-16     	; 0x6a98 <ldexp+0x6c>
    6aa8:	df 93       	push	r29
    6aaa:	cf 93       	push	r28
    6aac:	1f 93       	push	r17
    6aae:	0f 93       	push	r16
    6ab0:	ff 92       	push	r15
    6ab2:	c9 2f       	mov	r28, r25
    6ab4:	dd 27       	eor	r29, r29
    6ab6:	88 23       	and	r24, r24
    6ab8:	2a f0       	brmi	.+10     	; 0x6ac4 <log+0x26>
    6aba:	21 97       	sbiw	r28, 0x01	; 1
    6abc:	66 0f       	add	r22, r22
    6abe:	77 1f       	adc	r23, r23
    6ac0:	88 1f       	adc	r24, r24
    6ac2:	da f7       	brpl	.-10     	; 0x6aba <log+0x1c>
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	40 e8       	ldi	r20, 0x80	; 128
    6aca:	5f eb       	ldi	r21, 0xBF	; 191
    6acc:	9f e3       	ldi	r25, 0x3F	; 63
    6ace:	88 39       	cpi	r24, 0x98	; 152
    6ad0:	20 f0       	brcs	.+8      	; 0x6ada <log+0x3c>
    6ad2:	80 3e       	cpi	r24, 0xE0	; 224
    6ad4:	30 f0       	brcs	.+12     	; 0x6ae2 <log+0x44>
    6ad6:	21 96       	adiw	r28, 0x01	; 1
    6ad8:	8f 77       	andi	r24, 0x7F	; 127
    6ada:	64 db       	rcall	.-2360   	; 0x61a4 <__addsf3>
    6adc:	e1 e5       	ldi	r30, 0x51	; 81
    6ade:	f1 e0       	ldi	r31, 0x01	; 1
    6ae0:	03 c0       	rjmp	.+6      	; 0x6ae8 <log+0x4a>
    6ae2:	60 db       	rcall	.-2368   	; 0x61a4 <__addsf3>
    6ae4:	ee e7       	ldi	r30, 0x7E	; 126
    6ae6:	f1 e0       	ldi	r31, 0x01	; 1
    6ae8:	9d dd       	rcall	.-1222   	; 0x6624 <__fp_powser>
    6aea:	8b 01       	movw	r16, r22
    6aec:	be 01       	movw	r22, r28
    6aee:	ec 01       	movw	r28, r24
    6af0:	fb 2e       	mov	r15, r27
    6af2:	6f 57       	subi	r22, 0x7F	; 127
    6af4:	71 09       	sbc	r23, r1
    6af6:	75 95       	asr	r23
    6af8:	77 1f       	adc	r23, r23
    6afa:	88 0b       	sbc	r24, r24
    6afc:	99 0b       	sbc	r25, r25
    6afe:	d1 dc       	rcall	.-1630   	; 0x64a2 <__floatsisf>
    6b00:	28 e1       	ldi	r18, 0x18	; 24
    6b02:	32 e7       	ldi	r19, 0x72	; 114
    6b04:	41 e3       	ldi	r20, 0x31	; 49
    6b06:	5f e3       	ldi	r21, 0x3F	; 63
    6b08:	5b de       	rcall	.-842    	; 0x67c0 <__mulsf3x>
    6b0a:	af 2d       	mov	r26, r15
    6b0c:	98 01       	movw	r18, r16
    6b0e:	ae 01       	movw	r20, r28
    6b10:	ff 90       	pop	r15
    6b12:	0f 91       	pop	r16
    6b14:	1f 91       	pop	r17
    6b16:	cf 91       	pop	r28
    6b18:	df 91       	pop	r29
    6b1a:	55 db       	rcall	.-2390   	; 0x61c6 <__addsf3x>
    6b1c:	ef cd       	rjmp	.-1058   	; 0x66fc <__fp_round>

00006b1e <modf>:
    6b1e:	fa 01       	movw	r30, r20
    6b20:	dc 01       	movw	r26, r24
    6b22:	aa 0f       	add	r26, r26
    6b24:	bb 1f       	adc	r27, r27
    6b26:	9b 01       	movw	r18, r22
    6b28:	ac 01       	movw	r20, r24
    6b2a:	bf 57       	subi	r27, 0x7F	; 127
    6b2c:	28 f4       	brcc	.+10     	; 0x6b38 <modf+0x1a>
    6b2e:	22 27       	eor	r18, r18
    6b30:	33 27       	eor	r19, r19
    6b32:	44 27       	eor	r20, r20
    6b34:	50 78       	andi	r21, 0x80	; 128
    6b36:	1f c0       	rjmp	.+62     	; 0x6b76 <modf+0x58>
    6b38:	b7 51       	subi	r27, 0x17	; 23
    6b3a:	88 f4       	brcc	.+34     	; 0x6b5e <modf+0x40>
    6b3c:	ab 2f       	mov	r26, r27
    6b3e:	00 24       	eor	r0, r0
    6b40:	46 95       	lsr	r20
    6b42:	37 95       	ror	r19
    6b44:	27 95       	ror	r18
    6b46:	01 1c       	adc	r0, r1
    6b48:	a3 95       	inc	r26
    6b4a:	d2 f3       	brmi	.-12     	; 0x6b40 <modf+0x22>
    6b4c:	00 20       	and	r0, r0
    6b4e:	69 f0       	breq	.+26     	; 0x6b6a <modf+0x4c>
    6b50:	22 0f       	add	r18, r18
    6b52:	33 1f       	adc	r19, r19
    6b54:	44 1f       	adc	r20, r20
    6b56:	b3 95       	inc	r27
    6b58:	da f3       	brmi	.-10     	; 0x6b50 <modf+0x32>
    6b5a:	0d d0       	rcall	.+26     	; 0x6b76 <modf+0x58>
    6b5c:	22 cb       	rjmp	.-2492   	; 0x61a2 <__subsf3>
    6b5e:	61 30       	cpi	r22, 0x01	; 1
    6b60:	71 05       	cpc	r23, r1
    6b62:	a0 e8       	ldi	r26, 0x80	; 128
    6b64:	8a 07       	cpc	r24, r26
    6b66:	b9 46       	sbci	r27, 0x69	; 105
    6b68:	30 f4       	brcc	.+12     	; 0x6b76 <modf+0x58>
    6b6a:	9b 01       	movw	r18, r22
    6b6c:	ac 01       	movw	r20, r24
    6b6e:	66 27       	eor	r22, r22
    6b70:	77 27       	eor	r23, r23
    6b72:	88 27       	eor	r24, r24
    6b74:	90 78       	andi	r25, 0x80	; 128
    6b76:	30 96       	adiw	r30, 0x00	; 0
    6b78:	21 f0       	breq	.+8      	; 0x6b82 <modf+0x64>
    6b7a:	20 83       	st	Z, r18
    6b7c:	31 83       	std	Z+1, r19	; 0x01
    6b7e:	42 83       	std	Z+2, r20	; 0x02
    6b80:	53 83       	std	Z+3, r21	; 0x03
    6b82:	08 95       	ret

00006b84 <__divmodhi4>:
    6b84:	97 fb       	bst	r25, 7
    6b86:	07 2e       	mov	r0, r23
    6b88:	16 f4       	brtc	.+4      	; 0x6b8e <__divmodhi4+0xa>
    6b8a:	00 94       	com	r0
    6b8c:	06 d0       	rcall	.+12     	; 0x6b9a <__divmodhi4_neg1>
    6b8e:	77 fd       	sbrc	r23, 7
    6b90:	08 d0       	rcall	.+16     	; 0x6ba2 <__divmodhi4_neg2>
    6b92:	63 d0       	rcall	.+198    	; 0x6c5a <__udivmodhi4>
    6b94:	07 fc       	sbrc	r0, 7
    6b96:	05 d0       	rcall	.+10     	; 0x6ba2 <__divmodhi4_neg2>
    6b98:	3e f4       	brtc	.+14     	; 0x6ba8 <__divmodhi4_exit>

00006b9a <__divmodhi4_neg1>:
    6b9a:	90 95       	com	r25
    6b9c:	81 95       	neg	r24
    6b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba0:	08 95       	ret

00006ba2 <__divmodhi4_neg2>:
    6ba2:	70 95       	com	r23
    6ba4:	61 95       	neg	r22
    6ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00006ba8 <__divmodhi4_exit>:
    6ba8:	08 95       	ret

00006baa <__tablejump2__>:
    6baa:	ee 0f       	add	r30, r30
    6bac:	ff 1f       	adc	r31, r31
    6bae:	00 24       	eor	r0, r0
    6bb0:	00 1c       	adc	r0, r0
    6bb2:	0b be       	out	0x3b, r0	; 59
    6bb4:	07 90       	elpm	r0, Z+
    6bb6:	f6 91       	elpm	r31, Z
    6bb8:	e0 2d       	mov	r30, r0
    6bba:	09 94       	ijmp

00006bbc <__umulhisi3>:
    6bbc:	a2 9f       	mul	r26, r18
    6bbe:	b0 01       	movw	r22, r0
    6bc0:	b3 9f       	mul	r27, r19
    6bc2:	c0 01       	movw	r24, r0
    6bc4:	a3 9f       	mul	r26, r19
    6bc6:	70 0d       	add	r23, r0
    6bc8:	81 1d       	adc	r24, r1
    6bca:	11 24       	eor	r1, r1
    6bcc:	91 1d       	adc	r25, r1
    6bce:	b2 9f       	mul	r27, r18
    6bd0:	70 0d       	add	r23, r0
    6bd2:	81 1d       	adc	r24, r1
    6bd4:	11 24       	eor	r1, r1
    6bd6:	91 1d       	adc	r25, r1
    6bd8:	08 95       	ret

00006bda <__ashldi3>:
    6bda:	0f 93       	push	r16
    6bdc:	08 30       	cpi	r16, 0x08	; 8
    6bde:	90 f0       	brcs	.+36     	; 0x6c04 <__ashldi3+0x2a>
    6be0:	98 2f       	mov	r25, r24
    6be2:	87 2f       	mov	r24, r23
    6be4:	76 2f       	mov	r23, r22
    6be6:	65 2f       	mov	r22, r21
    6be8:	54 2f       	mov	r21, r20
    6bea:	43 2f       	mov	r20, r19
    6bec:	32 2f       	mov	r19, r18
    6bee:	22 27       	eor	r18, r18
    6bf0:	08 50       	subi	r16, 0x08	; 8
    6bf2:	f4 cf       	rjmp	.-24     	; 0x6bdc <__ashldi3+0x2>
    6bf4:	22 0f       	add	r18, r18
    6bf6:	33 1f       	adc	r19, r19
    6bf8:	44 1f       	adc	r20, r20
    6bfa:	55 1f       	adc	r21, r21
    6bfc:	66 1f       	adc	r22, r22
    6bfe:	77 1f       	adc	r23, r23
    6c00:	88 1f       	adc	r24, r24
    6c02:	99 1f       	adc	r25, r25
    6c04:	0a 95       	dec	r16
    6c06:	b2 f7       	brpl	.-20     	; 0x6bf4 <__ashldi3+0x1a>
    6c08:	0f 91       	pop	r16
    6c0a:	08 95       	ret

00006c0c <__adddi3>:
    6c0c:	2a 0d       	add	r18, r10
    6c0e:	3b 1d       	adc	r19, r11
    6c10:	4c 1d       	adc	r20, r12
    6c12:	5d 1d       	adc	r21, r13
    6c14:	6e 1d       	adc	r22, r14
    6c16:	7f 1d       	adc	r23, r15
    6c18:	80 1f       	adc	r24, r16
    6c1a:	91 1f       	adc	r25, r17
    6c1c:	08 95       	ret

00006c1e <__adddi3_s8>:
    6c1e:	00 24       	eor	r0, r0
    6c20:	a7 fd       	sbrc	r26, 7
    6c22:	00 94       	com	r0
    6c24:	2a 0f       	add	r18, r26
    6c26:	30 1d       	adc	r19, r0
    6c28:	40 1d       	adc	r20, r0
    6c2a:	50 1d       	adc	r21, r0
    6c2c:	60 1d       	adc	r22, r0
    6c2e:	70 1d       	adc	r23, r0
    6c30:	80 1d       	adc	r24, r0
    6c32:	90 1d       	adc	r25, r0
    6c34:	08 95       	ret

00006c36 <__subdi3>:
    6c36:	2a 19       	sub	r18, r10
    6c38:	3b 09       	sbc	r19, r11
    6c3a:	4c 09       	sbc	r20, r12
    6c3c:	5d 09       	sbc	r21, r13
    6c3e:	6e 09       	sbc	r22, r14
    6c40:	7f 09       	sbc	r23, r15
    6c42:	80 0b       	sbc	r24, r16
    6c44:	91 0b       	sbc	r25, r17
    6c46:	08 95       	ret

00006c48 <__cmpdi2>:
    6c48:	2a 15       	cp	r18, r10
    6c4a:	3b 05       	cpc	r19, r11
    6c4c:	4c 05       	cpc	r20, r12
    6c4e:	5d 05       	cpc	r21, r13
    6c50:	6e 05       	cpc	r22, r14
    6c52:	7f 05       	cpc	r23, r15
    6c54:	80 07       	cpc	r24, r16
    6c56:	91 07       	cpc	r25, r17
    6c58:	08 95       	ret

00006c5a <__udivmodhi4>:
    6c5a:	aa 1b       	sub	r26, r26
    6c5c:	bb 1b       	sub	r27, r27
    6c5e:	51 e1       	ldi	r21, 0x11	; 17
    6c60:	07 c0       	rjmp	.+14     	; 0x6c70 <__udivmodhi4_ep>

00006c62 <__udivmodhi4_loop>:
    6c62:	aa 1f       	adc	r26, r26
    6c64:	bb 1f       	adc	r27, r27
    6c66:	a6 17       	cp	r26, r22
    6c68:	b7 07       	cpc	r27, r23
    6c6a:	10 f0       	brcs	.+4      	; 0x6c70 <__udivmodhi4_ep>
    6c6c:	a6 1b       	sub	r26, r22
    6c6e:	b7 0b       	sbc	r27, r23

00006c70 <__udivmodhi4_ep>:
    6c70:	88 1f       	adc	r24, r24
    6c72:	99 1f       	adc	r25, r25
    6c74:	5a 95       	dec	r21
    6c76:	a9 f7       	brne	.-22     	; 0x6c62 <__udivmodhi4_loop>
    6c78:	80 95       	com	r24
    6c7a:	90 95       	com	r25
    6c7c:	bc 01       	movw	r22, r24
    6c7e:	cd 01       	movw	r24, r26
    6c80:	08 95       	ret

00006c82 <_exit>:
    6c82:	f8 94       	cli

00006c84 <__stop_program>:
    6c84:	ff cf       	rjmp	.-2      	; 0x6c84 <__stop_program>
